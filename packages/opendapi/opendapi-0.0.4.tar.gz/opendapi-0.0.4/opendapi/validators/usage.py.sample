"""
Sample script to run the validators.

Run this script as part of CI/CD and pre-commit hooks to validate and autoupdate the DAPI files.

"""
import os

from opendapi.validators.dapi import DapiValidator, PynamodbDapiValidator, SqlAlchemyDapiValidator
from opendapi.validators.datastores import DatastoresValidator
from opendapi.validators.purposes import PurposesValidator
from opendapi.validators.teams import TeamsValidator

# same files from tests/fixtures
from opendapi.fixtures.sqlalchemy.core import metadata_obj
from opendapi.fixtures.sqlalchemy.orm import Base
from opendapi.fixtures.pynamodb.user import User, Post


class MyTeamsValidator(TeamsValidator):
    """Update your teams validator here"""

    def base_template_for_autoupdate(self) -> dict[str, dict]:
        """Update the base autoupdate template here"""
        return super().base_template_for_autoupdate()

    def custom_content_validations(self, file: str, content: dict):
        """Any additional custom validations here"""
        super().custom_content_validations(file, content)


class MyDatastoresValidator(DatastoresValidator):
    """Update your datastores validator here"""

    def base_template_for_autoupdate(self) -> dict[str, dict]:
        """Update the base autoupdate template here"""
        return super().base_template_for_autoupdate()

    def custom_content_validations(self, file: str, content: dict):
        """Any additional custom validations here"""
        super().custom_content_validations(file, content)


class MyPurposesValidator(PurposesValidator):
    """Update your purposes validator here"""

    def base_template_for_autoupdate(self) -> dict[str, dict]:
        """Update the base autoupdate template here"""
        return super().base_template_for_autoupdate()

    def custom_content_validations(self, file: str, content: dict):
        """Any additional custom validations here"""
        super().custom_content_validations(file, content)


class MyDapiValidator(DapiValidator):
    """Update your dapi validator here"""

    def base_template_for_autoupdate(self) -> dict[str, dict]:
        """Update the base autoupdate template here"""
        return super().base_template_for_autoupdate()

    def custom_content_validations(self, file: str, content: dict):
        """Any additional custom validations here"""
        super().custom_content_validations(file, content)


class MyPynamodbDapiValidator(PynamodbDapiValidator):
    """Update your pynamodb dapi validator"""

    def get_pynamo_tables(self):
        """return a list of Pynamo table classes here"""
        return [User, Post]

    def build_datastores_for_table(self, table) -> dict:
        return {
            "producers": [
                {
                    "urn": "my_company.datastore.dynamodb",
                    "data": {
                        "identifier": table.Meta.table_name,
                        "namespace": "sample_db.sample_schema",
                    },
                },
            ],
            "consumers": [
                {
                    "urn": "my_company.datastore.snowflake",
                    "data": {
                        "identifier": table.Meta.table_name,
                        "namespace": "sample_db.sample_schema",
                    },
                },
            ],
        }

    def build_owner_team_urn_for_table(self, table):
        return f"my_company.sample.team.{table.Meta.table_name}"

    def build_urn_for_table(self, table):
        return f"my_company.sample.dataset.{table.Meta.table_name}"


class MySqlAlchemyDapiValidator(SqlAlchemyDapiValidator):
    def get_sqlalchemy_metadata_objects(self):
        """Return a list of sqlalchemy metadata objects here"""
        return [metadata_obj, Base.metadata]

    def build_datastores_for_table(self, table):
        return {
            "producers": [
                {
                    "urn": "my_company.datastore.mysql",
                    "data": {
                        "identifier": str(table.name),
                        "namespace": str(table.schema),
                    },
                },
            ],
            "consumers": [
                {
                    "urn": "my_company.datastore.snowflake",
                    "data": {
                        "identifier": str(table.name),
                        "namespace": str(table.schema),
                    }
                }
            ]
        }

    def build_owner_team_urn_for_table(self, table):
        return f"my_company.sample.team.{table.name}"

    def build_urn_for_table(self, table):
        return f"my_company.sample.dataset.{table.name}"

    def build_dapi_location_for_table(self, table):
        return f"{self.base_dir_for_autoupdate()}/sqlalchemy/{table.name}.dapi.yaml"


def main():
    """Validator function"""
    root_dir = os.path.join(os.getcwd().split('OpenDapi')[0], 'OpenDapi')
    # for sqlalchemy
    os.mkdir(os.path.join(root_dir, 'sqlalchemy'))

    errors = []

    validator_clss = [
        MyTeamsValidator,
        MyDatastoresValidator,
        MyPurposesValidator,
        MyDapiValidator,
        MyPynamodbDapiValidator,
        MySqlAlchemyDapiValidator,
    ]
    for val_cls in validator_clss:
        inst = val_cls(
            root_dir=root_dir, enforce_existence=True, should_autoupdate=True
        )
        try:
            inst.run()
        except Exception as e:
            errors.append(e)

    if errors:
        raise Exception(errors)

if __name__ == "__main__":
    main()

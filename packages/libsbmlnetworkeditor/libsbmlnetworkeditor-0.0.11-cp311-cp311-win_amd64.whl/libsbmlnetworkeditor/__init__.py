# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _libsbmlnetworkeditor
else:
    import _libsbmlnetworkeditor

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libsbmlnetworkeditor.delete_SwigPyIterator

    def value(self):
        return _libsbmlnetworkeditor.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _libsbmlnetworkeditor.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _libsbmlnetworkeditor.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _libsbmlnetworkeditor.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _libsbmlnetworkeditor.SwigPyIterator_equal(self, x)

    def copy(self):
        return _libsbmlnetworkeditor.SwigPyIterator_copy(self)

    def next(self):
        return _libsbmlnetworkeditor.SwigPyIterator_next(self)

    def __next__(self):
        return _libsbmlnetworkeditor.SwigPyIterator___next__(self)

    def previous(self):
        return _libsbmlnetworkeditor.SwigPyIterator_previous(self)

    def advance(self, n):
        return _libsbmlnetworkeditor.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _libsbmlnetworkeditor.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _libsbmlnetworkeditor.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _libsbmlnetworkeditor.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _libsbmlnetworkeditor.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _libsbmlnetworkeditor.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _libsbmlnetworkeditor.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _libsbmlnetworkeditor:
_libsbmlnetworkeditor.SwigPyIterator_swigregister(SwigPyIterator)
class CompartmentGlyphVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _libsbmlnetworkeditor.CompartmentGlyphVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _libsbmlnetworkeditor.CompartmentGlyphVector___nonzero__(self)

    def __bool__(self):
        return _libsbmlnetworkeditor.CompartmentGlyphVector___bool__(self)

    def __len__(self):
        return _libsbmlnetworkeditor.CompartmentGlyphVector___len__(self)

    def __getslice__(self, i, j):
        return _libsbmlnetworkeditor.CompartmentGlyphVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _libsbmlnetworkeditor.CompartmentGlyphVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _libsbmlnetworkeditor.CompartmentGlyphVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _libsbmlnetworkeditor.CompartmentGlyphVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _libsbmlnetworkeditor.CompartmentGlyphVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _libsbmlnetworkeditor.CompartmentGlyphVector___setitem__(self, *args)

    def pop(self):
        return _libsbmlnetworkeditor.CompartmentGlyphVector_pop(self)

    def append(self, x):
        return _libsbmlnetworkeditor.CompartmentGlyphVector_append(self, x)

    def empty(self):
        return _libsbmlnetworkeditor.CompartmentGlyphVector_empty(self)

    def size(self):
        return _libsbmlnetworkeditor.CompartmentGlyphVector_size(self)

    def swap(self, v):
        return _libsbmlnetworkeditor.CompartmentGlyphVector_swap(self, v)

    def begin(self):
        return _libsbmlnetworkeditor.CompartmentGlyphVector_begin(self)

    def end(self):
        return _libsbmlnetworkeditor.CompartmentGlyphVector_end(self)

    def rbegin(self):
        return _libsbmlnetworkeditor.CompartmentGlyphVector_rbegin(self)

    def rend(self):
        return _libsbmlnetworkeditor.CompartmentGlyphVector_rend(self)

    def clear(self):
        return _libsbmlnetworkeditor.CompartmentGlyphVector_clear(self)

    def get_allocator(self):
        return _libsbmlnetworkeditor.CompartmentGlyphVector_get_allocator(self)

    def pop_back(self):
        return _libsbmlnetworkeditor.CompartmentGlyphVector_pop_back(self)

    def erase(self, *args):
        return _libsbmlnetworkeditor.CompartmentGlyphVector_erase(self, *args)

    def __init__(self, *args):
        _libsbmlnetworkeditor.CompartmentGlyphVector_swiginit(self, _libsbmlnetworkeditor.new_CompartmentGlyphVector(*args))

    def push_back(self, x):
        return _libsbmlnetworkeditor.CompartmentGlyphVector_push_back(self, x)

    def front(self):
        return _libsbmlnetworkeditor.CompartmentGlyphVector_front(self)

    def back(self):
        return _libsbmlnetworkeditor.CompartmentGlyphVector_back(self)

    def assign(self, n, x):
        return _libsbmlnetworkeditor.CompartmentGlyphVector_assign(self, n, x)

    def resize(self, *args):
        return _libsbmlnetworkeditor.CompartmentGlyphVector_resize(self, *args)

    def insert(self, *args):
        return _libsbmlnetworkeditor.CompartmentGlyphVector_insert(self, *args)

    def reserve(self, n):
        return _libsbmlnetworkeditor.CompartmentGlyphVector_reserve(self, n)

    def capacity(self):
        return _libsbmlnetworkeditor.CompartmentGlyphVector_capacity(self)
    __swig_destroy__ = _libsbmlnetworkeditor.delete_CompartmentGlyphVector

# Register CompartmentGlyphVector in _libsbmlnetworkeditor:
_libsbmlnetworkeditor.CompartmentGlyphVector_swigregister(CompartmentGlyphVector)
class SpeciesGlyphVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _libsbmlnetworkeditor.SpeciesGlyphVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _libsbmlnetworkeditor.SpeciesGlyphVector___nonzero__(self)

    def __bool__(self):
        return _libsbmlnetworkeditor.SpeciesGlyphVector___bool__(self)

    def __len__(self):
        return _libsbmlnetworkeditor.SpeciesGlyphVector___len__(self)

    def __getslice__(self, i, j):
        return _libsbmlnetworkeditor.SpeciesGlyphVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _libsbmlnetworkeditor.SpeciesGlyphVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _libsbmlnetworkeditor.SpeciesGlyphVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _libsbmlnetworkeditor.SpeciesGlyphVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _libsbmlnetworkeditor.SpeciesGlyphVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _libsbmlnetworkeditor.SpeciesGlyphVector___setitem__(self, *args)

    def pop(self):
        return _libsbmlnetworkeditor.SpeciesGlyphVector_pop(self)

    def append(self, x):
        return _libsbmlnetworkeditor.SpeciesGlyphVector_append(self, x)

    def empty(self):
        return _libsbmlnetworkeditor.SpeciesGlyphVector_empty(self)

    def size(self):
        return _libsbmlnetworkeditor.SpeciesGlyphVector_size(self)

    def swap(self, v):
        return _libsbmlnetworkeditor.SpeciesGlyphVector_swap(self, v)

    def begin(self):
        return _libsbmlnetworkeditor.SpeciesGlyphVector_begin(self)

    def end(self):
        return _libsbmlnetworkeditor.SpeciesGlyphVector_end(self)

    def rbegin(self):
        return _libsbmlnetworkeditor.SpeciesGlyphVector_rbegin(self)

    def rend(self):
        return _libsbmlnetworkeditor.SpeciesGlyphVector_rend(self)

    def clear(self):
        return _libsbmlnetworkeditor.SpeciesGlyphVector_clear(self)

    def get_allocator(self):
        return _libsbmlnetworkeditor.SpeciesGlyphVector_get_allocator(self)

    def pop_back(self):
        return _libsbmlnetworkeditor.SpeciesGlyphVector_pop_back(self)

    def erase(self, *args):
        return _libsbmlnetworkeditor.SpeciesGlyphVector_erase(self, *args)

    def __init__(self, *args):
        _libsbmlnetworkeditor.SpeciesGlyphVector_swiginit(self, _libsbmlnetworkeditor.new_SpeciesGlyphVector(*args))

    def push_back(self, x):
        return _libsbmlnetworkeditor.SpeciesGlyphVector_push_back(self, x)

    def front(self):
        return _libsbmlnetworkeditor.SpeciesGlyphVector_front(self)

    def back(self):
        return _libsbmlnetworkeditor.SpeciesGlyphVector_back(self)

    def assign(self, n, x):
        return _libsbmlnetworkeditor.SpeciesGlyphVector_assign(self, n, x)

    def resize(self, *args):
        return _libsbmlnetworkeditor.SpeciesGlyphVector_resize(self, *args)

    def insert(self, *args):
        return _libsbmlnetworkeditor.SpeciesGlyphVector_insert(self, *args)

    def reserve(self, n):
        return _libsbmlnetworkeditor.SpeciesGlyphVector_reserve(self, n)

    def capacity(self):
        return _libsbmlnetworkeditor.SpeciesGlyphVector_capacity(self)
    __swig_destroy__ = _libsbmlnetworkeditor.delete_SpeciesGlyphVector

# Register SpeciesGlyphVector in _libsbmlnetworkeditor:
_libsbmlnetworkeditor.SpeciesGlyphVector_swigregister(SpeciesGlyphVector)
class ReactionGlyphVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _libsbmlnetworkeditor.ReactionGlyphVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _libsbmlnetworkeditor.ReactionGlyphVector___nonzero__(self)

    def __bool__(self):
        return _libsbmlnetworkeditor.ReactionGlyphVector___bool__(self)

    def __len__(self):
        return _libsbmlnetworkeditor.ReactionGlyphVector___len__(self)

    def __getslice__(self, i, j):
        return _libsbmlnetworkeditor.ReactionGlyphVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _libsbmlnetworkeditor.ReactionGlyphVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _libsbmlnetworkeditor.ReactionGlyphVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _libsbmlnetworkeditor.ReactionGlyphVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _libsbmlnetworkeditor.ReactionGlyphVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _libsbmlnetworkeditor.ReactionGlyphVector___setitem__(self, *args)

    def pop(self):
        return _libsbmlnetworkeditor.ReactionGlyphVector_pop(self)

    def append(self, x):
        return _libsbmlnetworkeditor.ReactionGlyphVector_append(self, x)

    def empty(self):
        return _libsbmlnetworkeditor.ReactionGlyphVector_empty(self)

    def size(self):
        return _libsbmlnetworkeditor.ReactionGlyphVector_size(self)

    def swap(self, v):
        return _libsbmlnetworkeditor.ReactionGlyphVector_swap(self, v)

    def begin(self):
        return _libsbmlnetworkeditor.ReactionGlyphVector_begin(self)

    def end(self):
        return _libsbmlnetworkeditor.ReactionGlyphVector_end(self)

    def rbegin(self):
        return _libsbmlnetworkeditor.ReactionGlyphVector_rbegin(self)

    def rend(self):
        return _libsbmlnetworkeditor.ReactionGlyphVector_rend(self)

    def clear(self):
        return _libsbmlnetworkeditor.ReactionGlyphVector_clear(self)

    def get_allocator(self):
        return _libsbmlnetworkeditor.ReactionGlyphVector_get_allocator(self)

    def pop_back(self):
        return _libsbmlnetworkeditor.ReactionGlyphVector_pop_back(self)

    def erase(self, *args):
        return _libsbmlnetworkeditor.ReactionGlyphVector_erase(self, *args)

    def __init__(self, *args):
        _libsbmlnetworkeditor.ReactionGlyphVector_swiginit(self, _libsbmlnetworkeditor.new_ReactionGlyphVector(*args))

    def push_back(self, x):
        return _libsbmlnetworkeditor.ReactionGlyphVector_push_back(self, x)

    def front(self):
        return _libsbmlnetworkeditor.ReactionGlyphVector_front(self)

    def back(self):
        return _libsbmlnetworkeditor.ReactionGlyphVector_back(self)

    def assign(self, n, x):
        return _libsbmlnetworkeditor.ReactionGlyphVector_assign(self, n, x)

    def resize(self, *args):
        return _libsbmlnetworkeditor.ReactionGlyphVector_resize(self, *args)

    def insert(self, *args):
        return _libsbmlnetworkeditor.ReactionGlyphVector_insert(self, *args)

    def reserve(self, n):
        return _libsbmlnetworkeditor.ReactionGlyphVector_reserve(self, n)

    def capacity(self):
        return _libsbmlnetworkeditor.ReactionGlyphVector_capacity(self)
    __swig_destroy__ = _libsbmlnetworkeditor.delete_ReactionGlyphVector

# Register ReactionGlyphVector in _libsbmlnetworkeditor:
_libsbmlnetworkeditor.ReactionGlyphVector_swigregister(ReactionGlyphVector)

def compareChar(c1, c2):
    return _libsbmlnetworkeditor.compareChar(c1, c2)

def stringCompare(str1, str2):
    return _libsbmlnetworkeditor.stringCompare(str1, str2)

def readSBML(sbml):
    return _libsbmlnetworkeditor.readSBML(sbml)

def writeSBML(*args):
    return _libsbmlnetworkeditor.writeSBML(*args)

def autolayout(document, stiffness=10.0, gravity=15.0, useMagnetism=False, useBoundary=False, useGrid=False):
    return _libsbmlnetworkeditor.autolayout(document, stiffness, gravity, useMagnetism, useBoundary, useGrid)

def isSetId(object):
    return _libsbmlnetworkeditor.isSetId(object)

def getId(object):
    return _libsbmlnetworkeditor.getId(object)

def setId(object, sid):
    return _libsbmlnetworkeditor.setId(object, sid)

def isSetName(object):
    return _libsbmlnetworkeditor.isSetName(object)

def getName(object):
    return _libsbmlnetworkeditor.getName(object)

def setName(object, name):
    return _libsbmlnetworkeditor.setName(object, name)

def isSetMetaId(object):
    return _libsbmlnetworkeditor.isSetMetaId(object)

def getMetaId(object):
    return _libsbmlnetworkeditor.getMetaId(object)

def setMetaId(object, metaid):
    return _libsbmlnetworkeditor.setMetaId(object, metaid)

def getCompartment(document, id):
    return _libsbmlnetworkeditor.getCompartment(document, id)

def getSpecies(document, id):
    return _libsbmlnetworkeditor.getSpecies(document, id)

def getReaction(document, id):
    return _libsbmlnetworkeditor.getReaction(document, id)

def getSpeciesReference(document, reactionId, speciesId):
    return _libsbmlnetworkeditor.getSpeciesReference(document, reactionId, speciesId)

def getModifierSpeciesReference(document, reactionId, speciesId):
    return _libsbmlnetworkeditor.getModifierSpeciesReference(document, reactionId, speciesId)

def getListOfLayouts(document):
    return _libsbmlnetworkeditor.getListOfLayouts(document)

def addLayout(document, layout):
    return _libsbmlnetworkeditor.addLayout(document, layout)

def createLayout(document):
    return _libsbmlnetworkeditor.createLayout(document)

def removeAllLayouts(document):
    return _libsbmlnetworkeditor.removeAllLayouts(document)

def setDefaultLayoutFeatures(document, layout, stiffness=10.0, gravity=15.0, useMagnetism=False, useBoundary=False, useGrid=False):
    return _libsbmlnetworkeditor.setDefaultLayoutFeatures(document, layout, stiffness, gravity, useMagnetism, useBoundary, useGrid)

def createDefaultLayout(document, stiffness=10.0, gravity=15.0, useMagnetism=False, useBoundary=False, useGrid=False):
    return _libsbmlnetworkeditor.createDefaultLayout(document, stiffness, gravity, useMagnetism, useBoundary, useGrid)

def getAssociatedCompartment(*args):
    return _libsbmlnetworkeditor.getAssociatedCompartment(*args)

def getNumLayouts(*args):
    return _libsbmlnetworkeditor.getNumLayouts(*args)

def getLayout(*args):
    return _libsbmlnetworkeditor.getLayout(*args)

def getDimensions(*args):
    return _libsbmlnetworkeditor.getDimensions(*args)

def getNumGraphicalObjects(*args):
    return _libsbmlnetworkeditor.getNumGraphicalObjects(*args)

def getGraphicalObjects(*args):
    return _libsbmlnetworkeditor.getGraphicalObjects(*args)

def getNumCompartmentGlyphs(*args):
    return _libsbmlnetworkeditor.getNumCompartmentGlyphs(*args)

def getCompartmentGlyphs(*args):
    return _libsbmlnetworkeditor.getCompartmentGlyphs(*args)

def getCompartmentGlyph(*args):
    return _libsbmlnetworkeditor.getCompartmentGlyph(*args)

def getCompartmentId(*args):
    return _libsbmlnetworkeditor.getCompartmentId(*args)

def isCompartmentGlyph(*args):
    return _libsbmlnetworkeditor.isCompartmentGlyph(*args)

def getNumSpeciesGlyphs(*args):
    return _libsbmlnetworkeditor.getNumSpeciesGlyphs(*args)

def getSpeciesGlyphs(*args):
    return _libsbmlnetworkeditor.getSpeciesGlyphs(*args)

def getSpeciesGlyph(*args):
    return _libsbmlnetworkeditor.getSpeciesGlyph(*args)

def getSpeciesId(*args):
    return _libsbmlnetworkeditor.getSpeciesId(*args)

def isSpeciesGlyph(*args):
    return _libsbmlnetworkeditor.isSpeciesGlyph(*args)

def getNumReactionGlyphs(*args):
    return _libsbmlnetworkeditor.getNumReactionGlyphs(*args)

def getReactionGlyphs(*args):
    return _libsbmlnetworkeditor.getReactionGlyphs(*args)

def getReactionGlyph(*args):
    return _libsbmlnetworkeditor.getReactionGlyph(*args)

def getReactionId(*args):
    return _libsbmlnetworkeditor.getReactionId(*args)

def isReactionGlyph(*args):
    return _libsbmlnetworkeditor.isReactionGlyph(*args)

def getNumSpeciesReferenceGlyphs(*args):
    return _libsbmlnetworkeditor.getNumSpeciesReferenceGlyphs(*args)

def getSpeciesReferenceGlyphs(*args):
    return _libsbmlnetworkeditor.getSpeciesReferenceGlyphs(*args)

def getSpeciesReferenceGlyph(*args):
    return _libsbmlnetworkeditor.getSpeciesReferenceGlyph(*args)

def getSpeciesReferenceId(*args):
    return _libsbmlnetworkeditor.getSpeciesReferenceId(*args)

def getSpeciesGlyphId(*args):
    return _libsbmlnetworkeditor.getSpeciesGlyphId(*args)

def isSetRole(*args):
    return _libsbmlnetworkeditor.isSetRole(*args)

def getRole(*args):
    return _libsbmlnetworkeditor.getRole(*args)

def setRole(*args):
    return _libsbmlnetworkeditor.setRole(*args)

def isSpeciesReferenceGlyph(graphicalObject):
    return _libsbmlnetworkeditor.isSpeciesReferenceGlyph(graphicalObject)

def getNumTextGlyphs(*args):
    return _libsbmlnetworkeditor.getNumTextGlyphs(*args)

def getTextGlyphs(*args):
    return _libsbmlnetworkeditor.getTextGlyphs(*args)

def getTextGlyph(*args):
    return _libsbmlnetworkeditor.getTextGlyph(*args)

def isSetText(*args):
    return _libsbmlnetworkeditor.isSetText(*args)

def getText(*args):
    return _libsbmlnetworkeditor.getText(*args)

def setText(*args):
    return _libsbmlnetworkeditor.setText(*args)

def isSetOriginOfTextId(*args):
    return _libsbmlnetworkeditor.isSetOriginOfTextId(*args)

def getOriginOfTextId(*args):
    return _libsbmlnetworkeditor.getOriginOfTextId(*args)

def setOriginOfTextId(*args):
    return _libsbmlnetworkeditor.setOriginOfTextId(*args)

def isSetGraphicalObjectId(*args):
    return _libsbmlnetworkeditor.isSetGraphicalObjectId(*args)

def getGraphicalObjectId(*args):
    return _libsbmlnetworkeditor.getGraphicalObjectId(*args)

def setGraphicalObjectId(*args):
    return _libsbmlnetworkeditor.setGraphicalObjectId(*args)

def getGraphicalObject(*args):
    return _libsbmlnetworkeditor.getGraphicalObject(*args)

def isTextGlyph(*args):
    return _libsbmlnetworkeditor.isTextGlyph(*args)

def getSBMLObjectId(*args):
    return _libsbmlnetworkeditor.getSBMLObjectId(*args)

def getBoundingBox(*args):
    return _libsbmlnetworkeditor.getBoundingBox(*args)

def getPositionX(*args):
    return _libsbmlnetworkeditor.getPositionX(*args)

def setPositionX(*args):
    return _libsbmlnetworkeditor.setPositionX(*args)

def getPositionY(*args):
    return _libsbmlnetworkeditor.getPositionY(*args)

def setPositionY(*args):
    return _libsbmlnetworkeditor.setPositionY(*args)

def getDimensionWidth(*args):
    return _libsbmlnetworkeditor.getDimensionWidth(*args)

def setDimensionWidth(*args):
    return _libsbmlnetworkeditor.setDimensionWidth(*args)

def getDimensionHeight(*args):
    return _libsbmlnetworkeditor.getDimensionHeight(*args)

def setDimensionHeight(*args):
    return _libsbmlnetworkeditor.setDimensionHeight(*args)

def isSetCurve(*args):
    return _libsbmlnetworkeditor.isSetCurve(*args)

def getCurve(*args):
    return _libsbmlnetworkeditor.getCurve(*args)

def getNumCurveSegments(*args):
    return _libsbmlnetworkeditor.getNumCurveSegments(*args)

def getCurveSegment(*args):
    return _libsbmlnetworkeditor.getCurveSegment(*args)

def createLineCurveSegment(*args):
    return _libsbmlnetworkeditor.createLineCurveSegment(*args)

def createCubicBezierCurveSegment(*args):
    return _libsbmlnetworkeditor.createCubicBezierCurveSegment(*args)

def removeCurveSegment(*args):
    return _libsbmlnetworkeditor.removeCurveSegment(*args)

def isCubicBezier(*args):
    return _libsbmlnetworkeditor.isCubicBezier(*args)

def getCurveSegmentStartPointX(*args):
    return _libsbmlnetworkeditor.getCurveSegmentStartPointX(*args)

def setCurveSegmentStartPointX(*args):
    return _libsbmlnetworkeditor.setCurveSegmentStartPointX(*args)

def getCurveSegmentStartPointY(*args):
    return _libsbmlnetworkeditor.getCurveSegmentStartPointY(*args)

def setCurveSegmentStartPointY(*args):
    return _libsbmlnetworkeditor.setCurveSegmentStartPointY(*args)

def getCurveSegmentEndPointX(*args):
    return _libsbmlnetworkeditor.getCurveSegmentEndPointX(*args)

def setCurveSegmentEndPointX(*args):
    return _libsbmlnetworkeditor.setCurveSegmentEndPointX(*args)

def getCurveSegmentEndPointY(*args):
    return _libsbmlnetworkeditor.getCurveSegmentEndPointY(*args)

def setCurveSegmentEndPointY(*args):
    return _libsbmlnetworkeditor.setCurveSegmentEndPointY(*args)

def getCurveSegmentBasePoint1X(*args):
    return _libsbmlnetworkeditor.getCurveSegmentBasePoint1X(*args)

def setCurveSegmentBasePoint1X(*args):
    return _libsbmlnetworkeditor.setCurveSegmentBasePoint1X(*args)

def getCurveSegmentBasePoint1Y(*args):
    return _libsbmlnetworkeditor.getCurveSegmentBasePoint1Y(*args)

def setCurveSegmentBasePoint1Y(*args):
    return _libsbmlnetworkeditor.setCurveSegmentBasePoint1Y(*args)

def getCurveSegmentBasePoint2X(*args):
    return _libsbmlnetworkeditor.getCurveSegmentBasePoint2X(*args)

def setCurveSegmentBasePoint2X(*args):
    return _libsbmlnetworkeditor.setCurveSegmentBasePoint2X(*args)

def getCurveSegmentBasePoint2Y(*args):
    return _libsbmlnetworkeditor.getCurveSegmentBasePoint2Y(*args)

def setCurveSegmentBasePoint2Y(*args):
    return _libsbmlnetworkeditor.setCurveSegmentBasePoint2Y(*args)

def getListOfGlobalRenderInformation(document):
    return _libsbmlnetworkeditor.getListOfGlobalRenderInformation(document)

def addGlobalRenderInformation(document, globalRenderInformation):
    return _libsbmlnetworkeditor.addGlobalRenderInformation(document, globalRenderInformation)

def createGlobalRenderInformation(document):
    return _libsbmlnetworkeditor.createGlobalRenderInformation(document)

def removeAllGlobalRenderInformation(document):
    return _libsbmlnetworkeditor.removeAllGlobalRenderInformation(document)

def setDefaultGlobalRenderInformationFeatures(document, globalRenderInformation):
    return _libsbmlnetworkeditor.setDefaultGlobalRenderInformationFeatures(document, globalRenderInformation)

def createDefaultRenderInformation(document):
    return _libsbmlnetworkeditor.createDefaultRenderInformation(document)

def createDefaultGlobalRenderInformation(document):
    return _libsbmlnetworkeditor.createDefaultGlobalRenderInformation(document)

def createDefaultLocalRenderInformation(document):
    return _libsbmlnetworkeditor.createDefaultLocalRenderInformation(document)

def getListOfLocalRenderInformation(*args):
    return _libsbmlnetworkeditor.getListOfLocalRenderInformation(*args)

def addLocalRenderInformation(*args):
    return _libsbmlnetworkeditor.addLocalRenderInformation(*args)

def createLocalRenderInformation(*args):
    return _libsbmlnetworkeditor.createLocalRenderInformation(*args)

def removeAllLocalRenderInformation(*args):
    return _libsbmlnetworkeditor.removeAllLocalRenderInformation(*args)

def setDefaultLocalRenderInformationFeatures(*args):
    return _libsbmlnetworkeditor.setDefaultLocalRenderInformationFeatures(*args)

def getNumGlobalRenderInformation(*args):
    return _libsbmlnetworkeditor.getNumGlobalRenderInformation(*args)

def getGlobalRenderInformation(*args):
    return _libsbmlnetworkeditor.getGlobalRenderInformation(*args)

def getNumLocalRenderInformation(*args):
    return _libsbmlnetworkeditor.getNumLocalRenderInformation(*args)

def getLocalRenderInformation(*args):
    return _libsbmlnetworkeditor.getLocalRenderInformation(*args)

def isSetBackgroundColor(*args):
    return _libsbmlnetworkeditor.isSetBackgroundColor(*args)

def getBackgroundColor(*args):
    return _libsbmlnetworkeditor.getBackgroundColor(*args)

def setBackgroundColor(*args):
    return _libsbmlnetworkeditor.setBackgroundColor(*args)

def getNumColorDefinitions(*args):
    return _libsbmlnetworkeditor.getNumColorDefinitions(*args)

def getColorDefinition(*args):
    return _libsbmlnetworkeditor.getColorDefinition(*args)

def isSetValue(*args):
    return _libsbmlnetworkeditor.isSetValue(*args)

def getValue(*args):
    return _libsbmlnetworkeditor.getValue(*args)

def setValue(*args):
    return _libsbmlnetworkeditor.setValue(*args)

def getNumGradientDefinitions(*args):
    return _libsbmlnetworkeditor.getNumGradientDefinitions(*args)

def getGradientDefinition(*args):
    return _libsbmlnetworkeditor.getGradientDefinition(*args)

def isLinearGradient(*args):
    return _libsbmlnetworkeditor.isLinearGradient(*args)

def isRadialGradient(*args):
    return _libsbmlnetworkeditor.isRadialGradient(*args)

def isSetSpreadMethod(*args):
    return _libsbmlnetworkeditor.isSetSpreadMethod(*args)

def getSpreadMethod(*args):
    return _libsbmlnetworkeditor.getSpreadMethod(*args)

def setSpreadMethod(*args):
    return _libsbmlnetworkeditor.setSpreadMethod(*args)

def getNumGradientStops(*args):
    return _libsbmlnetworkeditor.getNumGradientStops(*args)

def getGradientStop(*args):
    return _libsbmlnetworkeditor.getGradientStop(*args)

def isSetOffset(*args):
    return _libsbmlnetworkeditor.isSetOffset(*args)

def getOffset(*args):
    return _libsbmlnetworkeditor.getOffset(*args)

def setOffset(*args):
    return _libsbmlnetworkeditor.setOffset(*args)

def isSetStopColor(*args):
    return _libsbmlnetworkeditor.isSetStopColor(*args)

def getStopColor(*args):
    return _libsbmlnetworkeditor.getStopColor(*args)

def setStopColor(*args):
    return _libsbmlnetworkeditor.setStopColor(*args)

def isSetLinearGradientX1(*args):
    return _libsbmlnetworkeditor.isSetLinearGradientX1(*args)

def getLinearGradientX1(*args):
    return _libsbmlnetworkeditor.getLinearGradientX1(*args)

def setLinearGradientX1(*args):
    return _libsbmlnetworkeditor.setLinearGradientX1(*args)

def isSetLinearGradientX2(*args):
    return _libsbmlnetworkeditor.isSetLinearGradientX2(*args)

def getLinearGradientX2(*args):
    return _libsbmlnetworkeditor.getLinearGradientX2(*args)

def setLinearGradientX2(*args):
    return _libsbmlnetworkeditor.setLinearGradientX2(*args)

def isSetLinearGradientY1(*args):
    return _libsbmlnetworkeditor.isSetLinearGradientY1(*args)

def getLinearGradientY1(*args):
    return _libsbmlnetworkeditor.getLinearGradientY1(*args)

def setLinearGradientY1(*args):
    return _libsbmlnetworkeditor.setLinearGradientY1(*args)

def isSetLinearGradientY2(*args):
    return _libsbmlnetworkeditor.isSetLinearGradientY2(*args)

def getLinearGradientY2(*args):
    return _libsbmlnetworkeditor.getLinearGradientY2(*args)

def setLinearGradientY2(*args):
    return _libsbmlnetworkeditor.setLinearGradientY2(*args)

def isSetRadialGradientCx(*args):
    return _libsbmlnetworkeditor.isSetRadialGradientCx(*args)

def getRadialGradientCx(*args):
    return _libsbmlnetworkeditor.getRadialGradientCx(*args)

def setRadialGradientCx(*args):
    return _libsbmlnetworkeditor.setRadialGradientCx(*args)

def isSetRadialGradientCy(*args):
    return _libsbmlnetworkeditor.isSetRadialGradientCy(*args)

def getRadialGradientCy(*args):
    return _libsbmlnetworkeditor.getRadialGradientCy(*args)

def setRadialGradientCy(*args):
    return _libsbmlnetworkeditor.setRadialGradientCy(*args)

def isSetRadialGradientFx(*args):
    return _libsbmlnetworkeditor.isSetRadialGradientFx(*args)

def getRadialGradientFx(*args):
    return _libsbmlnetworkeditor.getRadialGradientFx(*args)

def setRadialGradientFx(*args):
    return _libsbmlnetworkeditor.setRadialGradientFx(*args)

def isSetRadialGradientFy(*args):
    return _libsbmlnetworkeditor.isSetRadialGradientFy(*args)

def getRadialGradientFy(*args):
    return _libsbmlnetworkeditor.getRadialGradientFy(*args)

def setRadialGradientFy(*args):
    return _libsbmlnetworkeditor.setRadialGradientFy(*args)

def isSetRadialGradientR(*args):
    return _libsbmlnetworkeditor.isSetRadialGradientR(*args)

def getRadialGradientR(*args):
    return _libsbmlnetworkeditor.getRadialGradientR(*args)

def setRadialGradientR(*args):
    return _libsbmlnetworkeditor.setRadialGradientR(*args)

def getNumLineEndings(*args):
    return _libsbmlnetworkeditor.getNumLineEndings(*args)

def getLineEnding(*args):
    return _libsbmlnetworkeditor.getLineEnding(*args)

def isSetEnableRotationalMapping(*args):
    return _libsbmlnetworkeditor.isSetEnableRotationalMapping(*args)

def getEnableRotationalMapping(*args):
    return _libsbmlnetworkeditor.getEnableRotationalMapping(*args)

def setEnableRotationalMapping(*args):
    return _libsbmlnetworkeditor.setEnableRotationalMapping(*args)

def getBoundingBoxOfLineEnding(*args):
    return _libsbmlnetworkeditor.getBoundingBoxOfLineEnding(*args)

def getRenderGroupOfLineEnding(*args):
    return _libsbmlnetworkeditor.getRenderGroupOfLineEnding(*args)

def getStyle(*args):
    return _libsbmlnetworkeditor.getStyle(*args)

def getStyleById(*args):
    return _libsbmlnetworkeditor.getStyleById(*args)

def getStyleByRole(*args):
    return _libsbmlnetworkeditor.getStyleByRole(*args)

def getStyleByType(*args):
    return _libsbmlnetworkeditor.getStyleByType(*args)

def getRenderGroup(*args):
    return _libsbmlnetworkeditor.getRenderGroup(*args)

def isGraphicalPrimitive1D(Transformation2D):
    return _libsbmlnetworkeditor.isGraphicalPrimitive1D(Transformation2D)

def isGraphicalPrimitive2D(Transformation2D):
    return _libsbmlnetworkeditor.isGraphicalPrimitive2D(Transformation2D)

def isRenderGroup(Transformation2D):
    return _libsbmlnetworkeditor.isRenderGroup(Transformation2D)

def isSetStrokeColor(*args):
    return _libsbmlnetworkeditor.isSetStrokeColor(*args)

def getStrokeColor(*args):
    return _libsbmlnetworkeditor.getStrokeColor(*args)

def setStrokeColor(*args):
    return _libsbmlnetworkeditor.setStrokeColor(*args)

def isSetStrokeWidth(*args):
    return _libsbmlnetworkeditor.isSetStrokeWidth(*args)

def getStrokeWidth(*args):
    return _libsbmlnetworkeditor.getStrokeWidth(*args)

def setStrokeWidth(*args):
    return _libsbmlnetworkeditor.setStrokeWidth(*args)

def isSetStrokeDashArray(*args):
    return _libsbmlnetworkeditor.isSetStrokeDashArray(*args)

def getStrokeDashArray(*args):
    return _libsbmlnetworkeditor.getStrokeDashArray(*args)

def setStrokeDashArray(*args):
    return _libsbmlnetworkeditor.setStrokeDashArray(*args)

def getNumStrokeDashes(*args):
    return _libsbmlnetworkeditor.getNumStrokeDashes(*args)

def getStrokeDash(*args):
    return _libsbmlnetworkeditor.getStrokeDash(*args)

def setStrokeDash(*args):
    return _libsbmlnetworkeditor.setStrokeDash(*args)

def isSetFontColor(*args):
    return _libsbmlnetworkeditor.isSetFontColor(*args)

def getFontColor(*args):
    return _libsbmlnetworkeditor.getFontColor(*args)

def setFontColor(*args):
    return _libsbmlnetworkeditor.setFontColor(*args)

def isSetFontFamily(*args):
    return _libsbmlnetworkeditor.isSetFontFamily(*args)

def getFontFamily(*args):
    return _libsbmlnetworkeditor.getFontFamily(*args)

def setFontFamily(*args):
    return _libsbmlnetworkeditor.setFontFamily(*args)

def isSetFontSize(*args):
    return _libsbmlnetworkeditor.isSetFontSize(*args)

def getFontSize(*args):
    return _libsbmlnetworkeditor.getFontSize(*args)

def setFontSize(*args):
    return _libsbmlnetworkeditor.setFontSize(*args)

def isSetFontWeight(*args):
    return _libsbmlnetworkeditor.isSetFontWeight(*args)

def getFontWeight(*args):
    return _libsbmlnetworkeditor.getFontWeight(*args)

def setFontWeight(*args):
    return _libsbmlnetworkeditor.setFontWeight(*args)

def isSetFontStyle(*args):
    return _libsbmlnetworkeditor.isSetFontStyle(*args)

def getFontStyle(*args):
    return _libsbmlnetworkeditor.getFontStyle(*args)

def setFontStyle(*args):
    return _libsbmlnetworkeditor.setFontStyle(*args)

def isSetTextAnchor(*args):
    return _libsbmlnetworkeditor.isSetTextAnchor(*args)

def getTextAnchor(*args):
    return _libsbmlnetworkeditor.getTextAnchor(*args)

def setTextAnchor(*args):
    return _libsbmlnetworkeditor.setTextAnchor(*args)

def isSetVTextAnchor(*args):
    return _libsbmlnetworkeditor.isSetVTextAnchor(*args)

def getVTextAnchor(*args):
    return _libsbmlnetworkeditor.getVTextAnchor(*args)

def setVTextAnchor(*args):
    return _libsbmlnetworkeditor.setVTextAnchor(*args)

def isSetFillColor(*args):
    return _libsbmlnetworkeditor.isSetFillColor(*args)

def getFillColor(*args):
    return _libsbmlnetworkeditor.getFillColor(*args)

def setFillColor(*args):
    return _libsbmlnetworkeditor.setFillColor(*args)

def isSetFillRule(*args):
    return _libsbmlnetworkeditor.isSetFillRule(*args)

def getFillRule(*args):
    return _libsbmlnetworkeditor.getFillRule(*args)

def setFillRule(*args):
    return _libsbmlnetworkeditor.setFillRule(*args)

def isSetStartHead(*args):
    return _libsbmlnetworkeditor.isSetStartHead(*args)

def getStartHead(*args):
    return _libsbmlnetworkeditor.getStartHead(*args)

def setStartHead(*args):
    return _libsbmlnetworkeditor.setStartHead(*args)

def isSetEndHead(*args):
    return _libsbmlnetworkeditor.isSetEndHead(*args)

def getEndHead(*args):
    return _libsbmlnetworkeditor.getEndHead(*args)

def setEndHead(*args):
    return _libsbmlnetworkeditor.setEndHead(*args)

def getNumGeometricShapes(*args):
    return _libsbmlnetworkeditor.getNumGeometricShapes(*args)

def getGeometricShape(*args):
    return _libsbmlnetworkeditor.getGeometricShape(*args)

def addGeometricShape(*args):
    return _libsbmlnetworkeditor.addGeometricShape(*args)

def removeGeometricShape(*args):
    return _libsbmlnetworkeditor.removeGeometricShape(*args)

def isRectangle(*args):
    return _libsbmlnetworkeditor.isRectangle(*args)

def isEllipse(*args):
    return _libsbmlnetworkeditor.isEllipse(*args)

def isPolygon(*args):
    return _libsbmlnetworkeditor.isPolygon(*args)

def isRenderCurve(*args):
    return _libsbmlnetworkeditor.isRenderCurve(*args)

def isImage(*args):
    return _libsbmlnetworkeditor.isImage(*args)

def isText(*args):
    return _libsbmlnetworkeditor.isText(*args)

def isSetGeometricShapeX(*args):
    return _libsbmlnetworkeditor.isSetGeometricShapeX(*args)

def getGeometricShapeX(*args):
    return _libsbmlnetworkeditor.getGeometricShapeX(*args)

def setGeometricShapeX(*args):
    return _libsbmlnetworkeditor.setGeometricShapeX(*args)

def isSetGeometricShapeY(*args):
    return _libsbmlnetworkeditor.isSetGeometricShapeY(*args)

def getGeometricShapeY(*args):
    return _libsbmlnetworkeditor.getGeometricShapeY(*args)

def setGeometricShapeY(*args):
    return _libsbmlnetworkeditor.setGeometricShapeY(*args)

def isSetGeometricShapeWidth(*args):
    return _libsbmlnetworkeditor.isSetGeometricShapeWidth(*args)

def getGeometricShapeWidth(*args):
    return _libsbmlnetworkeditor.getGeometricShapeWidth(*args)

def setGeometricShapeWidth(*args):
    return _libsbmlnetworkeditor.setGeometricShapeWidth(*args)

def isSetGeometricShapeHeight(*args):
    return _libsbmlnetworkeditor.isSetGeometricShapeHeight(*args)

def getGeometricShapeHeight(*args):
    return _libsbmlnetworkeditor.getGeometricShapeHeight(*args)

def setGeometricShapeHeight(*args):
    return _libsbmlnetworkeditor.setGeometricShapeHeight(*args)

def isSetGeometricShapeRatio(*args):
    return _libsbmlnetworkeditor.isSetGeometricShapeRatio(*args)

def getGeometricShapeRatio(*args):
    return _libsbmlnetworkeditor.getGeometricShapeRatio(*args)

def setGeometricShapeRatio(*args):
    return _libsbmlnetworkeditor.setGeometricShapeRatio(*args)

def isSetGeometricShapeCornerCurvatureRadiusX(*args):
    return _libsbmlnetworkeditor.isSetGeometricShapeCornerCurvatureRadiusX(*args)

def getGeometricShapeCornerCurvatureRadiusX(*args):
    return _libsbmlnetworkeditor.getGeometricShapeCornerCurvatureRadiusX(*args)

def setGeometricShapeCornerCurvatureRadiusX(*args):
    return _libsbmlnetworkeditor.setGeometricShapeCornerCurvatureRadiusX(*args)

def isSetGeometricShapeCornerCurvatureRadiusY(*args):
    return _libsbmlnetworkeditor.isSetGeometricShapeCornerCurvatureRadiusY(*args)

def getGeometricShapeCornerCurvatureRadiusY(*args):
    return _libsbmlnetworkeditor.getGeometricShapeCornerCurvatureRadiusY(*args)

def setGeometricShapeCornerCurvatureRadiusY(*args):
    return _libsbmlnetworkeditor.setGeometricShapeCornerCurvatureRadiusY(*args)

def isSetGeometricShapeCenterX(*args):
    return _libsbmlnetworkeditor.isSetGeometricShapeCenterX(*args)

def getGeometricShapeCenterX(*args):
    return _libsbmlnetworkeditor.getGeometricShapeCenterX(*args)

def setGeometricShapeCenterX(*args):
    return _libsbmlnetworkeditor.setGeometricShapeCenterX(*args)

def isSetGeometricShapeCenterY(*args):
    return _libsbmlnetworkeditor.isSetGeometricShapeCenterY(*args)

def getGeometricShapeCenterY(*args):
    return _libsbmlnetworkeditor.getGeometricShapeCenterY(*args)

def setGeometricShapeCenterY(*args):
    return _libsbmlnetworkeditor.setGeometricShapeCenterY(*args)

def isSetGeometricShapeRadiusX(*args):
    return _libsbmlnetworkeditor.isSetGeometricShapeRadiusX(*args)

def getGeometricShapeRadiusX(*args):
    return _libsbmlnetworkeditor.getGeometricShapeRadiusX(*args)

def setGeometricShapeRadiusX(*args):
    return _libsbmlnetworkeditor.setGeometricShapeRadiusX(*args)

def isSetGeometricShapeRadiusY(*args):
    return _libsbmlnetworkeditor.isSetGeometricShapeRadiusY(*args)

def getGeometricShapeRadiusY(*args):
    return _libsbmlnetworkeditor.getGeometricShapeRadiusY(*args)

def setGeometricShapeRadiusY(*args):
    return _libsbmlnetworkeditor.setGeometricShapeRadiusY(*args)

def getGeometricShapeNumElements(*args):
    return _libsbmlnetworkeditor.getGeometricShapeNumElements(*args)

def getGeometricShapeElementX(*args):
    return _libsbmlnetworkeditor.getGeometricShapeElementX(*args)

def setGeometricShapeElementX(*args):
    return _libsbmlnetworkeditor.setGeometricShapeElementX(*args)

def getGeometricShapeElementY(*args):
    return _libsbmlnetworkeditor.getGeometricShapeElementY(*args)

def setGeometricShapeElementY(*args):
    return _libsbmlnetworkeditor.setGeometricShapeElementY(*args)

def getGeometricShapeBasePoint1X(*args):
    return _libsbmlnetworkeditor.getGeometricShapeBasePoint1X(*args)

def setGeometricShapeBasePoint1X(*args):
    return _libsbmlnetworkeditor.setGeometricShapeBasePoint1X(*args)

def getGeometricShapeBasePoint1Y(*args):
    return _libsbmlnetworkeditor.getGeometricShapeBasePoint1Y(*args)

def setGeometricShapeBasePoint1Y(*args):
    return _libsbmlnetworkeditor.setGeometricShapeBasePoint1Y(*args)

def getGeometricShapeBasePoint2X(*args):
    return _libsbmlnetworkeditor.getGeometricShapeBasePoint2X(*args)

def setGeometricShapeBasePoint2X(*args):
    return _libsbmlnetworkeditor.setGeometricShapeBasePoint2X(*args)

def getGeometricShapeBasePoint2Y(*args):
    return _libsbmlnetworkeditor.getGeometricShapeBasePoint2Y(*args)

def setGeometricShapeBasePoint2Y(*args):
    return _libsbmlnetworkeditor.setGeometricShapeBasePoint2Y(*args)

def addRenderPointToGeometricShape(*args):
    return _libsbmlnetworkeditor.addRenderPointToGeometricShape(*args)

def addRenderCubicBezierToGeometricShape(*args):
    return _libsbmlnetworkeditor.addRenderCubicBezierToGeometricShape(*args)

def removeElementFromGeometricShape(*args):
    return _libsbmlnetworkeditor.removeElementFromGeometricShape(*args)

def isRenderCubicBezier(*args):
    return _libsbmlnetworkeditor.isRenderCubicBezier(*args)

def isSetGeometricShapeHref(*args):
    return _libsbmlnetworkeditor.isSetGeometricShapeHref(*args)

def getGeometricShapeHref(*args):
    return _libsbmlnetworkeditor.getGeometricShapeHref(*args)

def setGeometricShapeHref(*args):
    return _libsbmlnetworkeditor.setGeometricShapeHref(*args)

def getAbsoluteValue(relAbsVector):
    return _libsbmlnetworkeditor.getAbsoluteValue(relAbsVector)

def getRelativeValue(relAbsVector):
    return _libsbmlnetworkeditor.getRelativeValue(relAbsVector)

def setAbsoluteValue(relAbsVector, abs):
    return _libsbmlnetworkeditor.setAbsoluteValue(relAbsVector, abs)

def setRelativeValue(relAbsVector, rel):
    return _libsbmlnetworkeditor.setRelativeValue(relAbsVector, rel)

def getObjectRole(*args):
    return _libsbmlnetworkeditor.getObjectRole(*args)


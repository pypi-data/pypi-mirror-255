# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/04_hush.ipynb.

# %% auto 0
__all__ = ['HushedErrors']

# %% ../nbs/04_hush.ipynb 6
#| export


# %% ../nbs/04_hush.ipynb 8
from typing import Self

# %% ../nbs/04_hush.ipynb 10
#| export


# %% ../nbs/04_hush.ipynb 12
#| export


# %% ../nbs/04_hush.ipynb 14
from .type import P, E
from .meta import ExceptionMeta
from .base import Except
from .mixs import Hushable, Aggregable

# %% ../nbs/04_hush.ipynb 16
class HushedErrors(Hushable, Aggregable):
    '''
    A custom exception class for handling multiple exceptions.

    This class allows for the aggregation of multiple exception instances,
    providing an option to either raise a combined exception or suppress it
    based on a `hush` flag. It also supports adding custom messages.

    Parameters
    ----------
    *errs : Exception
        Variable length argument list of Exception instances.
    hush : bool, optional
        A flag to determine if the exception should be raised or suppressed. 
        Default is False, which means the exception will be raised.

    Attributes
    ----------
    errs : list
        A list of Exception instances that are being handled.
    hush : bool
        Flag to determine whether to raise or suppress the exception.
    expl : str
        An explanatory message that can be prefixed to the exception string.

    Methods
    -------
    __init__(*errs: Exception, hush: bool = False)
        Initializes the HushedErrors instance. Accepts multiple Exception instances
        and a boolean flag to indicate whether to hush (suppress) the exception.

    msgs(*errs: Exception) -> str
        Class method. Formats and returns a string representing all provided
        exceptions in the `errs` argument.
    
    add(*errs: Exception) -> Self
        Adds additional exception instances to the `errs` list. Returns the
        modified instance for method chaining.
    
    msg(msg: str) -> Self
        Sets a custom message to be prefixed in the exception string. Returns
        the modified instance for method chaining.
    
    __str__()
        Returns a formatted string representation of the exception.
  
    call()
        Raises the exception if the `hush` attribute is set to False. This method
        is useful for conditionally raising the aggregated exceptions.

    Examples
    --------
    >>> try:
    ...     # Some operations that may raise exceptions
    ... except Exception as e:
    ...     err = HushedErrors(e, hush=True)
    ...     err.call()  # This will not raise the exception because of hush=True
    '''
    def __init__(self, *errs: Exception, hush: bool = True, expl: str = '', ) -> None:
        super().__init__(hush, expl, *errs)

    def __str__(self):
        return f'{type(self).__name__}:\t{self.expl}{self.msgs(*self.errs)}'

# %% ../nbs/04_hush.ipynb 20
#| export

# coding: utf-8

"""
    ARES: REST API - veřejné

    REST rozhraní systému ARES

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, Field
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class AngazovanaOsobaRzp(BaseModel):
    """
    Angažovaná osoba zdroje RŽP
    """ # noqa: E501
    jmeno: Optional[Annotated[str, Field(strict=True, max_length=100)]] = Field(default=None, description="Jméno fyzické osoby")
    prijmeni: Optional[Annotated[str, Field(strict=True, max_length=100)]] = Field(default=None, description="Příjmení fyzické osoby")
    titul_pred_jmenem: Optional[Annotated[str, Field(strict=True, max_length=32)]] = Field(default=None, description="Titul před jménem fyzické osoby ", alias="titulPredJmenem")
    titul_za_jmenem: Optional[Annotated[str, Field(strict=True, max_length=32)]] = Field(default=None, description="Titul za jménem fyzické osoby", alias="titulZaJmenem")
    datum_narozeni: Optional[date] = Field(default=None, description="Datum narození fyzické osoby", alias="datumNarozeni")
    platnost_od: Optional[date] = Field(default=None, description="Platnost angažmá osoby od data", alias="platnostOd")
    platnost_do: Optional[date] = Field(default=None, description="Platnost angažmá osoby do data ", alias="platnostDo")
    statni_obcanstvi: Optional[Annotated[str, Field(min_length=3, strict=True, max_length=3)]] = Field(default=None, description="Státní občanství osoby - kód (ciselnikKod: Stat)", alias="statniObcanstvi")
    typ_angazma: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=64)]] = Field(default=None, description="Typ angažmá osoby  - kód (ciselnikKod: TypAngazma, zdroj: rzp) ", alias="typAngazma")
    __properties: ClassVar[List[str]] = ["jmeno", "prijmeni", "titulPredJmenem", "titulZaJmenem", "datumNarozeni", "platnostOd", "platnostDo", "statniObcanstvi", "typAngazma"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AngazovanaOsobaRzp from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AngazovanaOsobaRzp from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "jmeno": obj.get("jmeno"),
            "prijmeni": obj.get("prijmeni"),
            "titulPredJmenem": obj.get("titulPredJmenem"),
            "titulZaJmenem": obj.get("titulZaJmenem"),
            "datumNarozeni": obj.get("datumNarozeni"),
            "platnostOd": obj.get("platnostOd"),
            "platnostDo": obj.get("platnostDo"),
            "statniObcanstvi": obj.get("statniObcanstvi"),
            "typAngazma": obj.get("typAngazma")
        })
        return _obj



# coding: utf-8

"""
    ARES: REST API - veřejné

    REST rozhraní systému ARES

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.adresa_vr import AdresaVr
from openapi_client.models.angazma_osoba_vr import AngazmaOsobaVr
from openapi_client.models.cinnosti_vr import CinnostiVr
from openapi_client.models.ico_vr import IcoVr
from openapi_client.models.obchodni_jmeno_vr import ObchodniJmenoVr
from openapi_client.models.obecny_text_vr import ObecnyTextVr
from openapi_client.models.pravni_forma_vr import PravniFormaVr
from typing import Optional, Set
from typing_extensions import Self

class OdstepnyZavodVr(BaseModel):
    """
    Odštěpný závod
    """ # noqa: E501
    datum_zapisu: Optional[date] = Field(default=None, description="Datum zápisu údaje", alias="datumZapisu")
    datum_vymazu: Optional[date] = Field(default=None, description="Datum výmazu údaje", alias="datumVymazu")
    vedouci: Optional[List[AngazmaOsobaVr]] = None
    ostatni_skutecnosti: Optional[List[ObecnyTextVr]] = Field(default=None, alias="ostatniSkutecnosti")
    cinnosti: Optional[CinnostiVr] = None
    ico: Optional[List[IcoVr]] = None
    sidlo: Optional[List[AdresaVr]] = None
    pravni_forma: Optional[List[PravniFormaVr]] = Field(default=None, alias="pravniForma")
    obchodni_jmeno: Optional[List[ObchodniJmenoVr]] = Field(default=None, alias="obchodniJmeno")
    __properties: ClassVar[List[str]] = ["datumZapisu", "datumVymazu", "vedouci", "ostatniSkutecnosti", "cinnosti", "ico", "sidlo", "pravniForma", "obchodniJmeno"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OdstepnyZavodVr from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in vedouci (list)
        _items = []
        if self.vedouci:
            for _item in self.vedouci:
                if _item:
                    _items.append(_item.to_dict())
            _dict['vedouci'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in ostatni_skutecnosti (list)
        _items = []
        if self.ostatni_skutecnosti:
            for _item in self.ostatni_skutecnosti:
                if _item:
                    _items.append(_item.to_dict())
            _dict['ostatniSkutecnosti'] = _items
        # override the default output from pydantic by calling `to_dict()` of cinnosti
        if self.cinnosti:
            _dict['cinnosti'] = self.cinnosti.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in ico (list)
        _items = []
        if self.ico:
            for _item in self.ico:
                if _item:
                    _items.append(_item.to_dict())
            _dict['ico'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in sidlo (list)
        _items = []
        if self.sidlo:
            for _item in self.sidlo:
                if _item:
                    _items.append(_item.to_dict())
            _dict['sidlo'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in pravni_forma (list)
        _items = []
        if self.pravni_forma:
            for _item in self.pravni_forma:
                if _item:
                    _items.append(_item.to_dict())
            _dict['pravniForma'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in obchodni_jmeno (list)
        _items = []
        if self.obchodni_jmeno:
            for _item in self.obchodni_jmeno:
                if _item:
                    _items.append(_item.to_dict())
            _dict['obchodniJmeno'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OdstepnyZavodVr from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "datumZapisu": obj.get("datumZapisu"),
            "datumVymazu": obj.get("datumVymazu"),
            "vedouci": [AngazmaOsobaVr.from_dict(_item) for _item in obj["vedouci"]] if obj.get("vedouci") is not None else None,
            "ostatniSkutecnosti": [ObecnyTextVr.from_dict(_item) for _item in obj["ostatniSkutecnosti"]] if obj.get("ostatniSkutecnosti") is not None else None,
            "cinnosti": CinnostiVr.from_dict(obj["cinnosti"]) if obj.get("cinnosti") is not None else None,
            "ico": [IcoVr.from_dict(_item) for _item in obj["ico"]] if obj.get("ico") is not None else None,
            "sidlo": [AdresaVr.from_dict(_item) for _item in obj["sidlo"]] if obj.get("sidlo") is not None else None,
            "pravniForma": [PravniFormaVr.from_dict(_item) for _item in obj["pravniForma"]] if obj.get("pravniForma") is not None else None,
            "obchodniJmeno": [ObchodniJmenoVr.from_dict(_item) for _item in obj["obchodniJmeno"]] if obj.get("obchodniJmeno") is not None else None
        })
        return _obj



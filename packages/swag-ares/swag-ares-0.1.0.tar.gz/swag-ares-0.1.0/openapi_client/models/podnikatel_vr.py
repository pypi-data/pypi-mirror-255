# coding: utf-8

"""
    ARES: REST API - veřejné

    REST rozhraní systému ARES

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, Field
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.adresa_vr import AdresaVr
from openapi_client.models.angazma_fyzicka_osoba_vr import AngazmaFyzickaOsobaVr
from typing import Optional, Set
from typing_extensions import Self

class PodnikatelVr(BaseModel):
    """
    Podnikatel
    """ # noqa: E501
    datum_zapisu: Optional[date] = Field(default=None, description="Datum zápisu údaje", alias="datumZapisu")
    datum_vymazu: Optional[date] = Field(default=None, description="Datum výmazu údaje", alias="datumVymazu")
    bydliste: Optional[List[AdresaVr]] = None
    osoba_podnikatel: Optional[AngazmaFyzickaOsobaVr] = Field(default=None, alias="osobaPodnikatel")
    pobyt: Optional[List[AdresaVr]] = None
    typ_angazma: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=64)]] = Field(default=None, description="Typ angažmá  - kód (ciselnikKod: TypAngazma, zdroj: vr) ", alias="typAngazma")
    nazev_angazma: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="Název angažmá - nestandardní", alias="nazevAngazma")
    __properties: ClassVar[List[str]] = ["datumZapisu", "datumVymazu", "bydliste", "osobaPodnikatel", "pobyt", "typAngazma", "nazevAngazma"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PodnikatelVr from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in bydliste (list)
        _items = []
        if self.bydliste:
            for _item in self.bydliste:
                if _item:
                    _items.append(_item.to_dict())
            _dict['bydliste'] = _items
        # override the default output from pydantic by calling `to_dict()` of osoba_podnikatel
        if self.osoba_podnikatel:
            _dict['osobaPodnikatel'] = self.osoba_podnikatel.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in pobyt (list)
        _items = []
        if self.pobyt:
            for _item in self.pobyt:
                if _item:
                    _items.append(_item.to_dict())
            _dict['pobyt'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PodnikatelVr from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "datumZapisu": obj.get("datumZapisu"),
            "datumVymazu": obj.get("datumVymazu"),
            "bydliste": [AdresaVr.from_dict(_item) for _item in obj["bydliste"]] if obj.get("bydliste") is not None else None,
            "osobaPodnikatel": AngazmaFyzickaOsobaVr.from_dict(obj["osobaPodnikatel"]) if obj.get("osobaPodnikatel") is not None else None,
            "pobyt": [AdresaVr.from_dict(_item) for _item in obj["pobyt"]] if obj.get("pobyt") is not None else None,
            "typAngazma": obj.get("typAngazma"),
            "nazevAngazma": obj.get("nazevAngazma")
        })
        return _obj



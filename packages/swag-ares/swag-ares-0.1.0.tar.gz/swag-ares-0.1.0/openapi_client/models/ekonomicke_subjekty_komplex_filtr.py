# coding: utf-8

"""
    ARES: REST API - veřejné

    REST rozhraní systému ARES

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.adresa_filtr import AdresaFiltr
from typing import Optional, Set
from typing_extensions import Self

class EkonomickeSubjektyKomplexFiltr(BaseModel):
    """
    Filtr pro vyhledání seznamu ekonomických subjektů
    """ # noqa: E501
    start: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="Offset pro stránkování (poloha prvního vráceného prvku).")
    pocet: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="Počet prvků k výstupu.")
    razeni: Optional[List[StrictStr]] = None
    ico: Optional[List[Annotated[str, Field(min_length=8, strict=True, max_length=8)]]] = None
    obchodni_jmeno: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=2000)]] = Field(default=None, description="Obchodní jméno ekonomického subjektu", alias="obchodniJmeno")
    sidlo: Optional[AdresaFiltr] = None
    pravni_forma: Optional[List[Annotated[str, Field(min_length=3, strict=True, max_length=3)]]] = Field(default=None, alias="pravniForma")
    financni_urad: Optional[List[Annotated[str, Field(min_length=3, strict=True, max_length=3)]]] = Field(default=None, alias="financniUrad")
    cz_nace: Optional[List[Annotated[str, Field(min_length=1, strict=True, max_length=5)]]] = Field(default=None, alias="czNace")
    __properties: ClassVar[List[str]] = ["start", "pocet", "razeni", "ico", "obchodniJmeno", "sidlo", "pravniForma", "financniUrad", "czNace"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EkonomickeSubjektyKomplexFiltr from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of sidlo
        if self.sidlo:
            _dict['sidlo'] = self.sidlo.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EkonomickeSubjektyKomplexFiltr from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "start": obj.get("start"),
            "pocet": obj.get("pocet"),
            "razeni": obj.get("razeni"),
            "ico": obj.get("ico"),
            "obchodniJmeno": obj.get("obchodniJmeno"),
            "sidlo": AdresaFiltr.from_dict(obj["sidlo"]) if obj.get("sidlo") is not None else None,
            "pravniForma": obj.get("pravniForma"),
            "financniUrad": obj.get("financniUrad"),
            "czNace": obj.get("czNace")
        })
        return _obj



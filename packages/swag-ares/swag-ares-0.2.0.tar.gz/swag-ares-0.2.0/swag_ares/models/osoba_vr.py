# coding: utf-8

"""
    ARES: REST API - veřejné

    REST rozhraní systému ARES

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from swag_ares.models.adresa import Adresa
from typing import Optional, Set
from typing_extensions import Self

class OsobaVr(BaseModel):
    """
    Osoba - obecný předek
    """ # noqa: E501
    text_osoba: Optional[StrictStr] = Field(default=None, description="Doplňková informace k osobě", alias="textOsoba")
    text_osoba_od: Optional[date] = Field(default=None, description="Platnost doplňkové informace o osobě od data", alias="textOsobaOd")
    adresa: Optional[Adresa] = None
    text_osoba_do: Optional[date] = Field(default=None, description="Platnost doplňkové informace o osobě od data", alias="textOsobaDo")
    __properties: ClassVar[List[str]] = ["textOsoba", "textOsobaOd", "adresa", "textOsobaDo"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OsobaVr from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of adresa
        if self.adresa:
            _dict['adresa'] = self.adresa.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OsobaVr from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "textOsoba": obj.get("textOsoba"),
            "textOsobaOd": obj.get("textOsobaOd"),
            "adresa": Adresa.from_dict(obj["adresa"]) if obj.get("adresa") is not None else None,
            "textOsobaDo": obj.get("textOsobaDo")
        })
        return _obj



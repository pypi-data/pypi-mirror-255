# coding: utf-8

"""
    ARES: REST API - veřejné

    REST rozhraní systému ARES

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, Field, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from swag_ares.models.angazovana_osoba_rzp import AngazovanaOsobaRzp
from swag_ares.models.angazovany_subjekt_adresa import AngazovanySubjektAdresa
from typing import Optional, Set
from typing_extensions import Self

class AngazovanySubjektRzp(BaseModel):
    """
    Právnické osoby v angažmá ekonomického subjektu. 
    """ # noqa: E501
    typ_angazma: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=64)]] = Field(default=None, description="Typ angažmá osoby u subjektu ve zdroji RŽP (Registr živnostenského podnikání) - kód (ciselnikKod: TypAngazma, zdroj: rzp) ", alias="typAngazma")
    platnost_od: Optional[date] = Field(default=None, description="Platnost angažmá subjektu od data", alias="platnostOd")
    platnost_do: Optional[date] = Field(default=None, description="Platnost angažmá subjektu do data", alias="platnostDo")
    ico: Optional[Annotated[str, Field(min_length=8, strict=True, max_length=8)]] = Field(default=None, description="Ičo angažovaného subjektu")
    obchodni_jmeno: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=2000)]] = Field(default=None, description="obchodní jméno angažovaného subjektu", alias="obchodniJmeno")
    sidlo: Optional[AngazovanySubjektAdresa] = None
    typ_subjektu: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=64)]] = Field(default=None, description="Typ subjektu - kód (ciselnikKod: TypSubjektu, zdroj: rzp) ", alias="typSubjektu")
    pravni_forma: Optional[Annotated[str, Field(min_length=3, strict=True, max_length=3)]] = Field(default=None, description="Právní forma - kód (ciselnikKod: PravniForma, zdroj:com, res) ", alias="pravniForma")
    kod_statu: Optional[Annotated[str, Field(min_length=3, strict=True, max_length=3)]] = Field(default=None, description="Kód státu (ciselnikKod: Stat, zdroj:com) ", alias="kodStatu")
    osoby_zastupce: Optional[List[AngazovanaOsobaRzp]] = Field(default=None, alias="osobyZastupce")
    __properties: ClassVar[List[str]] = ["typAngazma", "platnostOd", "platnostDo", "ico", "obchodniJmeno", "sidlo", "typSubjektu", "pravniForma", "kodStatu", "osobyZastupce"]

    @field_validator('ico')
    def ico_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^\d{8}$", value):
            raise ValueError(r"must validate the regular expression /^\d{8}$/")
        return value

    @field_validator('pravni_forma')
    def pravni_forma_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^\d{3}$", value):
            raise ValueError(r"must validate the regular expression /^\d{3}$/")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AngazovanySubjektRzp from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of sidlo
        if self.sidlo:
            _dict['sidlo'] = self.sidlo.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in osoby_zastupce (list)
        _items = []
        if self.osoby_zastupce:
            for _item in self.osoby_zastupce:
                if _item:
                    _items.append(_item.to_dict())
            _dict['osobyZastupce'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AngazovanySubjektRzp from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "typAngazma": obj.get("typAngazma"),
            "platnostOd": obj.get("platnostOd"),
            "platnostDo": obj.get("platnostDo"),
            "ico": obj.get("ico"),
            "obchodniJmeno": obj.get("obchodniJmeno"),
            "sidlo": AngazovanySubjektAdresa.from_dict(obj["sidlo"]) if obj.get("sidlo") is not None else None,
            "typSubjektu": obj.get("typSubjektu"),
            "pravniForma": obj.get("pravniForma"),
            "kodStatu": obj.get("kodStatu"),
            "osobyZastupce": [AngazovanaOsobaRzp.from_dict(_item) for _item in obj["osobyZastupce"]] if obj.get("osobyZastupce") is not None else None
        })
        return _obj



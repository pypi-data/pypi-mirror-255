# coding: utf-8

"""
    ARES: REST API - veřejné

    REST rozhraní systému ARES

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from swag_ares.models.adresa import Adresa
from swag_ares.models.angazma_fyzicka_osoba_vr import AngazmaFyzickaOsobaVr
from typing import Optional, Set
from typing_extensions import Self

class PravnickaOsobaVr(BaseModel):
    """
    Právnická osoba
    """ # noqa: E501
    text_osoba: Optional[StrictStr] = Field(default=None, description="Doplňková informace k osobě", alias="textOsoba")
    text_osoba_od: Optional[date] = Field(default=None, description="Platnost doplňkové informace o osobě od data", alias="textOsobaOd")
    adresa: Optional[Adresa] = None
    text_osoba_do: Optional[date] = Field(default=None, description="Platnost doplňkové informace o osobě od data", alias="textOsobaDo")
    ico: Optional[Annotated[str, Field(min_length=8, strict=True, max_length=8)]] = Field(default=None, description="Idenitifikační číslo právnické osoby")
    obchodni_jmeno: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=2000)]] = Field(default=None, description="Název právnické osoby", alias="obchodniJmeno")
    zastoupeni: Optional[List[AngazmaFyzickaOsobaVr]] = None
    pravni_forma: Optional[Annotated[str, Field(min_length=3, strict=True, max_length=3)]] = Field(default=None, description="Právní forma - kód (ciselnikKod: PravniForma, zdroj: res, com)", alias="pravniForma")
    __properties: ClassVar[List[str]] = ["textOsoba", "textOsobaOd", "adresa", "textOsobaDo", "ico", "obchodniJmeno", "zastoupeni", "pravniForma"]

    @field_validator('ico')
    def ico_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^\d{8}$", value):
            raise ValueError(r"must validate the regular expression /^\d{8}$/")
        return value

    @field_validator('pravni_forma')
    def pravni_forma_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^\d{3}$", value):
            raise ValueError(r"must validate the regular expression /^\d{3}$/")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PravnickaOsobaVr from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of adresa
        if self.adresa:
            _dict['adresa'] = self.adresa.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in zastoupeni (list)
        _items = []
        if self.zastoupeni:
            for _item in self.zastoupeni:
                if _item:
                    _items.append(_item.to_dict())
            _dict['zastoupeni'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PravnickaOsobaVr from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "textOsoba": obj.get("textOsoba"),
            "textOsobaOd": obj.get("textOsobaOd"),
            "adresa": Adresa.from_dict(obj["adresa"]) if obj.get("adresa") is not None else None,
            "textOsobaDo": obj.get("textOsobaDo"),
            "ico": obj.get("ico"),
            "obchodniJmeno": obj.get("obchodniJmeno"),
            "zastoupeni": [AngazmaFyzickaOsobaVr.from_dict(_item) for _item in obj["zastoupeni"]] if obj.get("zastoupeni") is not None else None,
            "pravniForma": obj.get("pravniForma")
        })
        return _obj



# coding: utf-8

"""
    ARES: REST API - veřejné

    REST rozhraní systému ARES

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, Field
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from swag_ares.models.spolecnik_vr import SpolecnikVr
from swag_ares.models.spolecny_podil_vr import SpolecnyPodilVr
from swag_ares.models.uvolneny_podil_vr import UvolnenyPodilVr
from typing import Optional, Set
from typing_extensions import Self

class SpolecniciVr(BaseModel):
    """
    Společníci
    """ # noqa: E501
    datum_zapisu: Optional[date] = Field(default=None, description="Datum zápisu údaje", alias="datumZapisu")
    datum_vymazu: Optional[date] = Field(default=None, description="Datum výmazu údaje", alias="datumVymazu")
    nazev_organu: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="Název orgánu - nestandardní", alias="nazevOrganu")
    spolecnik: Optional[List[SpolecnikVr]] = None
    spolecny_podil: Optional[List[SpolecnyPodilVr]] = Field(default=None, alias="spolecnyPodil")
    typ_organu: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=64)]] = Field(default=None, description="Typ orgánu - kód (ciselnikKod: TypOrganu, zdroj: vr) ", alias="typOrganu")
    uvolneny_podil: Optional[List[UvolnenyPodilVr]] = Field(default=None, alias="uvolnenyPodil")
    nazev: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="Název orgánu - nestandardní")
    __properties: ClassVar[List[str]] = ["datumZapisu", "datumVymazu", "nazevOrganu", "spolecnik", "spolecnyPodil", "typOrganu", "uvolnenyPodil", "nazev"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SpolecniciVr from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in spolecnik (list)
        _items = []
        if self.spolecnik:
            for _item in self.spolecnik:
                if _item:
                    _items.append(_item.to_dict())
            _dict['spolecnik'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in spolecny_podil (list)
        _items = []
        if self.spolecny_podil:
            for _item in self.spolecny_podil:
                if _item:
                    _items.append(_item.to_dict())
            _dict['spolecnyPodil'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in uvolneny_podil (list)
        _items = []
        if self.uvolneny_podil:
            for _item in self.uvolneny_podil:
                if _item:
                    _items.append(_item.to_dict())
            _dict['uvolnenyPodil'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SpolecniciVr from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "datumZapisu": obj.get("datumZapisu"),
            "datumVymazu": obj.get("datumVymazu"),
            "nazevOrganu": obj.get("nazevOrganu"),
            "spolecnik": [SpolecnikVr.from_dict(_item) for _item in obj["spolecnik"]] if obj.get("spolecnik") is not None else None,
            "spolecnyPodil": [SpolecnyPodilVr.from_dict(_item) for _item in obj["spolecnyPodil"]] if obj.get("spolecnyPodil") is not None else None,
            "typOrganu": obj.get("typOrganu"),
            "uvolnenyPodil": [UvolnenyPodilVr.from_dict(_item) for _item in obj["uvolnenyPodil"]] if obj.get("uvolnenyPodil") is not None else None,
            "nazev": obj.get("nazev")
        })
        return _obj



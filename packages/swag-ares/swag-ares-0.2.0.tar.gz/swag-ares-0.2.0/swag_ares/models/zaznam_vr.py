# coding: utf-8

"""
    ARES: REST API - veřejné

    REST rozhraní systému ARES

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, Field, StrictBool, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from swag_ares.models.adresa_vr import AdresaVr
from swag_ares.models.cinnosti_vr import CinnostiVr
from swag_ares.models.datum_vr import DatumVr
from swag_ares.models.emise_akcie_vr import EmiseAkcieVr
from swag_ares.models.ico_vr import IcoVr
from swag_ares.models.insolvencni_rizeni_vr import InsolvencniRizeniVr
from swag_ares.models.kategorie_zo_vr import KategorieZoVr
from swag_ares.models.konkurs_vr import KonkursVr
from swag_ares.models.obchodni_jmeno_cizi_vr import ObchodniJmenoCiziVr
from swag_ares.models.obchodni_jmeno_vr import ObchodniJmenoVr
from swag_ares.models.obecny_text_vr import ObecnyTextVr
from swag_ares.models.odstepny_zavod_vr import OdstepnyZavodVr
from swag_ares.models.organ_vr import OrganVr
from swag_ares.models.podnikatel_vr import PodnikatelVr
from swag_ares.models.pravni_forma_vr import PravniFormaVr
from swag_ares.models.spisova_znacka_vr import SpisovaZnackaVr
from swag_ares.models.spolecnici_vr import SpolecniciVr
from swag_ares.models.statutarni_organ_vr import StatutarniOrganVr
from swag_ares.models.vklad_vr import VkladVr
from swag_ares.models.zakladni_kapital_vr import ZakladniKapitalVr
from swag_ares.models.zpusob_rizeni_vr import ZpusobRizeniVr
from typing import Optional, Set
from typing_extensions import Self

class ZaznamVr(BaseModel):
    """
    Detailní informace o ekonomickém subjektu ze zdroje VR
    """ # noqa: E501
    akcie: Optional[List[EmiseAkcieVr]] = None
    rejstrik: Optional[Annotated[str, Field(strict=True, max_length=15)]] = Field(default=None, description="Typ veřejného rejstříku (VR) - kód (ciselnikKod: TypRejstriku ) ")
    primarni_zaznam: Optional[StrictBool] = Field(default=None, description="Primární záznam", alias="primarniZaznam")
    spisova_znacka: Optional[List[SpisovaZnackaVr]] = Field(default=None, alias="spisovaZnacka")
    ico: Optional[List[IcoVr]] = None
    obchodni_jmeno: Optional[List[ObchodniJmenoVr]] = Field(default=None, alias="obchodniJmeno")
    vklady: Optional[List[VkladVr]] = None
    obchodni_jmeno_cizi: Optional[List[ObchodniJmenoCiziVr]] = Field(default=None, alias="obchodniJmenoCizi")
    zakladni_kapital: Optional[List[ZakladniKapitalVr]] = Field(default=None, alias="zakladniKapital")
    pravni_forma: Optional[List[PravniFormaVr]] = Field(default=None, alias="pravniForma")
    financni_urad: Optional[Annotated[str, Field(min_length=3, strict=True, max_length=3)]] = Field(default=None, description="Finanční úřad - kód (ciselnikKod: FinancniUrad, zdroj: ufo) ", alias="financniUrad")
    adresy: Optional[List[AdresaVr]] = None
    ostatni_skutecnosti: Optional[List[ObecnyTextVr]] = Field(default=None, alias="ostatniSkutecnosti")
    datum_aktualizace: Optional[date] = Field(default=None, description="Datum aktualizace", alias="datumAktualizace")
    stav_subjektu: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=64)]] = Field(default=None, description="Stav ekonomického subjektu v ARES - kód (ciselnikKod: StavZdroje, zdroj:com) ", alias="stavSubjektu")
    datum_vzniku: Optional[List[DatumVr]] = Field(default=None, alias="datumVzniku")
    datum_zapisu: Optional[date] = Field(default=None, description="Datum zápisu subjektu do VR", alias="datumZapisu")
    datum_vymazu: Optional[date] = Field(default=None, description="Datum výmazu subjektu z VR", alias="datumVymazu")
    zpusob_rizeni: Optional[List[ZpusobRizeniVr]] = Field(default=None, alias="zpusobRizeni")
    kategorie_zo: Optional[List[KategorieZoVr]] = Field(default=None, alias="kategorieZO")
    pravni_duvod_vymazu: Optional[List[ObecnyTextVr]] = Field(default=None, alias="pravniDuvodVymazu")
    cinnosti: Optional[CinnostiVr] = None
    nazev_nejvyssiho_organu: Optional[List[ObecnyTextVr]] = Field(default=None, alias="nazevNejvyssihoOrganu")
    exekuce: Optional[List[ObecnyTextVr]] = None
    ostatni_organy: Optional[List[OrganVr]] = Field(default=None, alias="ostatniOrgany")
    statutarni_organy: Optional[List[StatutarniOrganVr]] = Field(default=None, alias="statutarniOrgany")
    podnikatel: Optional[List[PodnikatelVr]] = None
    spolecnici: Optional[List[SpolecniciVr]] = None
    odstepne_zavody: Optional[List[OdstepnyZavodVr]] = Field(default=None, alias="odstepneZavody")
    insolvence: Optional[List[InsolvencniRizeniVr]] = None
    konkursy: Optional[List[KonkursVr]] = None
    __properties: ClassVar[List[str]] = ["akcie", "rejstrik", "primarniZaznam", "spisovaZnacka", "ico", "obchodniJmeno", "vklady", "obchodniJmenoCizi", "zakladniKapital", "pravniForma", "financniUrad", "adresy", "ostatniSkutecnosti", "datumAktualizace", "stavSubjektu", "datumVzniku", "datumZapisu", "datumVymazu", "zpusobRizeni", "kategorieZO", "pravniDuvodVymazu", "cinnosti", "nazevNejvyssihoOrganu", "exekuce", "ostatniOrgany", "statutarniOrgany", "podnikatel", "spolecnici", "odstepneZavody", "insolvence", "konkursy"]

    @field_validator('financni_urad')
    def financni_urad_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^\d{3}$", value):
            raise ValueError(r"must validate the regular expression /^\d{3}$/")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ZaznamVr from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in akcie (list)
        _items = []
        if self.akcie:
            for _item in self.akcie:
                if _item:
                    _items.append(_item.to_dict())
            _dict['akcie'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in spisova_znacka (list)
        _items = []
        if self.spisova_znacka:
            for _item in self.spisova_znacka:
                if _item:
                    _items.append(_item.to_dict())
            _dict['spisovaZnacka'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in ico (list)
        _items = []
        if self.ico:
            for _item in self.ico:
                if _item:
                    _items.append(_item.to_dict())
            _dict['ico'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in obchodni_jmeno (list)
        _items = []
        if self.obchodni_jmeno:
            for _item in self.obchodni_jmeno:
                if _item:
                    _items.append(_item.to_dict())
            _dict['obchodniJmeno'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in vklady (list)
        _items = []
        if self.vklady:
            for _item in self.vklady:
                if _item:
                    _items.append(_item.to_dict())
            _dict['vklady'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in obchodni_jmeno_cizi (list)
        _items = []
        if self.obchodni_jmeno_cizi:
            for _item in self.obchodni_jmeno_cizi:
                if _item:
                    _items.append(_item.to_dict())
            _dict['obchodniJmenoCizi'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in zakladni_kapital (list)
        _items = []
        if self.zakladni_kapital:
            for _item in self.zakladni_kapital:
                if _item:
                    _items.append(_item.to_dict())
            _dict['zakladniKapital'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in pravni_forma (list)
        _items = []
        if self.pravni_forma:
            for _item in self.pravni_forma:
                if _item:
                    _items.append(_item.to_dict())
            _dict['pravniForma'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in adresy (list)
        _items = []
        if self.adresy:
            for _item in self.adresy:
                if _item:
                    _items.append(_item.to_dict())
            _dict['adresy'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in ostatni_skutecnosti (list)
        _items = []
        if self.ostatni_skutecnosti:
            for _item in self.ostatni_skutecnosti:
                if _item:
                    _items.append(_item.to_dict())
            _dict['ostatniSkutecnosti'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in datum_vzniku (list)
        _items = []
        if self.datum_vzniku:
            for _item in self.datum_vzniku:
                if _item:
                    _items.append(_item.to_dict())
            _dict['datumVzniku'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in zpusob_rizeni (list)
        _items = []
        if self.zpusob_rizeni:
            for _item in self.zpusob_rizeni:
                if _item:
                    _items.append(_item.to_dict())
            _dict['zpusobRizeni'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in kategorie_zo (list)
        _items = []
        if self.kategorie_zo:
            for _item in self.kategorie_zo:
                if _item:
                    _items.append(_item.to_dict())
            _dict['kategorieZO'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in pravni_duvod_vymazu (list)
        _items = []
        if self.pravni_duvod_vymazu:
            for _item in self.pravni_duvod_vymazu:
                if _item:
                    _items.append(_item.to_dict())
            _dict['pravniDuvodVymazu'] = _items
        # override the default output from pydantic by calling `to_dict()` of cinnosti
        if self.cinnosti:
            _dict['cinnosti'] = self.cinnosti.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in nazev_nejvyssiho_organu (list)
        _items = []
        if self.nazev_nejvyssiho_organu:
            for _item in self.nazev_nejvyssiho_organu:
                if _item:
                    _items.append(_item.to_dict())
            _dict['nazevNejvyssihoOrganu'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in exekuce (list)
        _items = []
        if self.exekuce:
            for _item in self.exekuce:
                if _item:
                    _items.append(_item.to_dict())
            _dict['exekuce'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in ostatni_organy (list)
        _items = []
        if self.ostatni_organy:
            for _item in self.ostatni_organy:
                if _item:
                    _items.append(_item.to_dict())
            _dict['ostatniOrgany'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in statutarni_organy (list)
        _items = []
        if self.statutarni_organy:
            for _item in self.statutarni_organy:
                if _item:
                    _items.append(_item.to_dict())
            _dict['statutarniOrgany'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in podnikatel (list)
        _items = []
        if self.podnikatel:
            for _item in self.podnikatel:
                if _item:
                    _items.append(_item.to_dict())
            _dict['podnikatel'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in spolecnici (list)
        _items = []
        if self.spolecnici:
            for _item in self.spolecnici:
                if _item:
                    _items.append(_item.to_dict())
            _dict['spolecnici'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in odstepne_zavody (list)
        _items = []
        if self.odstepne_zavody:
            for _item in self.odstepne_zavody:
                if _item:
                    _items.append(_item.to_dict())
            _dict['odstepneZavody'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in insolvence (list)
        _items = []
        if self.insolvence:
            for _item in self.insolvence:
                if _item:
                    _items.append(_item.to_dict())
            _dict['insolvence'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in konkursy (list)
        _items = []
        if self.konkursy:
            for _item in self.konkursy:
                if _item:
                    _items.append(_item.to_dict())
            _dict['konkursy'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ZaznamVr from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "akcie": [EmiseAkcieVr.from_dict(_item) for _item in obj["akcie"]] if obj.get("akcie") is not None else None,
            "rejstrik": obj.get("rejstrik"),
            "primarniZaznam": obj.get("primarniZaznam"),
            "spisovaZnacka": [SpisovaZnackaVr.from_dict(_item) for _item in obj["spisovaZnacka"]] if obj.get("spisovaZnacka") is not None else None,
            "ico": [IcoVr.from_dict(_item) for _item in obj["ico"]] if obj.get("ico") is not None else None,
            "obchodniJmeno": [ObchodniJmenoVr.from_dict(_item) for _item in obj["obchodniJmeno"]] if obj.get("obchodniJmeno") is not None else None,
            "vklady": [VkladVr.from_dict(_item) for _item in obj["vklady"]] if obj.get("vklady") is not None else None,
            "obchodniJmenoCizi": [ObchodniJmenoCiziVr.from_dict(_item) for _item in obj["obchodniJmenoCizi"]] if obj.get("obchodniJmenoCizi") is not None else None,
            "zakladniKapital": [ZakladniKapitalVr.from_dict(_item) for _item in obj["zakladniKapital"]] if obj.get("zakladniKapital") is not None else None,
            "pravniForma": [PravniFormaVr.from_dict(_item) for _item in obj["pravniForma"]] if obj.get("pravniForma") is not None else None,
            "financniUrad": obj.get("financniUrad"),
            "adresy": [AdresaVr.from_dict(_item) for _item in obj["adresy"]] if obj.get("adresy") is not None else None,
            "ostatniSkutecnosti": [ObecnyTextVr.from_dict(_item) for _item in obj["ostatniSkutecnosti"]] if obj.get("ostatniSkutecnosti") is not None else None,
            "datumAktualizace": obj.get("datumAktualizace"),
            "stavSubjektu": obj.get("stavSubjektu"),
            "datumVzniku": [DatumVr.from_dict(_item) for _item in obj["datumVzniku"]] if obj.get("datumVzniku") is not None else None,
            "datumZapisu": obj.get("datumZapisu"),
            "datumVymazu": obj.get("datumVymazu"),
            "zpusobRizeni": [ZpusobRizeniVr.from_dict(_item) for _item in obj["zpusobRizeni"]] if obj.get("zpusobRizeni") is not None else None,
            "kategorieZO": [KategorieZoVr.from_dict(_item) for _item in obj["kategorieZO"]] if obj.get("kategorieZO") is not None else None,
            "pravniDuvodVymazu": [ObecnyTextVr.from_dict(_item) for _item in obj["pravniDuvodVymazu"]] if obj.get("pravniDuvodVymazu") is not None else None,
            "cinnosti": CinnostiVr.from_dict(obj["cinnosti"]) if obj.get("cinnosti") is not None else None,
            "nazevNejvyssihoOrganu": [ObecnyTextVr.from_dict(_item) for _item in obj["nazevNejvyssihoOrganu"]] if obj.get("nazevNejvyssihoOrganu") is not None else None,
            "exekuce": [ObecnyTextVr.from_dict(_item) for _item in obj["exekuce"]] if obj.get("exekuce") is not None else None,
            "ostatniOrgany": [OrganVr.from_dict(_item) for _item in obj["ostatniOrgany"]] if obj.get("ostatniOrgany") is not None else None,
            "statutarniOrgany": [StatutarniOrganVr.from_dict(_item) for _item in obj["statutarniOrgany"]] if obj.get("statutarniOrgany") is not None else None,
            "podnikatel": [PodnikatelVr.from_dict(_item) for _item in obj["podnikatel"]] if obj.get("podnikatel") is not None else None,
            "spolecnici": [SpolecniciVr.from_dict(_item) for _item in obj["spolecnici"]] if obj.get("spolecnici") is not None else None,
            "odstepneZavody": [OdstepnyZavodVr.from_dict(_item) for _item in obj["odstepneZavody"]] if obj.get("odstepneZavody") is not None else None,
            "insolvence": [InsolvencniRizeniVr.from_dict(_item) for _item in obj["insolvence"]] if obj.get("insolvence") is not None else None,
            "konkursy": [KonkursVr.from_dict(_item) for _item in obj["konkursy"]] if obj.get("konkursy") is not None else None
        })
        return _obj



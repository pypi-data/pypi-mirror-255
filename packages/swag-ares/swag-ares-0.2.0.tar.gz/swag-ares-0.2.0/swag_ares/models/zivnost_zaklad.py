# coding: utf-8

"""
    ARES: REST API - veřejné

    REST rozhraní systému ARES

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, Field
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from swag_ares.models.zivnost_bez_oz import ZivnostBezOZ
from swag_ares.models.zivnost_podminky import ZivnostPodminky
from swag_ares.models.zivnost_preruseni import ZivnostPreruseni
from swag_ares.models.zivnost_provozovna_pozastaveni import ZivnostProvozovnaPozastaveni
from typing import Optional, Set
from typing_extensions import Self

class ZivnostZaklad(BaseModel):
    """
    Živnosti, které ekonomický subjekt provozuje nebo provozoval
    """ # noqa: E501
    datum_vzniku: Optional[date] = Field(default=None, description="Datum vzniku živnosti ", alias="datumVzniku")
    datum_zaniku: Optional[date] = Field(default=None, description="Datum zániku živnosti ", alias="datumZaniku")
    platnost_do: Optional[date] = Field(default=None, description="Platnost živnosti do data", alias="platnostDo")
    predmet_podnikani: Optional[Annotated[str, Field(min_length=5, strict=True, max_length=750)]] = Field(default=None, description="Předmět podnikáni živnosti", alias="predmetPodnikani")
    pozastaveni_zivnosti: Optional[List[ZivnostProvozovnaPozastaveni]] = Field(default=None, alias="pozastaveniZivnosti")
    podminky_provozovani_zivnosti: Optional[List[ZivnostPodminky]] = Field(default=None, alias="podminkyProvozovaniZivnosti")
    preruseni_zivnosti: Optional[List[ZivnostPreruseni]] = Field(default=None, alias="preruseniZivnosti")
    zivnost_bez_oz: Optional[List[ZivnostBezOZ]] = Field(default=None, alias="zivnostBezOz")
    datum_aktualizace: Optional[date] = Field(default=None, description="Datum aktualizace záznamu", alias="datumAktualizace")
    druh_zivnosti: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=1)]] = Field(default=None, description="Druh živnosti - kód (ciselnikKod: DruhZivnosti) ", alias="druhZivnosti")
    __properties: ClassVar[List[str]] = ["datumVzniku", "datumZaniku", "platnostDo", "predmetPodnikani", "pozastaveniZivnosti", "podminkyProvozovaniZivnosti", "preruseniZivnosti", "zivnostBezOz", "datumAktualizace", "druhZivnosti"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ZivnostZaklad from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in pozastaveni_zivnosti (list)
        _items = []
        if self.pozastaveni_zivnosti:
            for _item in self.pozastaveni_zivnosti:
                if _item:
                    _items.append(_item.to_dict())
            _dict['pozastaveniZivnosti'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in podminky_provozovani_zivnosti (list)
        _items = []
        if self.podminky_provozovani_zivnosti:
            for _item in self.podminky_provozovani_zivnosti:
                if _item:
                    _items.append(_item.to_dict())
            _dict['podminkyProvozovaniZivnosti'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in preruseni_zivnosti (list)
        _items = []
        if self.preruseni_zivnosti:
            for _item in self.preruseni_zivnosti:
                if _item:
                    _items.append(_item.to_dict())
            _dict['preruseniZivnosti'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in zivnost_bez_oz (list)
        _items = []
        if self.zivnost_bez_oz:
            for _item in self.zivnost_bez_oz:
                if _item:
                    _items.append(_item.to_dict())
            _dict['zivnostBezOz'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ZivnostZaklad from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "datumVzniku": obj.get("datumVzniku"),
            "datumZaniku": obj.get("datumZaniku"),
            "platnostDo": obj.get("platnostDo"),
            "predmetPodnikani": obj.get("predmetPodnikani"),
            "pozastaveniZivnosti": [ZivnostProvozovnaPozastaveni.from_dict(_item) for _item in obj["pozastaveniZivnosti"]] if obj.get("pozastaveniZivnosti") is not None else None,
            "podminkyProvozovaniZivnosti": [ZivnostPodminky.from_dict(_item) for _item in obj["podminkyProvozovaniZivnosti"]] if obj.get("podminkyProvozovaniZivnosti") is not None else None,
            "preruseniZivnosti": [ZivnostPreruseni.from_dict(_item) for _item in obj["preruseniZivnosti"]] if obj.get("preruseniZivnosti") is not None else None,
            "zivnostBezOz": [ZivnostBezOZ.from_dict(_item) for _item in obj["zivnostBezOz"]] if obj.get("zivnostBezOz") is not None else None,
            "datumAktualizace": obj.get("datumAktualizace"),
            "druhZivnosti": obj.get("druhZivnosti")
        })
        return _obj



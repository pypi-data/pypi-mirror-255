# coding: utf-8

"""
    ARES: REST API - veřejné

    REST rozhraní systému ARES

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, Field
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.angazma_osoba_vr import AngazmaOsobaVr
from openapi_client.models.obecny_text_vr import ObecnyTextVr
from openapi_client.models.pocet_clenu_vr import PocetClenuVr
from typing import Optional, Set
from typing_extensions import Self

class StatutarniOrganVr(BaseModel):
    """
    Statutární orgán
    """ # noqa: E501
    datum_zapisu: Optional[date] = Field(default=None, description="Datum zápisu údaje", alias="datumZapisu")
    datum_vymazu: Optional[date] = Field(default=None, description="Datum výmazu údaje", alias="datumVymazu")
    nazev_organu: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="Název orgánu - nestandardní", alias="nazevOrganu")
    pocet_clenu: Optional[List[PocetClenuVr]] = Field(default=None, alias="pocetClenu")
    clenove_organu: Optional[List[AngazmaOsobaVr]] = Field(default=None, alias="clenoveOrganu")
    typ_organu: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=64)]] = Field(default=None, description="Typ orgánu - kód (ciselnikKod: TypOrganu, zdroj: vr) ", alias="typOrganu")
    nazev_angazma: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="Název orgánu - nestandardní", alias="nazevAngazma")
    typ_angazma: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=64)]] = Field(default=None, description="Typ orgánu - kód (ciselnikKod: TypOrganu, zdroj: vr) ", alias="typAngazma")
    zpusob_jednani: Optional[List[ObecnyTextVr]] = Field(default=None, alias="zpusobJednani")
    __properties: ClassVar[List[str]] = ["datumZapisu", "datumVymazu", "nazevOrganu", "pocetClenu", "clenoveOrganu", "typOrganu", "nazevAngazma", "typAngazma", "zpusobJednani"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of StatutarniOrganVr from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in pocet_clenu (list)
        _items = []
        if self.pocet_clenu:
            for _item in self.pocet_clenu:
                if _item:
                    _items.append(_item.to_dict())
            _dict['pocetClenu'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in clenove_organu (list)
        _items = []
        if self.clenove_organu:
            for _item in self.clenove_organu:
                if _item:
                    _items.append(_item.to_dict())
            _dict['clenoveOrganu'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in zpusob_jednani (list)
        _items = []
        if self.zpusob_jednani:
            for _item in self.zpusob_jednani:
                if _item:
                    _items.append(_item.to_dict())
            _dict['zpusobJednani'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of StatutarniOrganVr from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "datumZapisu": obj.get("datumZapisu"),
            "datumVymazu": obj.get("datumVymazu"),
            "nazevOrganu": obj.get("nazevOrganu"),
            "pocetClenu": [PocetClenuVr.from_dict(_item) for _item in obj["pocetClenu"]] if obj.get("pocetClenu") is not None else None,
            "clenoveOrganu": [AngazmaOsobaVr.from_dict(_item) for _item in obj["clenoveOrganu"]] if obj.get("clenoveOrganu") is not None else None,
            "typOrganu": obj.get("typOrganu"),
            "nazevAngazma": obj.get("nazevAngazma"),
            "typAngazma": obj.get("typAngazma"),
            "zpusobJednani": [ObecnyTextVr.from_dict(_item) for _item in obj["zpusobJednani"]] if obj.get("zpusobJednani") is not None else None
        })
        return _obj



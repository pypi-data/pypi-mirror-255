# coding: utf-8

"""
    ARES: REST API - veřejné

    REST rozhraní systému ARES

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, Field, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.angazovany_subjekt_rcns import AngazovanySubjektRcns
from openapi_client.models.pravo_zvlastni import PravoZvlastni
from typing import Optional, Set
from typing_extensions import Self

class SubjektCirkev(BaseModel):
    """
    SubjektCirkev
    """ # noqa: E501
    datum_registrace_prav: Optional[date] = Field(default=None, description="Datum registrace práv dané církvi.", alias="datumRegistracePrav")
    cislo_registrace_prav: Optional[Annotated[str, Field(strict=True, max_length=30)]] = Field(default=None, description="Číslo registrace práv dané církvi.", alias="cisloRegistracePrav")
    ico_nastupce: Optional[Annotated[str, Field(min_length=8, strict=True, max_length=8)]] = Field(default=None, description="IČO nástupce zrušené právnické osoby. ", alias="icoNastupce")
    datum_zruseni_registrace_prav: Optional[date] = Field(default=None, description="Datum zrušení registrace práv dané církvi.", alias="datumZruseniRegistracePrav")
    pravo_zvlastni: Optional[List[PravoZvlastni]] = Field(default=None, alias="pravoZvlastni")
    cislo_zruseni_registrace_prav: Optional[Annotated[str, Field(strict=True, max_length=30)]] = Field(default=None, description="Číslo zrušení registrace práv dané církvi.", alias="cisloZruseniRegistracePrav")
    organy: Optional[List[AngazovanySubjektRcns]] = None
    __properties: ClassVar[List[str]] = ["datumRegistracePrav", "cisloRegistracePrav", "icoNastupce", "datumZruseniRegistracePrav", "pravoZvlastni", "cisloZruseniRegistracePrav", "organy"]

    @field_validator('ico_nastupce')
    def ico_nastupce_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^\d{8}$", value):
            raise ValueError(r"must validate the regular expression /^\d{8}$/")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SubjektCirkev from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in pravo_zvlastni (list)
        _items = []
        if self.pravo_zvlastni:
            for _item in self.pravo_zvlastni:
                if _item:
                    _items.append(_item.to_dict())
            _dict['pravoZvlastni'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in organy (list)
        _items = []
        if self.organy:
            for _item in self.organy:
                if _item:
                    _items.append(_item.to_dict())
            _dict['organy'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SubjektCirkev from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "datumRegistracePrav": obj.get("datumRegistracePrav"),
            "cisloRegistracePrav": obj.get("cisloRegistracePrav"),
            "icoNastupce": obj.get("icoNastupce"),
            "datumZruseniRegistracePrav": obj.get("datumZruseniRegistracePrav"),
            "pravoZvlastni": [PravoZvlastni.from_dict(_item) for _item in obj["pravoZvlastni"]] if obj.get("pravoZvlastni") is not None else None,
            "cisloZruseniRegistracePrav": obj.get("cisloZruseniRegistracePrav"),
            "organy": [AngazovanySubjektRcns.from_dict(_item) for _item in obj["organy"]] if obj.get("organy") is not None else None
        })
        return _obj



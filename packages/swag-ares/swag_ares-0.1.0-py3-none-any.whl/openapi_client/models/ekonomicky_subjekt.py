# coding: utf-8

"""
    ARES: REST API - veřejné

    REST rozhraní systému ARES

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.adresa import Adresa
from openapi_client.models.adresa_dorucovaci import AdresaDorucovaci
from openapi_client.models.ekonomicky_subjekt_dalsi_udaje import EkonomickySubjektDalsiUdaje
from openapi_client.models.seznam_registraci import SeznamRegistraci
from typing import Optional, Set
from typing_extensions import Self

class EkonomickySubjekt(BaseModel):
    """
    Základní informace o ekonomickém subjektu
    """ # noqa: E501
    ico: Optional[Annotated[str, Field(min_length=8, strict=True, max_length=8)]] = Field(default=None, description="Identifikační číslo osoby - IČO")
    obchodni_jmeno: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=2000)]] = Field(default=None, description="Obchodní jméno ekonomického subjektu", alias="obchodniJmeno")
    sidlo: Optional[Adresa] = None
    pravni_forma: Optional[Annotated[str, Field(min_length=3, strict=True, max_length=3)]] = Field(default=None, description="Právní forma - kód (ciselnikKod: PravniForma, zdroj: res, com) ", alias="pravniForma")
    financni_urad: Optional[Annotated[str, Field(min_length=3, strict=True, max_length=3)]] = Field(default=None, description="Správně příslušný finanční úřad - kód (ciselnikKod: FinancniUrad, zdroj:ufo) ", alias="financniUrad")
    datum_vzniku: Optional[date] = Field(default=None, description="Datum vzniku ekonomického subjektu ", alias="datumVzniku")
    datum_zaniku: Optional[date] = Field(default=None, description="Datum zániku ekonomického subjektu", alias="datumZaniku")
    datum_aktualizace: Optional[date] = Field(default=None, description="Datum aktualizace záznamu", alias="datumAktualizace")
    dic: Optional[StrictStr] = Field(default=None, description="Daňové identifikační číslo ve formátu CZNNNNNNNNNN")
    ico_id: Optional[Annotated[str, Field(strict=True, max_length=32)]] = Field(default=None, description="Ičo ekonomického subjektu, pokud je ičo přidělené. Id ekonomického subjektu, pokud je ičo nepřidělené.", alias="icoId")
    adresa_dorucovaci: Optional[AdresaDorucovaci] = Field(default=None, alias="adresaDorucovaci")
    seznam_registraci: Optional[SeznamRegistraci] = Field(default=None, alias="seznamRegistraci")
    primarni_zdroj: Optional[Annotated[str, Field(strict=True, max_length=30)]] = Field(default=None, description="Identifikace primárního zdroje dat.", alias="primarniZdroj")
    dalsi_udaje: Optional[List[EkonomickySubjektDalsiUdaje]] = Field(default=None, alias="dalsiUdaje")
    cz_nace: Optional[List[Annotated[str, Field(min_length=1, strict=True, max_length=5)]]] = Field(default=None, alias="czNace")
    sub_registr_szr: Optional[StrictStr] = Field(default=None, description="Indeftifikátor sub-registru zdroje SZR - kód (ciselnikKod: SubRegistrSzr, zdroj:com) ", alias="subRegistrSzr")
    dic_sk_dph: Optional[StrictStr] = Field(default=None, description="Daňové identifikační číslo skupiny plátce DPH ve formátu CZNNNNNNNNNN ", alias="dicSkDph")
    __properties: ClassVar[List[str]] = ["ico", "obchodniJmeno", "sidlo", "pravniForma", "financniUrad", "datumVzniku", "datumZaniku", "datumAktualizace", "dic", "icoId", "adresaDorucovaci", "seznamRegistraci", "primarniZdroj", "dalsiUdaje", "czNace", "subRegistrSzr", "dicSkDph"]

    @field_validator('ico')
    def ico_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^\d{8}$", value):
            raise ValueError(r"must validate the regular expression /^\d{8}$/")
        return value

    @field_validator('pravni_forma')
    def pravni_forma_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^\d{3}$", value):
            raise ValueError(r"must validate the regular expression /^\d{3}$/")
        return value

    @field_validator('financni_urad')
    def financni_urad_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^\d{3}$", value):
            raise ValueError(r"must validate the regular expression /^\d{3}$/")
        return value

    @field_validator('ico_id')
    def ico_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^(ARES_)?\d{8}$", value):
            raise ValueError(r"must validate the regular expression /^(ARES_)?\d{8}$/")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EkonomickySubjekt from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of sidlo
        if self.sidlo:
            _dict['sidlo'] = self.sidlo.to_dict()
        # override the default output from pydantic by calling `to_dict()` of adresa_dorucovaci
        if self.adresa_dorucovaci:
            _dict['adresaDorucovaci'] = self.adresa_dorucovaci.to_dict()
        # override the default output from pydantic by calling `to_dict()` of seznam_registraci
        if self.seznam_registraci:
            _dict['seznamRegistraci'] = self.seznam_registraci.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in dalsi_udaje (list)
        _items = []
        if self.dalsi_udaje:
            for _item in self.dalsi_udaje:
                if _item:
                    _items.append(_item.to_dict())
            _dict['dalsiUdaje'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EkonomickySubjekt from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ico": obj.get("ico"),
            "obchodniJmeno": obj.get("obchodniJmeno"),
            "sidlo": Adresa.from_dict(obj["sidlo"]) if obj.get("sidlo") is not None else None,
            "pravniForma": obj.get("pravniForma"),
            "financniUrad": obj.get("financniUrad"),
            "datumVzniku": obj.get("datumVzniku"),
            "datumZaniku": obj.get("datumZaniku"),
            "datumAktualizace": obj.get("datumAktualizace"),
            "dic": obj.get("dic"),
            "icoId": obj.get("icoId"),
            "adresaDorucovaci": AdresaDorucovaci.from_dict(obj["adresaDorucovaci"]) if obj.get("adresaDorucovaci") is not None else None,
            "seznamRegistraci": SeznamRegistraci.from_dict(obj["seznamRegistraci"]) if obj.get("seznamRegistraci") is not None else None,
            "primarniZdroj": obj.get("primarniZdroj"),
            "dalsiUdaje": [EkonomickySubjektDalsiUdaje.from_dict(_item) for _item in obj["dalsiUdaje"]] if obj.get("dalsiUdaje") is not None else None,
            "czNace": obj.get("czNace"),
            "subRegistrSzr": obj.get("subRegistrSzr"),
            "dicSkDph": obj.get("dicSkDph")
        })
        return _obj



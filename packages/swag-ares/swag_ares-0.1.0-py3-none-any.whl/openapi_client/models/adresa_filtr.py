# coding: utf-8

"""
    ARES: REST API - veřejné

    REST rozhraní systému ARES

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class AdresaFiltr(BaseModel):
    """
    Adresa 
    """ # noqa: E501
    kod_casti_obce: Optional[Annotated[int, Field(le=999999, strict=True, ge=0)]] = Field(default=None, description="Kód časti obce", alias="kodCastiObce")
    kod_spravniho_obvodu: Optional[Annotated[int, Field(le=999, strict=True, ge=0)]] = Field(default=None, description="Kód správního obvodu Prahy", alias="kodSpravnihoObvodu")
    kod_mestske_casti_obvodu: Optional[Annotated[int, Field(le=999999, strict=True, ge=0)]] = Field(default=None, description="Kód městské části statutárního města", alias="kodMestskeCastiObvodu")
    kod_ulice: Optional[Annotated[int, Field(le=9999999, strict=True, ge=0)]] = Field(default=None, description="Kód ulice, veřejného prostranství ze zdroje", alias="kodUlice")
    cislo_domovni: Optional[Annotated[int, Field(le=9999, strict=True)]] = Field(default=None, description="Číslo domovní", alias="cisloDomovni")
    kod_obce: Optional[Annotated[int, Field(le=999999, strict=True, ge=0)]] = Field(default=None, description="Kód obce", alias="kodObce")
    cislo_orientacni: Optional[Annotated[int, Field(le=999, strict=True)]] = Field(default=None, description="Číslo orientační - číselná část", alias="cisloOrientacni")
    cislo_orientacni_pismeno: Optional[Annotated[str, Field(strict=True, max_length=1)]] = Field(default=None, description="Číslo orientační - písmenná část", alias="cisloOrientacniPismeno")
    textova_adresa: Optional[Annotated[str, Field(strict=True, max_length=1500)]] = Field(default=None, description="Nestrukturovaná adresa", alias="textovaAdresa")
    __properties: ClassVar[List[str]] = ["kodCastiObce", "kodSpravnihoObvodu", "kodMestskeCastiObvodu", "kodUlice", "cisloDomovni", "kodObce", "cisloOrientacni", "cisloOrientacniPismeno", "textovaAdresa"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AdresaFiltr from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AdresaFiltr from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "kodCastiObce": obj.get("kodCastiObce"),
            "kodSpravnihoObvodu": obj.get("kodSpravnihoObvodu"),
            "kodMestskeCastiObvodu": obj.get("kodMestskeCastiObvodu"),
            "kodUlice": obj.get("kodUlice"),
            "cisloDomovni": obj.get("cisloDomovni"),
            "kodObce": obj.get("kodObce"),
            "cisloOrientacni": obj.get("cisloOrientacni"),
            "cisloOrientacniPismeno": obj.get("cisloOrientacniPismeno"),
            "textovaAdresa": obj.get("textovaAdresa")
        })
        return _obj



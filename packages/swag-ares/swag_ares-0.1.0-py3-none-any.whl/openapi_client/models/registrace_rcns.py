# coding: utf-8

"""
    ARES: REST API - veřejné

    REST rozhraní systému ARES

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, Field
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class RegistraceRcns(BaseModel):
    """
    RegistraceRcns
    """ # noqa: E501
    cislo_registrace: Optional[Annotated[str, Field(strict=True, max_length=30)]] = Field(default=None, description="Pro subjekt typu církev a svaz církví je zde uvedeno registrační číslo pod kterým byl daný subjekt zaregistrován na MK. Pro subjekty typu právnická osoba je zde uvedeno evidenční číslo pod kterým byl daný subjekt zaevidován na MK.", alias="cisloRegistrace")
    cislo_zruseni_registrace: Optional[Annotated[str, Field(strict=True, max_length=30)]] = Field(default=None, description="Datum zrušení registrace, evidence subjektu na MK", alias="cisloZruseniRegistrace")
    datum_likvidace: Optional[date] = Field(default=None, description="Datum vyhlášení likvidace subjektu", alias="datumLikvidace")
    datum_konkurzu: Optional[date] = Field(default=None, description="Datum vyhlášení konkurzu subjektu", alias="datumKonkurzu")
    datum_opatrovnik: Optional[date] = Field(default=None, description="Datum jmenování opatrovníka", alias="datumOpatrovnik")
    datum_zruseni_registrace: Optional[date] = Field(default=None, description="Datum zrušení registrace, evidence subjektu na MK", alias="datumZruseniRegistrace")
    __properties: ClassVar[List[str]] = ["cisloRegistrace", "cisloZruseniRegistrace", "datumLikvidace", "datumKonkurzu", "datumOpatrovnik", "datumZruseniRegistrace"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RegistraceRcns from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RegistraceRcns from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cisloRegistrace": obj.get("cisloRegistrace"),
            "cisloZruseniRegistrace": obj.get("cisloZruseniRegistrace"),
            "datumLikvidace": obj.get("datumLikvidace"),
            "datumKonkurzu": obj.get("datumKonkurzu"),
            "datumOpatrovnik": obj.get("datumOpatrovnik"),
            "datumZruseniRegistrace": obj.get("datumZruseniRegistrace")
        })
        return _obj



# coding: utf-8

"""
    ARES: REST API - veřejné

    REST rozhraní systému ARES

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from swag_ares.models.clenstvi_vr import ClenstviVr
from swag_ares.models.funkce_vr import FunkceVr
from typing import Optional, Set
from typing_extensions import Self

class AngazmaClenstviVr(BaseModel):
    """
    Členství v angažmá 
    """ # noqa: E501
    text_za_osobu: Optional[StrictStr] = Field(default=None, description="Doplňující text k osobě", alias="textZaOsobu")
    clenstvi: Optional[ClenstviVr] = None
    funkce: Optional[FunkceVr] = None
    text_zruseni: Optional[StrictStr] = Field(default=None, description="Doplňující text k zrušení  osoby", alias="textZruseni")
    __properties: ClassVar[List[str]] = ["textZaOsobu", "clenstvi", "funkce", "textZruseni"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AngazmaClenstviVr from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of clenstvi
        if self.clenstvi:
            _dict['clenstvi'] = self.clenstvi.to_dict()
        # override the default output from pydantic by calling `to_dict()` of funkce
        if self.funkce:
            _dict['funkce'] = self.funkce.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AngazmaClenstviVr from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "textZaOsobu": obj.get("textZaOsobu"),
            "clenstvi": ClenstviVr.from_dict(obj["clenstvi"]) if obj.get("clenstvi") is not None else None,
            "funkce": FunkceVr.from_dict(obj["funkce"]) if obj.get("funkce") is not None else None,
            "textZruseni": obj.get("textZruseni")
        })
        return _obj



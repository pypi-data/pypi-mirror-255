# coding: utf-8

"""
    ARES: REST API - veřejné

    REST rozhraní systému ARES

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class StatistickeUdaje(BaseModel):
    """
    Statistické informace o subjektu
    """ # noqa: E501
    institucionalni_sektor2010: Optional[Annotated[str, Field(min_length=5, strict=True, max_length=5)]] = Field(default=None, description="Institucinální sektor dle ESA2010 - kód (ciselnikKod: FceVladnichInstituci) ", alias="institucionalniSektor2010")
    kategorie_poctu_pracovniku: Optional[Annotated[str, Field(min_length=3, strict=True, max_length=3)]] = Field(default=None, description="Kategorie dle počtu pracovníků - kód (ciselnikKod: KategoriePoctuPracovniku, zdroj: res) ", alias="kategoriePoctuPracovniku")
    __properties: ClassVar[List[str]] = ["institucionalniSektor2010", "kategoriePoctuPracovniku"]

    @field_validator('institucionalni_sektor2010')
    def institucionalni_sektor2010_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^\d{5}$", value):
            raise ValueError(r"must validate the regular expression /^\d{5}$/")
        return value

    @field_validator('kategorie_poctu_pracovniku')
    def kategorie_poctu_pracovniku_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^\d{3}$", value):
            raise ValueError(r"must validate the regular expression /^\d{3}$/")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of StatistickeUdaje from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of StatistickeUdaje from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "institucionalniSektor2010": obj.get("institucionalniSektor2010"),
            "kategoriePoctuPracovniku": obj.get("kategoriePoctuPracovniku")
        })
        return _obj



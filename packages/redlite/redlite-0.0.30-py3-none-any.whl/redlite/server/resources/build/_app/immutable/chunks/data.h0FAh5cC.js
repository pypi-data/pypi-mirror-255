import{d as p,w as u}from"./entry.ExFGo1fj.js";import{l as w}from"./load.U24AIlaj.js";const i=u(!1),b=(()=>{const{subscribe:d,set:r}=u([]);async function o(){try{i.set(!0);const n=await w();n.sort((m,c)=>new Date(c.completed)-new Date(m.completed)),r(n)}finally{i.set(!1)}}return o(),{subscribe:d,refresh:o}})(),a=d=>`${d.dataset} ${d.data_digest} ${d.metric}`,h=1e-4,_=p(b,(d,r)=>{const o={},n={};for(const e of d)o[e.model]===void 0&&(o[e.model]={model:e.model,inst:{},winRate:0}),o[e.model].inst[a(e)]===void 0&&(o[e.model].inst[a(e)]={data_digest:e.data_digest,dataset:e.dataset,metric:e.metric,runs:[]}),o[e.model].inst[a(e)].runs.push(e),n[a(e)]===void 0&&(n[a(e)]={instHash:a(e),data_digest:e.data_digest,dataset:e.dataset,metric:e.metric,models:{},highestScore:0}),n[a(e)].models[e.model]===void 0&&(n[a(e)].models[e.model]={model:e.model,runs:[],wins:0}),n[a(e)].models[e.model].runs.push(e);for(const e of Object.values(n)){for(const s of Object.values(e.models))s.runs.sort((l,f)=>new Date(f.completed)-new Date(l.completed)),s.completed=s.runs[0].completed,s.score_summary=s.runs[0].score_summary;const t=Math.max(...Object.values(e.models).map(s=>s.score_summary.mean));e.highestScore=t;for(const s of Object.values(e.models))Math.abs(s.score_summary.mean-t)<h&&(s.wins+=1,o[s.model].winRate+=1)}for(const e of Object.values(o)){for(const t of Object.values(e.inst))t.runs.sort((s,l)=>new Date(l.completed)-new Date(s.completed)),t.completed=t.runs[0].completed,t.score_summary=t.runs[0].score_summary;e.winRate/=Object.keys(n).length}const m=[...Object.values(o)];m.sort((e,t)=>t.winRate-e.winRate);const c=[...Object.values(n)];c.sort((e,t)=>new Date(t.completed)-new Date(e.completed)),r({models:m,instances:c})},{models:[],instances:[]});export{_ as a,i as l,b as r};

name: Release
on:
  push:
    tags:
      - "*"

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      APPNAME: ${{ steps.get_appname.outputs.APPNAME }}
      VERSION: ${{ steps.get_version.outputs.VERSION }}
    steps:
      - name: Get app name
        id: get_appname
        run: echo ::set-output name=APPNAME::${{ github.event.repository.name }}
      - name: Get version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}

  create-release:
    needs:
      - setup
    name: Create Relase
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.setup.outputs.VERSION }}
          release_name: Release ${{ needs.setup.outputs.VERSION }}
          draft: true
          prerelease: false

  windows:
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]

    needs: [setup, create-release]

    runs-on: windows-latest
    env:
      PACKAGENAME: ${{ needs.setup.outputs.APPNAME }}-${{ needs.setup.outputs.VERSION }}-windows
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - uses: ilammy/msvc-dev-cmd@v1
      - name: cache-vulkansdk
        id: cache-vulkansdk
        uses: actions/cache@v1
        with:
          path: "VulkanSDK"
          key: VulkanSDK-1.3.275.0-Installer
      - name: vulkansdk
        if: steps.cache-vulkansdk.outputs.cache-hit != 'true'
        run: |
          Invoke-WebRequest -Uri https://sdk.lunarg.com/sdk/download/1.3.275.0/windows/VulkanSDK-1.3.275.0-Installer.exe?Human=true -OutFile VulkanSDK-1.3.275.0-Installer.exe
          7z x -aoa ./VulkanSDK-1.3.275.0-Installer.exe -oVulkanSDK
          Remove-Item .\VulkanSDK\Demos, .\VulkanSDK\Samples, .\VulkanSDK\Third-Party, .\VulkanSDK\Tools, .\VulkanSDK\Tools32, .\VulkanSDK\Bin32, .\VulkanSDK\Lib32 -Recurse -ErrorAction Ignore
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
          architecture: x64
      - name: Check Python version
        run: |
          python --version
      - name: Install dependencies
        run: |
          pip install build
      - name: Build
        run: |
          $env:VULKAN_SDK="$(pwd)\VulkanSDK"
          $env:CMAKE_FLAGS="-DPY_VERSION=${{ matrix.python-version }}"
          python -m build -w .
      - name: Package
        run: |
          mkdir ${{ env.PACKAGENAME }}
          Copy-Item -Verbose -Path "README.md" -Destination "${{ env.PACKAGENAME }}"
          Copy-Item -Verbose -Path "LICENSE" -Destination "${{ env.PACKAGENAME }}"
          Copy-Item -Verbose -Recurse -Path dist\* -Destination "${{ env.PACKAGENAME }}"
          7z a -r ${{ env.PACKAGENAME }}_${{ matrix.python-version }}.zip ${{ env.PACKAGENAME }}
      - name: Upload
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ env.PACKAGENAME }}_${{ matrix.python-version }}.zip
          asset_name: ${{ env.PACKAGENAME }}_${{ matrix.python-version }}.zip
          asset_content_type: application/zip

Metadata-Version: 2.1
Name: ClassJsonMapper
Version: 0.1b1
Summary: ClassJsonMapper 是一个易于使用的Python库，旨在简化JSON数据与类对象之间的映射和转换过程。通过自定义类方法，它使得处理JSON文件变得直观、安全且高效。
Home-page: https://github.com/PYmili/ClassJsonMapper
Author: PYmili
Author-email: mc2005wj@163.com
License: MIT
Keywords: json,mapping,data serialization,object mapping
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Description-Content-Type: text/markdown
License-File: LICENSE

当然可以，以下是一个示例的GitHub项目简介：

---

# ClassJsonMapper

[![GitHub license](https://img.shields.io/github/license/pymili/ClassJsonMapper)](LICENSE)
[![PyPI version](https://img.shields.io/pypi/v/classjsonmapper)](https://pypi.org/project/classjsonmapper/)
[![Documentation](https://readthedocs.org/projects/classjsonmapper/badge/?version=latest)](https://classjsonmapper.readthedocs.io/en/latest/)

**ClassJsonMapper** 是一个易于使用的Python库，旨在简化JSON数据与类对象之间的映射和转换过程。通过自定义类方法，它使得处理JSON文件变得直观、安全且高效。

### 特性
- **自动映射**：将JSON数据直接加载到自定义类实例中，并支持反向转换为JSON格式。
- **类型检查**：在解析和序列化过程中提供严格的类型检查，确保数据一致性。
- **错误处理**：封装了自定义异常类型，如`FilePathError`和`JsonFileError`，用于清晰地报告可能遇到的问题。
- **灵活性**：支持多种模式打开文件，以及创建不存在的文件功能。可以通过表达式，快速查询或更改json数据。
- **上下文管理器支持**：通过 `with` 语句轻松实现资源的自动管理和清理。

### 安装
```bash
pip install classjsonmapper
```

### 快速开始
```python
import time
import ClassJsonMapper


start = time.time()
with ClassJsonMapper.Mapper("test.json") as mapper:
    # print(mapper.read())
    # print(mapper.get("name"))
    # print(mapper.get("age"))
    # print(mapper.get("dict"))
    # print(mapper.get("dict.1"))
    # print(mapper.get("list"))
    # print(mapper.get("list.0"))
    # print(mapper.get("list.[0:2]"))
    # print(mapper.get("list")[0:2])
    print(mapper.set("age", 19))
    print(mapper.set("dict.1", "Python"))
    print(mapper.set("list.6.0.1", "Python!"))
    print(mapper.set("list.6.0.2", "Python!"))

    # print(mapper.get("wapPopAdvert.url"))
    # print(mapper.get("wapPopAdvert.background"))
    # print(mapper.get("topicData"))

    mapper.write()
end = time.time()
print(f"耗时: {end - start}")
```

访问官方文档以获取详细信息和更多使用示例：
https://?????

欢迎贡献代码、提出问题或提交建议，共同优化和完善此库！

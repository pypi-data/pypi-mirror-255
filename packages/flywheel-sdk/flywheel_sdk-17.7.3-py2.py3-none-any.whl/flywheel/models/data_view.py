# coding: utf-8

"""
    Flywheel

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


## NOTE: This file is auto generated by the swagger code generator program.
## Do not edit the file manually.

import pprint
import re  # noqa: F401
import six

from flywheel.models.data_view_column_spec import DataViewColumnSpec  # noqa: F401,E501
from flywheel.models.data_view_file_spec import DataViewFileSpec  # noqa: F401,E501
from flywheel.models.data_view_group_by import DataViewGroupBy  # noqa: F401,E501

class DataView(object):

    swagger_types = {
        'parent': 'str',
        'label': 'str',
        'description': 'str',
        'columns': 'list[DataViewColumnSpec]',
        'group_by': 'DataViewGroupBy',
        'filter': 'str',
        'file_spec': 'DataViewFileSpec',
        'include_ids': 'bool',
        'include_labels': 'bool',
        'error_column': 'bool',
        'missing_data_strategy': 'str',
        'sort': 'bool'
    }

    attribute_map = {
        'parent': 'parent',
        'label': 'label',
        'description': 'description',
        'columns': 'columns',
        'group_by': 'groupBy',
        'filter': 'filter',
        'file_spec': 'fileSpec',
        'include_ids': 'includeIds',
        'include_labels': 'includeLabels',
        'error_column': 'errorColumn',
        'missing_data_strategy': 'missingDataStrategy',
        'sort': 'sort'
    }

    rattribute_map = {
        'parent': 'parent',
        'label': 'label',
        'description': 'description',
        'columns': 'columns',
        'groupBy': 'group_by',
        'filter': 'filter',
        'fileSpec': 'file_spec',
        'includeIds': 'include_ids',
        'includeLabels': 'include_labels',
        'errorColumn': 'error_column',
        'missingDataStrategy': 'missing_data_strategy',
        'sort': 'sort'
    }

    def __init__(self, parent=None, label=None, description=None, columns=None, group_by=None, filter=None, file_spec=None, include_ids=None, include_labels=None, error_column=None, missing_data_strategy=None, sort=None):  # noqa: E501
        """DataView - a model defined in Swagger"""
        super(DataView, self).__init__()

        self._parent = None
        self._label = None
        self._description = None
        self._columns = None
        self._group_by = None
        self._filter = None
        self._file_spec = None
        self._include_ids = None
        self._include_labels = None
        self._error_column = None
        self._missing_data_strategy = None
        self._sort = None
        self.discriminator = None
        self.alt_discriminator = None

        if parent is not None:
            self.parent = parent
        if label is not None:
            self.label = label
        if description is not None:
            self.description = description
        if columns is not None:
            self.columns = columns
        if group_by is not None:
            self.group_by = group_by
        if filter is not None:
            self.filter = filter
        if file_spec is not None:
            self.file_spec = file_spec
        if include_ids is not None:
            self.include_ids = include_ids
        if include_labels is not None:
            self.include_labels = include_labels
        if error_column is not None:
            self.error_column = error_column
        if missing_data_strategy is not None:
            self.missing_data_strategy = missing_data_strategy
        if sort is not None:
            self.sort = sort

    @property
    def parent(self):
        """Gets the parent of this DataView.

        The parent container id

        :return: The parent of this DataView.
        :rtype: str
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this DataView.

        The parent container id

        :param parent: The parent of this DataView.  # noqa: E501
        :type: str
        """

        self._parent = parent

    @property
    def label(self):
        """Gets the label of this DataView.

        Application-specific label

        :return: The label of this DataView.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this DataView.

        Application-specific label

        :param label: The label of this DataView.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def description(self):
        """Gets the description of this DataView.


        :return: The description of this DataView.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DataView.


        :param description: The description of this DataView.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def columns(self):
        """Gets the columns of this DataView.


        :return: The columns of this DataView.
        :rtype: list[DataViewColumnSpec]
        """
        return self._columns

    @columns.setter
    def columns(self, columns):
        """Sets the columns of this DataView.


        :param columns: The columns of this DataView.  # noqa: E501
        :type: list[DataViewColumnSpec]
        """

        self._columns = columns

    @property
    def group_by(self):
        """Gets the group_by of this DataView.


        :return: The group_by of this DataView.
        :rtype: DataViewGroupBy
        """
        return self._group_by

    @group_by.setter
    def group_by(self, group_by):
        """Sets the group_by of this DataView.


        :param group_by: The group_by of this DataView.  # noqa: E501
        :type: DataViewGroupBy
        """

        self._group_by = group_by

    @property
    def filter(self):
        """Gets the filter of this DataView.

        An optional row filter

        :return: The filter of this DataView.
        :rtype: str
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this DataView.

        An optional row filter

        :param filter: The filter of this DataView.  # noqa: E501
        :type: str
        """

        self._filter = filter

    @property
    def file_spec(self):
        """Gets the file_spec of this DataView.


        :return: The file_spec of this DataView.
        :rtype: DataViewFileSpec
        """
        return self._file_spec

    @file_spec.setter
    def file_spec(self, file_spec):
        """Sets the file_spec of this DataView.


        :param file_spec: The file_spec of this DataView.  # noqa: E501
        :type: DataViewFileSpec
        """

        self._file_spec = file_spec

    @property
    def include_ids(self):
        """Gets the include_ids of this DataView.

        Whether or not to include container id fields. Default is true

        :return: The include_ids of this DataView.
        :rtype: bool
        """
        return self._include_ids

    @include_ids.setter
    def include_ids(self, include_ids):
        """Sets the include_ids of this DataView.

        Whether or not to include container id fields. Default is true

        :param include_ids: The include_ids of this DataView.  # noqa: E501
        :type: bool
        """

        self._include_ids = include_ids

    @property
    def include_labels(self):
        """Gets the include_labels of this DataView.

        Whether or not to include container label fields. Default is true

        :return: The include_labels of this DataView.
        :rtype: bool
        """
        return self._include_labels

    @include_labels.setter
    def include_labels(self, include_labels):
        """Sets the include_labels of this DataView.

        Whether or not to include container label fields. Default is true

        :param include_labels: The include_labels of this DataView.  # noqa: E501
        :type: bool
        """

        self._include_labels = include_labels

    @property
    def error_column(self):
        """Gets the error_column of this DataView.

        Whether or not to include errors column. Default is true

        :return: The error_column of this DataView.
        :rtype: bool
        """
        return self._error_column

    @error_column.setter
    def error_column(self, error_column):
        """Sets the error_column of this DataView.

        Whether or not to include errors column. Default is true

        :param error_column: The error_column of this DataView.  # noqa: E501
        :type: bool
        """

        self._error_column = error_column

    @property
    def missing_data_strategy(self):
        """Gets the missing_data_strategy of this DataView.

        The resolution strategy if rows are missing data for a column. The default is to replace the column value with None. This value can be one of: none, drop-row.

        :return: The missing_data_strategy of this DataView.
        :rtype: str
        """
        return self._missing_data_strategy

    @missing_data_strategy.setter
    def missing_data_strategy(self, missing_data_strategy):
        """Sets the missing_data_strategy of this DataView.

        The resolution strategy if rows are missing data for a column. The default is to replace the column value with None. This value can be one of: none, drop-row.

        :param missing_data_strategy: The missing_data_strategy of this DataView.  # noqa: E501
        :type: str
        """

        self._missing_data_strategy = missing_data_strategy

    @property
    def sort(self):
        """Gets the sort of this DataView.

        Opt out of sorting results by setting value to false

        :return: The sort of this DataView.
        :rtype: bool
        """
        return self._sort

    @sort.setter
    def sort(self, sort):
        """Sets the sort of this DataView.

        Opt out of sorting results by setting value to false

        :param sort: The sort of this DataView.  # noqa: E501
        :type: bool
        """

        self._sort = sort


    @staticmethod
    def positional_to_model(value):
        """Converts a positional argument to a model value"""
        return value

    def return_value(self):
        """Unwraps return value from model"""
        return self

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataView):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

    # Container emulation
    def __getitem__(self, key):
        """Returns the value of key"""
        key = self._map_key(key)
        return getattr(self, key)

    def __setitem__(self, key, value):
        """Sets the value of key"""
        key = self._map_key(key)
        setattr(self, key, value)

    def __contains__(self, key):
        """Checks if the given value is a key in this object"""
        key = self._map_key(key, raise_on_error=False)
        return key is not None

    def keys(self):
        """Returns the list of json properties in the object"""
        return self.__class__.rattribute_map.keys()

    def values(self):
        """Returns the list of values in the object"""
        for key in self.__class__.attribute_map.keys():
            yield getattr(self, key)

    def items(self):
        """Returns the list of json property to value mapping"""
        for key, prop in self.__class__.rattribute_map.items():
            yield key, getattr(self, prop)

    def get(self, key, default=None):
        """Get the value of the provided json property, or default"""
        key = self._map_key(key, raise_on_error=False)
        if key:
            return getattr(self, key, default)
        return default

    def _map_key(self, key, raise_on_error=True):
        result = self.__class__.rattribute_map.get(key)
        if result is None:
            if raise_on_error:
                raise AttributeError('Invalid attribute name: {}'.format(key))
            return None
        return '_' + result

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        (unknown)
// source: flyteidl/admin/signal.proto

package admin

import (
	core "github.com/flyteorg/flyte/flyteidl/gen/pb-go/flyteidl/core"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// SignalGetOrCreateRequest represents a request structure to retrieve or create a signal.
// See :ref:`ref_flyteidl.admin.Signal` for more details
type SignalGetOrCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A unique identifier for the requested signal.
	Id *core.SignalIdentifier `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// A type denoting the required value type for this signal.
	Type *core.LiteralType `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *SignalGetOrCreateRequest) Reset() {
	*x = SignalGetOrCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl_admin_signal_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignalGetOrCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalGetOrCreateRequest) ProtoMessage() {}

func (x *SignalGetOrCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl_admin_signal_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalGetOrCreateRequest.ProtoReflect.Descriptor instead.
func (*SignalGetOrCreateRequest) Descriptor() ([]byte, []int) {
	return file_flyteidl_admin_signal_proto_rawDescGZIP(), []int{0}
}

func (x *SignalGetOrCreateRequest) GetId() *core.SignalIdentifier {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SignalGetOrCreateRequest) GetType() *core.LiteralType {
	if x != nil {
		return x.Type
	}
	return nil
}

// SignalListRequest represents a request structure to retrieve a collection of signals.
// See :ref:`ref_flyteidl.admin.Signal` for more details
type SignalListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Indicates the workflow execution to filter by.
	// +required
	WorkflowExecutionId *core.WorkflowExecutionIdentifier `protobuf:"bytes,1,opt,name=workflow_execution_id,json=workflowExecutionId,proto3" json:"workflow_execution_id,omitempty"`
	// Indicates the number of resources to be returned.
	// +required
	Limit uint32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	// In the case of multiple pages of results, the, server-provided token can be used to fetch the next page
	// in a query.
	// +optional
	Token string `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
	// Indicates a list of filters passed as string.
	// +optional
	Filters string `protobuf:"bytes,4,opt,name=filters,proto3" json:"filters,omitempty"`
	// Sort ordering.
	// +optional
	SortBy *Sort `protobuf:"bytes,5,opt,name=sort_by,json=sortBy,proto3" json:"sort_by,omitempty"`
}

func (x *SignalListRequest) Reset() {
	*x = SignalListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl_admin_signal_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignalListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalListRequest) ProtoMessage() {}

func (x *SignalListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl_admin_signal_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalListRequest.ProtoReflect.Descriptor instead.
func (*SignalListRequest) Descriptor() ([]byte, []int) {
	return file_flyteidl_admin_signal_proto_rawDescGZIP(), []int{1}
}

func (x *SignalListRequest) GetWorkflowExecutionId() *core.WorkflowExecutionIdentifier {
	if x != nil {
		return x.WorkflowExecutionId
	}
	return nil
}

func (x *SignalListRequest) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *SignalListRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *SignalListRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *SignalListRequest) GetSortBy() *Sort {
	if x != nil {
		return x.SortBy
	}
	return nil
}

// SignalList represents collection of signals along with the token of the last result.
// See :ref:`ref_flyteidl.admin.Signal` for more details
type SignalList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of signals matching the input filters.
	Signals []*Signal `protobuf:"bytes,1,rep,name=signals,proto3" json:"signals,omitempty"`
	// In the case of multiple pages of results, the server-provided token can be used to fetch the next page
	// in a query. If there are no more results, this value will be empty.
	Token string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *SignalList) Reset() {
	*x = SignalList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl_admin_signal_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignalList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalList) ProtoMessage() {}

func (x *SignalList) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl_admin_signal_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalList.ProtoReflect.Descriptor instead.
func (*SignalList) Descriptor() ([]byte, []int) {
	return file_flyteidl_admin_signal_proto_rawDescGZIP(), []int{2}
}

func (x *SignalList) GetSignals() []*Signal {
	if x != nil {
		return x.Signals
	}
	return nil
}

func (x *SignalList) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

// SignalSetRequest represents a request structure to set the value on a signal. Setting a signal
// effetively satisfies the signal condition within a Flyte workflow.
// See :ref:`ref_flyteidl.admin.Signal` for more details
type SignalSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A unique identifier for the requested signal.
	Id *core.SignalIdentifier `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The value of this signal, must match the defining signal type.
	Value *core.Literal `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *SignalSetRequest) Reset() {
	*x = SignalSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl_admin_signal_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignalSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalSetRequest) ProtoMessage() {}

func (x *SignalSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl_admin_signal_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalSetRequest.ProtoReflect.Descriptor instead.
func (*SignalSetRequest) Descriptor() ([]byte, []int) {
	return file_flyteidl_admin_signal_proto_rawDescGZIP(), []int{3}
}

func (x *SignalSetRequest) GetId() *core.SignalIdentifier {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SignalSetRequest) GetValue() *core.Literal {
	if x != nil {
		return x.Value
	}
	return nil
}

// SignalSetResponse represents a response structure if signal setting succeeds.
type SignalSetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SignalSetResponse) Reset() {
	*x = SignalSetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl_admin_signal_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignalSetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalSetResponse) ProtoMessage() {}

func (x *SignalSetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl_admin_signal_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalSetResponse.ProtoReflect.Descriptor instead.
func (*SignalSetResponse) Descriptor() ([]byte, []int) {
	return file_flyteidl_admin_signal_proto_rawDescGZIP(), []int{4}
}

// Signal encapsulates a unique identifier, associated metadata, and a value for a single Flyte
// signal. Signals may exist either without a set value (representing a signal request) or with a
// populated value (indicating the signal has been given).
type Signal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A unique identifier for the requested signal.
	Id *core.SignalIdentifier `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// A type denoting the required value type for this signal.
	Type *core.LiteralType `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	// The value of the signal. This is only available if the signal has been "set" and must match
	// the defined the type.
	Value *core.Literal `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Signal) Reset() {
	*x = Signal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl_admin_signal_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Signal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Signal) ProtoMessage() {}

func (x *Signal) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl_admin_signal_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Signal.ProtoReflect.Descriptor instead.
func (*Signal) Descriptor() ([]byte, []int) {
	return file_flyteidl_admin_signal_proto_rawDescGZIP(), []int{5}
}

func (x *Signal) GetId() *core.SignalIdentifier {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Signal) GetType() *core.LiteralType {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Signal) GetValue() *core.Literal {
	if x != nil {
		return x.Value
	}
	return nil
}

var File_flyteidl_admin_signal_proto protoreflect.FileDescriptor

var file_flyteidl_admin_signal_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x66,
	0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x1a, 0x1b, 0x66,
	0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x66, 0x6c, 0x79, 0x74,
	0x65, 0x69, 0x64, 0x6c, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x66, 0x6c, 0x79, 0x74,
	0x65, 0x69, 0x64, 0x6c, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x6c, 0x69, 0x74, 0x65, 0x72, 0x61,
	0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69,
	0x64, 0x6c, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x7b, 0x0a, 0x18, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x47, 0x65, 0x74,
	0x4f, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2f, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x66, 0x6c,
	0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x2e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4c,
	0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x22, 0xe8, 0x01, 0x0a, 0x11, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5e, 0x0a, 0x15, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x52, 0x13, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x2d, 0x0a, 0x07,
	0x73, 0x6f, 0x72, 0x74, 0x5f, 0x62, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x53,
	0x6f, 0x72, 0x74, 0x52, 0x06, 0x73, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x22, 0x54, 0x0a, 0x0a, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x07, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x66, 0x6c, 0x79,
	0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x6c, 0x52, 0x07, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x22, 0x71, 0x0a, 0x10, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x13, 0x0a, 0x11, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x53, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x97, 0x01, 0x0a, 0x06, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x6c, 0x12, 0x2f, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0xb7, 0x01, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x2e, 0x66, 0x6c, 0x79, 0x74,
	0x65, 0x69, 0x64, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x42, 0x0b, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x3b, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x6c, 0x79, 0x74, 0x65, 0x2f, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2f, 0x67, 0x65,
	0x6e, 0x2f, 0x70, 0x62, 0x2d, 0x67, 0x6f, 0x2f, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c,
	0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0xa2, 0x02, 0x03, 0x46, 0x41, 0x58, 0xaa, 0x02, 0x0e, 0x46,
	0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0xca, 0x02, 0x0e,
	0x46, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x5c, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0xe2, 0x02,
	0x1a, 0x46, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x5c, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x5c,
	0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0f, 0x46, 0x6c,
	0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x3a, 0x3a, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_flyteidl_admin_signal_proto_rawDescOnce sync.Once
	file_flyteidl_admin_signal_proto_rawDescData = file_flyteidl_admin_signal_proto_rawDesc
)

func file_flyteidl_admin_signal_proto_rawDescGZIP() []byte {
	file_flyteidl_admin_signal_proto_rawDescOnce.Do(func() {
		file_flyteidl_admin_signal_proto_rawDescData = protoimpl.X.CompressGZIP(file_flyteidl_admin_signal_proto_rawDescData)
	})
	return file_flyteidl_admin_signal_proto_rawDescData
}

var file_flyteidl_admin_signal_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_flyteidl_admin_signal_proto_goTypes = []interface{}{
	(*SignalGetOrCreateRequest)(nil),         // 0: flyteidl.admin.SignalGetOrCreateRequest
	(*SignalListRequest)(nil),                // 1: flyteidl.admin.SignalListRequest
	(*SignalList)(nil),                       // 2: flyteidl.admin.SignalList
	(*SignalSetRequest)(nil),                 // 3: flyteidl.admin.SignalSetRequest
	(*SignalSetResponse)(nil),                // 4: flyteidl.admin.SignalSetResponse
	(*Signal)(nil),                           // 5: flyteidl.admin.Signal
	(*core.SignalIdentifier)(nil),            // 6: flyteidl.core.SignalIdentifier
	(*core.LiteralType)(nil),                 // 7: flyteidl.core.LiteralType
	(*core.WorkflowExecutionIdentifier)(nil), // 8: flyteidl.core.WorkflowExecutionIdentifier
	(*Sort)(nil),                             // 9: flyteidl.admin.Sort
	(*core.Literal)(nil),                     // 10: flyteidl.core.Literal
}
var file_flyteidl_admin_signal_proto_depIdxs = []int32{
	6,  // 0: flyteidl.admin.SignalGetOrCreateRequest.id:type_name -> flyteidl.core.SignalIdentifier
	7,  // 1: flyteidl.admin.SignalGetOrCreateRequest.type:type_name -> flyteidl.core.LiteralType
	8,  // 2: flyteidl.admin.SignalListRequest.workflow_execution_id:type_name -> flyteidl.core.WorkflowExecutionIdentifier
	9,  // 3: flyteidl.admin.SignalListRequest.sort_by:type_name -> flyteidl.admin.Sort
	5,  // 4: flyteidl.admin.SignalList.signals:type_name -> flyteidl.admin.Signal
	6,  // 5: flyteidl.admin.SignalSetRequest.id:type_name -> flyteidl.core.SignalIdentifier
	10, // 6: flyteidl.admin.SignalSetRequest.value:type_name -> flyteidl.core.Literal
	6,  // 7: flyteidl.admin.Signal.id:type_name -> flyteidl.core.SignalIdentifier
	7,  // 8: flyteidl.admin.Signal.type:type_name -> flyteidl.core.LiteralType
	10, // 9: flyteidl.admin.Signal.value:type_name -> flyteidl.core.Literal
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_flyteidl_admin_signal_proto_init() }
func file_flyteidl_admin_signal_proto_init() {
	if File_flyteidl_admin_signal_proto != nil {
		return
	}
	file_flyteidl_admin_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_flyteidl_admin_signal_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignalGetOrCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl_admin_signal_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignalListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl_admin_signal_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignalList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl_admin_signal_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignalSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl_admin_signal_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignalSetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl_admin_signal_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Signal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_flyteidl_admin_signal_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_flyteidl_admin_signal_proto_goTypes,
		DependencyIndexes: file_flyteidl_admin_signal_proto_depIdxs,
		MessageInfos:      file_flyteidl_admin_signal_proto_msgTypes,
	}.Build()
	File_flyteidl_admin_signal_proto = out.File
	file_flyteidl_admin_signal_proto_rawDesc = nil
	file_flyteidl_admin_signal_proto_goTypes = nil
	file_flyteidl_admin_signal_proto_depIdxs = nil
}

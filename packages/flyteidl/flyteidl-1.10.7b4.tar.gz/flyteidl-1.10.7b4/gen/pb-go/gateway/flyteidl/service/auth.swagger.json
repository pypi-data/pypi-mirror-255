{
  "swagger": "2.0",
  "info": {
    "title": "flyteidl/service/auth.proto",
    "version": "version not set"
  },
  "tags": [
    {
      "name": "AuthMetadataService"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/.well-known/oauth-authorization-server": {
      "get": {
        "summary": "Anonymously accessible. Retrieves local or external oauth authorization server metadata.",
        "description": "Retrieves OAuth2 authorization server metadata. This endpoint is anonymously accessible.",
        "operationId": "AuthMetadataService_GetOAuth2Metadata",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/serviceOAuth2MetadataResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "AuthMetadataService"
        ]
      }
    },
    "/config/v1/flyte_client": {
      "get": {
        "summary": "Anonymously accessible. Retrieves the client information clients should use when initiating OAuth2 authorization\nrequests.",
        "description": "Retrieves public flyte client info. This endpoint is anonymously accessible.",
        "operationId": "AuthMetadataService_GetPublicClientConfig",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/servicePublicClientAuthConfigResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "AuthMetadataService"
        ]
      }
    }
  },
  "definitions": {
    "googlerpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string",
          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com. As of May 2023, there are no widely used type server\nimplementations and no plans to implement one.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
        }
      },
      "additionalProperties": {},
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := \u0026pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n====\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
    },
    "serviceOAuth2MetadataResponse": {
      "type": "object",
      "properties": {
        "issuer": {
          "type": "string",
          "description": "Defines the issuer string in all JWT tokens this server issues. The issuer can be admin itself or an external\nissuer."
        },
        "authorization_endpoint": {
          "type": "string",
          "description": "URL of the authorization server's authorization endpoint [RFC6749]. This is REQUIRED unless no grant types are\nsupported that use the authorization endpoint."
        },
        "token_endpoint": {
          "type": "string",
          "description": "URL of the authorization server's token endpoint [RFC6749]."
        },
        "response_types_supported": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Array containing a list of the OAuth 2.0 response_type values that this authorization server supports."
        },
        "scopes_supported": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "JSON array containing a list of the OAuth 2.0 [RFC6749] scope values that this authorization server supports."
        },
        "token_endpoint_auth_methods_supported": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "JSON array containing a list of client authentication methods supported by this token endpoint."
        },
        "jwks_uri": {
          "type": "string",
          "description": "URL of the authorization server's JWK Set [JWK] document. The referenced document contains the signing key(s) the\nclient uses to validate signatures from the authorization server."
        },
        "code_challenge_methods_supported": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "JSON array containing a list of Proof Key for Code Exchange (PKCE) [RFC7636] code challenge methods supported by\nthis authorization server."
        },
        "grant_types_supported": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "JSON array containing a list of the OAuth 2.0 grant type values that this authorization server supports."
        },
        "device_authorization_endpoint": {
          "type": "string",
          "title": "URL of the authorization server's device authorization endpoint, as defined in Section 3.1 of [RFC8628]"
        }
      },
      "title": "OAuth2MetadataResponse defines an RFC-Compliant response for /.well-known/oauth-authorization-server metadata\nas defined in https://tools.ietf.org/html/rfc8414"
    },
    "servicePublicClientAuthConfigResponse": {
      "type": "object",
      "properties": {
        "client_id": {
          "type": "string",
          "description": "client_id to use when initiating OAuth2 authorization requests."
        },
        "redirect_uri": {
          "type": "string",
          "description": "redirect uri to use when initiating OAuth2 authorization requests."
        },
        "scopes": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "scopes to request when initiating OAuth2 authorization requests."
        },
        "authorization_metadata_key": {
          "type": "string",
          "description": "Authorization Header to use when passing Access Tokens to the server. If not provided, the client should use the\ndefault http `Authorization` header."
        },
        "service_http_endpoint": {
          "type": "string",
          "description": "ServiceHttpEndpoint points to the http endpoint for the backend. If empty, clients can assume the endpoint used\nto configure the gRPC connection can be used for the http one respecting the insecure flag to choose between\nSSL or no SSL connections."
        },
        "audience": {
          "type": "string",
          "description": "audience to use when initiating OAuth2 authorization requests."
        }
      },
      "description": "FlyteClientResponse encapsulates public information that flyte clients (CLIs... etc.) can use to authenticate users."
    }
  }
}

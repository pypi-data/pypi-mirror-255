// @generated by protoc-gen-es v1.7.2 with parameter "target=ts"
// @generated from file flyteidl/plugins/presto.proto (package flyteidl.plugins, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * This message works with the 'presto' task type in the SDK and is the object that will be in the 'custom' field
 * of a Presto task's TaskTemplate
 *
 * @generated from message flyteidl.plugins.PrestoQuery
 */
export class PrestoQuery extends Message<PrestoQuery> {
  /**
   * @generated from field: string routing_group = 1;
   */
  routingGroup = "";

  /**
   * @generated from field: string catalog = 2;
   */
  catalog = "";

  /**
   * @generated from field: string schema = 3;
   */
  schema = "";

  /**
   * @generated from field: string statement = 4;
   */
  statement = "";

  constructor(data?: PartialMessage<PrestoQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flyteidl.plugins.PrestoQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "routing_group", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "catalog", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "schema", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "statement", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PrestoQuery {
    return new PrestoQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PrestoQuery {
    return new PrestoQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PrestoQuery {
    return new PrestoQuery().fromJsonString(jsonString, options);
  }

  static equals(a: PrestoQuery | PlainMessage<PrestoQuery> | undefined, b: PrestoQuery | PlainMessage<PrestoQuery> | undefined): boolean {
    return proto3.util.equals(PrestoQuery, a, b);
  }
}


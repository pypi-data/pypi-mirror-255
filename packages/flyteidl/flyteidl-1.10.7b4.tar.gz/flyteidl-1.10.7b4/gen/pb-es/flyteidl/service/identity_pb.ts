// @generated by protoc-gen-es v1.7.2 with parameter "target=ts"
// @generated from file flyteidl/service/identity.proto (package flyteidl.service, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Struct } from "@bufbuild/protobuf";

/**
 * @generated from message flyteidl.service.UserInfoRequest
 */
export class UserInfoRequest extends Message<UserInfoRequest> {
  constructor(data?: PartialMessage<UserInfoRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flyteidl.service.UserInfoRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserInfoRequest {
    return new UserInfoRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserInfoRequest {
    return new UserInfoRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserInfoRequest {
    return new UserInfoRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UserInfoRequest | PlainMessage<UserInfoRequest> | undefined, b: UserInfoRequest | PlainMessage<UserInfoRequest> | undefined): boolean {
    return proto3.util.equals(UserInfoRequest, a, b);
  }
}

/**
 * See the OpenID Connect spec at https://openid.net/specs/openid-connect-core-1_0.html#UserInfoResponse for more information.
 *
 * @generated from message flyteidl.service.UserInfoResponse
 */
export class UserInfoResponse extends Message<UserInfoResponse> {
  /**
   * Locally unique and never reassigned identifier within the Issuer for the End-User, which is intended to be consumed
   * by the Client.
   *
   * @generated from field: string subject = 1;
   */
  subject = "";

  /**
   * Full name
   *
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * Shorthand name by which the End-User wishes to be referred to
   *
   * @generated from field: string preferred_username = 3;
   */
  preferredUsername = "";

  /**
   * Given name(s) or first name(s)
   *
   * @generated from field: string given_name = 4;
   */
  givenName = "";

  /**
   * Surname(s) or last name(s)
   *
   * @generated from field: string family_name = 5;
   */
  familyName = "";

  /**
   * Preferred e-mail address
   *
   * @generated from field: string email = 6;
   */
  email = "";

  /**
   * Profile picture URL
   *
   * @generated from field: string picture = 7;
   */
  picture = "";

  /**
   * Additional claims
   *
   * @generated from field: google.protobuf.Struct additional_claims = 8;
   */
  additionalClaims?: Struct;

  constructor(data?: PartialMessage<UserInfoResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flyteidl.service.UserInfoResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "subject", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "preferred_username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "given_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "family_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "picture", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "additional_claims", kind: "message", T: Struct },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserInfoResponse {
    return new UserInfoResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserInfoResponse {
    return new UserInfoResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserInfoResponse {
    return new UserInfoResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UserInfoResponse | PlainMessage<UserInfoResponse> | undefined, b: UserInfoResponse | PlainMessage<UserInfoResponse> | undefined): boolean {
    return proto3.util.equals(UserInfoResponse, a, b);
  }
}


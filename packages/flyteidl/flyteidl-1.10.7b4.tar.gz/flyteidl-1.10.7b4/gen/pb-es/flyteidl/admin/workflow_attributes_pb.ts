// @generated by protoc-gen-es v1.7.2 with parameter "target=ts"
// @generated from file flyteidl/admin/workflow_attributes.proto (package flyteidl.admin, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { MatchableResource, MatchingAttributes } from "./matchable_resource_pb.js";

/**
 * Defines a set of custom matching attributes which defines resource defaults for a project, domain and workflow.
 * For more info on matchable attributes, see :ref:`ref_flyteidl.admin.MatchableAttributesConfiguration`
 *
 * @generated from message flyteidl.admin.WorkflowAttributes
 */
export class WorkflowAttributes extends Message<WorkflowAttributes> {
  /**
   * Unique project id for which this set of attributes will be applied.
   *
   * @generated from field: string project = 1;
   */
  project = "";

  /**
   * Unique domain id for which this set of attributes will be applied.
   *
   * @generated from field: string domain = 2;
   */
  domain = "";

  /**
   * Workflow name for which this set of attributes will be applied.
   *
   * @generated from field: string workflow = 3;
   */
  workflow = "";

  /**
   * @generated from field: flyteidl.admin.MatchingAttributes matching_attributes = 4;
   */
  matchingAttributes?: MatchingAttributes;

  /**
   * Optional, org key applied to the attributes.
   *
   * @generated from field: string org = 5;
   */
  org = "";

  constructor(data?: PartialMessage<WorkflowAttributes>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flyteidl.admin.WorkflowAttributes";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "domain", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "workflow", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "matching_attributes", kind: "message", T: MatchingAttributes },
    { no: 5, name: "org", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WorkflowAttributes {
    return new WorkflowAttributes().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WorkflowAttributes {
    return new WorkflowAttributes().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WorkflowAttributes {
    return new WorkflowAttributes().fromJsonString(jsonString, options);
  }

  static equals(a: WorkflowAttributes | PlainMessage<WorkflowAttributes> | undefined, b: WorkflowAttributes | PlainMessage<WorkflowAttributes> | undefined): boolean {
    return proto3.util.equals(WorkflowAttributes, a, b);
  }
}

/**
 * Sets custom attributes for a project, domain and workflow combination.
 * For more info on matchable attributes, see :ref:`ref_flyteidl.admin.MatchableAttributesConfiguration`
 *
 * @generated from message flyteidl.admin.WorkflowAttributesUpdateRequest
 */
export class WorkflowAttributesUpdateRequest extends Message<WorkflowAttributesUpdateRequest> {
  /**
   * @generated from field: flyteidl.admin.WorkflowAttributes attributes = 1;
   */
  attributes?: WorkflowAttributes;

  constructor(data?: PartialMessage<WorkflowAttributesUpdateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flyteidl.admin.WorkflowAttributesUpdateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "attributes", kind: "message", T: WorkflowAttributes },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WorkflowAttributesUpdateRequest {
    return new WorkflowAttributesUpdateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WorkflowAttributesUpdateRequest {
    return new WorkflowAttributesUpdateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WorkflowAttributesUpdateRequest {
    return new WorkflowAttributesUpdateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: WorkflowAttributesUpdateRequest | PlainMessage<WorkflowAttributesUpdateRequest> | undefined, b: WorkflowAttributesUpdateRequest | PlainMessage<WorkflowAttributesUpdateRequest> | undefined): boolean {
    return proto3.util.equals(WorkflowAttributesUpdateRequest, a, b);
  }
}

/**
 * Purposefully empty, may be populated in the future.
 *
 * @generated from message flyteidl.admin.WorkflowAttributesUpdateResponse
 */
export class WorkflowAttributesUpdateResponse extends Message<WorkflowAttributesUpdateResponse> {
  constructor(data?: PartialMessage<WorkflowAttributesUpdateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flyteidl.admin.WorkflowAttributesUpdateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WorkflowAttributesUpdateResponse {
    return new WorkflowAttributesUpdateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WorkflowAttributesUpdateResponse {
    return new WorkflowAttributesUpdateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WorkflowAttributesUpdateResponse {
    return new WorkflowAttributesUpdateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: WorkflowAttributesUpdateResponse | PlainMessage<WorkflowAttributesUpdateResponse> | undefined, b: WorkflowAttributesUpdateResponse | PlainMessage<WorkflowAttributesUpdateResponse> | undefined): boolean {
    return proto3.util.equals(WorkflowAttributesUpdateResponse, a, b);
  }
}

/**
 * Request to get an individual workflow attribute override.
 * For more info on matchable attributes, see :ref:`ref_flyteidl.admin.MatchableAttributesConfiguration`
 *
 * @generated from message flyteidl.admin.WorkflowAttributesGetRequest
 */
export class WorkflowAttributesGetRequest extends Message<WorkflowAttributesGetRequest> {
  /**
   * Unique project id which this set of attributes references.
   * +required
   *
   * @generated from field: string project = 1;
   */
  project = "";

  /**
   * Unique domain id which this set of attributes references.
   * +required
   *
   * @generated from field: string domain = 2;
   */
  domain = "";

  /**
   * Workflow name which this set of attributes references.
   * +required
   *
   * @generated from field: string workflow = 3;
   */
  workflow = "";

  /**
   * Which type of matchable attributes to return.
   * +required
   *
   * @generated from field: flyteidl.admin.MatchableResource resource_type = 4;
   */
  resourceType = MatchableResource.TASK_RESOURCE;

  /**
   * Optional, org key applied to the attributes.
   *
   * @generated from field: string org = 5;
   */
  org = "";

  constructor(data?: PartialMessage<WorkflowAttributesGetRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flyteidl.admin.WorkflowAttributesGetRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "domain", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "workflow", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "resource_type", kind: "enum", T: proto3.getEnumType(MatchableResource) },
    { no: 5, name: "org", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WorkflowAttributesGetRequest {
    return new WorkflowAttributesGetRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WorkflowAttributesGetRequest {
    return new WorkflowAttributesGetRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WorkflowAttributesGetRequest {
    return new WorkflowAttributesGetRequest().fromJsonString(jsonString, options);
  }

  static equals(a: WorkflowAttributesGetRequest | PlainMessage<WorkflowAttributesGetRequest> | undefined, b: WorkflowAttributesGetRequest | PlainMessage<WorkflowAttributesGetRequest> | undefined): boolean {
    return proto3.util.equals(WorkflowAttributesGetRequest, a, b);
  }
}

/**
 * Response to get an individual workflow attribute override.
 *
 * @generated from message flyteidl.admin.WorkflowAttributesGetResponse
 */
export class WorkflowAttributesGetResponse extends Message<WorkflowAttributesGetResponse> {
  /**
   * @generated from field: flyteidl.admin.WorkflowAttributes attributes = 1;
   */
  attributes?: WorkflowAttributes;

  constructor(data?: PartialMessage<WorkflowAttributesGetResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flyteidl.admin.WorkflowAttributesGetResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "attributes", kind: "message", T: WorkflowAttributes },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WorkflowAttributesGetResponse {
    return new WorkflowAttributesGetResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WorkflowAttributesGetResponse {
    return new WorkflowAttributesGetResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WorkflowAttributesGetResponse {
    return new WorkflowAttributesGetResponse().fromJsonString(jsonString, options);
  }

  static equals(a: WorkflowAttributesGetResponse | PlainMessage<WorkflowAttributesGetResponse> | undefined, b: WorkflowAttributesGetResponse | PlainMessage<WorkflowAttributesGetResponse> | undefined): boolean {
    return proto3.util.equals(WorkflowAttributesGetResponse, a, b);
  }
}

/**
 * Request to delete a set matchable workflow attribute override.
 * For more info on matchable attributes, see :ref:`ref_flyteidl.admin.MatchableAttributesConfiguration`
 *
 * @generated from message flyteidl.admin.WorkflowAttributesDeleteRequest
 */
export class WorkflowAttributesDeleteRequest extends Message<WorkflowAttributesDeleteRequest> {
  /**
   * Unique project id which this set of attributes references.
   * +required
   *
   * @generated from field: string project = 1;
   */
  project = "";

  /**
   * Unique domain id which this set of attributes references.
   * +required
   *
   * @generated from field: string domain = 2;
   */
  domain = "";

  /**
   * Workflow name which this set of attributes references.
   * +required
   *
   * @generated from field: string workflow = 3;
   */
  workflow = "";

  /**
   * Which type of matchable attributes to delete.
   * +required
   *
   * @generated from field: flyteidl.admin.MatchableResource resource_type = 4;
   */
  resourceType = MatchableResource.TASK_RESOURCE;

  /**
   * Optional, org key applied to the attributes.
   *
   * @generated from field: string org = 5;
   */
  org = "";

  constructor(data?: PartialMessage<WorkflowAttributesDeleteRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flyteidl.admin.WorkflowAttributesDeleteRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "domain", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "workflow", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "resource_type", kind: "enum", T: proto3.getEnumType(MatchableResource) },
    { no: 5, name: "org", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WorkflowAttributesDeleteRequest {
    return new WorkflowAttributesDeleteRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WorkflowAttributesDeleteRequest {
    return new WorkflowAttributesDeleteRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WorkflowAttributesDeleteRequest {
    return new WorkflowAttributesDeleteRequest().fromJsonString(jsonString, options);
  }

  static equals(a: WorkflowAttributesDeleteRequest | PlainMessage<WorkflowAttributesDeleteRequest> | undefined, b: WorkflowAttributesDeleteRequest | PlainMessage<WorkflowAttributesDeleteRequest> | undefined): boolean {
    return proto3.util.equals(WorkflowAttributesDeleteRequest, a, b);
  }
}

/**
 * Purposefully empty, may be populated in the future.
 *
 * @generated from message flyteidl.admin.WorkflowAttributesDeleteResponse
 */
export class WorkflowAttributesDeleteResponse extends Message<WorkflowAttributesDeleteResponse> {
  constructor(data?: PartialMessage<WorkflowAttributesDeleteResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flyteidl.admin.WorkflowAttributesDeleteResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WorkflowAttributesDeleteResponse {
    return new WorkflowAttributesDeleteResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WorkflowAttributesDeleteResponse {
    return new WorkflowAttributesDeleteResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WorkflowAttributesDeleteResponse {
    return new WorkflowAttributesDeleteResponse().fromJsonString(jsonString, options);
  }

  static equals(a: WorkflowAttributesDeleteResponse | PlainMessage<WorkflowAttributesDeleteResponse> | undefined, b: WorkflowAttributesDeleteResponse | PlainMessage<WorkflowAttributesDeleteResponse> | undefined): boolean {
    return proto3.util.equals(WorkflowAttributesDeleteResponse, a, b);
  }
}


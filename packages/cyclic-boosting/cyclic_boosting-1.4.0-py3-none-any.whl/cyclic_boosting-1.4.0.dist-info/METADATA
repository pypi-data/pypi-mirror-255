Metadata-Version: 2.1
Name: cyclic-boosting
Version: 1.4.0
Summary: Implementation of Cyclic Boosting machine learning algorithms
Author: Blue Yonder GmbH
Requires-Python: >=3.8,<3.12
Classifier: License :: OSI Approved :: Eclipse Public License 2.0 (EPL-2.0)
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3 :: Only
Classifier: Topic :: Scientific/Engineering :: Artificial Intelligence
Requires-Dist: decorator (>=5.1.1)
Requires-Dist: hypothesis (>=6.70.0)
Requires-Dist: matplotlib (>=1.5.1)
Requires-Dist: numba (>=0.56.4)
Requires-Dist: numexpr (>=2.5.2)
Requires-Dist: numpy (>=1.12.1)
Requires-Dist: pandas (>=0.20.3)
Requires-Dist: scikit-learn (>=0.18.2)
Requires-Dist: scipy (>=1.10)
Requires-Dist: six (>=1.16.0)
Description-Content-Type: text/markdown

# cyclic-boosting

This package contains the implementation of the machine learning algorithm Cyclic Boosting, which is described in [Cyclic Boosting - an explainable supervised machine learning algorithm](https://arxiv.org/abs/2002.03425) and [Demand Forecasting of Individual Probability Density Functions with Machine Learning](https://arxiv.org/abs/2009.07052).

## Documentation

The documentation can be found [here](https://cyclic-boosting.readthedocs.io/en/latest/).

## Quickstart

```
pip install cyclic-boosting
```

```python
from cyclic_boosting.pipelines import pipeline_CBPoissonRegressor
CB_est = pipeline_CBPoissonRegressor()
CB_est.fit(X_train, y)
yhat = CB_est.predict(X_test)
```

## Usage

It can be used in a [scikit-learn](https://scikit-learn.org/stable/)-like fashion, combining a binning method (e.g., [BinNumberTransformer](https://github.com/Blue-Yonder-OSS/cyclic-boosting/blob/main/cyclic_boosting/binning/bin_number_transformer.py)) with a Cyclic Boosting estimator (find all estimators in the [init](https://github.com/Blue-Yonder-OSS/cyclic-boosting/blob/main/cyclic_boosting/__init__.py)). Usage examples can be found in the [integration tests](https://github.com/Blue-Yonder-OSS/cyclic-boosting/blob/main/tests/test_integration.py).


"""
Module: 'logging' on micropython-v1.23.0-preview-esp32-ESP32_GENERIC
"""
# MCU: {'family': 'micropython', 'version': '1.23.0-preview', 'build': 'preview.6.g3d0b6276f', 'ver': '1.23.0-preview-preview.6.g3d0b6276f', 'port': 'esp32', 'board': 'ESP32_GENERIC', 'cpu': 'ESP32', 'mpy': 'v6.2', 'arch': 'xtensawin'}
# Stubber: v1.16.3
from __future__ import annotations
from _typeshed import Incomplete

NOTSET: int = 0
CRITICAL: int = 50
ERROR: int = 40
_level_dict: dict = {}
_level: int = 20
_loggers: dict = {}
INFO: int = 20
DEBUG: int = 10
WARNING: int = 30

def info(*args, **kwargs) -> Incomplete: ...
def basicConfig(*args, **kwargs) -> Incomplete: ...
def debug(*args, **kwargs) -> Incomplete: ...
def getLogger(*args, **kwargs) -> Incomplete: ...

_stream: Incomplete  ## <class 'FileIO'> = <io.FileIO 2>

class Logger:
    level: int = 0
    def setLevel(self, *args, **kwargs) -> Incomplete: ...
    def _level_str(self, *args, **kwargs) -> Incomplete: ...
    def critical(self, *args, **kwargs) -> Incomplete: ...
    def isEnabledFor(self, *args, **kwargs) -> Incomplete: ...
    def debug(self, *args, **kwargs) -> Incomplete: ...
    def log(self, *args, **kwargs) -> Incomplete: ...
    def info(self, *args, **kwargs) -> Incomplete: ...
    def error(self, *args, **kwargs) -> Incomplete: ...
    def exception(self, *args, **kwargs) -> Incomplete: ...
    def warning(self, *args, **kwargs) -> Incomplete: ...
    def __init__(self, *argv, **kwargs) -> None: ...

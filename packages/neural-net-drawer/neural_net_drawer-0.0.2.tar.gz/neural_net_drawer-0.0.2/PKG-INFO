Metadata-Version: 2.1
Name: neural_net_drawer
Version: 0.0.2
Summary: Plugin for visual display of a neural network.
Home-page: https://github.com/EvgeniBondarev/Neural-Network-Drawer.git
Author: EvgeniBondarev
Author-email: bondareff7@gmail.com
Project-URL: Documentation, https://github.com/EvgeniBondarev/Neural-Network-Drawer.git
Keywords: neural network display visual
Classifier: Programming Language :: Python :: 3.11
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.7
Description-Content-Type: text/markdown
Requires-Dist: matplotlib

---
jupyter:
  kernelspec:
    display_name: Python 3
    language: python
    name: python3
  language_info:
    codemirror_mode:
      name: ipython
      version: 2
    file_extension: .py
    mimetype: text/x-python
    name: python
    nbconvert_exporter: python
    pygments_lexer: ipython2
    version: 2.7.6
  nbformat: 4
  nbformat_minor: 5
---

<div class="cell code" collapsed="false">

``` python
pip install neural-net-drawer
```

</div>

<div class="cell code" collapsed="false">

``` python
import matplotlib.pyplot as plt
from neural-net-drawer.drawer import NeuralNetworkDiagram()
```

</div>

<div class="cell code" execution_count="5"
ExecuteTime="{&quot;end_time&quot;:&quot;2024-02-07T08:56:55.425789900Z&quot;,&quot;start_time&quot;:&quot;2024-02-07T08:56:55.153634700Z&quot;}"
collapsed="false">

``` python
# РџСЂРёРјРµСЂ РёСЃРїРѕР»СЊР·РѕРІР°РЅРёСЏ
fig = plt.figure(figsize=(9, 9))
ax = fig.gca()
ax.axis('off')

# РЎРѕР·РґР°РЅРёРµ СЌРєР·РµРјРїР»СЏСЂР° РєР»Р°СЃСЃР°
nn_diagram = NeuralNetworkDiagram()

# Р’С‹Р·РѕРІ РјРµС‚РѕРґР° РґР»СЏ РїРѕСЃС‚СЂРѕРµРЅРёСЏ РґРёР°РіСЂР°РјРјС‹ РЅРµР№СЂРѕРЅРЅРѕР№ СЃРµС‚Рё
nn_diagram.draw_neural_net(ax, [7, 5, 4, 3, 4, 2, 1])

plt.show()
```

<div class="output display_data">

![](img/1.png)

</div>

</div>

<div class="cell code" execution_count="13"
ExecuteTime="{&quot;end_time&quot;:&quot;2024-02-07T09:03:39.420467900Z&quot;,&quot;start_time&quot;:&quot;2024-02-07T09:03:39.268470Z&quot;}"
collapsed="false">

``` python
# РџСЂРёРјРµСЂ РёСЃРїРѕР»СЊР·РѕРІР°РЅРёСЏ
fig = plt.figure(figsize=(9, 9))
ax = fig.gca()
ax.axis('off')

# РЎРѕР·РґР°РЅРёРµ СЌРєР·РµРјРїР»СЏСЂР° РєР»Р°СЃСЃР°
nn_diagram = NeuralNetworkDiagram()

#РњР°РєСЃРёРјР°Р»СЊРЅРѕРµ РєРѕР»РёС‡РµСЃС‚РІРѕ РѕС‚РѕР±СЂР°Р¶Р°РµРјС‹С… РЅРµР№СЂРѕРЅРѕРІ РІ СЃРµС‚Рё
nn_diagram.max_n_layers_size = 3

#РњР°РєСЃРёРјР°Р»СЊРЅРѕРµ РєРѕР»РёС‡РµСЃС‚РІРѕ РѕС‚РѕР±СЂР°Р¶Р°РµРјС‹С… РЅРµР№СЂРѕРЅРѕРІ РІ СЃРµС‚Рё.
nn_diagram.max_layer_size = 10


# Р’С‹Р·РѕРІ РјРµС‚РѕРґР° РґР»СЏ РїРѕСЃС‚СЂРѕРµРЅРёСЏ РґРёР°РіСЂР°РјРјС‹ РЅРµР№СЂРѕРЅРЅРѕР№ СЃРµС‚Рё
nn_diagram.draw_neural_net(ax, [7, 5, 4, 3, 4, 2, 1])

plt.show()
```

<div class="output display_data">

![](img/2.png)

</div>

</div>

<div class="cell code" execution_count="12"
ExecuteTime="{&quot;end_time&quot;:&quot;2024-02-07T09:01:57.191557900Z&quot;,&quot;start_time&quot;:&quot;2024-02-07T09:01:56.936069200Z&quot;}"
collapsed="false">

``` python
fig = plt.figure(figsize=(9, 9))
ax = fig.gca()
ax.axis('off')

# РЎРѕР·РґР°РЅРёРµ СЌРєР·РµРјРїР»СЏСЂР° РєР»Р°СЃСЃР°
nn_diagram = NeuralNetworkDiagram()
#РњР°РєСЃРёРјР°Р»СЊРЅРѕРµ РєРѕР»РёС‡РµСЃС‚РІРѕ РѕС‚РѕР±СЂР°Р¶Р°РµРјС‹С… РЅРµР№СЂРѕРЅРѕРІ РІ СЃРµС‚Рё
nn_diagram.max_n_layers_size = 3

nn_diagram.show_neuron_numbers = False

# Р’С‹Р·РѕРІ РјРµС‚РѕРґР° РґР»СЏ РїРѕСЃС‚СЂРѕРµРЅРёСЏ РґРёР°РіСЂР°РјРјС‹ РЅРµР№СЂРѕРЅРЅРѕР№ СЃРµС‚Рё
nn_diagram.draw_neural_net(ax, [7, 5, 4, 3, 4, 2, 1])

plt.show()
```

<div class="output display_data">

![](img/3.png)

</div>

</div>

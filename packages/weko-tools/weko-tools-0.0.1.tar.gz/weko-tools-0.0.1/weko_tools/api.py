# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/api.ipynb.

# %% auto 0
__all__ = ['WekoAPIClient']

# %% ../nbs/api.ipynb 3
import requests
from typing import Dict
import pandas as pd
import matplotlib.pyplot as plt
import japanize_matplotlib

# %% ../nbs/api.ipynb 4
class WekoAPIClient:
    def __init__(self, base_url: str, username: str = "", password: str = ""):
        """
        Initializes the WekoAPIClient instance.
        
        Parameters:
            base_url (str): The base URL of the WEKO API.
            username (str): Username for API authentication.
            password (str): Password for API authentication.
        """
        self.base_url = base_url
        self.username = username
        self.password = password

    def search(self, query: Dict = {}):
        """
        Searches the WEKO repository using the provided query parameters.
        
        Parameters:
            query (Dict[str, Any], optional): A dictionary of query parameters. Defaults to an empty dict.
        
        Returns:
            Dict[str, Any]: The JSON response from the WEKO API.
        """
        url = f"{self.base_url}/api/records/"
        response = requests.get(url, params=query, auth=(self.username, self.password))
        return response.json()
    
    @staticmethod
    def getDataFrame(res: Dict, aggregation: str):
        """
        Elasticsearchの応答からDataFrameを生成する。

        :param res: Elasticsearchからの応答データを含む辞書。
        :param aggregation: 使用する集計の名前。
        :return: キーとドキュメント数を列に持つDataFrame。
        """
        buckets = res['aggregations'][aggregation][aggregation]['buckets']

        return pd.DataFrame([{
            'key': bucket['key'],
            'doc_count': bucket['doc_count']
        } for bucket in buckets])
    
    @staticmethod
    def showPieChart(df: pd.DataFrame, title: str, limit: int = -1):
        """
        DataFrameから円グラフを表示する。

        :param df: DataFrame。
        :param title: グラフのタイトル。
        """

        df_ = df.copy()

        if limit > 0:
            # 上位limit件のデータを抽出
            df_['key'] = df_['key'].apply(lambda x: x[:limit] + '...' if len(x) > limit else x)

        # 仮のDataFrameをソート
        df_sorted = df_.sort_values(by='doc_count', ascending=False)

        # ソートしたデータからラベルとサイズを準備
        labels = df_sorted['key']
        sizes = df_sorted['doc_count']

        # 円グラフの描画
        plt.figure(figsize=(10, 6))
        plt.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=140)
        plt.axis('equal')  # 円グラフが円形になるようにする
        plt.title(title)
        plt.show()

[tool.poetry]
name = "django-flatpickr"
version = "2.0.3"
description = """\
    Flatpickr based DatePickerInput, TimePickerInput and \
    DateTimePickerInput with date-range-picker functionality \
    for django >= 2.0\
    """
authors = ["Munim Munna <6266677+monim67@users.noreply.github.com>"]
repository = "https://github.com/monim67/django-flatpickr"
license = "MIT"
readme = "README.rst"
packages = [{ include = "django_flatpickr", from = "src" }]
keywords = [
    "django",
    "flatpickr",
    "date-picker",
    "time-picker",
    "datetime-picker",
    "date-range-picker",
]
classifiers = [
    "Intended Audience :: Developers",
    "Topic :: Software Development :: Libraries",
    "Topic :: Utilities",
    "Environment :: Web Environment",
    "Operating System :: OS Independent",
    "Development Status :: 5 - Production/Stable",
    "Framework :: Django",
    "Framework :: Django :: 2.0",
    "Framework :: Django :: 3.0",
    "Framework :: Django :: 4.0",
    "Framework :: Django :: 5.0",
]

[tool.poetry.dependencies]
python = "^3.8"
Django = ">=2,<6"
pydantic = ">=1,<3"
pydantic-settings = "*"
typing-extensions = "*"

[tool.poetry.group.build.dependencies]
pytest-django = "^4.5.2"
pytest-dotenv = "^0.5.2"
black = "^22.6.0"
isort = "^5.10.1"
pydocstyle = {extras = ["toml"], version = "^6.1.1"}
mypy = "^1.0.1"
django-stubs = "^1.12.0"
coverage = { extras = ["toml"], version = "^6.5.0" }
pylint = "^2.12.0"
rstcheck = "^6.1.0"
pywebcopy = "^7.0.2"
poethepoet = "^0.15.0"
django-crispy-forms = "^1.14.0"
crispy-bulma = "^0.8.0"
django-filter = "^22.1"

[tool.poetry.group.dev.dependencies]
tox = "^3.24.5"
pre-commit = "^2.20.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry_bumpversion.file."src/django_flatpickr/__init__.py"]

[tool.pylint.master]
disable = ["R", "C", "missing-docstring", "unused-argument"]

[tool.pylint.format]
max-line-length = 88

[tool.isort]
py_version = "38"
profile = "black"

[tool.pydocstyle]
convention = "google"
add_select = "D401,D404"

[tool.mypy]
python_version = "3.8"
namespace_packages = true
strict = true
plugins = ["mypy_django_plugin.main"]

[[tool.mypy.overrides]]
module = ["pywebcopy.*", "django_filters.*", "importlib_metadata.*"]
ignore_missing_imports = true

[tool.django-stubs]
django_settings_module = "dev.mysite.settings"

[tool.pytest.ini_options]
pythonpath = "." # pytest-django needs it to find dev module
django_find_project = false
DJANGO_SETTINGS_MODULE = "dev.mysite.settings"
addopts = "--reuse-db"
testpaths = ["tests"]
env_files = [".env", ".env.defaults"]

[tool.coverage.run]
command_line = "-m pytest"
source = ["django_flatpickr"]
parallel = true

[tool.coverage.paths]
source = [
    "src/django_flatpickr",
    "**/site-packages/django_flatpickr",
]

[tool.tox]
legacy_tox_ini = """
[tox]
isolated_build = True
envlist = py{311,310,39,38}

[testenv]
allowlist_externals = poetry
skip_install = true
commands =
    poetry install --no-root --only build
    pip install -c tests/pip-constraints.txt .
    pytest
"""

[tool.poe]
envfile = [".env.defaults", ".env"]

[tool.poe.tasks]
start = { cmd = "python dev/manage.py runserver localhost:8000", help = "Start dev server (press F5 on vscode)" }
lint = [
    { cmd = "python -m black --check src tests dev" },
    { cmd = "python -m isort --check-only src tests dev" },
    { cmd = "mypy src tests dev" },
    { cmd = "pydocstyle src" },
    { cmd = "rstcheck --report-level warning README.rst" },
]
test-cov = [
    { cmd = "coverage run" },
    { cmd = "coverage combine" },
    { cmd = "coverage lcov -o coverage/lcov.info" },
    { cmd = "coverage report" },
]

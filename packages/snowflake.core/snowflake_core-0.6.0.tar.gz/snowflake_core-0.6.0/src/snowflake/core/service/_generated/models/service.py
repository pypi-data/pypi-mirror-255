# coding: utf-8

"""
    Snowflake Services API

    The Snowflake Services API is a REST API that you can use to access, update, and perform certain actions on Services resource in a Snowflake database.  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Contact: support@snowflake.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional
from typing import Union
from snowflake.core._internal.pydantic_compatibility import BaseModel, Field, StrictInt, StrictStr, constr, validator
from snowflake.core.service._generated.models.service_specification import ServiceSpecification

class Service(BaseModel):
    name: constr(strict=True) = Field(...)
    compute_pool: StrictStr = Field(...)
    min_instances: StrictInt = Field(...)
    max_instances: StrictInt = Field(...)
    database_name: Optional[constr(strict=True)] = None
    schema_name: Optional[constr(strict=True)] = None
    owner: Optional[StrictStr] = None
    dns_name: Optional[StrictStr] = None
    public_endpoints: Optional[StrictStr] = None
    spec: Optional[ServiceSpecification] = None
    __properties = ["name", "compute_pool", "min_instances", "max_instances", "database_name", "schema_name", "owner", "dns_name", "public_endpoints", "spec"]


    @validator('name')
    def name_validate_regular_expression(cls, v):
        if not re.match(r"""^\"([^\"]|\"\")+\"|[a-zA-Z_][a-zA-Z0-9_$]*$""", v):
            raise ValueError(r"""must validate the regular expression /^"([^"]|"")+"|[a-zA-Z_][a-zA-Z0-9_$]*$/""")
        return v

    @validator('database_name')
    def database_name_validate_regular_expression(cls, v):
        if v is None:
            return v
        if not re.match(r"""^\"([^\"]|\"\")+\"|[a-zA-Z_][a-zA-Z0-9_$]*$""", v):
            raise ValueError(r"""must validate the regular expression /^"([^"]|"")+"|[a-zA-Z_][a-zA-Z0-9_$]*$/""")
        return v

    @validator('schema_name')
    def schema_name_validate_regular_expression(cls, v):
        if v is None:
            return v
        if not re.match(r"""^\"([^\"]|\"\")+\"|[a-zA-Z_][a-zA-Z0-9_$]*$""", v):
            raise ValueError(r"""must validate the regular expression /^"([^"]|"")+"|[a-zA-Z_][a-zA-Z0-9_$]*$/""")
        return v

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Service:
        """Create an instance of Service from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "owner",
                            "dns_name",
                            "public_endpoints",
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of spec
        if self.spec:
            _dict['spec'] = self.spec.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Service:
        """Create an instance of Service from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return Service.parse_obj(obj)

        _obj = Service.parse_obj({
            "name": obj.get("name"),

            "compute_pool": obj.get("compute_pool"),

            "min_instances": obj.get("min_instances"),

            "max_instances": obj.get("max_instances"),

            "database_name": obj.get("database_name"),

            "schema_name": obj.get("schema_name"),

            "owner": obj.get("owner"),

            "dns_name": obj.get("dns_name"),

            "public_endpoints": obj.get("public_endpoints"),

            "spec": ServiceSpecification.from_dict(obj.get("spec")) if obj.get("spec") is not None else None,

        })
        return _obj


from typing import Optional, List, Dict
from snowflake.core.service._generated.models.service_specification import ServiceSpecificationModel

class ServiceModel():
    def __init__(
        self,
        name: str,
        compute_pool: str,
        min_instances: int,
        max_instances: int,
        # optional properties
        database_name: Optional[str] = None,
        schema_name: Optional[str] = None,
        owner: Optional[str] = None,
        dns_name: Optional[str] = None,
        public_endpoints: Optional[str] = None,
        spec: Optional[ServiceSpecificationModel] = None,
    ):
        self.name = name
        self.compute_pool = compute_pool
        self.min_instances = min_instances
        self.max_instances = max_instances
        self.database_name = database_name
        self.schema_name = schema_name
        self.owner = owner
        self.dns_name = dns_name
        self.public_endpoints = public_endpoints
        self.spec = spec
    __properties = ["name", "compute_pool", "min_instances", "max_instances", "database_name", "schema_name", "owner", "dns_name", "public_endpoints", "spec"]

    def _to_model(self):
        return Service(
            name=self.name,

            compute_pool=self.compute_pool,

            min_instances=self.min_instances,

            max_instances=self.max_instances,

            database_name=self.database_name,

            schema_name=self.schema_name,

            owner=self.owner,

            dns_name=self.dns_name,

            public_endpoints=self.public_endpoints,

            spec=self.spec._to_model() if self.spec is not None else None,

        )

    @classmethod
    def _from_model(cls, model) -> ServiceModel:
        return ServiceModel(
            name=model.name,

            compute_pool=model.compute_pool,

            min_instances=model.min_instances,

            max_instances=model.max_instances,

            database_name=model.database_name,

            schema_name=model.schema_name,

            owner=model.owner,

            dns_name=model.dns_name,

            public_endpoints=model.public_endpoints,

            spec=ServiceSpecificationModel._from_model(model.spec) if model.spec is not None else None,

        )

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        return self._to_model().to_dict()

    @classmethod
    def from_dict(cls, obj: dict) -> ServiceModel:
        """Create an instance of Service from a dict"""
        return cls._from_model(Service.from_dict(obj))


Service._model_class = ServiceModel

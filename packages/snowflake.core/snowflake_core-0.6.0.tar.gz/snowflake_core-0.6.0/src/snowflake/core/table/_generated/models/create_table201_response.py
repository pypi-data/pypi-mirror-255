# coding: utf-8

"""
    Snowflake Table API

    The Snowflake Table API is a REST API that you can use to access, update, and perform certain actions on Tables resource in a Snowflake database.  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Contact: support@snowflake.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional
from snowflake.core._internal.pydantic_compatibility import BaseModel, StrictStr

class CreateTable201Response(BaseModel):
    description: Optional[StrictStr] = None
    __properties = ["description"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CreateTable201Response:
        """Create an instance of CreateTable201Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CreateTable201Response:
        """Create an instance of CreateTable201Response from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return CreateTable201Response.parse_obj(obj)

        _obj = CreateTable201Response.parse_obj({
            "description": obj.get("description")
        })
        return _obj


from typing import Optional, List, Dict

class CreateTable201ResponseExternal():
    def __init__(
        self,
        description: Optional[str] = None,
    ):
        self.description = description
    __properties = ["description"]

    def _to_model(self):
        return CreateTable201Response(
            description=self.description,
        )

    @classmethod
    def _from_model(cls, model) -> CreateTable201ResponseExternal:
        return CreateTable201ResponseExternal(
            description=model.description,
        )

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        return self._to_model().to_dict()

    @classmethod
    def from_dict(cls, obj: dict) -> CreateTable201ResponseExternal:
        """Create an instance of CreateTable201Response from a dict"""
        return cls._from_model(CreateTable201Response.from_dict(obj))


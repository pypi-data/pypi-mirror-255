# coding: utf-8

"""
    Snowflake Database API

    The Snowflake Database API is a REST API that you can use to access, update, and perform certain actions on Database resource in Snowflake.  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Contact: support@snowflake.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional
from typing import Union
from snowflake.core._internal.pydantic_compatibility import BaseModel, Field, constr, validator
from snowflake.core.database._generated.models.point_of_time import PointOfTime

class Clone(BaseModel):
    source: constr(strict=True) = Field(...)
    point_of_time: Optional[PointOfTime] = None
    __properties = ["source", "point_of_time"]


    @validator('source')
    def source_validate_regular_expression(cls, v):
        if not re.match(r"""^\"([^\"]|\"\")+\"|[a-zA-Z_][a-zA-Z0-9_$]*$""", v):
            raise ValueError(r"""must validate the regular expression /^"([^"]|"")+"|[a-zA-Z_][a-zA-Z0-9_$]*$/""")
        return v

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Clone:
        """Create an instance of Clone from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of point_of_time
        if self.point_of_time:
            _dict['point_of_time'] = self.point_of_time.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Clone:
        """Create an instance of Clone from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return Clone.parse_obj(obj)

        _obj = Clone.parse_obj({
            "source": obj.get("source"),

            "point_of_time": PointOfTime.from_dict(obj.get("point_of_time")) if obj.get("point_of_time") is not None else None,

        })
        return _obj


from typing import Optional, List, Dict
from snowflake.core.database._generated.models.point_of_time import PointOfTimeModel

class CloneModel():
    def __init__(
        self,
        source: str,
        # optional properties
        point_of_time: Optional[PointOfTimeModel] = None,
    ):
        self.source = source
        self.point_of_time = point_of_time
    __properties = ["source", "point_of_time"]

    def _to_model(self):
        return Clone(
            source=self.source,

            point_of_time=self.point_of_time._to_model() if self.point_of_time is not None else None,

        )

    @classmethod
    def _from_model(cls, model) -> CloneModel:
        return CloneModel(
            source=model.source,

            point_of_time=PointOfTimeModel._from_model(model.point_of_time) if model.point_of_time is not None else None,

        )

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        return self._to_model().to_dict()

    @classmethod
    def from_dict(cls, obj: dict) -> CloneModel:
        """Create an instance of Clone from a dict"""
        return cls._from_model(Clone.from_dict(obj))


Clone._model_class = CloneModel

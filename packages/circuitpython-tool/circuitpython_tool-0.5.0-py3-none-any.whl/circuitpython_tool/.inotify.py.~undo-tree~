(undo-tree-save-format-version . 1)
"413463305dbfe364c8d3cc0d08ae871d9a9593e6"
[nil nil nil nil (26038 63653 815837 912000) 0 nil]
([nil nil ((578 . 579) (t 26035 3812 747558 401000)) nil (26038 63653 815837 193000) 0 nil])
([nil nil ((579 . 591)) nil (26038 63653 815836 504000) 0 nil])
([nil nil ((#("from logging" 0 4 (face font-lock-keyword-face fontified t) 4 12 (fontified t)) . 579)) nil (26038 63653 815836 32000) 0 nil])
([nil nil ((579 . 584)) nil (26038 63653 815835 630000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . -582) (undo-tree-id0 . -1) (#("t" 0 1 (fontified t)) . -583) (undo-tree-id1 . -1) 584) nil (26038 63653 815834 935000) 0 nil])
([nil nil ((582 . 593)) nil (26038 63653 815821 56000) 0 nil])
([nil nil ((593 . 595)) nil (26038 63653 815820 562000) 0 nil])
([nil nil ((595 . 616)) nil (26038 63653 815820 65000) 0 nil])
([nil nil ((616 . 631)) nil (26038 63653 815817 169000) 0 nil])
([nil nil ((202 . 593) (#("os
import struct
from asyncio import Queue
from collections.abc import AsyncIterator, Callable, Iterator
from contextlib import contextmanager
from ctypes import CDLL, get_errno
from ctypes.util import find_library
from dataclasses import dataclass
from enum import Flag
from errno import EINTR
from functools import wraps
from pathlib import Path
from typing import ParamSpec
import logging" 0 3 (fontified t) 3 9 (face font-lock-keyword-face fontified t) 9 17 (fontified t) 17 21 (face font-lock-keyword-face fontified t) 21 30 (fontified t) 30 36 (face font-lock-keyword-face fontified t) 36 43 (fontified t) 43 47 (face font-lock-keyword-face fontified t) 47 64 (fontified t) 64 70 (face font-lock-keyword-face fontified t) 70 105 (fontified t) 105 109 (face font-lock-keyword-face fontified t) 109 121 (fontified t) 121 127 (face font-lock-keyword-face fontified t) 127 143 (fontified t) 143 147 (face font-lock-keyword-face fontified t) 147 155 (fontified t) 155 161 (face font-lock-keyword-face fontified t) 161 178 (fontified t) 178 182 (face font-lock-keyword-face fontified t) 182 195 (fontified t) 195 201 (face font-lock-keyword-face fontified t) 201 215 (fontified t) 215 219 (face font-lock-keyword-face fontified t) 219 232 (fontified t) 232 238 (face font-lock-keyword-face fontified t) 238 249 (fontified t) 249 253 (face font-lock-keyword-face fontified t) 253 259 (fontified t) 259 265 (face font-lock-keyword-face fontified t) 265 271 (fontified t) 271 275 (face font-lock-keyword-face fontified t) 275 282 (fontified t) 282 288 (face font-lock-keyword-face fontified t) 288 295 (fontified t) 295 299 (face font-lock-keyword-face fontified t) 299 310 (fontified t) 310 316 (face font-lock-keyword-face fontified t) 316 323 (fontified t) 323 327 (face font-lock-keyword-face fontified t) 327 336 (fontified t) 336 342 (face font-lock-keyword-face fontified t) 342 348 (fontified t) 348 352 (face font-lock-keyword-face fontified t) 352 360 (fontified t) 360 366 (face font-lock-keyword-face fontified t) 366 377 (fontified t) 377 383 (face font-lock-keyword-face fontified t) 383 391 (fontified t)) . 202) 631 (t 26038 63653 817746 191000)) nil (26038 63697 807412 258000) 0 nil])
([nil nil ((4122 . 4143) (t 26038 63654 793741 205000)) nil (26038 63697 807411 838000) 0 nil])
([nil nil ((4143 . 4164)) nil (26038 63697 807411 662000) 0 nil])
([nil nil ((#(":" 0 1 (face font-lock-string-face fontified t)) . -4162) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (#(" " 0 1 (face font-lock-string-face fontified t)) . -4163) (undo-tree-id38 . -1) (undo-tree-id39 . -1) 4164) nil (26038 63697 807411 287000) 0 nil])
([nil nil ((4162 . 4164)) nil (26038 63697 807410 48000) 0 nil])
([nil nil ((4157 . 4158)) nil (26038 63697 807409 783000) 0 nil])
([nil nil ((4164 . 4165)) nil (26038 63697 807409 651000) 0 nil])
([nil nil ((4166 . 4167)) nil (26038 63697 807409 381000) 0 nil])
([nil nil ((#("\"" 0 1 (face font-lock-string-face fontified t)) . -4165) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (#(")" 0 1 (fontified t)) . -4166) (undo-tree-id32 . -1) (undo-tree-id33 . -1) 4167) nil (26038 63697 807409 155000) 0 nil])
([nil nil ((4165 . 4166)) nil (26038 63697 807407 570000) 0 nil])
([nil nil ((#("{" 0 1 (face font-lock-string-face fontified t)) . -4164) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (#("}" 0 1 (face font-lock-string-face fontified t)) . -4165) (undo-tree-id24 . -1) (undo-tree-id25 . -1) 4166) nil (26038 63697 807406 835000) 0 nil])
([nil nil ((4164 . 4166)) nil (26038 63697 807403 477000) 0 nil])
([nil nil ((#("O" 0 1 (face font-lock-string-face fontified t)) . -4165) (undo-tree-id12 . -1) (undo-tree-id13 . -1) 4166) nil (26038 63697 807403 168000) 0 nil])
([nil nil ((4165 . 4167)) nil (26038 63697 807402 554000) 0 nil])
([nil nil ((#("O" 0 1 (fontified t)) . -4166) (undo-tree-id10 . -1) (undo-tree-id11 . -1) 4167) nil (26038 63697 807402 225000) 0 nil])
([nil nil ((4166 . 4168)) nil (26038 63697 807401 418000) 0 nil])
([nil nil ((#("(" 0 1 (fontified t)) . -4166) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (#(")" 0 1 (fontified t)) . -4167) (undo-tree-id8 . -1) (undo-tree-id9 . -1) 4168) nil (26038 63697 807400 740000) 0 nil])
([nil nil ((4166 . 4167)) nil (26038 63697 807398 552000) 0 nil])
([nil nil ((4156 . 4157)) nil (26038 63697 807398 369000) 0 nil])
([nil nil ((#("g" 0 1 (fontified t)) . -4156) (undo-tree-id2 . -1) (undo-tree-id3 . -1) 4157) nil (26038 63697 807397 795000) 0 nil])
([nil nil ((4156 . 4157)) nil (26038 63697 807386 206000) 0 nil])
([nil nil ((#("                    logging.info(f\"{event=}\")" 0 28 (fontified t) 28 34 (fontified t) 34 35 (face font-lock-string-face fontified t) 35 41 (face nil fontified t) 41 42 (face font-lock-operator-face fontified t) 42 43 (face nil fontified t) 43 44 (face font-lock-string-face fontified t) 44 45 (fontified t)) . 4123) (undo-tree-id49 . -41) (undo-tree-id50 . -41) (undo-tree-id51 . -41) (undo-tree-id52 . -42) (undo-tree-id53 . -42) (undo-tree-id54 . -42) (undo-tree-id55 . -42) (undo-tree-id56 . -42) (undo-tree-id57 . -42) (undo-tree-id58 . -42) (undo-tree-id59 . -42) (undo-tree-id60 . -42) (undo-tree-id61 . -43) (undo-tree-id62 . -44) (undo-tree-id63 . -44) (undo-tree-id64 . -44) (undo-tree-id65 . -44) (undo-tree-id66 . -33) (undo-tree-id67 . -34) (undo-tree-id68 . -34) (undo-tree-id69 . -36) (undo-tree-id70 . -36) (undo-tree-id71 . -36) (undo-tree-id72 . -36) (undo-tree-id73 . -36) (undo-tree-id74 . -36) (undo-tree-id75 . -45) (t 26038 63697 813521 551000)) nil (26038 63718 456643 944000) 0 nil])
([nil nil ((nil rear-nonsticky nil 4167 . 4168) (nil fontified nil 4167 . 4168) (nil fontified nil 4166 . 4167) (nil fontified nil 4165 . 4166) (nil fontified nil 4164 . 4165) (nil fontified nil 4158 . 4164) (nil fontified nil 4157 . 4158) (nil fontified nil 4151 . 4157) (nil fontified nil 4123 . 4151) (4123 . 4168)) nil (26038 63718 456636 507000) 0 nil])
([nil nil ((4031 . 4044)) nil (26038 63718 456636 171000) 0 nil])
([nil nil ((nil rear-nonsticky nil 4088 . 4089) (nil fontified nil 4088 . 4089) (nil fontified nil 4087 . 4088) (nil fontified nil 4086 . 4087) (nil fontified nil 4085 . 4086) (nil fontified nil 4079 . 4085) (nil fontified nil 4078 . 4079) (nil fontified nil 4072 . 4078) (nil fontified nil 4044 . 4072) (4044 . 4089)) nil (26038 63718 456635 925000) 0 nil])
([nil nil ((#("                    " 0 20 (fontified t)) . -4044) (undo-tree-id47 . -20) (undo-tree-id48 . -20) 4032) nil (26038 63718 456635 422000) 0 nil])
([nil nil ((#("event=}\")" 0 5 (face nil fontified t) 5 6 (face font-lock-operator-face fontified t) 6 7 (face nil fontified t) 7 8 (face font-lock-string-face fontified t) 8 9 (rear-nonsticky t fontified t)) . 4060) (undo-tree-id44 . -9) (undo-tree-id45 . -9) (undo-tree-id46 . -9)) nil (26038 63718 456634 579000) 0 nil])
([nil nil ((#("{" 0 1 (face nil fontified t)) . -4059) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) 4060) nil (26038 63718 456631 678000) 0 nil])
([nil nil ((4059 . 4073)) nil (26038 63718 456619 850000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -4057) (undo-tree-id76 . -1) (undo-tree-id77 . -1) 4058 (t 26038 63718 485415 997000)) nil (26038 63727 575407 918000) 0 nil])
([nil nil ((3757 . 3766) (t 26038 63727 581369 554000)) nil (26038 63748 629915 198000) 0 nil])
([nil nil ((3766 . 3771)) nil (26038 63748 629915 18000) 0 nil])
([nil nil ((#("print" 0 5 (face font-lock-builtin-face fontified t)) . 3766)) nil (26038 63748 629914 771000) 0 nil])
([nil nil ((3766 . 3782)) nil (26038 63748 629914 610000) 0 nil])
([nil nil ((#("{" 0 1 (fontified t)) . -3780) (undo-tree-id79 . -1) (#("\"" 0 1 (face font-lock-string-face fontified t)) . -3781) (undo-tree-id80 . -1) 3782) nil (26038 63748 629914 379000) 0 nil])
([nil nil ((3780 . 3786)) nil (26038 63748 629913 159000) 0 nil])
([nil nil ((#("r" 0 1 (face nil fontified t)) . -3785) (undo-tree-id78 . -1) 3786) nil (26038 63748 629912 681000) 0 nil])
([nil nil ((3785 . 3804)) nil (26038 63748 629901 950000) 0 nil])
([nil nil ((3952 . 3961) (t 26038 63748 657261 948000)) nil (26038 64255 423590 943000) 0 nil])
([nil nil ((3961 . 3971)) nil (26038 64255 423590 784000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -3969) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (#("-" 0 1 (face font-lock-operator-face fontified t)) . -3970) (undo-tree-id105 . -1) (undo-tree-id106 . -1) 3971) nil (26038 64255 423590 560000) 0 nil])
([nil nil ((3969 . 3970)) nil (26038 64255 423589 34000) 0 nil])
([nil nil ((3970 . 3983)) nil (26038 64255 423588 919000) 0 nil])
([nil nil ((3983 . 3996)) nil (26038 64255 423588 698000) 0 nil])
([nil nil ((#("w" 0 1 (fontified t)) . -3995) (undo-tree-id99 . -1) (undo-tree-id100 . -1) 3996) nil (26038 64255 423588 531000) 0 nil])
([nil nil ((3995 . 4010)) nil (26038 64255 423587 684000) 0 nil])
([nil nil ((3968 . 3969)) nil (26038 64255 423587 558000) 0 nil])
([nil nil ((#("queue.put_nowait(f.read())" 0 26 (fontified t)) . 4100) (undo-tree-id93 . -26) (undo-tree-id94 . -19) (undo-tree-id95 . -17) (undo-tree-id96 . -10) (undo-tree-id97 . -6) (undo-tree-id98 . -26)) nil (26038 64255 423587 325000) 0 nil])
([nil nil ((4100 . 4107)) nil (26038 64255 423585 794000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t)) . -4106) (undo-tree-id91 . -1) (undo-tree-id92 . -1) 4107) nil (26038 64255 423585 607000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t)) . -4105) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) 4106) nil (26038 64255 423585 43000) 0 nil])
([nil nil ((4105 . 4106)) nil (26038 64255 423583 838000) 0 nil])
([nil nil ((#("        ):" 0 10 (fontified t)) . 4107) (undo-tree-id85 . -10) (undo-tree-id86 . -10)) nil (26038 64255 423583 510000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -4106) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) 4107) nil (26038 64255 423582 427000) 0 nil])
([nil nil ((4106 . 4107)) nil (26038 64255 423569 698000) 0 nil])
([nil nil ((3953 . 4072) (#("        def cb(f):
            queue.put_noawait(f.read())
        with os.fdopen(self.fd, \"rb\") as f, async_read_fd(
            " 0 8 (fontified t) 8 11 (face font-lock-keyword-face fontified t) 11 12 (fontified t) 12 14 (face font-lock-function-name-face fontified t) 14 19 (fontified t) 19 58 (fontified t) 58 59 (fontified t) 59 67 (fontified t) 67 71 (face font-lock-keyword-face fontified t) 71 82 (fontified t) 82 86 (face font-lock-keyword-face fontified t) 86 91 (fontified t) 91 92 (face font-lock-string-face fontified t) 92 94 (face font-lock-string-face fontified t) 94 95 (face font-lock-string-face fontified t) 95 97 (fontified t) 97 99 (face font-lock-keyword-face fontified t) 99 118 (fontified t) 118 130 (fontified t)) . 3953) (undo-tree-id282 . -110) (undo-tree-id283 . -58) (undo-tree-id284 . -17) (undo-tree-id285 . -17) (undo-tree-id286 . -17) (undo-tree-id287 . -43) (undo-tree-id288 . -19) (undo-tree-id289 . -58) (undo-tree-id290 . -58) (undo-tree-id291 . -58) 4011 (t 26038 64255 426674 173000)) nil (26038 64276 860634 701000) 0 nil])
([nil nil ((3972 . 3985) (t 26038 64256 478668 801000)) nil (26038 64276 860631 948000) 0 nil])
([nil nil ((3985 . 4006)) nil (26038 64276 860631 308000) 0 nil])
([nil nil ((4006 . 4014)) nil (26038 64276 860630 801000) 0 nil])
([nil nil ((#("            logging.info(\"read callback\")" 0 20 (fontified t) 20 25 (fontified t) 25 40 (face font-lock-string-face fontified t) 40 41 (fontified t)) . 3973) (undo-tree-id197 . -12) (undo-tree-id198 . -12) (undo-tree-id199 . -13) (undo-tree-id200 . -14) (undo-tree-id201 . -15) (undo-tree-id202 . -16) (undo-tree-id203 . -17) (undo-tree-id204 . -18) (undo-tree-id205 . -19) (undo-tree-id206 . -20) (undo-tree-id207 . -21) (undo-tree-id208 . -22) (undo-tree-id209 . -23) (undo-tree-id210 . -24) (undo-tree-id211 . -25) (undo-tree-id212 . -12) (undo-tree-id213 . -12) (undo-tree-id214 . -12) (undo-tree-id215 . -12) (undo-tree-id216 . -12) (undo-tree-id217 . -12) (undo-tree-id218 . -12) (undo-tree-id219 . -12) (undo-tree-id220 . -12) (undo-tree-id221 . -12) (undo-tree-id222 . -12) (undo-tree-id223 . -12) (undo-tree-id224 . -12) (undo-tree-id225 . -12) (undo-tree-id226 . -12) (undo-tree-id227 . -12) (undo-tree-id228 . -12) (undo-tree-id229 . -12) (undo-tree-id230 . -12) (undo-tree-id231 . -12) (undo-tree-id232 . -12) (undo-tree-id233 . -12) (undo-tree-id234 . -12) (undo-tree-id235 . -26) (undo-tree-id236 . -12) (undo-tree-id237 . -12) (undo-tree-id238 . -27) (undo-tree-id239 . -12) (undo-tree-id240 . -12) (undo-tree-id241 . -28) (undo-tree-id242 . -12) (undo-tree-id243 . -12) (undo-tree-id244 . -29) (undo-tree-id245 . -12) (undo-tree-id246 . -12) (undo-tree-id247 . -30) (undo-tree-id248 . -12) (undo-tree-id249 . -12) (undo-tree-id250 . -31) (undo-tree-id251 . -12) (undo-tree-id252 . -12) (undo-tree-id253 . -32) (undo-tree-id254 . -12) (undo-tree-id255 . -12) (undo-tree-id256 . -33) (undo-tree-id257 . -12) (undo-tree-id258 . -12) (undo-tree-id259 . -34) (undo-tree-id260 . -12) (undo-tree-id261 . -12) (undo-tree-id262 . -35) (undo-tree-id263 . -12) (undo-tree-id264 . -12) (undo-tree-id265 . -36) (undo-tree-id266 . -12) (undo-tree-id267 . -12) (undo-tree-id268 . -37) (undo-tree-id269 . -12) (undo-tree-id270 . -12) (undo-tree-id271 . -38) (undo-tree-id272 . -12) (undo-tree-id273 . -12) (undo-tree-id274 . -39) (undo-tree-id275 . -12) (undo-tree-id276 . -12) (undo-tree-id277 . -40) (undo-tree-id278 . -12) (undo-tree-id279 . -12) (undo-tree-id280 . -41) (undo-tree-id281 . -41)) nil (26038 64276 860629 660000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -3972) (undo-tree-id109 . -1) (undo-tree-id110 . 1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) 3973) nil (26038 64276 860605 906000) 0 nil])
([nil nil ((3972 . 3985)) nil (26038 64276 860241 981000) 0 nil])
([nil nil ((nil rear-nonsticky nil 4025 . 4026) (nil fontified nil 4025 . 4026) (nil fontified nil 4010 . 4025) (nil fontified nil 4005 . 4010) (nil fontified nil 3985 . 4005) (3985 . 4026)) nil (26038 64276 860241 218000) 0 nil])
([nil nil ((#("            " 0 12 (fontified t)) . -3985) (undo-tree-id107 . -12) (undo-tree-id108 . -12) 3973) nil (26038 64276 860240 232000) 0 nil])
([nil nil ((4012 . 4018)) nil (26038 64277 21616 430000) 0 nil])
([nil nil ((#("logging.info(\"read callback begin\")" 0 1 (fontified t) 1 8 (fontified t) 8 13 (fontified t) 13 34 (face font-lock-string-face fontified t) 34 35 (rear-nonsticky t fontified t)) . 3985) (undo-tree-id303 . -35)) nil (26038 64283 492014 839000) 0 nil] [nil nil ((3985 . 3986)) ((#("
" 0 1 (fontified t)) . 3985) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1)) (26038 64276 860690 990000) 0 nil])
([nil nil ((nil fontified nil 4019 . 4020) (nil fontified nil 3998 . 4019) (nil fontified nil 3993 . 3998) (nil fontified nil 3986 . 3993) (nil fontified nil 3985 . 3986) (3985 . 4020)) nil (26038 64283 492014 177000) 0 nil])
([nil nil ((#("l" 0 1 (fontified nil)) . 3987) (3986 . 3987) (#("
" 0 1 (fontified t)) . 3985) (3986 . 3987)) ((#("l" 0 1 (fontified nil)) . 3986) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (3985 . 3986) (#("
" 0 1 (fontified t)) . 3986) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (3987 . 3988)) (26038 64276 860229 206000) 0 nil])
([nil nil ((4060 . 4073)) nil (26038 64283 492013 263000) 0 nil])
nil
([nil nil ((nil fontified nil 4107 . 4108) (nil fontified nil 4086 . 4107) (nil fontified nil 4081 . 4086) (nil fontified nil 4074 . 4081) (nil fontified nil 4073 . 4074) (4073 . 4108)) nil (26038 64283 492012 663000) 0 nil])
([nil nil ((#("begin" 0 5 (face font-lock-string-face fontified t)) . 4101) (undo-tree-id302 . -5)) nil (26038 64283 492011 713000) 0 nil])
([nil nil ((4101 . 4105)) nil (26038 64283 492010 793000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . -4045) (undo-tree-id300 . -1) (undo-tree-id301 . -1) 4046) nil (26038 64283 492008 724000) 0 nil])
([nil nil ((3621 . 3630) (t 26038 64283 494530 847000)) nil (26038 64447 181384 516000) 0 nil])
([nil nil ((3630 . 3634)) nil (26038 64447 181383 917000) 0 nil])
([nil nil ((#("        pron" 0 12 (fontified t)) . 3622) (undo-tree-id363 . -8) (undo-tree-id364 . -8) (undo-tree-id365 . -9) (undo-tree-id366 . -10) (undo-tree-id367 . -11) (undo-tree-id368 . -12) (undo-tree-id369 . -12)) nil (26038 64447 181383 498000) 0 nil])
([nil nil ((3622 . 3630)) nil (26038 64447 181381 103000) 0 nil])
([nil nil ((3630 . 3637)) nil (26038 64458 833888 210000) 0 nil])
([nil nil ((#("        logging" 0 15 (fontified t)) . 3622) (undo-tree-id397 . -8) (undo-tree-id398 . -8) (undo-tree-id399 . -9) (undo-tree-id400 . -10) (undo-tree-id401 . -11) (undo-tree-id402 . -12) (undo-tree-id403 . -13) (undo-tree-id404 . -14) (undo-tree-id405 . -15) (undo-tree-id406 . -15)) nil (26038 64461 504589 514000) 0 nil] [nil nil ((#("        logging" 0 15 (fontified t)) . 3622) (undo-tree-id353 . -8) (undo-tree-id354 . -8) (undo-tree-id355 . -9) (undo-tree-id356 . -10) (undo-tree-id357 . -11) (undo-tree-id358 . -12) (undo-tree-id359 . -13) (undo-tree-id360 . -14) (undo-tree-id361 . -15) (undo-tree-id362 . -15)) ((3622 . 3637)) (26038 64458 674130 387000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -3621) (undo-tree-id374 . -1) (undo-tree-id375 . 1) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (undo-tree-id383 . -1) (undo-tree-id384 . -1) (undo-tree-id385 . -1) (undo-tree-id386 . -1) (undo-tree-id387 . -1) (undo-tree-id388 . -1) (undo-tree-id389 . -1) (undo-tree-id390 . -1) (undo-tree-id391 . -1) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (undo-tree-id394 . -1) (undo-tree-id395 . -1) (undo-tree-id396 . -1) 3622) nil (26038 64461 504583 747000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -3621) (undo-tree-id331 . -1) (undo-tree-id332 . 1) (undo-tree-id333 . -1) (undo-tree-id334 . -1) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (undo-tree-id342 . -1) (undo-tree-id343 . -1) (undo-tree-id344 . -1) (undo-tree-id345 . -1) (undo-tree-id346 . -1) (undo-tree-id347 . -1) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (undo-tree-id352 . -1) 3622) ((3621 . 3622)) (26038 64458 449997 866000) 0 nil])
([nil nil ((3802 . 3804) (t 26038 64461 508828 313000)) nil (26038 64469 330392 945000) 0 nil])
([nil nil ((3801 . 3807)) ((#("os.fsc" 0 5 (face nil fontified t) 5 6 (face nil fontified t)) . 3801) (undo-tree-id370 . -6) (undo-tree-id371 . -6) (undo-tree-id372 . -5) (undo-tree-id373 . -6)) (26038 64458 234436 966000) 0 nil])
([nil nil ((#("m" 0 1 (face font-lock-string-face fontified t)) . -3803) (undo-tree-id411 . -1) (undo-tree-id412 . -1) 3804) nil (26038 64469 330392 251000) 0 nil])
([nil nil ((#("c" 0 1 (face nil fontified t)) . -3806) (undo-tree-id329 . -1) (undo-tree-id330 . -1) 3807) ((3806 . 3807)) (26038 64457 717524 551000) 0 nil])
([nil nil ((3803 . 3808)) nil (26038 64469 330391 26000) 0 nil])
([nil nil ((3806 . 3818)) ((#("encode(path)" 0 12 (face nil fontified t)) . 3806)) (26038 64457 526501 57000) 0 nil])
([nil nil ((#("k" 0 1 (face nil fontified t)) . -3807) (undo-tree-id409 . -1) (undo-tree-id410 . -1) 3808) nil (26038 64469 330390 458000) 0 nil])
([nil nil ((#("a" 0 1 (face nil fontified t)) . -3797) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (#("t" 0 1 (face nil fontified t)) . -3798) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (#("h" 0 1 (face nil fontified t)) . -3799) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (#("=" 0 1 (face font-lock-operator-face fontified t)) . -3800) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (undo-tree-id328 . -1) 3801) ((3797 . 3801)) (26038 64457 341159 101000) 0 nil])
([nil nil ((3807 . 3808)) nil (26038 64469 330388 188000) 0 nil])
([nil nil ((#("p" 0 1 (face nil fontified t)) . -3796) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) 3797) ((3796 . 3797) (t 26038 64447 188906 561000)) (26038 64447 181362 10000) 0 nil])
([nil nil ((#("l" 0 1 (face nil fontified t)) . -3807) (undo-tree-id407 . -1) (undo-tree-id408 . -1) 3808) nil (26038 64469 330387 180000) 0 nil])
nil
([nil nil ((3807 . 3810)) nil (26038 64469 330376 517000) 0 nil])
([nil nil ((202 . 4069) (#("logging
import os
import struct
from asyncio import Queue
from collections.abc import AsyncIterator, Callable, Iterator
from contextlib import contextmanager
from ctypes import CDLL, get_errno
from ctypes.util import find_library
from dataclasses import dataclass
from enum import Flag
from errno import EINTR
from functools import wraps
from pathlib import Path
from typing import ParamSpec

logger = logging.getLogger(__name__)


class Mask(Flag):
    \"\"\"Inotify flags as defined in ``inotify.h`` but with ``IN_`` prefix omitted.\"\"\"

    ACCESS = 0x00000001  #: File was accessed
    MODIFY = 0x00000002  #: File was modified
    ATTRIB = 0x00000004  #: Metadata changed
    CLOSE_WRITE = 0x00000008  #: Writable file was closed
    CLOSE_NOWRITE = 0x00000010  #: Unwritable file closed
    OPEN = 0x00000020  #: File was opened
    MOVED_FROM = 0x00000040  #: File was moved from X
    MOVED_TO = 0x00000080  #: File was moved to Y
    CREATE = 0x00000100  #: Subfile was created
    DELETE = 0x00000200  #: Subfile was deleted
    DELETE_SELF = 0x00000400  #: Self was deleted
    MOVE_SELF = 0x00000800  #: Self was moved

    UNMOUNT = 0x00002000  #: Backing fs was unmounted
    Q_OVERFLOW = 0x00004000  #: Event queue overflowed
    IGNORED = 0x00008000  #: File was ignored

    ONLYDIR = 0x01000000  #: only watch the path if it is a directory
    DONT_FOLLOW = 0x02000000  #: don't follow a sym link
    EXCL_UNLINK = 0x04000000  #: exclude events on unlinked objects
    MASK_ADD = 0x20000000  #: add to the mask of an already existing watch
    ISDIR = 0x40000000  #: event occurred against dir
    ONESHOT = 0x80000000  #: only send event once


P = ParamSpec(\"P\")


def retry_on_eintr(f: Callable[P, int]) -> Callable[P, int]:
    \"\"\"Wrapper to retry libc-style function on EINTR.\"\"\"

    @wraps(f)
    def inner(*args: P.args, **kwargs: P.kwargs) -> int:
        while True:
            if (result := f(*args, **kwargs)) != -1:
                return result
            if (errno := get_errno()) != EINTR:
                raise OSError(errno, os.strerror(errno))

    return inner


libc = CDLL(find_library(\"c\") or \"libc.so.6\", use_errno=True)
inotify_init1 = retry_on_eintr(libc.inotify_init1)
inotify_add_watch = retry_on_eintr(libc.inotify_add_watch)


@dataclass
class Event:
    \"\"\"Corresponds roughly to the inotify_event struct.\"\"\"

    mask: Mask
    \"\"\"Bit mask detailing what triggered this event.\"\"\"

    path: Path
    \"\"\"Path the event relates to (e.g. the file name of a newly created file).\"\"\"


@contextmanager
def async_read_fd(fd: int, read_callback: Callable[[], None]) -> Iterator[None]:
    \"\"\"Context manager for monitoring a file descriptor for read events with asyncio.

    Must be called within an async context. Unregisters the file descriptor when
    the context manager exits.
    \"\"\"
    loop = asyncio.get_running_loop()
    loop.add_reader(fd, read_callback)
    try:
        yield
    finally:
        loop.remove_reader(fd)


class INotify:
    def __init__(self) -> None:
        # Don't transfer file descriptor to subprocesses, and set it up for
        # non-blocking reads.
        self.fd = inotify_init1(os.O_CLOEXEC | os.O_NONBLOCK)
        # Maps watch descriptor values to their Path
        self.watch_descriptor_to_path: dict[int, Path] = {}

    def add_watch(self, path: Path, mask: Mask) -> None:
        \"\"\"Adds a new path to the inotify watch set.\"\"\"
        descriptor = inotify_add_watch(self.fd, os.fsencode(path), mask.value)
        self.watch_descriptor_to_path[descriptor] = path
        logging.info(f\"{descriptor=} {path=} {mask=}\")

    async def events(self) -> AsyncIterator[Event]:
        \"\"\"Asynchronous generator for inotify events.\"\"\"
        queue: Queue[bytes] = Queue()

        def cb(f):
            logging.info(\"read callback begin\")
            queue.put_nowait(f.read())
            logging.info(\"read callback done\")

        with os.fdopen(self.fd, \"rb\") as f, async_read_fd(self.fd, lambda: cb(f)):
            logging.info(\"events begin\")
            while True:
                for event in self.parse_events(await queue.get()):
                    logging.info(f\"{event=}\")" 0 8 (fontified t) 8 14 (face font-lock-keyword-face fontified t) 14 18 (fontified t) 18 24 (face font-lock-keyword-face fontified t) 24 32 (fontified t) 32 36 (face font-lock-keyword-face fontified t) 36 45 (fontified t) 45 51 (face font-lock-keyword-face fontified t) 51 58 (fontified t) 58 62 (face font-lock-keyword-face fontified t) 62 79 (fontified t) 79 85 (face font-lock-keyword-face fontified t) 85 120 (fontified t) 120 124 (face font-lock-keyword-face fontified t) 124 136 (fontified t) 136 142 (face font-lock-keyword-face fontified t) 142 158 (fontified t) 158 162 (face font-lock-keyword-face fontified t) 162 170 (fontified t) 170 176 (face font-lock-keyword-face fontified t) 176 193 (fontified t) 193 197 (face font-lock-keyword-face fontified t) 197 210 (fontified t) 210 216 (face font-lock-keyword-face fontified t) 216 230 (fontified t) 230 234 (face font-lock-keyword-face fontified t) 234 247 (fontified t) 247 253 (face font-lock-keyword-face fontified t) 253 264 (fontified t) 264 268 (face font-lock-keyword-face fontified t) 268 274 (fontified t) 274 280 (face font-lock-keyword-face fontified t) 280 286 (fontified t) 286 290 (face font-lock-keyword-face fontified t) 290 297 (fontified t) 297 303 (face font-lock-keyword-face fontified t) 303 310 (fontified t) 310 314 (face font-lock-keyword-face fontified t) 314 325 (fontified t) 325 331 (face font-lock-keyword-face fontified t) 331 338 (fontified t) 338 342 (face font-lock-keyword-face fontified t) 342 351 (fontified t) 351 357 (face font-lock-keyword-face fontified t) 357 363 (fontified t) 363 367 (face font-lock-keyword-face fontified t) 367 375 (fontified t) 375 381 (face font-lock-keyword-face fontified t) 381 391 (fontified t) 391 392 (fontified t) 393 399 (face font-lock-variable-name-face) 400 401 (face font-lock-operator-face) 420 428 (face font-lock-builtin-face) 432 437 (face font-lock-keyword-face) 438 442 (face font-lock-type-face) 454 456 (face font-lock-doc-face) 456 457 (syntax-table (15) face font-lock-doc-face) 457 531 (face font-lock-doc-face) 531 532 (syntax-table (15) face font-lock-doc-face) 532 534 (face font-lock-doc-face) 540 546 (face font-lock-variable-name-face) 547 548 (face font-lock-operator-face) 561 562 (face font-lock-comment-delimiter-face) 562 582 (face font-lock-comment-face) 582 586 (fontified t) 586 592 (face font-lock-variable-name-face fontified t) 592 593 (fontified t) 593 594 (face font-lock-operator-face fontified t) 594 607 (fontified t) 607 608 (face font-lock-comment-delimiter-face fontified t) 608 628 (face font-lock-comment-face fontified t) 628 632 (fontified t) 632 638 (face font-lock-variable-name-face fontified t) 638 639 (fontified t) 639 640 (face font-lock-operator-face fontified t) 640 653 (fontified t) 653 654 (face font-lock-comment-delimiter-face fontified t) 654 673 (face font-lock-comment-face fontified t) 673 677 (fontified t) 677 688 (face font-lock-variable-name-face fontified t) 688 689 (fontified t) 689 690 (face font-lock-operator-face fontified t) 690 703 (fontified t) 703 704 (face font-lock-comment-delimiter-face fontified t) 704 731 (face font-lock-comment-face fontified t) 731 735 (fontified t) 735 748 (face font-lock-variable-name-face fontified t) 748 749 (fontified t) 749 750 (face font-lock-operator-face fontified t) 750 763 (fontified t) 763 764 (face font-lock-comment-delimiter-face fontified t) 764 789 (face font-lock-comment-face fontified t) 789 793 (fontified t) 793 797 (face font-lock-variable-name-face fontified t) 797 798 (fontified t) 798 799 (face font-lock-operator-face fontified t) 799 812 (fontified t) 812 813 (face font-lock-comment-delimiter-face fontified t) 813 831 (face font-lock-comment-face fontified t) 831 835 (fontified t) 835 845 (face font-lock-variable-name-face fontified t) 845 846 (fontified t) 846 847 (face font-lock-operator-face fontified t) 847 860 (fontified t) 860 861 (face font-lock-comment-delimiter-face fontified t) 861 885 (face font-lock-comment-face fontified t) 885 889 (fontified t) 889 897 (face font-lock-variable-name-face fontified t) 897 898 (fontified t) 898 899 (face font-lock-operator-face fontified t) 899 912 (fontified t) 912 913 (face font-lock-comment-delimiter-face fontified t) 913 935 (face font-lock-comment-face fontified t) 935 939 (fontified t) 939 945 (face font-lock-variable-name-face fontified t) 945 946 (fontified t) 946 947 (face font-lock-operator-face fontified t) 947 960 (fontified t) 960 961 (face font-lock-comment-delimiter-face fontified t) 961 983 (face font-lock-comment-face fontified t) 983 987 (fontified t) 987 993 (face font-lock-variable-name-face fontified t) 993 994 (fontified t) 994 995 (face font-lock-operator-face fontified t) 995 1008 (fontified t) 1008 1009 (face font-lock-comment-delimiter-face fontified t) 1009 1031 (face font-lock-comment-face fontified t) 1031 1035 (fontified t) 1035 1046 (face font-lock-variable-name-face fontified t) 1046 1047 (fontified t) 1047 1048 (face font-lock-operator-face fontified t) 1048 1061 (fontified t) 1061 1062 (face font-lock-comment-delimiter-face fontified t) 1062 1081 (face font-lock-comment-face fontified t) 1081 1085 (fontified t) 1085 1094 (face font-lock-variable-name-face fontified t) 1094 1095 (fontified t) 1095 1096 (face font-lock-operator-face fontified t) 1096 1109 (fontified t) 1109 1110 (face font-lock-comment-delimiter-face fontified t) 1110 1127 (face font-lock-comment-face fontified t) 1127 1132 (fontified t) 1132 1139 (face font-lock-variable-name-face fontified t) 1139 1140 (fontified t) 1140 1141 (face font-lock-operator-face fontified t) 1141 1154 (fontified t) 1154 1155 (face font-lock-comment-delimiter-face fontified t) 1155 1182 (face font-lock-comment-face fontified t) 1182 1186 (fontified t) 1186 1196 (face font-lock-variable-name-face fontified t) 1196 1197 (fontified t) 1197 1198 (face font-lock-operator-face fontified t) 1198 1211 (fontified t) 1211 1212 (face font-lock-comment-delimiter-face fontified t) 1212 1237 (face font-lock-comment-face fontified t) 1237 1241 (fontified t) 1241 1248 (face font-lock-variable-name-face fontified t) 1248 1249 (fontified t) 1249 1250 (face font-lock-operator-face fontified t) 1250 1263 (fontified t) 1263 1264 (face font-lock-comment-delimiter-face fontified t) 1264 1283 (face font-lock-comment-face fontified t) 1283 1288 (fontified t) 1288 1295 (face font-lock-variable-name-face fontified t) 1295 1296 (fontified t) 1296 1297 (face font-lock-operator-face fontified t) 1297 1310 (fontified t) 1310 1311 (face font-lock-comment-delimiter-face fontified t) 1311 1352 (face font-lock-comment-face fontified t) 1352 1354 (face font-lock-comment-face fontified t) 1354 1358 (fontified t) 1358 1369 (face font-lock-variable-name-face fontified t) 1369 1370 (fontified t) 1370 1371 (face font-lock-operator-face fontified t) 1371 1384 (fontified t) 1384 1385 (face font-lock-comment-delimiter-face fontified t) 1385 1411 (face font-lock-comment-face fontified t) 1411 1415 (fontified t) 1415 1426 (face font-lock-variable-name-face fontified t) 1426 1427 (fontified t) 1427 1428 (face font-lock-operator-face fontified t) 1428 1441 (fontified t) 1441 1442 (face font-lock-comment-delimiter-face fontified t) 1442 1479 (face font-lock-comment-face fontified t) 1479 1483 (fontified t) 1483 1491 (face font-lock-variable-name-face fontified t) 1491 1492 (fontified t) 1492 1493 (face font-lock-operator-face fontified t) 1493 1506 (fontified t) 1506 1507 (face font-lock-comment-delimiter-face fontified t) 1507 1554 (face font-lock-comment-face fontified t) 1554 1558 (fontified t) 1558 1563 (face font-lock-variable-name-face fontified t) 1563 1564 (fontified t) 1564 1565 (face font-lock-operator-face fontified t) 1565 1578 (fontified t) 1578 1579 (face font-lock-comment-delimiter-face fontified t) 1579 1608 (face font-lock-comment-face fontified t) 1608 1612 (fontified t) 1612 1619 (face font-lock-variable-name-face fontified t) 1619 1620 (fontified t) 1620 1621 (face font-lock-operator-face fontified t) 1621 1634 (fontified t) 1634 1635 (face font-lock-comment-delimiter-face fontified t) 1635 1658 (face font-lock-comment-face fontified t) 1658 1660 (fontified t) 1660 1661 (face font-lock-variable-name-face fontified t) 1661 1662 (fontified t) 1662 1663 (face font-lock-operator-face fontified t) 1663 1674 (fontified t) 1674 1677 (face font-lock-string-face fontified t) 1677 1681 (fontified t) 1681 1684 (face font-lock-keyword-face fontified t) 1684 1685 (fontified t) 1685 1699 (face font-lock-function-name-face fontified t) 1699 1715 (fontified t) 1715 1718 (face font-lock-builtin-face fontified t) 1718 1721 (fontified t) 1721 1722 (face font-lock-operator-face fontified t) 1722 1723 (face font-lock-operator-face fontified t) 1723 1736 (fontified t) 1736 1739 (face font-lock-builtin-face fontified t) 1739 1746 (fontified t) 1746 1748 (face font-lock-doc-face fontified t) 1748 1749 (face font-lock-doc-face fontified t syntax-table (15)) 1749 1795 (face font-lock-doc-face fontified t) 1795 1796 (face font-lock-doc-face fontified t syntax-table (15)) 1796 1798 (face font-lock-doc-face fontified t) 1798 1800 (fontified t) 1800 1804 (fontified t) 1804 1810 (face font-lock-type-face fontified t) 1810 1814 (fontified t) 1814 1818 (fontified t) 1818 1821 (face font-lock-keyword-face fontified t) 1821 1822 (fontified t) 1822 1827 (face font-lock-function-name-face fontified t) 1827 1828 (fontified t) 1828 1829 (face font-lock-operator-face fontified t) 1829 1843 (fontified t) 1843 1845 (face font-lock-operator-face fontified t) 1845 1863 (fontified t) 1863 1864 (face font-lock-operator-face fontified t) 1864 1865 (face font-lock-operator-face fontified t) 1865 1866 (fontified t) 1866 1869 (face font-lock-builtin-face fontified t) 1869 1879 (fontified t) 1879 1884 (face font-lock-keyword-face fontified t) 1884 1885 (fontified t) 1885 1889 (face font-lock-constant-face fontified t) 1889 1903 (fontified t) 1903 1905 (face font-lock-keyword-face fontified t) 1905 1915 (fontified t) 1915 1916 (face font-lock-operator-face fontified t) 1916 1919 (fontified t) 1919 1920 (face font-lock-operator-face fontified t) 1920 1926 (fontified t) 1926 1928 (face font-lock-operator-face fontified t) 1928 1930 (fontified t) 1930 1937 (fontified t) 1937 1939 (face font-lock-operator-face fontified t) 1939 1940 (fontified t) 1940 1941 (face font-lock-operator-face fontified t) 1941 1944 (fontified t) 1944 1960 (fontified t) 1960 1966 (face font-lock-keyword-face fontified t) 1966 1986 (fontified t) 1986 1988 (face font-lock-keyword-face fontified t) 1988 1997 (fontified t) 1997 1998 (face font-lock-operator-face fontified t) 1998 2012 (fontified t) 2012 2014 (face font-lock-operator-face fontified t) 2014 2038 (fontified t) 2038 2043 (face font-lock-keyword-face fontified t) 2043 2044 (fontified t) 2044 2051 (face font-lock-type-face fontified t) 2051 2082 (fontified t) 2082 2084 (fontified t) 2084 2090 (fontified t face font-lock-keyword-face) 2090 2097 (fontified t) 2097 2099 (fontified t) 2099 2103 (face font-lock-variable-name-face fontified t) 2103 2104 (fontified t) 2104 2105 (face font-lock-operator-face fontified t) 2105 2124 (fontified t) 2124 2127 (face font-lock-string-face fontified t) 2127 2129 (fontified t) 2129 2131 (face font-lock-keyword-face fontified t) 2131 2132 (fontified t) 2132 2143 (face font-lock-string-face fontified t) 2143 2154 (fontified t) 2154 2155 (face font-lock-operator-face fontified t) 2155 2159 (face font-lock-constant-face fontified t) 2159 2161 (fontified t) 2161 2174 (face font-lock-variable-name-face fontified t) 2174 2175 (fontified t) 2175 2176 (face font-lock-operator-face fontified t) 2176 2212 (fontified t) 2212 2229 (face font-lock-variable-name-face fontified t) 2229 2230 (fontified t) 2230 2231 (face font-lock-operator-face fontified t) 2231 2273 (fontified t) 2273 2283 (face font-lock-type-face fontified t) 2283 2284 (fontified t) 2284 2289 (face font-lock-keyword-face fontified t) 2289 2290 (fontified t) 2290 2295 (face font-lock-type-face fontified t) 2295 2301 (fontified t) 2301 2303 (face font-lock-doc-face fontified t) 2303 2304 (face font-lock-doc-face fontified t syntax-table (15)) 2304 2352 (face font-lock-doc-face fontified t) 2352 2353 (face font-lock-doc-face fontified t syntax-table (15)) 2353 2355 (face font-lock-doc-face fontified t) 2355 2376 (fontified t) 2376 2378 (face font-lock-string-face fontified t) 2378 2379 (face font-lock-string-face fontified t syntax-table (15)) 2379 2424 (face font-lock-string-face fontified t) 2424 2425 (face font-lock-string-face fontified t syntax-table (15)) 2425 2427 (face font-lock-string-face fontified t) 2427 2429 (fontified t) 2429 2444 (fontified t) 2444 2448 (fontified t) 2448 2450 (face font-lock-string-face fontified t) 2450 2451 (face font-lock-string-face fontified t syntax-table (15)) 2451 2522 (face font-lock-string-face fontified t) 2522 2523 (face font-lock-string-face fontified t syntax-table (15)) 2523 2525 (face font-lock-string-face fontified t) 2525 2528 (fontified t) 2528 2543 (face font-lock-type-face fontified t) 2543 2544 (fontified t) 2544 2547 (face font-lock-keyword-face fontified t) 2547 2548 (fontified t) 2548 2561 (face font-lock-function-name-face fontified t) 2561 2566 (fontified t) 2566 2569 (face font-lock-builtin-face fontified t) 2569 2599 (fontified t) 2599 2603 (face font-lock-constant-face fontified t) 2603 2606 (fontified t) 2606 2607 (face font-lock-operator-face fontified t) 2607 2608 (face font-lock-operator-face fontified t) 2608 2618 (fontified t) 2618 2622 (face font-lock-constant-face fontified t) 2622 2629 (fontified t) 2629 2631 (face font-lock-doc-face fontified t) 2631 2632 (face font-lock-doc-face fontified t syntax-table (15)) 2632 2824 (face font-lock-doc-face fontified t) 2824 2828 (face font-lock-doc-face fontified t) 2828 2829 (face font-lock-doc-face fontified t syntax-table (15)) 2829 2831 (face font-lock-doc-face fontified t) 2831 2832 (fontified t) 2832 2836 (fontified t) 2836 2840 (face font-lock-variable-name-face fontified t) 2840 2841 (fontified t) 2841 2842 (face font-lock-operator-face fontified t) 2842 2913 (fontified t) 2913 2916 (face font-lock-keyword-face fontified t) 2916 2926 (fontified t) 2926 2931 (face font-lock-keyword-face fontified t) 2931 2936 (fontified t) 2936 2943 (face font-lock-keyword-face fontified t) 2943 2945 (fontified t) 2945 2976 (fontified t) 2976 2978 (fontified t) 2978 2983 (face font-lock-keyword-face fontified t) 2983 2984 (fontified t) 2984 2991 (face font-lock-type-face fontified t) 2991 2997 (fontified t) 2997 3000 (face font-lock-keyword-face fontified t) 3000 3001 (fontified t) 3001 3009 (face font-lock-function-name-face fontified t) 3009 3010 (fontified t) 3010 3014 (face font-lock-keyword-face fontified t) 3014 3016 (fontified t) 3016 3017 (face font-lock-operator-face fontified t) 3017 3018 (face font-lock-operator-face fontified t) 3018 3019 (fontified t) 3019 3023 (face font-lock-constant-face fontified t) 3023 3025 (fontified t) 3025 3033 (fontified t) 3033 3035 (face font-lock-comment-delimiter-face fontified t) 3035 3101 (face font-lock-comment-face fontified t) 3101 3109 (fontified t) 3109 3111 (face font-lock-comment-delimiter-face fontified t) 3111 3131 (face font-lock-comment-face fontified t) 3131 3139 (fontified t) 3139 3143 (face font-lock-keyword-face fontified t) 3143 3144 (fontified t) 3144 3146 (face font-lock-variable-name-face fontified t) 3146 3147 (fontified t) 3147 3148 (face font-lock-operator-face fontified t) 3148 3176 (fontified t) 3176 3177 (face font-lock-operator-face fontified t) 3177 3201 (fontified t) 3201 3203 (face font-lock-comment-delimiter-face fontified t) 3203 3246 (face font-lock-comment-face fontified t) 3246 3254 (fontified t) 3254 3258 (face font-lock-keyword-face fontified t) 3258 3259 (fontified t) 3259 3283 (face font-lock-variable-name-face fontified t) 3283 3285 (fontified t) 3285 3289 (face font-lock-builtin-face fontified t) 3289 3290 (fontified t) 3290 3293 (face font-lock-builtin-face fontified t) 3293 3295 (fontified t) 3295 3299 (face font-lock-variable-name-face fontified t) 3299 3301 (fontified t) 3301 3302 (face font-lock-operator-face fontified t) 3302 3306 (fontified t) 3306 3311 (fontified t) 3311 3314 (face font-lock-keyword-face fontified t) 3314 3315 (fontified t) 3315 3324 (face font-lock-function-name-face fontified t) 3324 3325 (fontified t) 3325 3329 (face font-lock-keyword-face fontified t) 3329 3355 (fontified t) 3355 3356 (face font-lock-operator-face fontified t) 3356 3357 (face font-lock-operator-face fontified t) 3357 3358 (fontified t) 3358 3362 (face font-lock-constant-face fontified t) 3362 3364 (fontified t) 3364 3372 (fontified t) 3372 3374 (face font-lock-doc-face fontified t) 3374 3375 (face font-lock-doc-face syntax-table (15) fontified t) 3375 3416 (face font-lock-doc-face fontified t) 3416 3417 (face font-lock-doc-face syntax-table (15) fontified t) 3417 3419 (face font-lock-doc-face fontified t) 3419 3420 (fontified t) 3420 3428 (fontified t) 3428 3438 (face font-lock-variable-name-face fontified t) 3438 3439 (fontified t) 3439 3440 (face font-lock-operator-face fontified t) 3440 3444 (fontified t) 3444 3459 (fontified t) 3459 3463 (face font-lock-keyword-face fontified t) 3463 3499 (fontified t) 3499 3507 (fontified t) 3507 3511 (face font-lock-keyword-face fontified t) 3511 3512 (fontified t) 3512 3536 (face font-lock-variable-name-face fontified t) 3536 3549 (fontified t) 3549 3550 (face font-lock-operator-face fontified t) 3550 3556 (fontified t) 3556 3572 (fontified t) 3572 3578 (fontified t) 3578 3579 (face font-lock-string-face fontified t) 3579 3590 (face nil fontified t) 3590 3591 (face font-lock-operator-face fontified t) 3591 3592 (face nil fontified t) 3592 3593 (face font-lock-string-face fontified t) 3593 3594 (face nil fontified t) 3594 3595 (face nil fontified t) 3595 3596 (face nil fontified t) 3596 3597 (face nil fontified t) 3597 3598 (face nil fontified t) 3598 3599 (face font-lock-operator-face fontified t) 3599 3600 (face nil fontified t) 3600 3601 (face font-lock-string-face fontified t) 3601 3606 (face nil fontified t) 3606 3607 (face font-lock-operator-face fontified t) 3607 3608 (face nil fontified t) 3608 3609 (face font-lock-string-face fontified t) 3609 3610 (fontified t) 3610 3611 (fontified t) 3611 3612 (fontified t) 3612 3616 (fontified t) 3616 3625 (face font-lock-keyword-face fontified t) 3625 3626 (fontified t) 3626 3632 (face font-lock-function-name-face fontified t) 3632 3633 (fontified t) 3633 3637 (face font-lock-keyword-face fontified t) 3637 3639 (fontified t) 3639 3640 (face font-lock-operator-face fontified t) 3640 3641 (face font-lock-operator-face fontified t) 3641 3652 (fontified t) 3652 3664 (fontified t) 3664 3672 (fontified t) 3672 3673 (face font-lock-doc-face fontified t) 3673 3674 (face font-lock-doc-face fontified t) 3674 3675 (face font-lock-doc-face fontified t syntax-table (15)) 3675 3717 (face font-lock-doc-face fontified t) 3717 3718 (face font-lock-doc-face fontified t syntax-table (15)) 3718 3719 (face font-lock-doc-face fontified t) 3719 3720 (face font-lock-doc-face fontified t) 3720 3721 (fontified t) 3721 3729 (fontified t) 3729 3734 (face font-lock-variable-name-face fontified t) 3734 3742 (fontified t) 3742 3747 (face font-lock-builtin-face fontified t) 3747 3749 (fontified t) 3749 3750 (face font-lock-operator-face fontified t) 3750 3759 (fontified t) 3759 3760 (fontified t) 3760 3768 (fontified t) 3768 3771 (face font-lock-keyword-face fontified t) 3771 3772 (fontified t) 3772 3774 (face font-lock-function-name-face fontified t) 3774 3779 (fontified t) 3779 3791 (fontified t) 3791 3792 (fontified t) 3792 3799 (fontified t) 3799 3804 (fontified t) 3804 3825 (face font-lock-string-face fontified t) 3825 3826 (fontified t rear-nonsticky t) 3826 3827 (fontified t) 3827 3866 (fontified t) 3866 3878 (fontified t) 3878 3879 (fontified t) 3879 3886 (fontified t) 3886 3891 (fontified t) 3891 3911 (face font-lock-string-face fontified t) 3911 3912 (fontified t rear-nonsticky t) 3912 3913 (fontified t) 3913 3922 (fontified t) 3922 3926 (face font-lock-keyword-face fontified t) 3926 3937 (fontified t) 3937 3941 (face font-lock-keyword-face fontified t) 3941 3946 (fontified t) 3946 3950 (face font-lock-string-face fontified t) 3950 3952 (fontified t) 3952 3954 (face font-lock-keyword-face fontified t) 3954 3972 (fontified t) 3972 3976 (face font-lock-keyword-face fontified t) 3976 3981 (fontified t) 3981 3987 (face font-lock-keyword-face fontified t) 3987 3996 (fontified t) 3996 3997 (fontified t) 3997 4009 (fontified t) 4009 4017 (fontified t) 4017 4022 (fontified t) 4022 4023 (face font-lock-string-face fontified t) 4023 4035 (face font-lock-string-face fontified t) 4035 4036 (face font-lock-string-face fontified t) 4036 4037 (fontified t) 4037 4038 (fontified t) 4038 4050 (fontified t) 4050 4055 (face font-lock-keyword-face fontified t) 4055 4056 (fontified t) 4056 4060 (face font-lock-constant-face fontified t) 4060 4062 (fontified t) 4062 4078 (fontified t) 4078 4081 (face font-lock-keyword-face fontified t) 4081 4088 (fontified t) 4088 4090 (face font-lock-keyword-face fontified t) 4090 4091 (fontified t) 4091 4095 (face font-lock-keyword-face fontified t) 4095 4109 (fontified t) 4109 4114 (face font-lock-keyword-face fontified t) 4114 4129 (fontified t) 4129 4157 (fontified t) 4157 4163 (fontified t) 4163 4164 (face font-lock-string-face fontified t) 4164 4170 (face nil fontified t) 4170 4171 (face font-lock-operator-face fontified t) 4171 4172 (face nil fontified t) 4172 4173 (face font-lock-string-face fontified t) 4173 4174 (fontified t rear-nonsticky t)) . 202) (undo-tree-id419 . -3878) (undo-tree-id420 . -2945) (undo-tree-id421 . -3778) (t 26038 64469 330541 60000)) nil (26039 64684 453487 236000) 0 nil])
([nil nil ((#("index" 0 5 (fontified t)) . 4864) (undo-tree-id418 . -5) (t 26039 7952 648447 704000)) nil (26039 64684 453484 937000) 0 nil])
([nil nil ((4864 . 4868)) nil (26039 64684 453483 982000) 0 nil])
([nil nil ((#("always" 0 6 (face font-lock-comment-face fontified t)) . 4726) (undo-tree-id416 . -6) (undo-tree-id417 . -6)) nil (26039 64684 453483 687000) 0 nil])
([nil nil ((#(" " 0 1 (face font-lock-comment-face fontified t)) . -4726) (undo-tree-id413 . -1) (undo-tree-id414 . -1) (undo-tree-id415 . -1) 4727) nil (26039 64684 453482 484000) 0 nil])
([nil nil ((4741 . 4754)) nil (26039 64684 453469 123000) 0 nil])
([nil nil ((#("Wrapper" 0 7 (face font-lock-doc-face fontified t)) . 1898) (t 26040 1573 91580 669000)) nil (26041 15488 482629 251000) 0 nil])
([nil nil ((1898 . 1907)) nil (26041 15488 482628 948000) 0 nil])
([nil nil ((43 . 45)) nil (26041 15491 157544 339000) 0 nil])
([nil nil ((nil rear-nonsticky nil 150 . 151) (nil fontified nil 45 . 151) (45 . 151)) nil (26041 15559 226876 329000) 0 nil] [nil nil ((45 . 49)) ((#("See " 0 4 (face font-lock-doc-face fontified t)) . 45) (undo-tree-id1 . -4) (undo-tree-id2 . -4) (undo-tree-id3 . -4) (undo-tree-id4 . -4) (undo-tree-id5 . -4)) (26041 15488 482669 940000) 0 nil])
([nil nil ((#("W" 0 1 (face font-lock-doc-face fontified t)) . -130) (undo-tree-id83 . -1) (#("a" 0 1 (face font-lock-doc-face fontified t)) . -131) (undo-tree-id84 . -1) (#("t" 0 1 (face font-lock-doc-face fontified t)) . -132) (undo-tree-id85 . -1) (#("c" 0 1 (face font-lock-doc-face fontified t)) . -133) (undo-tree-id86 . -1) (#("h" 0 1 (face font-lock-doc-face fontified t)) . -134) (undo-tree-id87 . -1) (#("%" 0 1 (face font-lock-doc-face fontified t)) . -135) (undo-tree-id88 . -1) (#("2" 0 1 (face font-lock-doc-face fontified t)) . -136) (undo-tree-id89 . -1) (#("0" 0 1 (face font-lock-doc-face fontified t)) . -137) (undo-tree-id90 . -1) (#("w" 0 1 (face font-lock-doc-face fontified t)) . -138) (undo-tree-id91 . -1) (#("a" 0 1 (face font-lock-doc-face fontified t)) . -139) (undo-tree-id92 . -1) (#("s" 0 1 (face font-lock-doc-face fontified t)) . -140) (undo-tree-id93 . -1) (#("%" 0 1 (face font-lock-doc-face fontified t)) . -141) (undo-tree-id94 . -1) (#("2" 0 1 (face font-lock-doc-face fontified t)) . -142) (undo-tree-id95 . -1) (#("0" 0 1 (face font-lock-doc-face fontified t)) . -143) (undo-tree-id96 . -1) (#("r" 0 1 (face font-lock-doc-face fontified t)) . -144) (undo-tree-id97 . -1) (#("e" 0 1 (face font-lock-doc-face fontified t)) . -145) (undo-tree-id98 . -1) (#("m" 0 1 (face font-lock-doc-face fontified t)) . -146) (undo-tree-id99 . -1) (#("o" 0 1 (face font-lock-doc-face fontified t)) . -147) (undo-tree-id100 . -1) (#("v" 0 1 (face font-lock-doc-face fontified t)) . -148) (undo-tree-id101 . -1) (#("e" 0 1 (face font-lock-doc-face fontified t)) . -149) (undo-tree-id102 . -1) (#("d" 0 1 (face font-lock-doc-face rear-nonsticky t fontified t)) . -150) (undo-tree-id103 . -1) 151) nil (26041 15559 226875 500000) 0 nil])
([nil nil ((nil rear-nonsticky nil 55 . 56) (nil fontified nil 49 . 56) (49 . 56)) ((#("Wrapper" 0 6 (face font-lock-doc-face fontified nil) 6 7 (face font-lock-doc-face rear-nonsticky nil fontified nil)) . 49) (undo-tree-id0 . -7) (nil rear-nonsticky t 55 . 56)) (26041 15488 482626 58000) 0 nil])
([nil nil ((#("d" 0 1 (face font-lock-doc-face fontified t)) . -109) (undo-tree-id62 . -1) (#("(" 0 1 (face font-lock-doc-face fontified t)) . -110) (undo-tree-id63 . -1) (#("2" 0 1 (face font-lock-doc-face fontified t)) . -111) (undo-tree-id64 . -1) (#(")" 0 1 (face font-lock-doc-face fontified t)) . -112) (undo-tree-id65 . -1) (#("%" 0 1 (face font-lock-doc-face fontified t)) . -113) (undo-tree-id66 . -1) (#("3" 0 1 (face font-lock-doc-face fontified t)) . -114) (undo-tree-id67 . -1) (#("A" 0 1 (face font-lock-doc-face fontified t)) . -115) (undo-tree-id68 . -1) (#("-" 0 1 (face font-lock-doc-face fontified t)) . -116) (undo-tree-id69 . -1) (#("," 0 1 (face font-lock-doc-face fontified t)) . -117) (undo-tree-id70 . -1) (#("I" 0 1 (face font-lock-doc-face fontified t)) . -118) (undo-tree-id71 . -1) (#("N" 0 1 (face font-lock-doc-face fontified t)) . -119) (undo-tree-id72 . -1) (#("_" 0 1 (face font-lock-doc-face fontified t)) . -120) (undo-tree-id73 . -1) (#("I" 0 1 (face font-lock-doc-face fontified t)) . -121) (undo-tree-id74 . -1) (#("G" 0 1 (face font-lock-doc-face fontified t)) . -122) (undo-tree-id75 . -1) (#("N" 0 1 (face font-lock-doc-face fontified t)) . -123) (undo-tree-id76 . -1) (#("O" 0 1 (face font-lock-doc-face fontified t)) . -124) (undo-tree-id77 . -1) (#("R" 0 1 (face font-lock-doc-face fontified t)) . -125) (undo-tree-id78 . -1) (#("E" 0 1 (face font-lock-doc-face fontified t)) . -126) (undo-tree-id79 . -1) (#("D" 0 1 (face font-lock-doc-face fontified t)) . -127) (undo-tree-id80 . -1) (#("," 0 1 (face font-lock-doc-face fontified t)) . -128) (undo-tree-id81 . -1) (#("-" 0 1 (face font-lock-doc-face fontified t)) . -129) (undo-tree-id82 . -1) 130) nil (26041 15559 226849 689000) 0 nil])
nil
([nil nil ((#(":" 0 1 (face font-lock-doc-face fontified t)) . -100) (undo-tree-id53 . -1) (#("t" 0 1 (face font-lock-doc-face fontified t)) . -101) (undo-tree-id54 . -1) (#("e" 0 1 (face font-lock-doc-face fontified t)) . -102) (undo-tree-id55 . -1) (#("x" 0 1 (face font-lock-doc-face fontified t)) . -103) (undo-tree-id56 . -1) (#("t" 0 1 (face font-lock-doc-face fontified t)) . -104) (undo-tree-id57 . -1) (#("=" 0 1 (face font-lock-doc-face fontified t)) . -105) (undo-tree-id58 . -1) (#("r" 0 1 (face font-lock-doc-face fontified t)) . -106) (undo-tree-id59 . -1) (#("e" 0 1 (face font-lock-doc-face fontified t)) . -107) (undo-tree-id60 . -1) (#("a" 0 1 (face font-lock-doc-face fontified t)) . -108) (undo-tree-id61 . -1) 109) nil (26041 15559 226843 555000) 0 nil])
([nil nil ((#("#" 0 1 (face font-lock-doc-face fontified t)) . -97) (undo-tree-id50 . -1) (#(":" 0 1 (face font-lock-doc-face fontified t)) . -98) (undo-tree-id51 . -1) (#("~" 0 1 (face font-lock-doc-face fontified t)) . -99) (undo-tree-id52 . -1) 100) nil (26041 15559 226841 598000) 0 nil])
([nil nil ((97 . 118)) nil (26041 15559 226840 896000) 0 nil])
([nil nil ((118 . 120)) nil (26041 15559 226840 774000) 0 nil])
([nil nil ((#("details" 0 7 (face font-lock-doc-face fontified t)) . 102)) nil (26041 15559 226840 645000) 0 nil])
([nil nil ((#(" on" 0 3 (face font-lock-doc-face fontified t)) . 102)) nil (26041 15559 226840 521000) 0 nil])
([nil nil ((102 . 106)) nil (26041 15559 226840 293000) 0 nil])
([nil nil ((#("f" 0 1 (face font-lock-doc-face fontified t)) . -102) (undo-tree-id46 . -1) (#("u" 0 1 (face font-lock-doc-face fontified t)) . -103) (undo-tree-id47 . -1) (#("l" 0 1 (face font-lock-doc-face fontified t)) . -104) (undo-tree-id48 . -1) (#("l" 0 1 (face font-lock-doc-face fontified t)) . -105) (undo-tree-id49 . -1) 106) nil (26041 15559 226840 45000) 0 nil])
([nil nil ((102 . 106)) nil (26041 15559 226839 146000) 0 nil])
([nil nil ((#("the" 0 3 (face font-lock-doc-face fontified t)) . 107)) nil (26041 15559 226838 947000) 0 nil])
([nil nil ((107 . 114)) nil (26041 15559 226838 810000) 0 nil])
([nil nil ((#("A" 0 1 (face font-lock-doc-face fontified t)) . -115) (undo-tree-id43 . -1) (#("P" 0 1 (face font-lock-doc-face fontified t)) . -116) (undo-tree-id44 . -1) (#("I" 0 1 (face font-lock-doc-face fontified t)) . -117) (undo-tree-id45 . -1) 118) nil (26041 15559 226838 605000) 0 nil])
([nil nil ((115 . 129)) nil (26041 15559 226837 861000) 0 nil])
([nil nil ((129 . 131) (#(" " 0 1 (face font-lock-doc-face fontified nil)) . -115) (nil face nil 114 . 115) (114 . 115) 129) nil (26041 15559 226837 675000) 0 nil])
([nil nil ((#("Largely based off of https://github.com/chrisjbillington/inotify_simple and
# https://github.com/chrisjbillington/inotify_simple" 0 76 (face font-lock-comment-face fontified t) 76 78 (face font-lock-comment-delimiter-face fontified t) 78 128 (face font-lock-comment-face fontified t)) . 138) (undo-tree-id42 . -128) 266) nil (26041 15559 226837 412000) 0 nil])
([nil nil ((129 . 131)) nil (26041 15559 226836 221000) 0 nil])
([nil nil ((nil rear-nonsticky nil 258 . 259) (nil fontified nil 209 . 259) (nil fontified nil 207 . 209) (nil fontified nil 131 . 207) (131 . 259)) nil (26041 15559 226836 23000) 0 nil])
([nil nil ((#("#" 0 1 (face font-lock-doc-face fontified t)) . -207) (undo-tree-id40 . -1) (#(" " 0 1 (face font-lock-doc-face fontified t)) . -208) (undo-tree-id41 . -1) 209) nil (26041 15559 226835 726000) 0 nil])
([nil nil ((257 . 259) (#("

" 0 1 (face font-lock-doc-face fontified nil) 1 2 (face font-lock-doc-face fontified t)) . 257) (#(" " 0 1 (face font-lock-doc-face fontified nil)) . -207) (undo-tree-id39 . -1) (nil face nil 206 . 207) (206 . 207) (206 . 207) (#("
" 0 1 (face font-lock-doc-face fontified t)) . 206) 207) nil (26041 15559 226835 59000) 0 nil])
([nil nil ((#("Largely" 0 7 (face font-lock-doc-face fontified t)) . 131)) nil (26041 15559 226834 512000) 0 nil])
([nil nil ((#(" based" 0 6 (face font-lock-doc-face fontified t)) . 131)) nil (26041 15559 226834 363000) 0 nil])
([nil nil ((131 . 142)) nil (26041 15559 226834 200000) 0 nil])
([nil nil ((#(" off" 0 4 (face font-lock-doc-face fontified t)) . 142) (undo-tree-id38 . -4)) nil (26041 15559 226833 991000) 0 nil])
([nil nil ((#(" " 0 1 (face font-lock-doc-face fontified t)) . -142) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (#("o" 0 1 (face font-lock-doc-face fontified t)) . -143) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (#("f" 0 1 (face font-lock-doc-face fontified t)) . -144) (undo-tree-id36 . -1) (undo-tree-id37 . -1) 145) nil (26041 15559 226833 383000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -253) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (#("
" 0 1 (fontified t)) . -254) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (#("#" 0 1 (face font-lock-comment-delimiter-face fontified t)) . -255) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (#(" " 0 1 (face font-lock-comment-delimiter-face fontified t)) . -256) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) 257) nil (26041 15559 226830 611000) 0 nil])
([nil nil ((#("#:" 0 1 (face font-lock-comment-delimiter-face fontified t) 1 2 (face font-lock-comment-face fontified t)) . -1838) (1840 . 1841) (#("#:" 0 1 (face font-lock-comment-delimiter-face fontified t) 1 2 (face font-lock-comment-face fontified t)) . -1783) (1785 . 1786) (#("#:" 0 1 (face font-lock-comment-delimiter-face fontified t) 1 2 (face font-lock-comment-face fontified t)) . -1712) (1714 . 1715) (#("#:" 0 1 (face font-lock-comment-delimiter-face fontified t) 1 2 (face font-lock-comment-face fontified t)) . -1648) (1650 . 1651) (#("#:" 0 1 (face font-lock-comment-delimiter-face fontified t) 1 2 (face font-lock-comment-face fontified t)) . -1592) (1594 . 1595) (#("#:" 0 1 (face font-lock-comment-delimiter-face fontified t) 1 2 (face font-lock-comment-face fontified t)) . -1519) (1521 . 1522) (#("#:" 0 1 (face font-lock-comment-delimiter-face fontified t) 1 2 (face font-lock-comment-face fontified t)) . -1473) (1475 . 1476) (#("#:" 0 1 (face font-lock-comment-delimiter-face fontified t) 1 2 (face font-lock-comment-face fontified t)) . -1422) (1424 . 1425) (#("#:" 0 1 (face font-lock-comment-delimiter-face fontified t) 1 2 (face font-lock-comment-face fontified t)) . -1366) (1368 . 1369) (#("#:" 0 1 (face font-lock-comment-delimiter-face fontified t) 1 2 (face font-lock-comment-face fontified t)) . -1322) (1324 . 1325) (#("#:" 0 1 (face font-lock-comment-delimiter-face fontified t) 1 2 (face font-lock-comment-face fontified t)) . -1275) (1277 . 1278) (#("#:" 0 1 (face font-lock-comment-delimiter-face fontified t) 1 2 (face font-lock-comment-face fontified t)) . -1223) (1225 . 1226) (#("#:" 0 1 (face font-lock-comment-delimiter-face fontified t) 1 2 (face font-lock-comment-face fontified t)) . -1176) (1178 . 1179) (#("#:" 0 1 (face font-lock-comment-delimiter-face fontified t) 1 2 (face font-lock-comment-face fontified t)) . -1129) (1131 . 1132) (#("#:" 0 1 (face font-lock-comment-delimiter-face fontified t) 1 2 (face font-lock-comment-face fontified t)) . -1078) (1080 . 1081) (#("#:" 0 1 (face font-lock-comment-delimiter-face fontified t) 1 2 (face font-lock-comment-face fontified t)) . -1031) (1033 . 1034) (#("#:" 0 1 (face font-lock-comment-delimiter-face fontified t) 1 2 (face font-lock-comment-face fontified t)) . -983) (985 . 986) (#("#:" 0 1 (face font-lock-comment-delimiter-face fontified t) 1 2 (face font-lock-comment-face fontified t)) . -924) (926 . 927) (#("#:" 0 1 (face font-lock-comment-delimiter-face fontified t) 1 2 (face font-lock-comment-face fontified t)) . -875) (877 . 878) (#("#:" 0 1 (face font-lock-comment-delimiter-face fontified t) 1 2 (face font-lock-comment-face fontified t)) . -830) (832 . 833) (#("#:" 0 1 (face font-lock-comment-delimiter-face fontified t) 1 2 (face font-lock-comment-face fontified t)) . -785) (787 . 788)) nil (26041 15559 226815 848000) 0 nil])
([nil nil ((3038 . 3042) (#("    " 0 4 (fontified nil)) . 3037) (undo-tree-id143 . -4) (undo-tree-id144 . -4) (undo-tree-id145 . -4) (3036 . 3042) (t 26041 15559 229527 611000)) nil (26041 15619 778433 988000) 0 nil])
([nil nil ((3042 . 3043)) nil (26041 15619 778433 215000) 0 nil])
([nil nil ((#("$" 0 1 (fontified t)) . -3042) (undo-tree-id141 . -1) (undo-tree-id142 . -1) 3043) nil (26041 15619 778433 50000) 0 nil])
([nil nil ((3042 . 3049)) nil (26041 15619 778432 554000) 0 nil])
([nil nil ((3043 . 3044)) nil (26041 15619 778432 373000) 0 nil])
([nil nil ((3050 . 3071)) nil (26041 15619 778432 245000) 0 nil])
([nil nil ((3071 . 3084)) nil (26041 15619 778431 931000) 0 nil])
([nil nil ((#("r" 0 1 (face font-lock-comment-face fontified t)) . -3083) (undo-tree-id139 . -1) (undo-tree-id140 . -1) 3084) nil (26041 15619 778431 584000) 0 nil])
([nil nil ((#("just retu" 0 9 (face font-lock-comment-face fontified t)) . 3074) (undo-tree-id126 . -1) (undo-tree-id127 . -2) (undo-tree-id128 . -3) (undo-tree-id129 . -4) (undo-tree-id130 . -5) (undo-tree-id131 . -6) (undo-tree-id132 . -7) (undo-tree-id133 . -8) (undo-tree-id134 . -9) (undo-tree-id135 . -9) (undo-tree-id136 . -9) (undo-tree-id137 . -5) (undo-tree-id138 . -9)) nil (26041 15619 778430 923000) 0 nil])
([nil nil ((3074 . 3075)) nil (26041 15619 778428 335000) 0 nil])
([nil nil ((#("i" 0 1 (face font-lock-comment-face fontified t)) . -3074) (undo-tree-id124 . -1) (undo-tree-id125 . -1) 3075) nil (26041 15619 778428 70000) 0 nil])
([nil nil ((3074 . 3095)) nil (26041 15619 778426 480000) 0 nil])
([nil nil ((3095 . 3106)) nil (26041 15619 778426 230000) 0 nil])
([nil nil ((#("directly" 0 8 (face font-lock-comment-face fontified t)) . 3074) (undo-tree-id121 . -7) (undo-tree-id122 . -8) (undo-tree-id123 . -8)) nil (26041 15619 778425 967000) 0 nil])
([nil nil ((#(" " 0 1 (face font-lock-comment-face fontified t)) . -3073) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) 3074) nil (26041 15619 778424 593000) 0 nil])
([nil nil ((3048 . 3056)) nil (26041 15619 778410 484000) 0 nil])
([nil nil ((3266 . 3271) (t 26041 15619 785239 273000)) nil (26041 15761 260299 999000) 0 nil])
([nil nil ((3271 . 3292)) nil (26041 15761 260299 726000) 0 nil])
([nil nil ((3292 . 3300)) nil (26041 15761 260299 546000) 0 nil])
([nil nil ((3300 . 3310)) nil (26041 15761 260299 311000) 0 nil])
([nil nil ((#(":" 0 1 (face font-lock-doc-face fontified t)) . -3309) (undo-tree-id146 . -1) (undo-tree-id147 . -1) 3310) nil (26041 15761 260298 946000) 0 nil])
([nil nil ((3309 . 3312)) nil (26041 15761 260290 926000) 0 nil])
([nil nil ((3312 . 3317)) nil (26041 15761 260290 382000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . 3313) 4584) nil (26041 15761 260287 13000) 0 nil])
([nil nil ((5295 . 5307) (#("            " 0 12 (fontified nil)) . 5294) (undo-tree-id22 . -12) (5293 . 5307) (t 26041 15761 262262 338000)) nil (26046 50780 478031 110000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -5303) (undo-tree-id21 . -4) 5307) nil (26046 50780 478030 496000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -5299) (undo-tree-id20 . -4) 5303) nil (26046 50780 478030 18000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -5295) (undo-tree-id19 . -4) 5299) nil (26046 50780 478028 723000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -5294) (undo-tree-id18 . -1) 5295) nil (26046 50780 478027 900000) 0 nil])
([nil nil ((5294 . 5307)) nil (26046 50780 478027 344000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -5303) (undo-tree-id17 . -4) 5307) nil (26046 50780 478026 980000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -5299) (undo-tree-id16 . -4) 5303) nil (26046 50780 478026 399000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -5295) (undo-tree-id15 . -4) 5299) nil (26046 50780 478025 872000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -5293) (undo-tree-id13 . -1) (#("
" 0 1 (fontified t)) . -5294) (undo-tree-id14 . -1) 5295) nil (26046 50780 478025 332000) 0 nil])
([nil nil ((5293 . 5306)) nil (26046 50780 478024 605000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -5302) (undo-tree-id12 . -4) 5306) nil (26046 50780 478024 339000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -5298) (undo-tree-id11 . -4) 5302) nil (26046 50780 478023 934000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -5294) (undo-tree-id10 . -4) 5298) nil (26046 50780 478023 460000) 0 nil])
([nil nil ((5294 . 5304)) nil (26046 50780 478022 869000) 0 nil])
([nil nil ((#("-" 0 1 (face font-lock-operator-face fontified t)) . -5303) (undo-tree-id8 . -1) (undo-tree-id9 . -1) 5304) nil (26046 50780 478022 477000) 0 nil])
([nil nil ((5303 . 5312)) nil (26046 50780 478021 672000) 0 nil])
([nil nil ((#("main" 0 4 (fontified t)) . 5308) (undo-tree-id3 . -1) (undo-tree-id4 . -2) (undo-tree-id5 . -3) (undo-tree-id6 . -4) (undo-tree-id7 . -4)) nil (26046 50780 478021 402000) 0 nil])
([nil nil ((5308 . 5319)) nil (26046 50780 478020 21000) 0 nil])
([nil nil ((5319 . 5324)) nil (26046 50780 478019 872000) 0 nil])
([nil nil ((5324 . 5325)) nil (26046 50780 478019 594000) 0 nil])
([nil nil ((#("'" 0 1 (face font-lock-doc-face fontified t)) . -5324) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) 5325) nil (26046 50780 478019 185000) 0 nil])
([nil nil ((5324 . 5334)) nil (26046 50780 478004 565000) 0 nil])
([nil nil ((5334 . 5339)) nil (26046 50780 478004 389000) 0 nil])
([nil nil ((5339 . 5344)) nil (26046 50780 478004 90000) 0 nil])
([nil nil ((5344 . 5350)) nil (26046 50780 478003 660000) 0 nil])
([nil nil ((5350 . 5351)) nil (26046 50780 477999 740000) 0 nil])
([nil nil ((5306 . 5307) (t 26046 50780 482376 738000)) nil (26046 50788 450160 174000) 0 nil])
([nil nil ((#("-" 0 1 (face font-lock-operator-face fontified t)) . -5306) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) 5307 (t 26046 50788 454384 159000)) nil (26046 50789 453268 218000) 0 nil])
([nil nil ((5306 . 5307)) nil (26046 50789 453254 483000) 0 nil])
([nil nil ((5294 . 5337) (#("if __name__ == '__main__':
    import sys" 0 2 (face font-lock-keyword-face fontified t) 2 3 (fontified t) 3 11 (face font-lock-builtin-face fontified t) 11 12 (fontified t) 12 13 (face font-lock-operator-face fontified t) 13 14 (face font-lock-operator-face fontified t) 14 15 (fontified t) 15 25 (face font-lock-string-face fontified t) 25 27 (fontified t) 27 31 (fontified t) 31 37 (face font-lock-keyword-face fontified t) 37 41 (fontified t)) . 5294) (undo-tree-id38 . -13) (undo-tree-id39 . -26) (t 26046 50789 454385 95000)) nil (26046 50965 94417 809000) 0 nil])
([nil nil ((#("    import sys

    sys.exit(0)
" 0 4 (fontified t) 4 10 (face font-lock-keyword-face fontified t) 10 15 (fontified t) 15 16 (fontified t) 16 24 (fontified t) 24 28 (face font-lock-constant-face fontified t) 28 31 (fontified t) 31 32 (fontified t)) . 5322) (undo-tree-id36 . -32) (undo-tree-id37 . -14) 5354 (t 26046 50789 570385 204000)) nil (26046 50965 94416 940000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -5321) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) 5322) nil (26046 50965 94416 130000) 0 nil])
([nil nil ((5293 . 5306)) nil (26046 50965 94414 981000) 0 nil])
([nil nil ((5306 . 5307)) nil (26046 50965 94414 741000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t)) . -5306) (undo-tree-id31 . -1) 5307) nil (26046 50965 94414 467000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -5302) (undo-tree-id30 . -4) 5306) nil (26046 50965 94414 3000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -5298) (undo-tree-id29 . -4) 5302) nil (26046 50965 94413 371000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -5294) (undo-tree-id28 . -4) 5298) nil (26046 50965 94412 621000) 0 nil])
([nil nil ((5294 . 5305)) nil (26046 50965 94411 735000) 0 nil])
([nil nil ((#("def main():" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 8 (face font-lock-function-name-face fontified t) 8 11 (fontified t)) . 5294)) nil (26046 50965 94411 468000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -5292) (undo-tree-id26 . -1) (#("
" 0 1 (fontified t)) . -5293) (undo-tree-id27 . -1) 5294) nil (26046 50965 94410 867000) 0 nil])
([nil nil ((5320 . 5325)) nil (26046 50965 94403 98000) 0 nil])
([nil current ((#("
" 0 1 (fontified nil)) . 5321) (#("    " 0 4 (fontified nil)) . 5321) (5325 . 5326) 5320) nil (26046 50965 94399 288000) 0 nil])
nil

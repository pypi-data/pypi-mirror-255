(undo-tree-save-format-version . 1)
"4a7f5a79ecaa342668a4463f1a20821a7f0fc0e7"
[nil nil nil nil (26025 46507 276557 413000) 0 nil]
([nil nil ((#("@dataclass
class SourceTree:
    source_dirs: list[Path]

    @staticmethod
    def from_toml(dirs: Iterable[str]) -> \"SourceTree\":
        return SourceTree([Path(d) for d in dirs])

    def to_toml(self) -> list[str]:
        return [str(p) for p in self.source_dirs]
" 0 10 (face font-lock-type-face fontified t) 10 11 (fontified t) 11 16 (face font-lock-keyword-face fontified t) 16 17 (fontified t) 17 27 (face font-lock-type-face fontified t) 27 46 (fontified t) 46 50 (face font-lock-builtin-face fontified t) 50 63 (fontified t) 63 75 (face font-lock-builtin-face fontified t) 75 80 (fontified t) 80 83 (face font-lock-keyword-face fontified t) 83 84 (fontified t) 84 93 (face font-lock-function-name-face fontified t) 93 109 (fontified t) 109 112 (face font-lock-builtin-face fontified t) 112 115 (fontified t) 115 116 (face font-lock-operator-face fontified t) 116 117 (face font-lock-operator-face fontified t) 117 118 (fontified t) 118 130 (face font-lock-string-face fontified t) 130 140 (fontified t) 140 146 (face font-lock-keyword-face fontified t) 146 167 (fontified t) 167 170 (face font-lock-keyword-face fontified t) 170 173 (fontified t) 173 175 (face font-lock-keyword-face fontified t) 175 188 (fontified t) 188 191 (face font-lock-keyword-face fontified t) 191 192 (fontified t) 192 199 (face font-lock-function-name-face fontified t) 199 200 (fontified t) 200 204 (face font-lock-keyword-face fontified t) 204 206 (fontified t) 206 207 (face font-lock-operator-face fontified t) 207 208 (face font-lock-operator-face fontified t) 208 209 (fontified t) 209 213 (face font-lock-builtin-face fontified t) 213 214 (fontified t) 214 217 (face font-lock-builtin-face fontified t) 217 228 (fontified t) 228 234 (face font-lock-keyword-face fontified t) 234 236 (fontified t) 236 239 (face font-lock-builtin-face fontified t) 239 243 (fontified t) 243 246 (face font-lock-keyword-face fontified t) 246 249 (fontified t) 249 251 (face font-lock-keyword-face fontified t) 251 252 (fontified t) 252 256 (face font-lock-keyword-face fontified t) 256 270 (fontified t)) . 365) (undo-tree-id86 . -23) (undo-tree-id87 . -270) (undo-tree-id88 . -23) (undo-tree-id89 . -23) (undo-tree-id90 . -23) (undo-tree-id91 . -23) (undo-tree-id92 . -10) (undo-tree-id93 . -270) (undo-tree-id94 . -270) 635 (t 26025 31617 779487 543000)) nil (26025 46507 276556 590000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -363) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (#("
" 0 1 (fontified t)) . -364) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) 365) nil (26025 46507 276554 509000) 0 nil])
([nil nil ((#("    source_trees: dict[str, SourceTree]" 0 18 (fontified t) 18 22 (face font-lock-builtin-face fontified t) 22 23 (fontified t) 23 26 (face font-lock-builtin-face fontified t) 26 39 (fontified t)) . 669) (undo-tree-id50 . -10) (undo-tree-id51 . -10) (undo-tree-id52 . -10) (undo-tree-id53 . -10) (undo-tree-id54 . -10) (undo-tree-id55 . -39)) nil (26025 46507 276487 639000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -668) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) 669) nil (26025 46507 276486 510000) 0 nil])
([nil nil ((#("        config.source_trees = {
            k: SourceTree.from_toml(v)
            for k, v in document.get(\"source_trees\", tomlkit.table()).items()
        }
" 0 15 (fontified t) 15 27 (face font-lock-variable-name-face fontified t) 27 28 (fontified t) 28 29 (face font-lock-operator-face fontified t) 29 83 (fontified t) 83 86 (face font-lock-keyword-face fontified t) 86 92 (fontified t) 92 94 (face font-lock-keyword-face fontified t) 94 108 (fontified t) 108 122 (face font-lock-string-face fontified t) 122 159 (fontified t)) . 937) (undo-tree-id26 . -8) (undo-tree-id27 . -8) (undo-tree-id28 . -8) (undo-tree-id29 . -30) (undo-tree-id30 . -8) (undo-tree-id31 . -8) (undo-tree-id32 . -8) (undo-tree-id33 . -30) (undo-tree-id34 . -21) (undo-tree-id35 . -159) (undo-tree-id36 . -21) (undo-tree-id37 . -21) (undo-tree-id38 . -21) (undo-tree-id39 . -21) (undo-tree-id40 . -159) (undo-tree-id41 . -159) 1096) nil (26025 46507 276484 652000) 0 nil])
([nil nil ((#("        document[\"source_trees\"] = {
            k: v.to_toml() for k, v in self.source_trees.items()
        }" 0 8 (fontified t) 8 16 (face font-lock-variable-name-face fontified t) 16 17 (fontified t) 17 31 (face font-lock-string-face fontified t) 31 33 (fontified t) 33 34 (face font-lock-operator-face fontified t) 34 64 (fontified t) 64 67 (face font-lock-keyword-face fontified t) 67 73 (fontified t) 73 75 (face font-lock-keyword-face fontified t) 75 76 (fontified t) 76 80 (face font-lock-keyword-face fontified t) 80 111 (fontified t)) . 1255) (undo-tree-id16 . -35) (undo-tree-id17 . -24) (undo-tree-id18 . -111) (undo-tree-id19 . -24) (undo-tree-id20 . -24) (undo-tree-id21 . -24) (undo-tree-id22 . -24) (undo-tree-id23 . -102) (undo-tree-id24 . -111) (undo-tree-id25 . -111) 1366) nil (26025 46507 276481 3000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -1254) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) 1255) nil (26025 46507 276475 538000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -769) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (#(" " 0 1 (fontified t)) . -770) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (#("{" 0 1 (fontified t)) . -771) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (#("}" 0 1 (fontified t)) . -772) (undo-tree-id107 . -1) (undo-tree-id108 . -1) 773 (t 26025 46507 282842 725000)) nil (26025 46638 350071 608000) 0 nil])
([nil nil ((#("Iterable" 0 8 (fontified t)) . 44) (undo-tree-id119 . -5) (undo-tree-id120 . -5) (undo-tree-id121 . -5) (undo-tree-id122 . -5) (undo-tree-id123 . -5) (undo-tree-id124 . -8) (t 26025 46638 354775 931000)) nil (26025 46648 381106 248000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -43) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) 44) nil (26025 46648 381104 677000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -43) (undo-tree-id109 . -1) (undo-tree-id110 . -1) 44) nil (26025 46648 381100 253000) 0 nil])
([nil nil ((1 . 2) (t 26025 46648 406771 927000)) nil (26041 17536 677919 138000) 0 nil])
([nil nil ((1 . 2)) nil (26041 17536 677918 669000) 0 nil])
([nil nil ((1 . 22)) nil (26041 17536 677918 541000) 0 nil])
([nil nil ((22 . 35)) nil (26041 17536 677918 186000) 0 nil])
([nil nil ((35 . 38)) nil (26041 17536 677918 36000) 0 nil])
([nil nil ((#("configuration state.\"\"\"" 0 20 (face font-lock-doc-face fontified t) 20 21 (face font-lock-doc-face syntax-table (15) fontified t) 21 23 (face font-lock-doc-face fontified t)) . 15) (undo-tree-id1 . -14) (undo-tree-id2 . -13) (undo-tree-id3 . -19) (undo-tree-id4 . -14) (undo-tree-id5 . -23)) nil (26041 17536 677917 705000) 0 nil])
([nil nil ((15 . 36)) nil (26041 17536 677914 727000) 0 nil])
([nil nil ((36 . 40)) nil (26041 17536 677963 201000) 0 nil])
([nil nil ((#("program" 0 7 (face font-lock-doc-face fontified t)) . 15)) nil (26041 17739 525722 246000) 0 nil] [nil nil ((#("Persistent" 0 10 (face font-lock-doc-face fontified t)) . 4) (undo-tree-id0 . -10)) ((4 . 14)) (26041 17536 677912 63000) 0 nil])
([nil nil ((15 . 19)) nil (26041 17739 525722 128000) 0 nil])
nil
([nil nil ((422 . 427)) nil (26041 17739 525721 972000) 0 nil])
([nil nil ((427 . 431)) nil (26041 17739 525721 801000) 0 nil])
([nil nil ((#("L" 0 1 (face font-lock-doc-face fontified t)) . -430) (undo-tree-id62 . -1) 431) nil (26041 17739 525721 551000) 0 nil])
([nil nil ((430 . 433)) nil (26041 17739 525721 161000) 0 nil])
([nil nil ((#("A" 0 1 (face font-lock-doc-face fontified t)) . -430) (undo-tree-id59 . -1) (#(" " 0 1 (face font-lock-doc-face fontified t)) . -431) (undo-tree-id60 . -1) (#("q" 0 1 (face font-lock-doc-face fontified t)) . -432) (undo-tree-id61 . -1) 433) nil (26041 17739 525720 879000) 0 nil])
([nil nil ((430 . 451)) nil (26041 17739 525720 185000) 0 nil])
([nil nil ((451 . 452)) nil (26041 17739 525720 63000) 0 nil])
([nil nil ((#("custom " 0 7 (face font-lock-doc-face fontified t)) . 445)) nil (26041 17739 525719 920000) 0 nil])
([nil nil ((445 . 465)) nil (26041 17739 525719 702000) 0 nil])
([nil nil ((465 . 468)) nil (26041 17739 525719 587000) 0 nil])
([nil nil ((438 . 452)) nil (26041 17739 525719 461000) 0 nil])
([nil nil ((#("with" 0 4 (face font-lock-doc-face fontified t)) . 452)) nil (26041 17739 525719 318000) 0 nil])
([nil nil ((#(" " 0 1 (face font-lock-doc-face fontified t)) . -452) (undo-tree-id58 . -1) 453) nil (26041 17739 525719 151000) 0 nil])
([nil nil ((709 . 714)) nil (26041 17739 525718 821000) 0 nil])
([nil nil ((714 . 718)) nil (26041 17739 525718 705000) 0 nil])
([nil nil ((#("D" 0 1 (face font-lock-doc-face fontified t)) . -717) (undo-tree-id57 . -1) 718) nil (26041 17739 525718 472000) 0 nil])
([nil nil ((717 . 718)) nil (26041 17739 525718 162000) 0 nil])
([nil nil ((#("M" 0 1 (face font-lock-doc-face fontified t)) . -717) (undo-tree-id56 . -1) 718) nil (26041 17739 525718 3000) 0 nil])
([nil nil ((717 . 721)) nil (26041 17739 525717 686000) 0 nil])
([nil nil ((#("Maps" 0 4 (face font-lock-doc-face fontified t)) . 717)) nil (26041 17739 525717 539000) 0 nil])
([nil nil ((717 . 725)) nil (26041 17739 525717 419000) 0 nil])
([nil nil ((#("Maps to " 0 8 (face font-lock-doc-face fontified t)) . 717)) nil (26041 17739 525717 276000) 0 nil])
([nil nil ((717 . 729)) nil (26041 17739 525717 153000) 0 nil])
([nil nil ((729 . 750)) nil (26041 17739 525716 923000) 0 nil])
([nil nil ((750 . 771)) nil (26041 17739 525716 807000) 0 nil])
([nil nil ((771 . 783)) nil (26041 17739 525716 680000) 0 nil])
([nil nil ((1454 . 1459)) nil (26041 17739 525716 554000) 0 nil])
([nil nil ((1459 . 1470)) nil (26041 17739 525716 424000) 0 nil])
([nil nil ((#("Context " 0 8 (face font-lock-doc-face fontified t)) . 1462)) nil (26041 17739 525716 287000) 0 nil])
([nil nil ((1462 . 1473)) nil (26041 17739 525716 171000) 0 nil])
([nil nil ((#("Helper for " 0 11 (face font-lock-doc-face fontified t)) . 1462)) nil (26041 17739 525716 17000) 0 nil])
([nil nil ((1462 . 1463)) nil (26041 17739 525715 844000) 0 nil])
([nil nil ((#("M" 0 1 (face font-lock-doc-face fontified t)) . -1462) (undo-tree-id55 . -1) 1463) nil (26041 17739 525715 590000) 0 nil])
([nil nil ((#("file on disk.\"\"\"" 0 13 (face font-lock-doc-face fontified t) 13 14 (face font-lock-doc-face syntax-table (15) fontified t) 14 16 (face font-lock-doc-face fontified t)) . 767) (undo-tree-id53 . -9) (undo-tree-id54 . -9)) nil (26041 17739 525714 987000) 0 nil])
([nil nil ((#(" " 0 1 (face font-lock-doc-face fontified t)) . -766) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) 767) nil (26041 17739 525714 444000) 0 nil])
([nil nil ((766 . 779)) nil (26041 17739 525713 808000) 0 nil])
([nil nil ((#("Persistent" 0 10 (face font-lock-doc-face fontified t)) . 717) (undo-tree-id48 . -8) (undo-tree-id49 . -8)) nil (26041 17739 525713 622000) 0 nil])
([nil nil ((#(" " 0 1 (face font-lock-doc-face fontified t)) . -717) (undo-tree-id46 . -1) (#("t" 0 1 (face font-lock-doc-face fontified t)) . -718) (undo-tree-id47 . -1) 719) nil (26041 17739 525713 51000) 0 nil])
([nil nil ((717 . 718)) nil (26041 17739 525711 965000) 0 nil])
([nil nil ((1447 . 1454)) nil (26041 17739 525711 846000) 0 nil])
([nil nil ((#("`" 0 1 (face font-lock-doc-face fontified t)) . -1452) (undo-tree-id44 . -1) (#("C" 0 1 (face font-lock-doc-face fontified t)) . -1453) (undo-tree-id45 . -1) 1454) nil (26041 17739 525711 658000) 0 nil])
([nil nil ((1452 . 1461)) nil (26041 17739 525711 2000) 0 nil])
([nil nil ((#("Maps `Config` " 0 14 (face font-lock-doc-face fontified t)) . 1447)) nil (26041 17739 525710 856000) 0 nil])
([nil nil ((1447 . 1448)) nil (26041 17739 525710 612000) 0 nil])
([nil nil ((#("P" 0 1 (face font-lock-doc-face fontified t)) . -1447) (undo-tree-id43 . -1) 1448) nil (26041 17739 525710 453000) 0 nil])
([nil nil ((1447 . 1465)) nil (26041 17739 525710 132000) 0 nil])
([nil nil ((1465 . 1486)) nil (26041 17739 525710 11000) 0 nil])
([nil nil ((1486 . 1496)) nil (26041 17739 525709 887000) 0 nil])
([nil nil ((1496 . 1501)) nil (26041 17739 525709 756000) 0 nil])
([nil nil ((1560 . 1569)) nil (26041 17739 525709 638000) 0 nil])
([nil nil ((1569 . 1580)) nil (26041 17739 525709 519000) 0 nil])
([nil nil ((1580 . 1589)) nil (26041 17739 525709 395000) 0 nil])
([nil nil ((1589 . 1591)) nil (26041 17739 525709 275000) 0 nil])
([nil nil ((#(" " 0 1 (face font-lock-doc-face fontified t)) . -1589) (undo-tree-id41 . -1) (#("i" 0 1 (face font-lock-doc-face fontified t)) . -1590) (undo-tree-id42 . -1) 1591) nil (26041 17739 525708 985000) 0 nil])
([nil nil ((1589 . 1596)) nil (26041 17739 525708 463000) 0 nil])
([nil nil ((#("If path_override is not " 0 24 (face font-lock-doc-face fontified t)) . 1572)) nil (26041 17739 525708 329000) 0 nil])
([nil nil ((1572 . 1579)) nil (26041 17739 525708 208000) 0 nil])
([nil nil ((#("If path" 0 7 (face font-lock-doc-face fontified t)) . 1572)) nil (26041 17739 525708 53000) 0 nil])
([nil nil ((1572 . 1581)) nil (26041 17739 525707 907000) 0 nil])
([nil nil ((#("Initializ" 0 9 (face font-lock-doc-face fontified t)) . 1572)) nil (26041 17739 525707 774000) 0 nil])
([nil nil ((1572 . 1589)) nil (26041 17739 525707 652000) 0 nil])
([nil nil ((#("initialize" 0 10 (face font-lock-doc-face fontified t)) . 1579)) nil (26041 17739 525707 511000) 0 nil])
([nil nil ((1579 . 1594)) nil (26041 17739 525707 179000) 0 nil])
([nil nil ((1596 . 1604) (#("        " 0 8 (face font-lock-doc-face fontified nil)) . 1595) (undo-tree-id40 . -8) (1594 . 1604)) nil (26041 17739 525707 2000) 0 nil])
([nil nil ((1604 . 1608)) nil (26041 17739 525706 637000) 0 nil])
([nil nil ((1608 . 1620)) nil (26041 17739 525706 516000) 0 nil])
([nil nil ((1607 . 1608)) nil (26041 17739 525706 307000) 0 nil])
([nil nil ((1621 . 1640)) nil (26041 17739 525706 182000) 0 nil])
([nil nil ((#("not specified," 0 14 (face font-lock-doc-face fontified t)) . 1626)) nil (26041 17739 525706 42000) 0 nil])
([nil nil ((1626 . 1641)) nil (26041 17739 525705 919000) 0 nil])
([nil nil ((1641 . 1648)) nil (26041 17739 525705 706000) 0 nil])
([nil nil ((#("read/writes" 0 11 (face font-lock-doc-face fontified t)) . 1637)) nil (26041 17739 525705 567000) 0 nil])
([nil nil ((1637 . 1640)) nil (26041 17739 525705 438000) 0 nil])
([nil nil ((#("t" 0 1 (face font-lock-doc-face fontified t)) . -1637) (undo-tree-id37 . -1) (#("h" 0 1 (face font-lock-doc-face fontified t)) . -1638) (undo-tree-id38 . -1) (#("e" 0 1 (face font-lock-doc-face fontified t)) . -1639) (undo-tree-id39 . -1) 1640) nil (26041 17739 525705 55000) 0 nil])
([nil nil ((1637 . 1640)) nil (26041 17739 525704 390000) 0 nil])
([nil nil ((#("c" 0 1 (face font-lock-doc-face fontified t)) . -1637) (undo-tree-id34 . -1) (#("o" 0 1 (face font-lock-doc-face fontified t)) . -1638) (undo-tree-id35 . -1) (#("n" 0 1 (face font-lock-doc-face fontified t)) . -1639) (undo-tree-id36 . -1) 1640) nil (26041 17739 525704 190000) 0 nil])
([nil nil ((1637 . 1658)) nil (26041 17739 525703 432000) 0 nil])
([nil nil ((1658 . 1666)) nil (26041 17739 525703 312000) 0 nil])
([nil nil ((1666 . 1687)) nil (26041 17739 525703 92000) 0 nil])
([nil nil ((1687 . 1708)) nil (26041 17739 525702 973000) 0 nil])
([nil nil ((1708 . 1721)) nil (26041 17739 525702 750000) 0 nil])
([nil nil ((#("y" 0 1 (face font-lock-doc-face fontified t)) . -1720) (undo-tree-id33 . -1) 1721) nil (26041 17739 525702 591000) 0 nil])
([nil nil ((1720 . 1726)) nil (26041 17739 525702 264000) 0 nil])
([nil nil ((#("d" 0 1 (face font-lock-doc-face fontified t)) . -1723) (undo-tree-id30 . -1) (#("e" 0 1 (face font-lock-doc-face fontified t)) . -1724) (undo-tree-id31 . -1) (#("t" 0 1 (face font-lock-doc-face fontified t)) . -1725) (undo-tree-id32 . -1) 1726) nil (26041 17739 525701 957000) 0 nil])
([nil nil ((1723 . 1736)) nil (26041 17739 525701 260000) 0 nil])
([nil nil ((#("y" 0 1 (face font-lock-doc-face fontified t)) . -1735) (undo-tree-id29 . -1) 1736) nil (26041 17739 525701 4000) 0 nil])
([nil nil ((1735 . 1740)) nil (26041 17739 525700 672000) 0 nil])
([nil nil ((#("s" 0 1 (face font-lock-doc-face fontified t)) . -1738) (undo-tree-id27 . -1) (#("d" 0 1 (face font-lock-doc-face fontified t)) . -1739) (undo-tree-id28 . -1) 1740) nil (26041 17739 525700 494000) 0 nil])
([nil nil ((1738 . 1752)) nil (26041 17739 525699 754000) 0 nil])
([nil nil ((#("d" 0 1 (face font-lock-doc-face fontified t)) . -1732) (undo-tree-id7 . -1) (#(" " 0 1 (face font-lock-doc-face fontified t)) . -1733) (undo-tree-id8 . -1) (#("b" 0 1 (face font-lock-doc-face fontified t)) . -1734) (undo-tree-id9 . -1) (#("a" 0 1 (face font-lock-doc-face fontified t)) . -1735) (undo-tree-id10 . -1) (#("s" 0 1 (face font-lock-doc-face fontified t)) . -1736) (undo-tree-id11 . -1) (#("e" 0 1 (face font-lock-doc-face fontified t)) . -1737) (undo-tree-id12 . -1) (#("d" 0 1 (face font-lock-doc-face fontified t)) . -1738) (undo-tree-id13 . -1) (#(" " 0 1 (face font-lock-doc-face fontified t)) . -1739) (undo-tree-id14 . -1) (#("o" 0 1 (face font-lock-doc-face fontified t)) . -1740) (undo-tree-id15 . -1) (#("n" 0 1 (face font-lock-doc-face fontified t)) . -1741) (undo-tree-id16 . -1) (#(" " 0 1 (face font-lock-doc-face fontified t)) . -1742) (undo-tree-id17 . -1) (#("t" 0 1 (face font-lock-doc-face fontified t)) . -1743) (undo-tree-id18 . -1) (#("h" 0 1 (face font-lock-doc-face fontified t)) . -1744) (undo-tree-id19 . -1) (#("e" 0 1 (face font-lock-doc-face fontified t)) . -1745) (undo-tree-id20 . -1) (#(" " 0 1 (face font-lock-doc-face fontified t)) . -1746) (undo-tree-id21 . -1) (#("u" 0 1 (face font-lock-doc-face fontified t)) . -1747) (undo-tree-id22 . -1) (#("s" 0 1 (face font-lock-doc-face fontified t)) . -1748) (undo-tree-id23 . -1) (#("e" 0 1 (face font-lock-doc-face fontified t)) . -1749) (undo-tree-id24 . -1) (#("'" 0 1 (face font-lock-doc-face fontified t)) . -1750) (undo-tree-id25 . -1) (#("s" 0 1 (face font-lock-doc-face fontified t)) . -1751) (undo-tree-id26 . -1) 1752) nil (26041 17739 525698 984000) 0 nil])
([nil nil ((1732 . 1734)) nil (26041 17739 525693 871000) 0 nil])
([nil nil ((2622 . 2632) (#("
        " 0 9 (face font-lock-doc-face fontified t)) . 2622) (1743 . 1751) (#(" " 0 1 (face font-lock-doc-face fontified nil)) . -1743) (nil face nil 1742 . 1743) (1742 . 1743) (1675 . 1683) (#(" " 0 1 (face font-lock-doc-face fontified nil)) . -1675) (nil face nil 1674 . 1675) (1674 . 1675) (#(" " 0 1 (face font-lock-doc-face fontified nil)) . -1735) (1735 . 1736) (#("
" 0 1 (face font-lock-doc-face fontified nil)) . 1735) (1734 . 1735) (#("        " 0 8 (face font-lock-doc-face fontified t)) . 1735) 1734) nil (26041 17739 525693 519000) 0 nil])
([nil nil ((1742 . 1751)) nil (26041 17739 525692 973000) 0 nil])
([nil nil ((1751 . 1754)) nil (26041 17739 525692 800000) 0 nil])
([nil nil ((1447 . 1452)) nil (26041 17739 525692 542000) 0 nil])
([nil nil ((#("P" 0 1 (face font-lock-doc-face fontified t)) . -1452) (undo-tree-id6 . -1) 1453) nil (26041 17739 525692 242000) 0 nil])
([nil nil ((1452 . 1453)) nil (26041 17739 525684 730000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . 1502) 1453) nil (26041 17739 525681 972000) 0 nil])
([nil nil ((478 . 2637) (#("    query: Query

    @staticmethod
    def from_toml(query_str: str) -> \"DeviceLabel\":
        return DeviceLabel(Query.parse(query_str))

    def to_toml(self) -> str:
        return self.query.as_str()


@dataclass
class Config:
    \"\"\"Tool configuration that maps to a TOML document.\"\"\"
    device_labels: dict[str, DeviceLabel]

    @staticmethod
    def from_toml(document: TOMLDocument) -> \"Config\":
        config = Config({})
        config.device_labels = {
            k: DeviceLabel.from_toml(v)
            for k, v in document.get(\"device_labels\", tomlkit.table()).items()
        }
        return config

    def to_toml(self) -> TOMLDocument:
        # TODO(dhrosa): Preserve original document, so comments and such are not
        # overwritten.
        document = tomlkit.document()
        document[\"device_labels\"] = {
            k: v.to_toml() for k, v in self.device_labels.items()
        }
        return document


class ConfigStorage:
    \"\"\"Lazy persistent storage layer for `Config` objects.\"\"\"

    def __init__(self, path_override: Path | None = None):
        \"\"\"Lazily create storage.

        If `path_override` is specified, configuration will be read/written to
        that path. Otherwise, the path is automatically determined.
        \"\"\"
        self._path_override = path_override

    @contextmanager
    def open(self) -> Iterator[Config]:
        document = tomlkit.document()
        if self.path.exists():
            with self.path.open(\"r\") as f:
                document = tomlkit.load(f)

        config = Config.from_toml(document)
        old_config = deepcopy(config)
        yield config

        if old_config == config:
            return

        if not (parent := self.path.parent).exists():
            logging.info(
                f\"Parent directory {parent} does not exist. Creating parents now.\"
            )
            parent.mkdir(parents=True)

        logging.info(f\"Writing to config file: {self.path}\")
        with self.path.open(\"w\") as f:
            tomlkit.dump(config.to_toml(), f)
            logging.info(\"Config file updated.\")

    @cached_property
    def path(self) -> Path:
" 0 23 (fontified t) 23 35 (face font-lock-builtin-face fontified t) 35 40 (fontified t) 40 43 (face font-lock-keyword-face fontified t) 43 44 (fontified t) 44 53 (face font-lock-function-name-face fontified t) 53 65 (fontified t) 65 68 (face font-lock-builtin-face fontified t) 68 70 (fontified t) 70 71 (face font-lock-operator-face fontified t) 71 72 (face font-lock-operator-face fontified t) 72 73 (fontified t) 73 86 (face font-lock-string-face fontified t) 86 96 (fontified t) 96 102 (face font-lock-keyword-face fontified t) 102 144 (fontified t) 144 147 (face font-lock-keyword-face fontified t) 147 148 (fontified t) 148 155 (face font-lock-function-name-face fontified t) 155 156 (fontified t) 156 160 (face font-lock-keyword-face fontified t) 160 162 (fontified t) 162 163 (face font-lock-operator-face fontified t) 163 164 (face font-lock-operator-face fontified t) 164 165 (fontified t) 165 168 (face font-lock-builtin-face fontified t) 168 178 (fontified t) 178 184 (face font-lock-keyword-face fontified t) 184 185 (fontified t) 185 189 (face font-lock-keyword-face fontified t) 189 207 (fontified t) 207 217 (face font-lock-type-face fontified t) 217 218 (fontified t) 218 223 (face font-lock-keyword-face fontified t) 223 224 (fontified t) 224 230 (face font-lock-type-face fontified t) 230 232 (fontified t) 232 236 (fontified t) 236 238 (face font-lock-doc-face fontified t) 238 239 (face font-lock-doc-face syntax-table (15) fontified t) 239 287 (face font-lock-doc-face fontified t) 287 288 (face font-lock-doc-face syntax-table (15) fontified t) 288 290 (face font-lock-doc-face fontified t) 290 291 (fontified t) 291 310 (fontified t) 310 314 (face font-lock-builtin-face fontified t) 314 315 (fontified t) 315 318 (face font-lock-builtin-face fontified t) 318 339 (fontified t) 339 351 (face font-lock-builtin-face fontified t) 351 356 (fontified t) 356 359 (face font-lock-keyword-face fontified t) 359 360 (fontified t) 360 369 (face font-lock-function-name-face fontified t) 369 394 (fontified t) 394 395 (face font-lock-operator-face fontified t) 395 396 (face font-lock-operator-face fontified t) 396 397 (fontified t) 397 405 (face font-lock-string-face fontified t) 405 415 (fontified t) 415 421 (face font-lock-variable-name-face fontified t) 421 422 (fontified t) 422 423 (face font-lock-operator-face fontified t) 423 450 (fontified t) 450 463 (face font-lock-variable-name-face fontified t) 463 464 (fontified t) 464 465 (face font-lock-operator-face fontified t) 465 520 (fontified t) 520 523 (face font-lock-keyword-face fontified t) 523 529 (fontified t) 529 531 (face font-lock-keyword-face fontified t) 531 545 (fontified t) 545 560 (face font-lock-string-face fontified t) 560 605 (fontified t) 605 611 (face font-lock-keyword-face fontified t) 611 624 (fontified t) 624 627 (face font-lock-keyword-face fontified t) 627 628 (fontified t) 628 635 (face font-lock-function-name-face fontified t) 635 636 (fontified t) 636 640 (face font-lock-keyword-face fontified t) 640 642 (fontified t) 642 643 (face font-lock-operator-face fontified t) 643 644 (face font-lock-operator-face fontified t) 644 667 (fontified t) 667 669 (face font-lock-comment-delimiter-face fontified t) 669 740 (face font-lock-comment-face fontified t) 740 748 (fontified t) 748 750 (face font-lock-comment-delimiter-face fontified t) 750 763 (face font-lock-comment-face fontified t) 763 771 (fontified t) 771 779 (face font-lock-variable-name-face fontified t) 779 780 (fontified t) 780 781 (face font-lock-operator-face fontified t) 781 809 (fontified t) 809 817 (face font-lock-variable-name-face fontified t) 817 818 (fontified t) 818 833 (face font-lock-string-face fontified t) 833 835 (fontified t) 835 836 (face font-lock-operator-face fontified t) 836 866 (fontified t) 866 869 (face font-lock-keyword-face fontified t) 869 875 (fontified t) 875 877 (face font-lock-keyword-face fontified t) 877 878 (fontified t) 878 882 (face font-lock-keyword-face fontified t) 882 923 (fontified t) 923 929 (face font-lock-keyword-face fontified t) 929 941 (fontified t) 941 946 (face font-lock-keyword-face fontified t) 946 947 (fontified t) 947 960 (face font-lock-type-face fontified t) 960 962 (fontified t) 962 966 (fontified t) 966 967 (face font-lock-doc-face fontified t) 967 968 (face font-lock-doc-face fontified t) 968 969 (face font-lock-doc-face syntax-table (15) fontified t) 969 1020 (face font-lock-doc-face fontified t) 1020 1021 (face font-lock-doc-face syntax-table (15) fontified t) 1021 1023 (face font-lock-doc-face fontified t) 1023 1024 (fontified t) 1024 1025 (fontified t) 1025 1029 (fontified t) 1029 1032 (face font-lock-keyword-face fontified t) 1032 1033 (fontified t) 1033 1041 (face font-lock-function-name-face fontified t) 1041 1042 (fontified t) 1042 1046 (face font-lock-keyword-face fontified t) 1046 1068 (fontified t) 1068 1069 (face font-lock-operator-face fontified t) 1069 1070 (fontified t) 1070 1074 (face font-lock-constant-face fontified t) 1074 1075 (fontified t) 1075 1076 (face font-lock-operator-face fontified t) 1076 1077 (fontified t) 1077 1081 (face font-lock-constant-face fontified t) 1081 1084 (fontified t) 1084 1092 (fontified t) 1092 1094 (face font-lock-doc-face fontified t) 1094 1095 (face font-lock-doc-face fontified t syntax-table (15)) 1095 1118 (face font-lock-doc-face fontified t) 1118 1119 (face font-lock-doc-face fontified t) 1119 1197 (face font-lock-doc-face fontified t) 1197 1198 (face font-lock-doc-face fontified t) 1198 1206 (face font-lock-doc-face fontified t) 1206 1266 (face font-lock-doc-face fontified t) 1266 1274 (face font-lock-doc-face fontified t) 1274 1275 (face font-lock-doc-face fontified t syntax-table (15)) 1275 1277 (face font-lock-doc-face fontified t) 1277 1278 (fontified t) 1278 1286 (fontified t) 1286 1290 (face font-lock-keyword-face fontified t) 1290 1291 (fontified t) 1291 1305 (face font-lock-variable-name-face fontified t) 1305 1306 (fontified t) 1306 1307 (face font-lock-operator-face fontified t) 1307 1322 (fontified t) 1322 1327 (fontified t) 1327 1342 (face font-lock-type-face fontified t) 1342 1347 (fontified t) 1347 1350 (face font-lock-keyword-face fontified t) 1350 1351 (fontified t) 1351 1355 (face font-lock-function-name-face fontified t) 1355 1356 (fontified t) 1356 1360 (face font-lock-keyword-face fontified t) 1360 1362 (fontified t) 1362 1363 (face font-lock-operator-face fontified t) 1363 1364 (face font-lock-operator-face fontified t) 1364 1391 (fontified t) 1391 1399 (face font-lock-variable-name-face fontified t) 1399 1400 (fontified t) 1400 1401 (face font-lock-operator-face fontified t) 1401 1429 (fontified t) 1429 1431 (face font-lock-keyword-face fontified t) 1431 1432 (fontified t) 1432 1436 (face font-lock-keyword-face fontified t) 1436 1452 (fontified t) 1452 1464 (fontified t) 1464 1468 (face font-lock-keyword-face fontified t) 1468 1469 (fontified t) 1469 1473 (face font-lock-keyword-face fontified t) 1473 1479 (fontified t) 1479 1483 (face font-lock-builtin-face fontified t) 1483 1484 (fontified t) 1484 1487 (face font-lock-string-face fontified t) 1487 1489 (fontified t) 1489 1491 (face font-lock-keyword-face fontified t) 1491 1511 (fontified t) 1511 1519 (face font-lock-variable-name-face fontified t) 1519 1520 (fontified t) 1520 1521 (face font-lock-operator-face fontified t) 1521 1547 (fontified t) 1547 1553 (face font-lock-variable-name-face fontified t) 1553 1554 (fontified t) 1554 1555 (face font-lock-operator-face fontified t) 1555 1591 (fontified t) 1591 1601 (face font-lock-variable-name-face fontified t) 1601 1602 (fontified t) 1602 1603 (face font-lock-operator-face fontified t) 1603 1629 (fontified t) 1629 1634 (face font-lock-keyword-face fontified t) 1634 1651 (fontified t) 1651 1653 (face font-lock-keyword-face fontified t) 1653 1665 (fontified t) 1665 1667 (face font-lock-operator-face fontified t) 1667 1688 (fontified t) 1688 1694 (face font-lock-keyword-face fontified t) 1694 1704 (fontified t) 1704 1706 (face font-lock-keyword-face fontified t) 1706 1707 (fontified t) 1707 1710 (face font-lock-keyword-face fontified t) 1710 1720 (fontified t) 1720 1721 (face font-lock-operator-face fontified t) 1721 1722 (fontified t) 1722 1726 (face font-lock-keyword-face fontified t) 1726 1792 (fontified t) 1792 1793 (fontified t) 1793 1811 (face font-lock-string-face fontified t) 1811 1816 (face nil fontified t) 1816 1819 (face nil fontified t) 1819 1858 (face font-lock-string-face fontified t) 1858 1859 (fontified t) 1859 1905 (fontified t) 1905 1906 (face font-lock-operator-face fontified t) 1906 1910 (face font-lock-constant-face fontified t) 1910 1935 (fontified t) 1935 1960 (face font-lock-string-face fontified t) 1960 1961 (face nil fontified t) 1961 1965 (face font-lock-keyword-face fontified t) 1965 1971 (face nil fontified t) 1971 1972 (face font-lock-string-face fontified t) 1972 1982 (fontified t) 1982 1986 (face font-lock-keyword-face fontified t) 1986 1987 (fontified t) 1987 1991 (face font-lock-keyword-face fontified t) 1991 1997 (fontified t) 1997 2001 (face font-lock-builtin-face fontified t) 2001 2002 (fontified t) 2002 2005 (face font-lock-string-face fontified t) 2005 2007 (fontified t) 2007 2009 (face font-lock-keyword-face fontified t) 2009 2029 (fontified t) 2029 2040 (fontified t) 2040 2048 (fontified t) 2048 2059 (fontified t) 2059 2084 (fontified t) 2084 2106 (face font-lock-string-face fontified t) 2106 2113 (fontified t) 2113 2129 (face font-lock-type-face fontified t) 2129 2130 (fontified t) 2130 2134 (fontified t) 2134 2137 (face font-lock-keyword-face fontified t) 2137 2138 (fontified t) 2138 2142 (face font-lock-function-name-face fontified t) 2142 2143 (fontified t) 2143 2147 (face font-lock-keyword-face fontified t) 2147 2149 (fontified t) 2149 2150 (face font-lock-operator-face fontified t) 2150 2151 (face font-lock-operator-face fontified t) 2151 2158 (fontified t)) . 478) (undo-tree-id213 . -975) (undo-tree-id214 . -740) (undo-tree-id215 . -1061) (undo-tree-id216 . -277) (undo-tree-id217 . -986) (undo-tree-id218 . -239) (undo-tree-id219 . -961) (undo-tree-id220 . -986) 1453 (t 26041 17739 532187 324000)) nil (26041 18089 100809 599000) 0 nil])
([nil nil ((1862 . 1871) (t 26041 17740 604199 389000)) nil (26041 18089 100807 332000) 0 nil])
([nil nil ((1871 . 1874)) nil (26041 18089 100807 147000) 0 nil])
([nil nil ((1874 . 1895)) nil (26041 18089 100807 32000) 0 nil])
([nil nil ((1895 . 1900)) nil (26041 18089 100806 912000) 0 nil])
([nil nil ((#("lazily" 0 6 (face font-lock-doc-face fontified t)) . 1894)) nil (26041 18089 100806 749000) 0 nil])
([nil nil ((1894 . 1902)) nil (26041 18089 100806 579000) 0 nil])
([nil nil ((1902 . 1923)) nil (26041 18089 100806 449000) 0 nil])
([nil nil ((1923 . 1938)) nil (26041 18089 100806 332000) 0 nil])
([nil nil ((1940 . 1948) (#("        " 0 8 (face font-lock-doc-face fontified nil)) . 1939) (undo-tree-id212 . -8) (1938 . 1948)) nil (26041 18089 100806 171000) 0 nil])
([nil nil ((1948 . 1949)) nil (26041 18089 100805 819000) 0 nil])
([nil nil ((#("I" 0 1 (face font-lock-doc-face fontified t)) . -1948) (undo-tree-id211 . -1) 1949) nil (26041 18089 100805 661000) 0 nil])
([nil nil ((1948 . 1955)) nil (26041 18089 100805 321000) 0 nil])
([nil nil ((1955 . 1972)) nil (26041 18089 100805 192000) 0 nil])
([nil nil ((#("the file doesn't open" 0 21 (face font-lock-doc-face fontified t)) . 1951)) nil (26041 18089 100805 60000) 0 nil])
([nil nil ((1951 . 1967)) nil (26041 18089 100804 940000) 0 nil])
([nil nil ((#("the path to the " 0 16 (face font-lock-doc-face fontified t)) . 1951)) nil (26041 18089 100804 797000) 0 nil])
([nil nil ((#("I" 0 1 (face font-lock-doc-face fontified t)) . -1948) (undo-tree-id208 . -1) (#("f" 0 1 (face font-lock-doc-face fontified t)) . -1949) (undo-tree-id209 . -1) (#(" " 0 1 (face font-lock-doc-face fontified t)) . -1950) (undo-tree-id210 . -1) 1951) nil (26041 18089 100804 584000) 0 nil])
([nil nil ((1948 . 1952)) nil (26041 18089 100803 894000) 0 nil])
([nil nil ((#("`" 0 1 (face font-lock-doc-face fontified t)) . -1951) (undo-tree-id207 . -1) 1952) nil (26041 18089 100803 739000) 0 nil])
([nil nil ((1951 . 1952)) nil (26041 18089 100803 393000) 0 nil])
([nil nil ((#("s" 0 1 (face font-lock-doc-face fontified t)) . -1951) (undo-tree-id206 . -1) 1952) nil (26041 18089 100803 232000) 0 nil])
([nil nil ((1951 . 1967)) nil (26041 18089 100802 875000) 0 nil])
([nil nil ((1967 . 1988)) nil (26041 18089 100802 733000) 0 nil])
([nil nil ((1988 . 1996)) nil (26041 18089 100802 607000) 0 nil])
([nil nil ((#(" " 0 1 (face font-lock-doc-face fontified t)) . -1995) (undo-tree-id205 . -1) 1996) nil (26041 18089 100802 447000) 0 nil])
([nil nil ((1995 . 2016)) nil (26041 18089 100802 104000) 0 nil])
([nil nil ((2016 . 2021)) nil (26041 18089 100801 979000) 0 nil])
([nil nil ((2023 . 2031) (#("        " 0 8 (face font-lock-doc-face fontified nil)) . 2022) (undo-tree-id204 . -8) (2021 . 2031)) nil (26041 18089 100801 814000) 0 nil])
([nil nil ((2021 . 2042)) nil (26041 18089 100801 478000) 0 nil])
([nil nil ((2042 . 2044)) nil (26041 18089 100801 359000) 0 nil])
([nil nil ((#("Otherwise, the Config " 0 22 (face font-lock-doc-face fontified t)) . 2022)) nil (26041 18089 100801 231000) 0 nil])
([nil nil ((2022 . 2029)) nil (26041 18089 100801 107000) 0 nil])
([nil nil ((#("o" 0 1 (face font-lock-doc-face fontified t)) . -2022) (undo-tree-id197 . -1) (#("t" 0 1 (face font-lock-doc-face fontified t)) . -2023) (undo-tree-id198 . -1) (#("h" 0 1 (face font-lock-doc-face fontified t)) . -2024) (undo-tree-id199 . -1) (#("e" 0 1 (face font-lock-doc-face fontified t)) . -2025) (undo-tree-id200 . -1) (#("r" 0 1 (face font-lock-doc-face fontified t)) . -2026) (undo-tree-id201 . -1) (#("w" 0 1 (face font-lock-doc-face fontified t)) . -2027) (undo-tree-id202 . -1) (#("=" 0 1 (face font-lock-doc-face fontified t)) . -2028) (undo-tree-id203 . -1) 2029) nil (26041 18089 100800 749000) 0 nil])
([nil nil ((2022 . 2037)) nil (26041 18089 100799 404000) 0 nil])
([nil nil ((#("that " 0 5 (face font-lock-doc-face fontified t)) . 2032)) nil (26041 18089 100799 207000) 0 nil])
([nil nil ((2032 . 2037)) nil (26041 18089 100799 86000) 0 nil])
([nil nil ((2037 . 2038)) nil (26041 18089 100798 750000) 0 nil])
([nil nil ((#("0" 0 1 (face font-lock-doc-face fontified t)) . -2037) (undo-tree-id196 . -1) 2038) nil (26041 18089 100798 449000) 0 nil])
([nil nil ((#("that " 0 5 (face font-lock-doc-face fontified t)) . 2032)) nil (26041 18089 100798 12000) 0 nil])
([nil nil ((2032 . 2053)) nil (26041 18089 100797 894000) 0 nil])
([nil nil ((2053 . 2074)) nil (26041 18089 100797 767000) 0 nil])
([nil nil ((2074 . 2086)) nil (26041 18089 100797 646000) 0 nil])
([nil nil ((2086 . 2091)) nil (26041 18089 100797 507000) 0 nil])
([nil nil ((2093 . 2101) (#("        " 0 8 (face font-lock-doc-face fontified nil)) . 2092) (undo-tree-id195 . -8) (2091 . 2101)) nil (26041 18089 100797 343000) 0 nil])
([nil nil ((2101 . 2116)) nil (26041 18089 100796 956000) 0 nil])
([nil nil ((#("e" 0 1 (face font-lock-doc-face fontified t)) . -2109) (undo-tree-id188 . -1) (#(" " 0 1 (face font-lock-doc-face fontified t)) . -2110) (undo-tree-id189 . -1) (#("c" 0 1 (face font-lock-doc-face fontified t)) . -2111) (undo-tree-id190 . -1) (#("o" 0 1 (face font-lock-doc-face fontified t)) . -2112) (undo-tree-id191 . -1) (#("n" 0 1 (face font-lock-doc-face fontified t)) . -2113) (undo-tree-id192 . -1) (#("t" 0 1 (face font-lock-doc-face fontified t)) . -2114) (undo-tree-id193 . -1) (#("e" 0 1 (face font-lock-doc-face fontified t)) . -2115) (undo-tree-id194 . -1) 2116) nil (26041 18089 100796 593000) 0 nil])
([nil nil ((2109 . 2121)) nil (26041 18089 100794 902000) 0 nil])
([nil nil ((2121 . 2136)) nil (26041 18089 100794 782000) 0 nil])
([nil nil ((#("exited" 0 6 (face font-lock-doc-face fontified t)) . 2130)) nil (26041 18089 100794 645000) 0 nil])
([nil nil ((#("is " 0 3 (face font-lock-doc-face fontified t)) . 2127)) nil (26041 18089 100794 507000) 0 nil])
([nil nil ((2127 . 2134)) nil (26041 18089 100794 314000) 0 nil])
([nil nil ((2134 . 2135)) nil (26041 18089 100794 181000) 0 nil])
([nil nil ((2135 . 2153)) nil (26041 18089 100794 57000) 0 nil])
([nil nil ((#("y" 0 1 (face font-lock-doc-face fontified t)) . -2136) (undo-tree-id171 . -1) (#(" " 0 1 (face font-lock-doc-face fontified t)) . -2137) (undo-tree-id172 . -1) (#("m" 0 1 (face font-lock-doc-face fontified t)) . -2138) (undo-tree-id173 . -1) (#("u" 0 1 (face font-lock-doc-face fontified t)) . -2139) (undo-tree-id174 . -1) (#("t" 0 1 (face font-lock-doc-face fontified t)) . -2140) (undo-tree-id175 . -1) (#("a" 0 1 (face font-lock-doc-face fontified t)) . -2141) (undo-tree-id176 . -1) (#("t" 0 1 (face font-lock-doc-face fontified t)) . -2142) (undo-tree-id177 . -1) (#("i" 0 1 (face font-lock-doc-face fontified t)) . -2143) (undo-tree-id178 . -1) (#("o" 0 1 (face font-lock-doc-face fontified t)) . -2144) (undo-tree-id179 . -1) (#("n" 0 1 (face font-lock-doc-face fontified t)) . -2145) (undo-tree-id180 . -1) (#("s" 0 1 (face font-lock-doc-face fontified t)) . -2146) (undo-tree-id181 . -1) (#(" " 0 1 (face font-lock-doc-face fontified t)) . -2147) (undo-tree-id182 . -1) (#("t" 0 1 (face font-lock-doc-face fontified t)) . -2148) (undo-tree-id183 . -1) (#("o" 0 1 (face font-lock-doc-face fontified t)) . -2149) (undo-tree-id184 . -1) (#(" " 0 1 (face font-lock-doc-face fontified t)) . -2150) (undo-tree-id185 . -1) (#("t" 0 1 (face font-lock-doc-face fontified t)) . -2151) (undo-tree-id186 . -1) (#("h" 0 1 (face font-lock-doc-face fontified t)) . -2152) (undo-tree-id187 . -1) 2153) nil (26041 18089 100793 490000) 0 nil])
([nil nil ((2136 . 2147)) nil (26041 18089 100790 40000) 0 nil])
([nil nil ((#("any mutations" 0 13 (face font-lock-doc-face fontified t)) . 2134)) nil (26041 18089 100789 865000) 0 nil])
([nil nil ((#("," 0 1 (face font-lock-doc-face fontified t)) . -2132) (undo-tree-id169 . -1) (#(" " 0 1 (face font-lock-doc-face fontified t)) . -2133) (undo-tree-id170 . -1) 2134) nil (26041 18089 100789 678000) 0 nil])
([nil nil ((#("When this context manager exits" 0 31 (face font-lock-doc-face fontified t)) . 2101)) nil (26041 18089 100789 79000) 0 nil])
([nil nil ((2101 . 2105)) nil (26041 18089 100788 946000) 0 nil])
([nil nil ((2105 . 2126)) nil (26041 18089 100788 831000) 0 nil])
([nil nil ((2126 . 2141)) nil (26041 18089 100788 712000) 0 nil])
([nil nil ((#("h" 0 1 (face font-lock-doc-face fontified t)) . -2140) (undo-tree-id168 . -1) 2141) nil (26041 18089 100788 555000) 0 nil])
([nil nil ((2140 . 2161)) nil (26041 18089 100788 207000) 0 nil])
([nil nil ((2161 . 2182)) nil (26041 18089 100788 88000) 0 nil])
([nil nil ((2182 . 2203)) nil (26041 18089 100787 970000) 0 nil])
([nil nil ((2203 . 2210)) nil (26041 18089 100787 848000) 0 nil])
([nil nil ((2210 . 2222)) nil (26041 18089 100787 717000) 0 nil])
([nil nil ((3015 . 3025) (#("
        " 0 1 (face font-lock-doc-face fontified t) 1 9 (face font-lock-doc-face fontified t)) . 3015) (2173 . 2181) (#(" " 0 1 (face font-lock-doc-face fontified nil)) . -2173) (nil face nil 2172 . 2173) (2172 . 2173) 2222) nil (26041 18089 100787 519000) 0 nil])
([nil nil ((2230 . 2245)) nil (26041 18089 100787 211000) 0 nil])
([nil nil ((2231 . 2232)) nil (26041 18089 100787 81000) 0 nil])
([nil nil ((#("k" 0 1 (face font-lock-doc-face fontified t)) . -2231) (undo-tree-id167 . -1) 2232) nil (26041 18089 100786 928000) 0 nil])
([nil nil ((#("If no changes " 0 14 (face font-lock-doc-face fontified t)) . 2231)) nil (26041 18089 100786 396000) 0 nil])
([nil nil ((#("." 0 1 (face font-lock-doc-face fontified t)) . -2229) (undo-tree-id165 . -1) (#(" " 0 1 (face font-lock-doc-face fontified t)) . -2230) (undo-tree-id166 . -1) 2231) nil (26041 18089 100786 204000) 0 nil])
([nil nil ((2229 . 2250)) nil (26041 18089 100785 608000) 0 nil])
([nil nil ((#("i" 0 1 (face font-lock-doc-face fontified t)) . -2249) (undo-tree-id164 . -1) 2250) nil (26041 18089 100785 447000) 0 nil])
([nil nil ((2249 . 2270)) nil (26041 18089 100785 87000) 0 nil])
([nil nil ((2270 . 2282)) nil (26041 18089 100784 941000) 0 nil])
([nil nil ((3075 . 3085) (#("

        " 0 10 (face font-lock-doc-face fontified t)) . 3075) (2253 . 2261) (#(" " 0 1 (face font-lock-doc-face fontified nil)) . -2253) (nil face nil 2252 . 2253) (2252 . 2253) (2173 . 2181) (#(" " 0 1 (face font-lock-doc-face fontified nil)) . -2173) (nil face nil 2172 . 2173) (2172 . 2173) (2172 . 2173) (#("
" 0 1 (face font-lock-doc-face fontified t)) . 2172) (#("        " 0 8 (face font-lock-doc-face fontified t)) . 2173) 2282) nil (26041 18089 100784 584000) 0 nil])
([nil nil ((2290 . 2291)) nil (26041 18089 100784 94000) 0 nil])
([nil nil ((2291 . 2299)) nil (26041 18089 100783 977000) 0 nil])
([nil nil ((#("c" 0 1 (face font-lock-doc-face fontified t)) . -2297) (undo-tree-id162 . -1) (#("h" 0 1 (face font-lock-doc-face fontified t)) . -2298) (undo-tree-id163 . -1) 2299) nil (26041 18089 100783 711000) 0 nil])
([nil nil ((2297 . 2318)) nil (26041 18089 100783 167000) 0 nil])
([nil nil ((2318 . 2327)) nil (26041 18089 100782 971000) 0 nil])
([nil nil ((#("O" 0 1 (face font-lock-doc-face fontified t)) . -2326) (undo-tree-id161 . -1) 2327) nil (26041 18089 100782 814000) 0 nil])
([nil nil ((2326 . 2330)) nil (26041 18089 100782 484000) 0 nil])
([nil nil ((2330 . 2351)) nil (26041 18089 100782 359000) 0 nil])
([nil nil ((2351 . 2372)) nil (26041 18089 100782 237000) 0 nil])
([nil nil ((2372 . 2383)) nil (26041 18089 100782 111000) 0 nil])
([nil nil ((2380 . 2389)) nil (26041 18089 100781 901000) 0 nil])
([nil nil ((2388 . 2398) (#(" " 0 1 (face font-lock-doc-face fontified nil)) . 2388) (undo-tree-id156 . -1) (2330 . 2338) (#(" " 0 1 (face font-lock-doc-face fontified nil)) . -2330) (nil face nil 2329 . 2330) (2329 . 2330) (2253 . 2261) (#(" " 0 1 (face font-lock-doc-face fontified nil)) . -2253) (undo-tree-id157 . -1) (nil face nil 2252 . 2253) (2252 . 2253) (2173 . 2181) (#(" " 0 1 (face font-lock-doc-face fontified nil)) . -2173) (nil face nil 2172 . 2173) (2172 . 2173) (#(" " 0 1 (face font-lock-doc-face fontified nil)) . -2365) (undo-tree-id158 . 1) (undo-tree-id159 . -1) (2365 . 2366) (#("
" 0 1 (face font-lock-doc-face fontified nil)) . 2365) (2244 . 2245) (#("
" 0 1 (face font-lock-doc-face fontified nil)) . 2244) (2172 . 2173) (#("
" 0 1 (face font-lock-doc-face fontified t)) . 2172) (2364 . 2365) (#("        " 0 8 (face font-lock-doc-face fontified t)) . 2365) (undo-tree-id160 . -8) (#("        " 0 8 (face font-lock-doc-face fontified t)) . 2245) (#("        " 0 8 (face font-lock-doc-face fontified t)) . 2173) 2354) nil (26041 18089 100781 371000) 0 nil])
([nil nil ((2388 . 2389)) nil (26041 18089 100779 701000) 0 nil])
([nil nil ((#(" " 0 1 (face font-lock-doc-face fontified t)) . -2388) (undo-tree-id154 . -1) (undo-tree-id155 . -1) 2389) nil (26041 18089 100779 529000) 0 nil])
([nil nil ((2388 . 2389)) nil (26041 18089 100779 4000) 0 nil])
([nil nil ((#(" " 0 1 (face font-lock-doc-face fontified t)) . -2388) (undo-tree-id152 . -1) (undo-tree-id153 . -1) 2389) nil (26041 18089 100778 829000) 0 nil])
([nil nil ((2390 . 2398) (#("        " 0 8 (face font-lock-doc-face fontified nil)) . 2389) (undo-tree-id150 . -8) (undo-tree-id151 . -8) (2388 . 2398)) nil (26041 18089 100778 150000) 0 nil])
([nil nil ((2398 . 2419)) nil (26041 18089 100775 928000) 0 nil])
([nil nil ((2419 . 2424)) nil (26041 18089 100775 802000) 0 nil])
([nil nil ((2408 . 2409)) nil (26041 18089 100775 668000) 0 nil])
([nil nil ((#("lets kus use the same " 0 22 (face font-lock-doc-face fontified t)) . 2403) (undo-tree-id124 . -3) (undo-tree-id125 . -4) (undo-tree-id126 . -5) (undo-tree-id127 . -7) (undo-tree-id128 . -8) (undo-tree-id129 . -9) (undo-tree-id130 . -10) (undo-tree-id131 . -11) (undo-tree-id132 . -12) (undo-tree-id133 . -13) (undo-tree-id134 . -14) (undo-tree-id135 . -15) (undo-tree-id136 . -16) (undo-tree-id137 . -17) (undo-tree-id138 . -18) (undo-tree-id139 . -19) (undo-tree-id140 . -20) (undo-tree-id141 . -21) (undo-tree-id142 . -22) (undo-tree-id143 . -17) (undo-tree-id144 . -13) (undo-tree-id145 . -9) (undo-tree-id146 . -5) (undo-tree-id147 . -6) (undo-tree-id148 . -5) (undo-tree-id149 . -22)) nil (26041 18089 100775 332000) 0 nil])
([nil nil ((2403 . 2417)) nil (26041 18089 100770 558000) 0 nil])
([nil nil ((#(" " 0 1 (face font-lock-doc-face fontified t)) . -2415) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (#("f" 0 1 (face font-lock-doc-face fontified t)) . -2416) (undo-tree-id122 . -1) (undo-tree-id123 . -1) 2417) nil (26041 18089 100770 328000) 0 nil])
([nil nil ((2415 . 2436)) nil (26041 18089 100768 967000) 0 nil])
([nil nil ((2436 . 2457)) nil (26041 18089 100768 774000) 0 nil])
([nil nil ((2457 . 2459)) nil (26041 18089 100768 572000) 0 nil])
([nil nil ((2459 . 2480)) nil (26041 18089 100768 451000) 0 nil])
([nil nil ((2480 . 2501)) nil (26041 18089 100768 326000) 0 nil])
([nil nil ((2501 . 2505)) nil (26041 18089 100768 188000) 0 nil])
([nil nil ((#("o" 0 1 (face font-lock-doc-face fontified t)) . -2502) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (#("n" 0 1 (face font-lock-doc-face fontified t)) . -2503) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (#("f" 0 1 (face font-lock-doc-face fontified t)) . -2504) (undo-tree-id116 . -1) (undo-tree-id117 . -1) 2505) nil (26041 18089 100767 904000) 0 nil])
([nil nil ((2502 . 2507)) nil (26041 18089 100765 463000) 0 nil])
([nil nil ((2507 . 2518)) nil (26041 18089 100765 337000) 0 nil])
([nil nil ((2518 . 2539)) nil (26041 18089 100765 212000) 0 nil])
([nil nil ((2539 . 2560)) nil (26041 18089 100765 75000) 0 nil])
([nil nil ((2560 . 2561)) nil (26041 18089 100764 918000) 0 nil])
([nil nil ((#(", without polluting the user's filesystem with files " 0 53 (face font-lock-doc-face fontified t)) . 2508) (undo-tree-id81 . -38) (undo-tree-id82 . -39) (undo-tree-id83 . -40) (undo-tree-id84 . -41) (undo-tree-id85 . -42) (undo-tree-id86 . -43) (undo-tree-id87 . -44) (undo-tree-id88 . -45) (undo-tree-id89 . -46) (undo-tree-id90 . -47) (undo-tree-id91 . -48) (undo-tree-id92 . -49) (undo-tree-id93 . -50) (undo-tree-id94 . -51) (undo-tree-id95 . -52) (undo-tree-id96 . -53) (undo-tree-id97 . -47) (undo-tree-id98 . -42) (undo-tree-id99 . -31) (undo-tree-id100 . -29) (undo-tree-id101 . -24) (undo-tree-id102 . -20) (undo-tree-id103 . -10) (undo-tree-id104 . -2) (undo-tree-id105 . -53)) nil (26041 18089 100764 571000) 0 nil])
([nil nil ((2508 . 2529)) nil (26041 18089 100682 348000) 0 nil])
([nil nil ((2529 . 2539)) nil (26041 18089 100682 211000) 0 nil])
([nil nil ((#("accidentally " 0 13 (face font-lock-doc-face fontified t)) . 2526) (undo-tree-id76 . -10) (undo-tree-id77 . -11) (undo-tree-id78 . -12) (undo-tree-id79 . -13) (undo-tree-id80 . -13)) nil (26041 18089 100682 5000) 0 nil])
([nil nil ((2526 . 2546)) nil (26041 18089 100681 4000) 0 nil])
([nil nil ((#("s" 0 1 (face font-lock-doc-face fontified t)) . -2544) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (#(" " 0 1 (face font-lock-doc-face fontified t)) . -2545) (undo-tree-id74 . -1) (undo-tree-id75 . -1) 2546) nil (26041 18089 100680 685000) 0 nil])
([nil nil ((2544 . 2552)) nil (26041 18089 100678 577000) 0 nil])
([nil nil ((2552 . 2563)) nil (26041 18089 100678 409000) 0 nil])
([nil nil ((2578 . 2588) (#("

        " 0 1 (face font-lock-doc-face fontified nil) 1 10 (face font-lock-doc-face fontified t)) . 2578) (2548 . 2556) (#(" " 0 1 (face font-lock-doc-face fontified nil)) . -2548) (undo-tree-id65 . -1) (nil face nil 2547 . 2548) (2547 . 2548) (2469 . 2477) (#(" " 0 1 (face font-lock-doc-face fontified nil)) . -2469) (nil face nil 2468 . 2469) (2468 . 2469) (#(" " 0 1 (face font-lock-doc-face fontified t)) . 2562) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) 2563) nil (26041 18089 100678 16000) 0 nil])
([nil nil ((2578 . 2596)) nil (26041 18089 100675 498000) 0 nil])
([nil nil ((2596 . 2600)) nil (26041 18089 100675 349000) 0 nil])
([nil nil ((#("a" 0 1 (face font-lock-doc-face fontified t)) . -2599) (undo-tree-id63 . -1) (undo-tree-id64 . -1) 2600) nil (26041 18089 100675 16000) 0 nil])
([nil nil ((2599 . 2609)) nil (26041 18089 100668 39000) 0 nil])
([nil nil ((#("        " 0 8 (fontified t)) . 2624) 2609) nil (26041 18089 100665 363000) 0 nil])
([nil nil ((2624 . 3398) (#("
        document = tomlkit.document()
        if self.path.exists():
            with self.path.open(\"r\") as f:
                document = tomlkit.load(f)

        config = Config.from_toml(document)
        old_config = deepcopy(config)
        yield config

        if old_config == config:
            return

        if not (parent := self.path.parent).exists():
            logging.info(
                f\"Parent directory {parent} does not exist. Creating parents now.\"
            )
            parent.mkdir(parents=True)

        logging.info(f\"Writing to config file: {self.path}\")
        with self.path.open(\"w\") as f:
            tomlkit.dump(config.to_toml(), f)
            logging.info(\"Config file updated.\")

    @cached_property
    def path(self) -> Path:
" 0 1 (fontified t) 1 9 (fontified t) 9 17 (face font-lock-variable-name-face fontified t) 17 18 (fontified t) 18 19 (face font-lock-operator-face fontified t) 19 47 (fontified t) 47 49 (face font-lock-keyword-face fontified t) 49 50 (fontified t) 50 54 (face font-lock-keyword-face fontified t) 54 82 (fontified t) 82 86 (face font-lock-keyword-face fontified t) 86 87 (fontified t) 87 91 (face font-lock-keyword-face fontified t) 91 97 (fontified t) 97 101 (face font-lock-builtin-face fontified t) 101 102 (fontified t) 102 105 (face font-lock-string-face fontified t) 105 107 (fontified t) 107 109 (face font-lock-keyword-face fontified t) 109 116 (fontified t) 116 129 (fontified t) 129 137 (face font-lock-variable-name-face fontified t) 137 138 (fontified t) 138 139 (face font-lock-operator-face fontified t) 139 156 (fontified t) 156 165 (fontified t) 165 171 (face font-lock-variable-name-face fontified t) 171 172 (fontified t) 172 173 (face font-lock-operator-face fontified t) 173 209 (fontified t) 209 219 (face font-lock-variable-name-face fontified t) 219 220 (fontified t) 220 221 (face font-lock-operator-face fontified t) 221 247 (fontified t) 247 252 (face font-lock-keyword-face fontified t) 252 269 (fontified t) 269 271 (face font-lock-keyword-face fontified t) 271 283 (fontified t) 283 285 (face font-lock-operator-face fontified t) 285 306 (fontified t) 306 312 (face font-lock-keyword-face fontified t) 312 322 (fontified t) 322 324 (face font-lock-keyword-face fontified t) 324 325 (fontified t) 325 328 (face font-lock-keyword-face fontified t) 328 338 (fontified t) 338 339 (face font-lock-operator-face fontified t) 339 340 (fontified t) 340 344 (face font-lock-keyword-face fontified t) 344 411 (fontified t) 411 429 (face font-lock-string-face fontified t) 429 437 (face nil fontified t) 437 476 (face font-lock-string-face fontified t) 476 523 (fontified t) 523 524 (face font-lock-operator-face fontified t) 524 528 (face font-lock-constant-face fontified t) 528 553 (fontified t) 553 578 (face font-lock-string-face fontified t) 578 579 (face nil fontified t) 579 583 (face font-lock-keyword-face fontified t) 583 589 (face nil fontified t) 589 590 (face font-lock-string-face fontified t) 590 600 (fontified t) 600 604 (face font-lock-keyword-face fontified t) 604 605 (fontified t) 605 609 (face font-lock-keyword-face fontified t) 609 615 (fontified t) 615 619 (face font-lock-builtin-face fontified t) 619 620 (fontified t) 620 623 (face font-lock-string-face fontified t) 623 625 (fontified t) 625 627 (face font-lock-keyword-face fontified t) 627 702 (fontified t) 702 724 (face font-lock-string-face fontified t) 724 731 (fontified t) 731 747 (face font-lock-type-face fontified t) 747 748 (fontified t) 748 752 (fontified t) 752 755 (face font-lock-keyword-face fontified t) 755 756 (fontified t) 756 760 (face font-lock-function-name-face fontified t) 760 761 (fontified t) 761 765 (face font-lock-keyword-face fontified t) 765 767 (fontified t) 767 768 (face font-lock-operator-face fontified t) 768 769 (face font-lock-operator-face fontified t) 769 776 (fontified t)) . 2624) (undo-tree-id229 . -69) (undo-tree-id230 . -82) (undo-tree-id231 . -82) (undo-tree-id232 . -380) (undo-tree-id233 . -380) (undo-tree-id234 . -380) (undo-tree-id235 . -539) (undo-tree-id236 . -539) (undo-tree-id237 . -600) (undo-tree-id238 . -600) (undo-tree-id239 . -689) (undo-tree-id240 . -689) (undo-tree-id241 . -752) (undo-tree-id242 . -775) (undo-tree-id243 . -752) (undo-tree-id244 . -775) (undo-tree-id245 . -752) (undo-tree-id246 . -752) (undo-tree-id247 . -752) (undo-tree-id248 . -752) (undo-tree-id249 . -752) (undo-tree-id250 . -752) (undo-tree-id251 . -752) (undo-tree-id252 . -775) (undo-tree-id253 . -752) (undo-tree-id254 . -775) (undo-tree-id255 . -752) (undo-tree-id256 . -752) (undo-tree-id257 . -752) (undo-tree-id258 . -752) (undo-tree-id259 . -752) (undo-tree-id260 . -752) (undo-tree-id261 . -752) (undo-tree-id262 . -775) (undo-tree-id263 . -752) (undo-tree-id264 . -775) (undo-tree-id265 . -752) (undo-tree-id266 . -752) (undo-tree-id267 . -752) (undo-tree-id268 . -752) (undo-tree-id269 . -752) (undo-tree-id270 . -752) 2609 (t 26041 18089 129106 596000)) nil (26041 18095 631050 307000) 0 nil])
([nil nil ((#("
" 0 1 (face font-lock-doc-face fontified t)) . -2609) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) 2610 (t 26041 18090 189102 51000)) nil (26041 18095 631038 642000) 0 nil])
([nil nil ((#("." 0 1 (face font-lock-doc-face fontified t)) . -3476) (undo-tree-id290 . -1) (undo-tree-id291 . -1) 3477 (t 26041 18095 637078 147000)) nil (26041 18166 236412 969000) 0 nil])
([nil nil ((3476 . 3484)) nil (26041 18166 236412 193000) 0 nil])
([nil nil ((3484 . 3489)) nil (26041 18166 236412 70000) 0 nil])
([nil nil ((#("(" 0 1 (face font-lock-doc-face fontified t)) . -3488) (undo-tree-id289 . -1) 3489) nil (26041 18166 236411 904000) 0 nil])
([nil nil ((3488 . 3489)) nil (26041 18166 236411 545000) 0 nil])
([nil nil ((3480 . 3481)) nil (26041 18166 236411 356000) 0 nil])
([nil nil ((3490 . 3491)) nil (26041 18166 236411 230000) 0 nil])
([nil nil ((#("        (non-existing) config file in current directory is returned." 0 12 (face font-lock-doc-face fontified t) 12 13 (face font-lock-doc-face fontified t) 13 30 (face font-lock-doc-face fontified t) 30 34 (face font-lock-doc-face fontified t) 34 35 (face font-lock-doc-face fontified t) 35 37 (face font-lock-doc-face fontified t) 37 56 (face font-lock-doc-face fontified t) 56 58 (face font-lock-doc-face fontified t) 58 68 (face font-lock-doc-face fontified t)) . 3650) (undo-tree-id285 . -68) (undo-tree-id286 . -68) (undo-tree-id287 . -68) (undo-tree-id288 . -68)) nil (26041 18166 236411 41000) 0 nil])
([nil nil ((#("
" 0 1 (face font-lock-doc-face fontified t)) . -3649) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) 3650) nil (26041 18166 236410 110000) 0 nil])
([nil nil ((3649 . 3654)) nil (26041 18166 236408 978000) 0 nil])
([nil nil ((#("t" 0 1 (face font-lock-doc-face fontified t)) . -3650) (undo-tree-id276 . -1) (#("h" 0 1 (face font-lock-doc-face fontified t)) . -3651) (undo-tree-id277 . -1) (#("e" 0 1 (face font-lock-doc-face fontified t)) . -3652) (undo-tree-id278 . -1) (#(" " 0 1 (face font-lock-doc-face fontified t)) . -3653) (undo-tree-id279 . -1) 3654) nil (26041 18166 236408 615000) 0 nil])
([nil nil ((3650 . 3671)) nil (26041 18166 236407 170000) 0 nil])
([nil nil ((3671 . 3674)) nil (26041 18166 236407 37000) 0 nil])
([nil nil ((#("n" 0 1 (face font-lock-doc-face fontified t)) . -3672) (undo-tree-id274 . -1) (#("t" 0 1 (face font-lock-doc-face fontified t)) . -3673) (undo-tree-id275 . -1) 3674) nil (26041 18166 236406 731000) 0 nil])
([nil nil ((3672 . 3677)) nil (26041 18166 236406 48000) 0 nil])
([nil nil ((#("existeing) " 0 11 (face font-lock-doc-face fontified t)) . 3666) (undo-tree-id273 . -11)) nil (26041 18166 236405 850000) 0 nil])
([nil nil ((3666 . 3687)) nil (26041 18166 236405 270000) 0 nil])
([nil nil ((3687 . 3708)) nil (26041 18166 236405 53000) 0 nil])
([nil nil ((3708 . 3709)) nil (26041 18166 236404 840000) 0 nil])
([nil nil ((#("u" 0 1 (face font-lock-doc-face fontified t)) . -3708) (undo-tree-id271 . -1) (undo-tree-id272 . -1) 3709) nil (26041 18166 236404 484000) 0 nil])
([nil nil ((3708 . 3718)) nil (26041 18166 236397 714000) 0 nil])
([nil nil ((3718 . 3727)) nil (26041 18166 236395 583000) 0 nil])
([nil nil ((2625 . 2635) (#("
        " 0 1 (face font-lock-doc-face fontified t) 1 9 (face font-lock-doc-face fontified t)) . 2625) (2091 . 2099) (#(" " 0 1 (face font-lock-doc-face fontified nil)) . -2091) (nil face nil 2090 . 2091) (2090 . 2091) (2013 . 2021) (#(" " 0 1 (face font-lock-doc-face fontified nil)) . -2013) (nil face nil 2012 . 2013) (2012 . 2013) 1940 (t 26041 18166 240689 541000)) nil (26041 20579 156861 129000) 0 nil])
([nil nil ((2625 . 2635) (#("

        " 0 10 (face font-lock-doc-face fontified t)) . 2625) (2346 . 2354) (#(" " 0 1 (face font-lock-doc-face fontified nil)) . -2346) (nil face nil 2345 . 2346) (2345 . 2346) (2269 . 2277) (#(" " 0 1 (face font-lock-doc-face fontified nil)) . -2269) (nil face nil 2268 . 2269) (2268 . 2269) (2189 . 2197) (#(" " 0 1 (face font-lock-doc-face fontified nil)) . -2189) (nil face nil 2188 . 2189) (2188 . 2189) (2329 . 2330) (#("
" 0 1 (face font-lock-doc-face fontified nil)) . 2329) (2260 . 2261) (#("
" 0 1 (face font-lock-doc-face fontified nil)) . 2260) (2188 . 2189) (#("
" 0 1 (face font-lock-doc-face fontified t)) . 2188) (#("        " 0 8 (face font-lock-doc-face fontified t)) . 2330) (#("        " 0 8 (face font-lock-doc-face fontified t)) . 2261) (#("        " 0 8 (face font-lock-doc-face fontified t)) . 2189) 2109) nil (26041 20579 156857 718000) 0 nil])
([nil nil ((3760 . 3770) (#(" " 0 1 (face font-lock-doc-face fontified nil)) . 3760) (undo-tree-id295 . -1) (3747 . 3755) (#(" " 0 1 (face font-lock-doc-face fontified nil)) . -3747) (nil face nil 3746 . 3747) (3746 . 3747) (3670 . 3678) (#(" " 0 1 (face font-lock-doc-face fontified nil)) . -3670) (nil face nil 3669 . 3670) (3669 . 3670) (3591 . 3599) (#(" " 0 1 (face font-lock-doc-face fontified nil)) . -3591) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (nil face nil 3590 . 3591) (3590 . 3591) (#(" " 0 1 (face font-lock-doc-face fontified nil)) . -3737) (undo-tree-id299 . -1) (3737 . 3738) (#("
" 0 1 (face font-lock-doc-face fontified nil)) . 3737) (3590 . 3591) (#("
" 0 1 (face font-lock-doc-face fontified t)) . 3590) (3736 . 3737) (#("        " 0 8 (face font-lock-doc-face fontified t)) . 3737) (#("        " 0 8 (face font-lock-doc-face fontified t)) . 3591) 3684 (t 26041 20579 163869 136000)) nil (26041 20588 265713 875000) 0 nil])
([nil nil ((#("
" 0 1 (face font-lock-doc-face fontified t)) . -3760) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) 3761) nil (26041 20588 265708 269000) 0 nil])
([nil nil ((334 . 337) (t 26041 20588 271710 53000)) nil (26049 6190 944404 675000) 0 nil])
([nil nil ((#("h" 0 1 (fontified t)) . -335) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (#("w" 0 1 (fontified t)) . -336) (undo-tree-id14 . -1) (undo-tree-id15 . -1) 337) nil (26049 6190 944404 248000) 0 nil])
([nil nil ((335 . 336)) nil (26049 6190 944402 910000) 0 nil])
([nil nil ((#("g" 0 1 (fontified t)) . -334) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (#("h" 0 1 (fontified t)) . -335) (undo-tree-id8 . -1) (undo-tree-id9 . -1) 336) nil (26049 6190 944402 335000) 0 nil])
([nil current ((334 . 337)) nil (26049 6190 944388 974000) 0 nil])
nil

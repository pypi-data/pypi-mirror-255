(undo-tree-save-format-version . 1)
"45358ee6dea906ca76ba491527f3b66610cef1b2"
[nil nil nil nil (26049 8398 493941 145000) 0 nil]
([nil nil ((#("sort_key):" 0 10 (fontified t)) . 15509) (undo-tree-id6 . -6) (undo-tree-id7 . -5) (undo-tree-id8 . -10) (t 26049 8376 201243 215000)) nil (26049 8398 493940 363000) 0 nil])
([nil nil ((15509 . 15514)) nil (26049 8398 493939 295000) 0 nil])
([nil nil ((#("(" 0 1 (fontified t)) . -15512) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (#(")" 0 1 (fontified t)) . -15513) (undo-tree-id4 . -1) (undo-tree-id5 . -1) 15514) nil (26049 8398 493938 566000) 0 nil])
([nil nil ((15512 . 15513)) nil (26049 8398 493920 852000) 0 nil])
([nil nil ((15513 . 15514) (t 26049 8398 525200 138000)) nil (26049 8399 203104 723000) 0 nil])
([nil nil ((961 . 1067) (#("
    BoardParam,
    ConfigStorageParam,
    FakeDeviceParam,
    LocaleParam,
    label_or_query_argument,
" 0 108 (fontified t)) . 961) 15514 (t 26049 8399 669198 126000)) nil (26049 8409 190435 529000) 0 nil])
([nil nil ((961 . 1069) (#("BoardParam, ConfigStorageParam, FakeDeviceParam,
                     LocaleParam, label_or_query_argument" 0 106 (fontified nil)) . 961) (t 26049 8404 45190 603000)) nil (26049 8409 190435 141000) 0 nil])
([nil nil ((15512 . 15516) (t 26049 8404 261190 239000)) nil (26049 8409 190434 762000) 0 nil])
([nil nil ((#("g" 0 1 (fontified t)) . -15513) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (#("e" 0 1 (fontified t)) . -15514) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (#("t" 0 1 (fontified t)) . -15515) (undo-tree-id10 . -1) (undo-tree-id11 . -1) 15516) nil (26049 8409 190433 980000) 0 nil])
([nil nil ((15513 . 15517)) nil (26049 8409 190414 503000) 0 nil])
([nil nil ((#("Device.key.fget):" 0 17 (fontified t)) . 15502) (undo-tree-id14 . -17) (undo-tree-id15 . -17) (undo-tree-id16 . -10) (undo-tree-id17 . -11) (undo-tree-id18 . -11) (undo-tree-id19 . -11) (undo-tree-id20 . -11) (undo-tree-id21 . -11) (undo-tree-id22 . -15) (undo-tree-id23 . -15) (undo-tree-id24 . -15) (undo-tree-id25 . -15) (undo-tree-id26 . -17) (undo-tree-id27 . -17) (undo-tree-id28 . -17) (undo-tree-id29 . -17) (undo-tree-id30 . -17) (undo-tree-id31 . -17) (undo-tree-id32 . -11) (undo-tree-id33 . -7) (undo-tree-id34 . -17) (t 26049 8410 341180 254000)) nil (26049 8501 524963 928000) 0 nil])
([nil nil ((15502 . 15507)) nil (26049 8501 524958 104000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . -15506) (undo-tree-id12 . -1) (undo-tree-id13 . -1) 15507) nil (26049 8501 524957 523000) 0 nil])
([nil nil ((15506 . 15519)) nil (26049 8501 524946 826000) 0 nil])
([nil nil ((961 . 1067) (#("
    BoardParam,
    ConfigStorageParam,
    FakeDeviceParam,
    LocaleParam,
    label_or_query_argument,
" 0 108 (fontified nil)) . 961) (t 26049 8502 637089 169000)) nil (26049 10158 944462 884000) 0 nil])
([nil nil ((961 . 1069) (#("BoardParam, ConfigStorageParam, FakeDeviceParam,
                     LocaleParam, label_or_query_argument" 0 106 (fontified nil)) . 961) 15517 (t 26049 8527 665082 509000)) nil (26049 10158 944462 504000) 0 nil])
([nil nil ((961 . 1069) (#("BoardParam, ConfigStorageParam, FakeDeviceParam,
                     LocaleParam, label_or_query_argument" 0 106 (fontified nil)) . 961) (t 26049 8533 181081 999000) (961 . 1067) ("
    BoardParam,
    ConfigStorageParam,
    FakeDeviceParam,
    LocaleParam,
    label_or_query_argument,
" . 961) (t 26049 8527 873082 483000)) nil (26049 10158 944461 793000) 0 nil])
([nil nil ((961 . 1069) (#("BoardParam, ConfigStorageParam, FakeDeviceParam,
                     LocaleParam, label_or_query_argument" 0 106 (fontified nil)) . 961) (t 26049 8585 613093 447000) (961 . 1067) ("
    BoardParam,
    ConfigStorageParam,
    FakeDeviceParam,
    LocaleParam,
    label_or_query_argument,
" . 961) (t 26049 8533 389081 987000)) nil (26049 10158 944461 342000) 0 nil])
([nil nil ((961 . 1069) (#("BoardParam, ConfigStorageParam, FakeDeviceParam,
                     LocaleParam, label_or_query_argument" 0 106 (fontified nil)) . 961) (t 26049 8616 601113 319000) (961 . 1067) ("
    BoardParam,
    ConfigStorageParam,
    FakeDeviceParam,
    LocaleParam,
    label_or_query_argument,
" . 961) (t 26049 8585 821093 548000)) nil (26049 10158 944460 615000) 0 nil])
([nil nil ((961 . 1069) (#("BoardParam, ConfigStorageParam, FakeDeviceParam,
                     LocaleParam, label_or_query_argument" 0 106 (fontified nil)) . 961) (t 26049 8654 685150 45000) (961 . 1067) ("
    BoardParam,
    ConfigStorageParam,
    FakeDeviceParam,
    LocaleParam,
    label_or_query_argument,
" . 961) (t 26049 8616 813113 486000)) nil (26049 10158 944459 599000) 0 nil])
([nil nil ((961 . 1069) (#("BoardParam, ConfigStorageParam, FakeDeviceParam,
                     LocaleParam, label_or_query_argument" 0 106 (fontified nil)) . 961) (t 26049 8702 473213 919000) (961 . 1067) ("
    BoardParam,
    ConfigStorageParam,
    FakeDeviceParam,
    LocaleParam,
    label_or_query_argument,
" . 961) (t 26049 8654 893150 280000)) nil (26049 10158 944458 323000) 0 nil])
([nil nil ((961 . 1069) (#("BoardParam, ConfigStorageParam, FakeDeviceParam,
                     LocaleParam, label_or_query_argument" 0 106 (fontified nil)) . 961) (t 26049 8764 501323 692000) (961 . 1067) ("
    BoardParam,
    ConfigStorageParam,
    FakeDeviceParam,
    LocaleParam,
    label_or_query_argument,
" . 961) (t 26049 8702 689214 250000)) nil (26049 10158 944457 427000) 0 nil])
([nil nil ((961 . 1067) (#("
    BoardParam,
    ConfigStorageParam,
    FakeDeviceParam,
    LocaleParam,
    label_or_query_argument,
" 0 108 (fontified nil)) . 961) (t 26049 8764 713324 116000)) nil (26049 10158 944456 633000) 0 nil])
([nil nil ((961 . 1069) (#("BoardParam, ConfigStorageParam, FakeDeviceParam,
                     LocaleParam, label_or_query_argument" 0 106 (fontified nil)) . 961) (t 26049 8769 789334 346000)) nil (26049 10158 944456 72000) 0 nil])
([nil nil ((961 . 1069) (#("BoardParam, ConfigStorageParam, FakeDeviceParam,
                     LocaleParam, label_or_query_argument" 0 106 (fontified nil)) . 961) (t 26049 8773 745342 448000) (961 . 1067) ("
    BoardParam,
    ConfigStorageParam,
    FakeDeviceParam,
    LocaleParam,
    label_or_query_argument,
" . 961) (t 26049 8770 1334 777000)) nil (26049 10158 944455 737000) 0 nil])
([nil nil ((961 . 1067) ("
    BoardParam,
    ConfigStorageParam,
    FakeDeviceParam,
    LocaleParam,
    label_or_query_argument,
" . 961) (t 26049 8773 949342 869000)) nil (26049 10158 944454 783000) 0 nil])
([nil nil ((961 . 1069) (#("BoardParam, ConfigStorageParam, FakeDeviceParam,
                     LocaleParam, label_or_query_argument" 0 106 (fontified nil)) . 961) 15517 (t 26049 8853 557527 915000)) nil (26049 10158 944454 246000) 0 nil])
([nil nil ((961 . 1069) (#("BoardParam, ConfigStorageParam, FakeDeviceParam,
                     LocaleParam, label_or_query_argument" 0 106 (fontified nil)) . 961) (t 26049 8879 197595 782000) (961 . 1067) ("
    BoardParam,
    ConfigStorageParam,
    FakeDeviceParam,
    LocaleParam,
    label_or_query_argument,
" . 961) (t 26049 8853 765528 450000)) nil (26049 10158 944453 604000) 0 nil])
([nil nil ((961 . 1067) ("
    BoardParam,
    ConfigStorageParam,
    FakeDeviceParam,
    LocaleParam,
    label_or_query_argument,
" . 961) (t 26049 8879 405596 348000)) nil (26049 10158 944453 178000) 0 nil])
([nil nil ((961 . 1069) ("BoardParam, ConfigStorageParam, FakeDeviceParam,
                     LocaleParam, label_or_query_argument" . 961) (t 26049 8896 289643 90000)) nil (26049 10158 944452 849000) 0 nil])
([nil nil ((961 . 1069) (#("BoardParam, ConfigStorageParam, FakeDeviceParam,
                     LocaleParam, label_or_query_argument" 0 106 (fontified nil)) . 961) (t 26049 8910 825684 567000) (961 . 1067) ("
    BoardParam,
    ConfigStorageParam,
    FakeDeviceParam,
    LocaleParam,
    label_or_query_argument,
" . 961) (t 26049 8896 497643 676000)) nil (26049 10158 944452 300000) 0 nil])
([nil nil ((961 . 1069) (#("BoardParam, ConfigStorageParam, FakeDeviceParam,
                     LocaleParam, label_or_query_argument" 0 106 (fontified nil)) . 961) (t 26049 8942 985780 295000) (961 . 1067) ("
    BoardParam,
    ConfigStorageParam,
    FakeDeviceParam,
    LocaleParam,
    label_or_query_argument,
" . 961) (t 26049 8911 37685 181000)) nil (26049 10158 944451 257000) 0 nil])
([nil nil ((961 . 1067) ("
    BoardParam,
    ConfigStorageParam,
    FakeDeviceParam,
    LocaleParam,
    label_or_query_argument,
" . 961) (t 26049 8943 201780 956000)) nil (26049 10158 944450 500000) 0 nil])
([nil nil ((961 . 1069) (#("BoardParam, ConfigStorageParam, FakeDeviceParam,
                     LocaleParam, label_or_query_argument" 0 106 (fontified nil)) . 961) 15517 (t 26049 8978 701892 616000)) nil (26049 10158 944449 719000) 0 nil])
([nil nil ((961 . 1069) (#("BoardParam, ConfigStorageParam, FakeDeviceParam,
                     LocaleParam, label_or_query_argument" 0 106 (fontified nil)) . 961) (t 26049 9007 821988 579000) (961 . 1067) ("
    BoardParam,
    ConfigStorageParam,
    FakeDeviceParam,
    LocaleParam,
    label_or_query_argument,
" . 961) (t 26049 8978 917893 313000)) nil (26049 10158 944448 824000) 0 nil])
([nil nil ((961 . 1069) (#("BoardParam, ConfigStorageParam, FakeDeviceParam,
                     LocaleParam, label_or_query_argument" 0 106 (fontified nil)) . 961) (t 26049 9020 482031 459000) (961 . 1067) ("
    BoardParam,
    ConfigStorageParam,
    FakeDeviceParam,
    LocaleParam,
    label_or_query_argument,
" . 961) (t 26049 9008 29989 278000)) nil (26049 10158 944447 963000) 0 nil])
([nil nil ((961 . 1069) (#("BoardParam, ConfigStorageParam, FakeDeviceParam,
                     LocaleParam, label_or_query_argument" 0 106 (fontified nil)) . 961) (t 26049 9105 706337 188000) (961 . 1067) ("
    BoardParam,
    ConfigStorageParam,
    FakeDeviceParam,
    LocaleParam,
    label_or_query_argument,
" . 961) (t 26049 9020 690032 169000)) nil (26049 10158 944447 269000) 0 nil])
([nil nil ((961 . 1069) (#("BoardParam, ConfigStorageParam, FakeDeviceParam,
                     LocaleParam, label_or_query_argument" 0 106 (fontified nil)) . 961) (t 26049 9447 647033 587000) (961 . 1067) ("
    BoardParam,
    ConfigStorageParam,
    FakeDeviceParam,
    LocaleParam,
    label_or_query_argument,
" . 961) (t 26049 9105 914337 967000)) nil (26049 10158 944446 163000) 0 nil])
([nil nil ((961 . 1069) (#("BoardParam, ConfigStorageParam, FakeDeviceParam,
                     LocaleParam, label_or_query_argument" 0 106 (fontified nil)) . 961) (t 26049 9508 554607 429000) (961 . 1067) ("
    BoardParam,
    ConfigStorageParam,
    FakeDeviceParam,
    LocaleParam,
    label_or_query_argument,
" . 961) (t 26049 9447 863031 942000)) nil (26049 10158 944445 693000) 0 nil])
([nil nil ((961 . 1067) (#("
    BoardParam,
    ConfigStorageParam,
    FakeDeviceParam,
    LocaleParam,
    label_or_query_argument,
" 0 108 (fontified nil)) . 961) (t 26049 9508 766606 71000)) nil (26049 10158 944445 151000) 0 nil])
([nil nil ((961 . 1069) ("BoardParam, ConfigStorageParam, FakeDeviceParam,
                     LocaleParam, label_or_query_argument" . 961) (t 26049 9517 470551 72000)) nil (26049 10158 944444 774000) 0 nil])
([nil nil ((961 . 1069) (#("BoardParam, ConfigStorageParam, FakeDeviceParam,
                     LocaleParam, label_or_query_argument" 0 106 (fontified nil)) . 961) (t 26049 9564 826275 709000) (961 . 1067) ("
    BoardParam,
    ConfigStorageParam,
    FakeDeviceParam,
    LocaleParam,
    label_or_query_argument,
" . 961) (t 26049 9517 690549 699000)) nil (26049 10158 944444 80000) 0 nil])
([nil nil ((961 . 1069) (#("BoardParam, ConfigStorageParam, FakeDeviceParam,
                     LocaleParam, label_or_query_argument" 0 106 (fontified nil)) . 961) (t 26049 9570 830243 555000) (961 . 1067) ("
    BoardParam,
    ConfigStorageParam,
    FakeDeviceParam,
    LocaleParam,
    label_or_query_argument,
" . 961) (t 26049 9565 46274 519000)) nil (26049 10158 944443 217000) 0 nil])
([nil nil ((961 . 1069) (#("BoardParam, ConfigStorageParam, FakeDeviceParam,
                     LocaleParam, label_or_query_argument" 0 106 (fontified nil)) . 961) (t 26049 9602 946081 550000) (961 . 1067) ("
    BoardParam,
    ConfigStorageParam,
    FakeDeviceParam,
    LocaleParam,
    label_or_query_argument,
" . 961) (t 26049 9571 50242 388000)) nil (26049 10158 944442 140000) 0 nil])
([nil nil ((961 . 1069) (#("BoardParam, ConfigStorageParam, FakeDeviceParam,
                     LocaleParam, label_or_query_argument" 0 106 (fontified nil)) . 961) (t 26049 9625 37979 502000) (961 . 1067) ("
    BoardParam,
    ConfigStorageParam,
    FakeDeviceParam,
    LocaleParam,
    label_or_query_argument,
" . 961) (t 26049 9603 158080 536000)) nil (26049 10158 944441 541000) 0 nil])
([nil nil ((961 . 1067) ("
    BoardParam,
    ConfigStorageParam,
    FakeDeviceParam,
    LocaleParam,
    label_or_query_argument,
" . 961) (t 26049 9625 253978 542000)) nil (26049 10158 944441 11000) 0 nil])
([nil nil ((961 . 1069) (#("BoardParam, ConfigStorageParam, FakeDeviceParam,
                     LocaleParam, label_or_query_argument" 0 106 (fontified nil)) . 961) 15517 (t 26049 9711 701646 596000)) nil (26049 10158 944440 487000) 0 nil])
([nil nil ((961 . 1067) ("
    BoardParam,
    ConfigStorageParam,
    FakeDeviceParam,
    LocaleParam,
    label_or_query_argument,
" . 961) (t 26049 9711 909645 917000)) nil (26049 10158 944439 895000) 0 nil])
([nil nil ((961 . 1069) (#("BoardParam, ConfigStorageParam, FakeDeviceParam,
                     LocaleParam, label_or_query_argument" 0 106 (fontified nil)) . 961) (t 26049 9761 161500 71000)) nil (26049 10158 944439 532000) 0 nil])
([nil nil ((961 . 1067) ("
    BoardParam,
    ConfigStorageParam,
    FakeDeviceParam,
    LocaleParam,
    label_or_query_argument,
" . 961) (t 26049 9761 381499 485000)) nil (26049 10158 944439 147000) 0 nil])
([nil nil ((961 . 1069) ("BoardParam, ConfigStorageParam, FakeDeviceParam,
                     LocaleParam, label_or_query_argument" . 961) (t 26049 9768 281481 344000)) nil (26049 10158 944438 281000) 0 nil])
([nil nil ((961 . 1069) (#("BoardParam, ConfigStorageParam, FakeDeviceParam,
                     LocaleParam, label_or_query_argument" 0 106 (fontified nil)) . 961) (t 26049 9787 541433 540000) (961 . 1067) ("
    BoardParam,
    ConfigStorageParam,
    FakeDeviceParam,
    LocaleParam,
    label_or_query_argument,
" . 961) (t 26049 9768 497480 786000)) nil (26049 10158 944437 502000) 0 nil])
([nil nil ((961 . 1069) (#("BoardParam, ConfigStorageParam, FakeDeviceParam,
                     LocaleParam, label_or_query_argument" 0 106 (fontified nil)) . 961) (t 26049 9811 745379 146000) (961 . 1067) ("
    BoardParam,
    ConfigStorageParam,
    FakeDeviceParam,
    LocaleParam,
    label_or_query_argument,
" . 961) (t 26049 9787 761433 16000)) nil (26049 10158 944436 376000) 0 nil])
([nil nil ((961 . 1069) (#("BoardParam, ConfigStorageParam, FakeDeviceParam,
                     LocaleParam, label_or_query_argument" 0 106 (fontified nil)) . 961) (t 26049 9930 817194 667000) (961 . 1067) ("
    BoardParam,
    ConfigStorageParam,
    FakeDeviceParam,
    LocaleParam,
    label_or_query_argument,
" . 961) (t 26049 9811 957378 696000)) nil (26049 10158 944435 653000) 0 nil])
([nil nil ((961 . 1067) ("
    BoardParam,
    ConfigStorageParam,
    FakeDeviceParam,
    LocaleParam,
    label_or_query_argument,
" . 961) (t 26049 9931 25194 455000)) nil (26049 10158 944434 534000) 0 nil])
([nil nil ((961 . 1069) ("BoardParam, ConfigStorageParam, FakeDeviceParam,
                     LocaleParam, label_or_query_argument" . 961) (t 26049 9940 721184 957000)) nil (26049 10158 944433 820000) 0 nil])
([nil nil ((961 . 1069) ("BoardParam, ConfigStorageParam, FakeDeviceParam,
                     LocaleParam, label_or_query_argument" . 961) (t 26049 9956 317171 253000) (961 . 1067) ("
    BoardParam,
    ConfigStorageParam,
    FakeDeviceParam,
    LocaleParam,
    label_or_query_argument,
" . 961) (t 26049 9940 933184 758000)) nil (26049 10158 944432 809000) 0 nil])
([nil nil ((961 . 1069) (#("BoardParam, ConfigStorageParam, FakeDeviceParam,
                     LocaleParam, label_or_query_argument" 0 106 (fontified nil)) . 961) (t 26049 9965 809163 847000) (961 . 1067) ("
    BoardParam,
    ConfigStorageParam,
    FakeDeviceParam,
    LocaleParam,
    label_or_query_argument,
" . 961) (t 26049 9956 529171 80000)) nil (26049 10158 944431 904000) 0 nil])
([nil nil ((961 . 1069) ("BoardParam, ConfigStorageParam, FakeDeviceParam,
                     LocaleParam, label_or_query_argument" . 961) (t 26049 9973 945158 49000) (961 . 1067) (#("
    BoardParam,
    ConfigStorageParam,
    FakeDeviceParam,
    LocaleParam,
    label_or_query_argument,
" 0 108 (fontified nil)) . 961) (t 26049 9966 17163 693000)) nil (26049 10158 944431 158000) 0 nil])
([nil nil ((961 . 1069) (#("BoardParam, ConfigStorageParam, FakeDeviceParam,
                     LocaleParam, label_or_query_argument" 0 106 (fontified nil)) . 961) (t 26049 10042 45128 360000) (961 . 1067) ("
    BoardParam,
    ConfigStorageParam,
    FakeDeviceParam,
    LocaleParam,
    label_or_query_argument,
" . 961) (t 26049 9974 161157 903000)) nil (26049 10158 944430 278000) 0 nil])
([nil nil ((961 . 1069) (#("BoardParam, ConfigStorageParam, FakeDeviceParam,
                     LocaleParam, label_or_query_argument" 0 106 (fontified nil)) . 961) (t 26049 10054 29126 423000) (961 . 1067) ("
    BoardParam,
    ConfigStorageParam,
    FakeDeviceParam,
    LocaleParam,
    label_or_query_argument,
" . 961) (t 26049 10042 253128 319000)) nil (26049 10158 944429 210000) 0 nil])
([nil nil ((14195 . 14199) (#("    " 0 4 (fontified nil)) . 14194) (undo-tree-id48 . -4) (14193 . 14199) (t 26049 10054 241126 398000)) nil (26049 10158 944428 360000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -14195) (undo-tree-id47 . -4) 14199) nil (26049 10158 944427 315000) 0 nil])
([nil nil ((14195 . 14207)) nil (26049 10158 944426 645000) 0 nil])
([nil nil ((14207 . 14208)) nil (26049 10158 944426 175000) 0 nil])
([nil nil ((14208 . 14214)) nil (26049 10158 944425 905000) 0 nil])
([nil nil ((#("e" 0 1 (face font-lock-function-name-face fontified t)) . -14212) (undo-tree-id45 . -1) (#("n" 0 1 (face font-lock-function-name-face fontified t)) . -14213) (undo-tree-id46 . -1) 14214) nil (26049 10158 944425 503000) 0 nil])
([nil nil ((14212 . 14230)) nil (26049 10158 944424 589000) 0 nil])
([nil nil ((14230 . 14235)) nil (26049 10158 944424 251000) 0 nil])
([nil nil ((14116 . 14121)) nil (26049 10158 944423 719000) 0 nil])
([nil nil ((14121 . 14128)) nil (26049 10158 944423 308000) 0 nil])
([nil nil ((14128 . 14149)) nil (26049 10158 944422 822000) 0 nil])
([nil nil ((14149 . 14170)) nil (26049 10158 944422 439000) 0 nil])
([nil nil ((14170 . 14171)) nil (26049 10158 944422 134000) 0 nil])
([nil nil ((14248 . 14253)) nil (26049 10158 944421 723000) 0 nil])
([nil nil ((14253 . 14255)) nil (26049 10158 944420 917000) 0 nil])
([nil nil ((#("O" 0 1 (face font-lock-comment-face fontified t)) . -14254) (undo-tree-id44 . -1) 14255) nil (26049 10158 944420 496000) 0 nil])
([nil nil ((14254 . 14267)) nil (26049 10158 944419 756000) 0 nil])
([nil nil ((#("0" 0 1 (face font-lock-comment-face fontified t)) . -14265) (undo-tree-id42 . -1) (#(":" 0 1 (face font-lock-comment-face fontified t)) . -14266) (undo-tree-id43 . -1) 14267) nil (26049 10158 944419 347000) 0 nil])
([nil nil ((14265 . 14286)) nil (26049 10158 944418 355000) 0 nil])
([nil nil ((14286 . 14307)) nil (26049 10158 944417 906000) 0 nil])
([nil nil ((#("o" 0 1 (face font-lock-comment-face fontified t)) . -14305) (undo-tree-id40 . -1) (#("i" 0 1 (face font-lock-comment-face fontified t)) . -14306) (undo-tree-id41 . -1) 14307) nil (26049 10158 944417 524000) 0 nil])
([nil nil ((14305 . 14306)) nil (26049 10158 944416 663000) 0 nil])
([nil nil ((#("o" 0 1 (face font-lock-comment-face fontified t)) . -14303) (undo-tree-id37 . -1) (#("n" 0 1 (face font-lock-comment-face fontified t)) . -14304) (undo-tree-id38 . -1) (#("l" 0 1 (face font-lock-comment-face fontified t)) . -14305) (undo-tree-id39 . -1) 14306) nil (26049 10158 944415 915000) 0 nil])
([nil nil ((14303 . 14305)) nil (26049 10158 944414 354000) 0 nil])
([nil nil ((14305 . 14310)) nil (26049 10158 944413 940000) 0 nil])
([nil nil ((#("." 0 1 (face font-lock-comment-face fontified t)) . -14309) (undo-tree-id36 . -1) 14310) nil (26049 10158 944413 422000) 0 nil])
([nil nil ((14309 . 14325)) nil (26049 10158 944412 370000) 0 nil])
([nil nil ((14367 . 14370)) nil (26049 10158 944411 788000) 0 nil])
([nil nil ((#("    dev" 0 7 (fontified t)) . 14363)) nil (26049 10158 944411 515000) 0 nil])
([nil nil ((14363 . 14367)) nil (26049 10158 944410 933000) 0 nil])
([nil nil ((14367 . 14373)) nil (26049 10158 944410 495000) 0 nil])
([nil nil ((14373 . 14375)) nil (26049 10158 944409 930000) 0 nil])
([nil nil ((#("F" 0 1 (fontified t)) . -14374) (undo-tree-id35 . -1) 14375) nil (26049 10158 944409 562000) 0 nil])
([nil nil ((14374 . 14389)) nil (26049 10158 944401 574000) 0 nil])
([nil nil ((806 . 807)) nil (26049 10158 944401 171000) 0 nil])
([nil nil ((807 . 817)) nil (26049 10158 944400 765000) 0 nil])
([nil nil ((817 . 838)) nil (26049 10158 944400 47000) 0 nil])
([nil nil ((838 . 844)) nil (26049 10158 944395 112000) 0 nil])
([nil nil ((817 . 14365) (#("uf2_device import Uf2Device
from ..hw.query import Query
from ..uf2 import Board
from . import completion
from .config import Config, ConfigStorage, DeviceLabel
from .params import (
    BoardParam,
    ConfigStorageParam,
    FakeDeviceParam,
    LocaleParam,
    label_or_query_argument,
)
from .shared_state import SharedState

# Use `rich` for tracebacks and logging.
traceback.install(show_locals=True)
logging.basicConfig(
    level=\"NOTSET\",
    format=\"%(message)s\",
    datefmt=\"[%X]\",
    handlers=[
        RichHandler(rich_tracebacks=True, markup=True, omit_repeated_times=False)
    ],
)
logger = logging.getLogger(__name__)


def _render_device(self: Device) -> Table:
    table = Table(\"Property\", \"Value\")
    table.add_row(\"Vendor\", self.vendor)
    table.add_row(\"Model\", self.model)
    table.add_row(\"Serial\", self.serial)
    table.add_row(\"Partition Path\", str(self.partition_path))
    table.add_row(\"Serial Path\", str(self.serial_path))
    table.add_row(\"Mountpoint\", str(self.get_mountpoint()))
    return table


setattr(Device, \"__rich__\", _render_device)


def get_query(device_labels: dict[str, DeviceLabel], arg: str) -> Query:
    \"\"\"Extract query from a string specifying either a device label or a query.

    Raises ValueError if the string matched neither.\"\"\"
    for k, v in device_labels.items():
        if arg == k:
            return v.query
    return Query.parse(arg)


pass_shared_state = click.make_pass_decorator(SharedState, ensure=True)
\"\"\"Decorator for passing SharedState to a function.\"\"\"

# These can be removed in python 3.12
#
# Type variables for return value and function parameters.
R = TypeVar(\"R\")
P = ParamSpec(\"P\")


def pass_config_storage(
    f: Callable[Concatenate[ConfigStorage, P], R]
) -> Callable[P, R]:
    \"\"\"Decorator for passing ConfigStorage to a function.\"\"\"

    @pass_shared_state
    @wraps(f)
    def inner(state: SharedState, /, *args: P.args, **kwargs: P.kwargs) -> R:
        return f(state.config_storage, *args, **kwargs)

    return inner


def pass_read_only_config(f: Callable[Concatenate[Config, P], R]) -> Callable[P, R]:
    \"\"\"Decorator for supplying a function with a read-only snapshot of our current Config.\"\"\"

    @pass_config_storage
    @wraps(f)
    def inner(config_storage: ConfigStorage, /, *args: P.args, **kwargs: P.kwargs) -> R:
        with config_storage.open() as config:
            return f(config, *args, **kwargs)

    return inner


@click.version_option(VERSION, \"--version\", \"-v\")
@click.group(
    context_settings=dict(
        help_option_names=[\"-h\", \"--help\"], auto_envvar_prefix=\"CIRCUITPYTHON_TOOL\"
    ),
    epilog=f\"Version: {VERSION}\",
)
@click.option(
    \"--config\",
    \"-c\",
    \"config_path\",
    type=ConfigStorageParam(),
    default=ConfigStorage(),
    expose_value=False,
    show_envvar=True,
    # Force evaluation of this paramter early so that later parameters can
    # assume the config has already been found.
    is_eager=True,
    help=\"Path to configuration TOML file for device labels and source trees.\",
)
@click.option(
    \"--log-level\",
    \"-l\",
    type=click.Choice([\"DEBUG\", \"INFO\", \"WARNING\", \"ERROR\"]),
    default=\"INFO\",
    show_envvar=True,
    help=\"Only display logs at or above ths level.\",
)
@click.option(
    \"--fake-device-config\",
    \"-f\",
    type=FakeDeviceParam(),
    expose_value=False,
    show_envvar=True,
    # Force evaluation of this paramter early so that later parameters can
    # assume the config has already been found.
    is_eager=True,
    help=\"Path to TOML configuration file for fake devices. For use in tests and demos.\",
)
def main(log_level: str) -> None:
    \"\"\"Tool for interfacing with CircuitPython devices.\"\"\"
    root_logger = logging.getLogger()
    root_logger.setLevel(log_level)


@main.command()
@label_or_query_argument(\"query\", default=Query.any())
@click.option(
    \"-s\",
    \"--save\",
    \"fake_device_save_path\",
    type=click.Path(dir_okay=False, path_type=Path),
    help=\"If set, save devices to a TOML file for later recall using the --fake-devices flag.\",
)
@pass_read_only_config
@pass_shared_state
def devices(
    state: SharedState, config: Config, query: Query, fake_device_save_path: Path | None
) -> None:
    \"\"\"List all connected CircuitPython devices.

    If QUERY is specified, only devices matching that query are listed.\"\"\"
    devices = query.matching_devices(state.all_devices())
    if devices:
        print(\"Connected CircuitPython devices:\", devices_table(devices))
    else:
        print(\":person_shrugging: [blue]No[/] connected CircuitPython devices found.\")

    if fake_device_save_path:
        logging.info(f\"Saving device list to {str(fake_device_save_path)}\")
        fake_device_save_path.write_text(fake_device.to_toml(devices))


@main.group()
def label() -> None:
    \"\"\"Manage device labels.\"\"\"
    pass


@label.command(\"list\")
@pass_read_only_config
def label_list(config: Config) -> None:
    \"\"\"List all device labels.\"\"\"
    labels = config.device_labels
    if not labels:
        print(\":person_shrugging: [blue]No[/] existing labels found.\")
        return
    table = Table(\"Label\", \"Query\")
    for name, label in config.device_labels.items():
        table.add_row(name, label.query.as_str())
    print(table)


@label.command(\"add\")
@click.argument(\"key\", required=True, shell_complete=completion.device_label)
@label_or_query_argument(\"query\")
@click.option(
    \"--force\",
    \"-f\",
    is_flag=True,
    help=\"Add the new label even if a label with the same name already exists.\"
    \"The new QUERY value will override the previous stored value.\",
)
@pass_config_storage
def label_add(
    config_storage: ConfigStorage, key: str, query: Query, force: bool
) -> None:
    \"\"\"Add a new device label.

    Creates a new device label with the name KEY, referencing the given QUERY.
    \"\"\"
    with config_storage.open() as config:
        labels = config.device_labels
        old_label = labels.get(key)
        if old_label:
            if force:
                logger.info(f\"Label [blue]{key}[/] already exists. Proceeding anyway.\")
            else:
                print(
                    f\":thumbs_down: Label [red]{key}[/] already exists: \",
                    old_label.query.as_str(),
                )
                exit(1)

        label = DeviceLabel(query)
        labels[key] = label
    print(
        f\":thumbs_up: Label [blue]{key}[/] added [green]successfully[/]: {label.query.as_str()}\"
    )


@label.command(\"remove\")
@click.confirmation_option(
    \"--yes\", \"-y\", prompt=\"Are you sure you want to delete this label?\"
)
@click.argument(\"label_name\", shell_complete=completion.device_label)
@click.option(
    \"--force\",
    \"-f\",
    is_flag=True,
    help=\"Return success even if there was no matching label to remove.\",
)
@pass_config_storage
def label_remove(config_storage: ConfigStorage, label_name: str, force: bool) -> None:
    \"\"\"Delete a device label.\"\"\"
    with config_storage.open() as config:
        label = config.device_labels.get(label_name)
        if label:
            logger.debug(f\"Found label [blue]{label_name}[/]: {label}\")
            del config.device_labels[label_name]
        elif force:
            logger.info(f\"Label [blue]{label_name}[/] not found. Proceeding anyway.\")
        else:
            print(f\":thumbs_down: Label [red]{label_name}[/] does not exist.\")
            exit(1)
    print(f\":thumbs_up: Label [blue]{label_name}[/] [green]successfully[/] deleted.\")


def get_source_dir(source_dir: Path | None) -> Path:
    source_dir = source_dir or fs.guess_source_dir(Path.cwd())
    if source_dir is None:
        print(
            \":thumbs_down: [red]Failed[/red] to guess source directory. \"
            \"Either change the current directory, \"
            \"or explicitly specify the directory using [blue]--dir[/].\"
        )
        exit(1)
    return source_dir


@main.command
@click.option(
    \"--dir\",
    \"-d\",
    \"source_dir\",
    type=click.Path(exists=True, file_okay=False, path_type=Path),
    required=False,
    help=\"Path containing source code to upload. \"
    \"If not specified, the source directory is guessed by searching the current directory and \"
    \"its descendants for user code (e.g. code.py).\",
)
@label_or_query_argument(\"query\", required=True)
def upload(source_dir: Path | None, query: Query) -> None:
    \"\"\"Upload code to device.\"\"\"
    source_dir = get_source_dir(source_dir)
    print(f\"Source directory: {source_dir}\")
    device = distinct_device(query)
    mountpoint = device.mount_if_needed()
    print(\"Uploading to device: \", device)
    fs.upload([source_dir], mountpoint)
    print(\":thumbs_up: Upload [green]succeeded.\")


@main.command
@click.option(
    \"--dir\",
    \"-d\",
    \"source_dir\",
    type=click.Path(exists=True, file_okay=False, path_type=Path),
    required=False,
    help=\"Path containing source code to upload. \"
    \"If not specified, the source directory is guessed by searching the current directory and \"
    \"its descendants for user code (e.g. code.py).\",
)
@label_or_query_argument(\"query\")
def watch(source_dir: Path | None, query: Query) -> None:
    \"\"\"Continuously upload code to device in response to source file changes.

    The contents of the source tree TREE_NAME will be copied onto the device
    with the label LABEL_NAME.

    This command will always perform at least one upload. Then this command
    waits for filesystem events from all paths and descendant paths of the
    source tree. Currently this command will only properly track file
    modifications. Creation of new files and folders requires you to rerun this
    command in order to monitor them.
    \"\"\"
    source_dir = get_source_dir(source_dir)
    print(f\"Source directory: {source_dir}\")
    device = distinct_device(query)
    print(\"Target device: \")
    print(device)
    # Always do at least one upload at the start.
    source_dirs = [source_dir]
    fs.upload(source_dirs, device.mount_if_needed())

    # TODO(dhrosa): Expose delay as a flag.
    events = time_batched(fs.watch_all(source_dirs), delay=lambda: asyncio.sleep(0.5))

    async def watch_loop() -> None:
        while True:
            with get_console().status(
                \"[yellow]Waiting[/yellow] for file modification.\"
            ):
                modified_paths = await anext(events)
                logger.info(f\"Modified paths: {[str(p) for p in modified_paths]}\")
            with get_console().status(\"Uploading to device.\"):
                fs.upload(source_dirs, device.mount_if_needed())

    try:
        asyncio.run(watch_loop())
    except KeyboardInterrupt:
        print(\"Watch [magenta]cancelled[/magenta] by keyboard interrupt.\")


@main.command
@label_or_query_argument(\"query\")
def connect(query: Query) -> None:
    \"\"\"Connect to a device's serial terminal.\"\"\"
    device = distinct_device(query)
    logger.info(\"Launching minicom for \")
    logger.info(device)
    assert device.serial_path is not None
    execlp(\"minicom\", \"minicom\", \"-D\", str(device.serial_path))


@main.group
def uf2() -> None:
    \"\"\"Search and download CircuitPython UF2 binaries.\"\"\"
    pass


@uf2.command
def versions() -> None:
    \"\"\"List available CircuitPython boards.\"\"\"
    table = Table()
    table.add_column(\"Id\")
    table.add_column(\"Downloads\", justify=\"right\")
    table.add_column(\"Stable Version\")
    table.add_column(\"Unstable Version\")
    # Sort boards by decreasing popularity, then alphabetically.
    for board in sorted(Board.all(), key=lambda b: (-b.download_count, b.id)):
        table.add_row(
            board.id,
            str(board.download_count),
            board.stable_version.label if board.stable_version else \"\",
            board.unstable_version.label if board.unstable_version else \"\",
        )
    with get_console().pager():
        print(table)


@uf2.command
@click.argument(\"board\", type=BoardParam(), required=True)
@click.option(
    \"--locale\",
    default=\"en_US\",
    type=LocaleParam(),
    help=\"Locale for CircuitPython install.\",
)
def url(board: Board, locale: str) -> None:
    \"\"\"Print download URL for CircuitPython image.\"\"\"
    print(board.download_url(board.most_recent_version, locale))


@uf2.command
@click.argument(\"board\", type=BoardParam(), required=True)
@click.argument(
    \"destination\", type=click.Path(path_type=Path), required=False, default=Path.cwd()
)
@click.option(
    \"--locale\",
    default=\"en_US\",
    type=LocaleParam(),
    help=\"Locale for CircuitPython install.\",
)
def download(board: Board, locale: str, destination: Path) -> None:
    \"\"\"Download CircuitPython image for the requested board.

    If DESTINATION is not provided, the file is downloaded to the current directory.
    If DESTINATION is a directory, the filename is automatically generated.
    \"\"\"
    url = board.download_url(board.most_recent_version, locale)
    if destination.is_dir():
        destination /= url.split(\"/\")[-1]
    print(f\"Source: {url}\")
    print(f\"Destination: {destination}\")
    response = urlopen(url)
    with progress.wrap_file(
        response,
        total=int(response.headers[\"Content-Length\"]),
        description=\"Downloading\",
    ) as f:
        destination.write_bytes(f.read())


@uf2.command
@label_or_query_argument(\"query\")
def enter(query: Query) -> None:
    \"\"\"Restart selected device into UF2 bootloader.\"\"\"
    device = distinct_device(query)
    print(device)
    device.uf2_enter()
    #TODO(dhrosa): Wait for bootloader device to come online before exiting." 0 11 (fontified t) 11 17 (face font-lock-keyword-face fontified t) 17 27 (fontified t) 27 28 (fontified t) 28 32 (face font-lock-keyword-face fontified t) 32 44 (fontified t) 44 50 (face font-lock-keyword-face fontified t) 50 57 (fontified t) 57 61 (face font-lock-keyword-face fontified t) 61 68 (fontified t) 68 74 (face font-lock-keyword-face fontified t) 74 81 (fontified t) 81 85 (face font-lock-keyword-face fontified t) 85 88 (fontified t) 88 94 (face font-lock-keyword-face fontified t) 94 106 (fontified t) 106 110 (face font-lock-keyword-face fontified t) 110 119 (fontified t) 119 125 (face font-lock-keyword-face fontified t) 125 161 (fontified t) 161 165 (face font-lock-keyword-face fontified t) 165 174 (fontified t) 174 180 (face font-lock-keyword-face fontified t) 180 182 (fontified t) 182 290 (fontified t) 290 292 (fontified t) 292 296 (face font-lock-keyword-face fontified t) 296 311 (fontified t) 311 317 (face font-lock-keyword-face fontified t) 317 331 (fontified t) 331 333 (face font-lock-comment-delimiter-face fontified t) 333 372 (face font-lock-comment-face fontified t) 372 401 (fontified t) 401 402 (face font-lock-operator-face fontified t) 402 406 (face font-lock-constant-face fontified t) 406 438 (fontified t) 438 439 (face font-lock-operator-face fontified t) 439 447 (face font-lock-string-face fontified t) 447 453 (fontified t) 453 459 (face font-lock-builtin-face fontified t) 459 460 (face font-lock-operator-face fontified t) 460 473 (face font-lock-string-face fontified t) 473 486 (fontified t) 486 487 (face font-lock-operator-face fontified t) 487 493 (face font-lock-string-face fontified t) 493 507 (fontified t) 507 508 (face font-lock-operator-face fontified t) 508 545 (fontified t) 545 546 (face font-lock-operator-face fontified t) 546 550 (face font-lock-constant-face fontified t) 550 558 (fontified t) 558 559 (face font-lock-operator-face fontified t) 559 563 (face font-lock-constant-face fontified t) 563 584 (fontified t) 584 585 (face font-lock-operator-face fontified t) 585 590 (face font-lock-constant-face fontified t) 590 601 (fontified t) 601 607 (face font-lock-variable-name-face fontified t) 607 608 (fontified t) 608 609 (face font-lock-operator-face fontified t) 609 628 (fontified t) 628 636 (face font-lock-builtin-face fontified t) 636 640 (fontified t) 640 643 (face font-lock-keyword-face fontified t) 643 644 (fontified t) 644 658 (face font-lock-function-name-face fontified t) 658 659 (fontified t) 659 663 (face font-lock-keyword-face fontified t) 663 673 (fontified t) 673 674 (face font-lock-operator-face fontified t) 674 675 (face font-lock-operator-face fontified t) 675 687 (fontified t) 687 692 (face font-lock-variable-name-face fontified t) 692 693 (fontified t) 693 694 (face font-lock-operator-face fontified t) 694 701 (fontified t) 701 711 (face font-lock-string-face fontified t) 711 713 (fontified t) 713 720 (face font-lock-string-face fontified t) 720 722 (fontified t) 722 740 (fontified t) 740 748 (face font-lock-string-face fontified t) 748 750 (fontified t) 750 754 (face font-lock-keyword-face fontified t) 754 781 (fontified t) 781 788 (face font-lock-string-face fontified t) 788 790 (fontified t) 790 794 (face font-lock-keyword-face fontified t) 794 820 (fontified t) 820 828 (face font-lock-string-face fontified t) 828 830 (fontified t) 830 834 (face font-lock-keyword-face fontified t) 834 861 (fontified t) 861 877 (face font-lock-string-face fontified t) 877 879 (fontified t) 879 882 (face font-lock-builtin-face fontified t) 882 883 (fontified t) 883 887 (face font-lock-keyword-face fontified t) 887 923 (fontified t) 923 936 (face font-lock-string-face fontified t) 936 938 (fontified t) 938 941 (face font-lock-builtin-face fontified t) 941 942 (fontified t) 942 946 (face font-lock-keyword-face fontified t) 946 979 (fontified t) 979 991 (face font-lock-string-face fontified t) 991 993 (fontified t) 993 996 (face font-lock-builtin-face fontified t) 996 997 (fontified t) 997 1001 (face font-lock-keyword-face fontified t) 1001 1025 (fontified t) 1025 1031 (face font-lock-keyword-face fontified t) 1031 1040 (fontified t) 1040 1047 (face font-lock-builtin-face fontified t) 1047 1056 (fontified t) 1056 1066 (face font-lock-string-face fontified t) 1066 1086 (fontified t) 1086 1089 (face font-lock-keyword-face fontified t) 1089 1090 (fontified t) 1090 1099 (face font-lock-function-name-face fontified t) 1099 1115 (fontified t) 1115 1119 (face font-lock-builtin-face fontified t) 1119 1120 (fontified t) 1120 1123 (face font-lock-builtin-face fontified t) 1123 1144 (fontified t) 1144 1147 (face font-lock-builtin-face fontified t) 1147 1149 (fontified t) 1149 1150 (face font-lock-operator-face fontified t) 1150 1151 (face font-lock-operator-face fontified t) 1151 1163 (fontified t) 1163 1165 (face font-lock-doc-face fontified t) 1165 1166 (face font-lock-doc-face fontified t syntax-table (15)) 1166 1292 (face font-lock-doc-face fontified t) 1292 1293 (face font-lock-doc-face fontified t syntax-table (15)) 1293 1295 (face font-lock-doc-face fontified t) 1295 1300 (fontified t) 1300 1303 (face font-lock-keyword-face fontified t) 1303 1309 (fontified t) 1309 1311 (face font-lock-keyword-face fontified t) 1311 1343 (fontified t) 1343 1345 (face font-lock-keyword-face fontified t) 1345 1350 (fontified t) 1350 1352 (face font-lock-operator-face fontified t) 1352 1368 (fontified t) 1368 1374 (face font-lock-keyword-face fontified t) 1374 1387 (fontified t) 1387 1393 (face font-lock-keyword-face fontified t) 1393 1413 (fontified t) 1413 1430 (face font-lock-variable-name-face fontified t) 1430 1431 (fontified t) 1431 1432 (face font-lock-operator-face fontified t) 1432 1478 (fontified t) 1478 1479 (face font-lock-operator-face fontified t) 1479 1483 (face font-lock-constant-face fontified t) 1483 1485 (fontified t) 1485 1487 (face font-lock-doc-face fontified t) 1487 1488 (face font-lock-doc-face fontified t syntax-table (15)) 1488 1528 (face font-lock-doc-face fontified t) 1528 1536 (fontified t face font-lock-doc-face) 1536 1537 (fontified t face font-lock-doc-face syntax-table (15)) 1537 1539 (fontified t face font-lock-doc-face) 1539 1540 (fontified t) 1541 1543 (face font-lock-comment-delimiter-face) 1543 1579 (face font-lock-comment-face) 1579 1580 (face font-lock-comment-delimiter-face) 1580 1581 (face font-lock-comment-face) 1581 1583 (face font-lock-comment-delimiter-face) 1583 1640 (face font-lock-comment-face) 1640 1641 (face font-lock-variable-name-face) 1642 1643 (face font-lock-operator-face) 1652 1655 (face font-lock-string-face) 1657 1658 (face font-lock-variable-name-face) 1659 1660 (face font-lock-operator-face) 1671 1674 (face font-lock-string-face) 1678 1681 (face font-lock-keyword-face) 1682 1701 (face font-lock-function-name-face) 1755 1756 (face font-lock-operator-face) 1756 1757 (face font-lock-operator-face) 1778 1780 (face font-lock-doc-face) 1780 1781 (syntax-table (15) face font-lock-doc-face) 1781 1831 (face font-lock-doc-face) 1831 1832 (syntax-table (15) face font-lock-doc-face) 1832 1834 (face font-lock-doc-face) 1840 1858 (face font-lock-type-face) 1863 1869 (face font-lock-type-face) 1877 1880 (face font-lock-keyword-face) 1881 1886 (face font-lock-function-name-face) 1907 1908 (face font-lock-operator-face) 1910 1911 (face font-lock-operator-face) 1925 1927 (face font-lock-operator-face) 1945 1946 (face font-lock-operator-face) 1946 1947 (face font-lock-operator-face) 1959 1965 (face font-lock-keyword-face) 1990 1991 (face font-lock-operator-face) 1997 1999 (face font-lock-operator-face) 2012 2018 (face font-lock-keyword-face) 2027 2030 (face font-lock-keyword-face) 2031 2052 (face font-lock-function-name-face) 2093 2094 (face font-lock-operator-face) 2094 2095 (face font-lock-operator-face) 2116 2118 (face font-lock-doc-face) 2118 2119 (syntax-table (15) face font-lock-doc-face) 2119 2202 (face font-lock-doc-face) 2202 2203 (syntax-table (15) face font-lock-doc-face) 2203 2205 (face font-lock-doc-face) 2211 2231 (face font-lock-type-face) 2236 2242 (face font-lock-type-face) 2250 2253 (face font-lock-keyword-face) 2254 2259 (face font-lock-function-name-face) 2291 2292 (face font-lock-operator-face) 2294 2295 (face font-lock-operator-face) 2309 2311 (face font-lock-operator-face) 2329 2330 (face font-lock-operator-face) 2330 2331 (face font-lock-operator-face) 2343 2347 (face font-lock-keyword-face) 2363 2367 (face font-lock-builtin-face) 2370 2372 (face font-lock-keyword-face) 2393 2399 (face font-lock-keyword-face) 2410 2411 (face font-lock-operator-face) 2417 2419 (face font-lock-operator-face) 2432 2438 (face font-lock-keyword-face) 2447 2468 (face font-lock-type-face) 2478 2489 (face font-lock-string-face) 2491 2495 (face font-lock-string-face) 2497 2509 (face font-lock-type-face) 2531 2532 (face font-lock-operator-face) 2532 2536 (face font-lock-builtin-face) 2563 2564 (face font-lock-operator-face) 2565 2569 (face font-lock-string-face) 2571 2579 (face font-lock-string-face) 2600 2601 (face font-lock-operator-face) 2601 2621 (face font-lock-string-face) 2639 2640 (face font-lock-operator-face) 2641 2651 (face font-lock-string-face) 2651 2660 (face nil) 2660 2661 (face font-lock-string-face) 2665 2678 (face font-lock-type-face) 2684 2694 (face font-lock-string-face) 2700 2704 (face font-lock-string-face) 2710 2723 (face font-lock-string-face) 2729 2733 (face font-lock-builtin-face) 2733 2734 (face font-lock-operator-face) 2767 2768 (face font-lock-operator-face) 2801 2802 (face font-lock-operator-face) 2802 2807 (face font-lock-constant-face) 2824 2825 (face font-lock-operator-face) 2825 2829 (face font-lock-constant-face) 2835 2837 (face font-lock-comment-delimiter-face) 2837 2906 (face font-lock-comment-face) 2910 2912 (face font-lock-comment-delimiter-face) 2912 2954 (face font-lock-comment-face) 2966 2967 (face font-lock-operator-face) 2967 2971 (face font-lock-constant-face) 2977 2981 (face font-lock-builtin-face) 2981 2982 (face font-lock-operator-face) 2982 3051 (face font-lock-string-face) 3055 3068 (face font-lock-type-face) 3074 3087 (face font-lock-string-face) 3093 3097 (face font-lock-string-face) 3103 3107 (face font-lock-builtin-face) 3107 3108 (face font-lock-operator-face) 3122 3129 (face font-lock-string-face) 3131 3137 (face font-lock-string-face) 3139 3148 (face font-lock-string-face) 3150 3157 (face font-lock-string-face) 3172 3173 (face font-lock-operator-face) 3173 3179 (face font-lock-string-face) 3196 3197 (face font-lock-operator-face) 3197 3201 (face font-lock-constant-face) 3207 3211 (face font-lock-builtin-face) 3211 3212 (face font-lock-operator-face) 3212 3254 (face font-lock-string-face) 3258 3271 (face font-lock-type-face) 3277 3299 (face font-lock-string-face) 3305 3309 (face font-lock-string-face) 3315 3319 (face font-lock-builtin-face) 3319 3320 (face font-lock-operator-face) 3355 3356 (face font-lock-operator-face) 3356 3361 (face font-lock-constant-face) 3378 3379 (face font-lock-operator-face) 3379 3383 (face font-lock-constant-face) 3389 3391 (face font-lock-comment-delimiter-face) 3391 3460 (face font-lock-comment-face) 3464 3466 (face font-lock-comment-delimiter-face) 3466 3508 (face font-lock-comment-face) 3520 3521 (face font-lock-operator-face) 3521 3525 (face font-lock-constant-face) 3531 3535 (face font-lock-builtin-face) 3535 3536 (face font-lock-operator-face) 3536 3615 (face font-lock-string-face) 3619 3622 (face font-lock-keyword-face) 3623 3627 (face font-lock-function-name-face) 3639 3642 (face font-lock-builtin-face) 3644 3645 (face font-lock-operator-face) 3645 3646 (face font-lock-operator-face) 3647 3651 (face font-lock-constant-face) 3657 3659 (face font-lock-doc-face) 3659 3660 (syntax-table (15) face font-lock-doc-face) 3660 3708 (face font-lock-doc-face) 3708 3709 (syntax-table (15) face font-lock-doc-face) 3709 3711 (face font-lock-doc-face) 3716 3727 (face font-lock-variable-name-face) 3728 3729 (face font-lock-operator-face) 3788 3801 (face font-lock-type-face) 3804 3828 (face font-lock-type-face) 3829 3836 (face font-lock-string-face) 3845 3846 (face font-lock-operator-face) 3852 3855 (face font-lock-builtin-face) 3859 3872 (face font-lock-type-face) 3878 3882 (face font-lock-string-face) 3888 3896 (face font-lock-string-face) 3902 3925 (face font-lock-string-face) 3931 3935 (face font-lock-builtin-face) 3935 3936 (face font-lock-operator-face) 3955 3956 (face font-lock-operator-face) 3956 3961 (face font-lock-constant-face) 3972 3973 (face font-lock-operator-face) 3984 3988 (face font-lock-builtin-face) 3988 3989 (face font-lock-operator-face) 3989 4074 (face font-lock-string-face) 4078 4100 (face font-lock-type-face) 4101 4119 (face font-lock-type-face) 4120 4123 (face font-lock-keyword-face) 4124 4131 (face font-lock-function-name-face) 4215 4216 (face font-lock-operator-face) 4217 4221 (face font-lock-constant-face) 4224 4225 (face font-lock-operator-face) 4225 4226 (face font-lock-operator-face) 4227 4231 (face font-lock-constant-face) 4237 4239 (face font-lock-doc-face) 4239 4240 (syntax-table (15) face font-lock-doc-face) 4240 4354 (face font-lock-doc-face) 4354 4355 (syntax-table (15) face font-lock-doc-face) 4355 4357 (face font-lock-doc-face) 4362 4369 (face font-lock-variable-name-face) 4370 4371 (face font-lock-operator-face) 4420 4422 (face font-lock-keyword-face) 4440 4445 (face font-lock-builtin-face) 4446 4480 (face font-lock-string-face) 4510 4514 (face font-lock-keyword-face) 4524 4529 (face font-lock-builtin-face) 4530 4601 (face font-lock-string-face) 4608 4610 (face font-lock-keyword-face) 4656 4679 (face font-lock-string-face) 4679 4680 (face nil) 4680 4683 (face font-lock-builtin-face) 4683 4707 (face nil) 4707 4708 (face font-lock-string-face) 4783 4794 (face font-lock-type-face) 4797 4800 (face font-lock-keyword-face) 4801 4806 (face font-lock-function-name-face) 4809 4810 (face font-lock-operator-face) 4810 4811 (face font-lock-operator-face) 4812 4816 (face font-lock-constant-face) 4822 4824 (face font-lock-doc-face) 4824 4825 (syntax-table (15) face font-lock-doc-face) 4825 4846 (face font-lock-doc-face) 4846 4847 (syntax-table (15) face font-lock-doc-face) 4847 4849 (face font-lock-doc-face) 4854 4858 (face font-lock-keyword-face) 4861 4875 (face font-lock-type-face) 4876 4882 (face font-lock-string-face) 4884 4906 (face font-lock-type-face) 4907 4910 (face font-lock-keyword-face) 4911 4921 (face font-lock-function-name-face) 4938 4939 (face font-lock-operator-face) 4939 4940 (face font-lock-operator-face) 4941 4945 (face font-lock-constant-face) 4951 4953 (face font-lock-doc-face) 4953 4954 (syntax-table (15) face font-lock-doc-face) 4954 4977 (face font-lock-doc-face) 4977 4978 (syntax-table (15) face font-lock-doc-face) 4978 4980 (face font-lock-doc-face) 4985 4991 (face font-lock-variable-name-face) 4992 4993 (face font-lock-operator-face) 5019 5021 (face font-lock-keyword-face) 5022 5025 (face font-lock-keyword-face) 5042 5047 (face font-lock-builtin-face) 5048 5103 (face font-lock-string-face) 5113 5119 (face font-lock-keyword-face) 5124 5129 (face font-lock-variable-name-face) 5130 5131 (face font-lock-operator-face) 5138 5145 (face font-lock-string-face) 5147 5154 (face font-lock-string-face) 5160 5163 (face font-lock-keyword-face) 5176 5178 (face font-lock-keyword-face) 5263 5268 (face font-lock-builtin-face) 5278 5292 (face font-lock-type-face) 5293 5298 (face font-lock-string-face) 5300 5315 (face font-lock-type-face) 5316 5321 (face font-lock-string-face) 5331 5332 (face font-lock-operator-face) 5332 5336 (face font-lock-constant-face) 5352 5353 (face font-lock-operator-face) 5378 5402 (face font-lock-type-face) 5403 5410 (face font-lock-string-face) 5412 5425 (face font-lock-type-face) 5431 5440 (face font-lock-string-face) 5446 5450 (face font-lock-string-face) 5463 5464 (face font-lock-operator-face) 5464 5468 (face font-lock-constant-face) 5474 5478 (face font-lock-builtin-face) 5478 5479 (face font-lock-operator-face) 5479 5549 (face font-lock-string-face) 5554 5616 (face font-lock-string-face) 5620 5640 (face font-lock-type-face) 5641 5644 (face font-lock-keyword-face) 5645 5654 (face font-lock-function-name-face) 5696 5699 (face font-lock-builtin-face) 5722 5726 (face font-lock-builtin-face) 5729 5730 (face font-lock-operator-face) 5730 5731 (face font-lock-operator-face) 5732 5736 (face font-lock-constant-face) 5742 5744 (face font-lock-doc-face) 5744 5745 (syntax-table (15) face font-lock-doc-face) 5745 5853 (face font-lock-doc-face) 5853 5854 (syntax-table (15) face font-lock-doc-face) 5854 5856 (face font-lock-doc-face) 5861 5865 (face font-lock-keyword-face) 5881 5885 (face font-lock-builtin-face) 5888 5890 (face font-lock-keyword-face) 5907 5913 (face font-lock-variable-name-face) 5914 5915 (face font-lock-operator-face) 5945 5954 (face font-lock-variable-name-face) 5955 5956 (face font-lock-operator-face) 5981 5983 (face font-lock-keyword-face) 6007 6009 (face font-lock-keyword-face) 6046 6059 (face font-lock-string-face) 6059 6064 (face nil) 6064 6103 (face font-lock-string-face) 6117 6121 (face font-lock-keyword-face) 6139 6144 (face font-lock-builtin-face) 6167 6193 (face font-lock-string-face) 6193 6198 (face nil) 6198 6219 (face font-lock-string-face) 6301 6305 (face font-lock-constant-face) 6318 6323 (face font-lock-variable-name-face) 6324 6325 (face font-lock-operator-face) 6353 6359 (face font-lock-variable-name-face) 6365 6366 (face font-lock-operator-face) 6377 6382 (face font-lock-builtin-face) 6393 6418 (face font-lock-string-face) 6418 6423 (face nil) 6423 6457 (face font-lock-string-face) 6457 6479 (face nil) 6479 6480 (face font-lock-string-face) 6489 6503 (face font-lock-type-face) 6504 6512 (face font-lock-string-face) 6514 6540 (face font-lock-type-face) 6546 6553 (face font-lock-string-face) 6555 6559 (face font-lock-string-face) 6567 6568 (face font-lock-operator-face) 6568 6613 (face font-lock-string-face) 6616 6631 (face font-lock-type-face) 6632 6644 (face font-lock-string-face) 6660 6661 (face font-lock-operator-face) 6686 6699 (face font-lock-type-face) 6705 6714 (face font-lock-string-face) 6720 6724 (face font-lock-string-face) 6737 6738 (face font-lock-operator-face) 6738 6742 (face font-lock-constant-face) 6748 6752 (face font-lock-builtin-face) 6752 6753 (face font-lock-operator-face) 6753 6816 (face font-lock-string-face) 6820 6840 (face font-lock-type-face) 6841 6844 (face font-lock-keyword-face) 6845 6857 (face font-lock-function-name-face) 6901 6904 (face font-lock-builtin-face) 6913 6917 (face font-lock-builtin-face) 6919 6920 (face font-lock-operator-face) 6920 6921 (face font-lock-operator-face) 6922 6926 (face font-lock-constant-face) 6932 6934 (face font-lock-doc-face) 6934 6935 (syntax-table (15) face font-lock-doc-face) 6935 6957 (face font-lock-doc-face) 6957 6958 (syntax-table (15) face font-lock-doc-face) 6958 6960 (face font-lock-doc-face) 6965 6969 (face font-lock-keyword-face) 6985 6989 (face font-lock-builtin-face) 6992 6994 (face font-lock-keyword-face) 7011 7016 (face font-lock-variable-name-face) 7017 7018 (face font-lock-operator-face) 7064 7066 (face font-lock-keyword-face) 7100 7119 (face font-lock-string-face) 7119 7131 (face nil) 7131 7136 (face font-lock-string-face) 7136 7143 (face nil) 7143 7144 (face font-lock-string-face) 7158 7161 (face font-lock-keyword-face) 7203 7207 (face font-lock-keyword-face) 7240 7253 (face font-lock-string-face) 7253 7265 (face nil) 7265 7299 (face font-lock-string-face) 7309 7313 (face font-lock-keyword-face) 7327 7332 (face font-lock-builtin-face) 7334 7360 (face font-lock-string-face) 7360 7372 (face nil) 7372 7392 (face font-lock-string-face) 7406 7410 (face font-lock-constant-face) 7418 7423 (face font-lock-builtin-face) 7425 7450 (face font-lock-string-face) 7450 7462 (face nil) 7462 7498 (face font-lock-string-face) 7502 7505 (face font-lock-keyword-face) 7506 7520 (face font-lock-function-name-face) 7538 7539 (face font-lock-operator-face) 7540 7544 (face font-lock-constant-face) 7546 7547 (face font-lock-operator-face) 7547 7548 (face font-lock-operator-face) 7559 7569 (face font-lock-variable-name-face) 7570 7571 (face font-lock-operator-face) 7583 7585 (face font-lock-keyword-face) 7622 7624 (face font-lock-keyword-face) 7636 7638 (face font-lock-keyword-face) 7639 7643 (face font-lock-constant-face) 7653 7658 (face font-lock-builtin-face) 7672 7733 (face font-lock-string-face) 7746 7785 (face font-lock-string-face) 7798 7857 (face font-lock-string-face) 7876 7880 (face font-lock-constant-face) 7888 7894 (face font-lock-keyword-face) 7908 7921 (face font-lock-type-face) 7922 7935 (face font-lock-type-face) 7941 7948 (face font-lock-string-face) 7954 7958 (face font-lock-string-face) 7964 7976 (face font-lock-string-face) 7982 7986 (face font-lock-builtin-face) 7986 7987 (face font-lock-operator-face) 8004 8005 (face font-lock-operator-face) 8005 8009 (face font-lock-constant-face) 8020 8021 (face font-lock-operator-face) 8021 8026 (face font-lock-constant-face) 8037 8038 (face font-lock-operator-face) 8057 8058 (face font-lock-operator-face) 8058 8063 (face font-lock-constant-face) 8069 8073 (face font-lock-builtin-face) 8073 8074 (face font-lock-operator-face) 8074 8115 (face font-lock-string-face) 8120 8211 (face font-lock-string-face) 8216 8263 (face font-lock-string-face) 8267 8291 (face font-lock-type-face) 8292 8299 (face font-lock-string-face) 8309 8310 (face font-lock-operator-face) 8310 8314 (face font-lock-constant-face) 8316 8319 (face font-lock-keyword-face) 8320 8326 (face font-lock-function-name-face) 8344 8345 (face font-lock-operator-face) 8346 8350 (face font-lock-constant-face) 8366 8367 (face font-lock-operator-face) 8367 8368 (face font-lock-operator-face) 8369 8373 (face font-lock-constant-face) 8379 8381 (face font-lock-doc-face) 8381 8382 (syntax-table (15) face font-lock-doc-face) 8382 8404 (face font-lock-doc-face) 8404 8405 (syntax-table (15) face font-lock-doc-face) 8405 8407 (face font-lock-doc-face) 8412 8422 (face font-lock-variable-name-face) 8423 8424 (face font-lock-operator-face) 8456 8461 (face font-lock-builtin-face) 8463 8482 (face font-lock-string-face) 8482 8494 (face nil) 8494 8495 (face font-lock-string-face) 8501 8507 (face font-lock-variable-name-face) 8508 8509 (face font-lock-operator-face) 8537 8547 (face font-lock-variable-name-face) 8548 8549 (face font-lock-operator-face) 8579 8584 (face font-lock-builtin-face) 8585 8608 (face font-lock-string-face) 8662 8667 (face font-lock-builtin-face) 8668 8706 (face font-lock-string-face) 8710 8723 (face font-lock-type-face) 8724 8737 (face font-lock-type-face) 8743 8750 (face font-lock-string-face) 8756 8760 (face font-lock-string-face) 8766 8778 (face font-lock-string-face) 8784 8788 (face font-lock-builtin-face) 8788 8789 (face font-lock-operator-face) 8806 8807 (face font-lock-operator-face) 8807 8811 (face font-lock-constant-face) 8822 8823 (face font-lock-operator-face) 8823 8828 (face font-lock-constant-face) 8839 8840 (face font-lock-operator-face) 8859 8860 (face font-lock-operator-face) 8860 8865 (face font-lock-constant-face) 8871 8875 (face font-lock-builtin-face) 8875 8876 (face font-lock-operator-face) 8876 8917 (face font-lock-string-face) 8922 9013 (face font-lock-string-face) 9018 9065 (face font-lock-string-face) 9069 9093 (face font-lock-type-face) 9094 9101 (face font-lock-string-face) 9103 9106 (face font-lock-keyword-face) 9107 9112 (face font-lock-function-name-face) 9130 9131 (face font-lock-operator-face) 9132 9136 (face font-lock-constant-face) 9152 9153 (face font-lock-operator-face) 9153 9154 (face font-lock-operator-face) 9155 9159 (face font-lock-constant-face) 9165 9167 (face font-lock-doc-face) 9167 9168 (syntax-table (15) face font-lock-doc-face) 9168 9692 (face font-lock-doc-face) 9692 9693 (syntax-table (15) face font-lock-doc-face) 9693 9695 (face font-lock-doc-face) 9700 9710 (face font-lock-variable-name-face) 9711 9712 (face font-lock-operator-face) 9744 9749 (face font-lock-builtin-face) 9751 9770 (face font-lock-string-face) 9770 9782 (face nil) 9782 9783 (face font-lock-string-face) 9789 9795 (face font-lock-variable-name-face) 9796 9797 (face font-lock-operator-face) 9825 9830 (face font-lock-builtin-face) 9831 9848 (face font-lock-string-face) 9854 9859 (face font-lock-builtin-face) 9872 9874 (face font-lock-comment-delimiter-face) 9874 9918 (face font-lock-comment-face) 9922 9933 (face font-lock-variable-name-face) 9934 9935 (face font-lock-operator-face) 10007 10009 (face font-lock-comment-delimiter-face) 10009 10047 (face font-lock-comment-face) 10051 10057 (face font-lock-variable-name-face) 10058 10059 (face font-lock-operator-face) 10105 10106 (face font-lock-operator-face) 10106 10112 (face font-lock-keyword-face) 10139 10148 (face font-lock-keyword-face) 10149 10159 (face font-lock-function-name-face) 10162 10163 (face font-lock-operator-face) 10163 10164 (face font-lock-operator-face) 10165 10169 (face font-lock-constant-face) 10179 10184 (face font-lock-keyword-face) 10185 10189 (face font-lock-constant-face) 10203 10207 (face font-lock-keyword-face) 10246 10295 (face font-lock-string-face) 10327 10341 (face font-lock-variable-name-face) 10342 10343 (face font-lock-operator-face) 10344 10349 (face font-lock-keyword-face) 10393 10410 (face font-lock-string-face) 10410 10412 (face nil) 10412 10415 (face font-lock-builtin-face) 10415 10419 (face nil) 10419 10422 (face font-lock-keyword-face) 10422 10425 (face nil) 10425 10427 (face font-lock-keyword-face) 10427 10444 (face nil) 10444 10445 (face font-lock-string-face) 10459 10463 (face font-lock-keyword-face) 10485 10507 (face font-lock-string-face) 10580 10583 (face font-lock-keyword-face) 10623 10629 (face font-lock-keyword-face) 10630 10647 (face font-lock-type-face) 10657 10662 (face font-lock-builtin-face) 10663 10722 (face font-lock-string-face) 10726 10739 (face font-lock-type-face) 10740 10764 (face font-lock-type-face) 10765 10772 (face font-lock-string-face) 10774 10777 (face font-lock-keyword-face) 10778 10785 (face font-lock-function-name-face) 10800 10801 (face font-lock-operator-face) 10801 10802 (face font-lock-operator-face) 10803 10807 (face font-lock-constant-face) 10813 10815 (face font-lock-doc-face) 10815 10816 (syntax-table (15) face font-lock-doc-face) 10816 10854 (face font-lock-doc-face) 10854 10855 (syntax-table (15) face font-lock-doc-face) 10855 10857 (face font-lock-doc-face) 10862 10868 (face font-lock-variable-name-face) 10869 10870 (face font-lock-operator-face) 10910 10934 (face font-lock-string-face) 10964 10970 (face font-lock-keyword-face) 10990 10992 (face font-lock-keyword-face) 10993 10996 (face font-lock-keyword-face) 10997 11001 (face font-lock-constant-face) 11013 11022 (face font-lock-string-face) 11024 11033 (face font-lock-string-face) 11035 11039 (face font-lock-string-face) 11041 11044 (face font-lock-builtin-face) 11068 11079 (face font-lock-type-face) 11080 11083 (face font-lock-keyword-face) 11084 11087 (face font-lock-function-name-face) 11090 11091 (face font-lock-operator-face) 11091 11092 (face font-lock-operator-face) 11093 11097 (face font-lock-constant-face) 11103 11105 (face font-lock-doc-face) 11105 11106 (syntax-table (15) face font-lock-doc-face) 11106 11153 (face font-lock-doc-face) 11153 11154 (syntax-table (15) face font-lock-doc-face) 11154 11156 (face font-lock-doc-face) 11161 11165 (face font-lock-keyword-face) 11168 11180 (face font-lock-type-face) 11181 11184 (face font-lock-keyword-face) 11185 11193 (face font-lock-function-name-face) 11196 11197 (face font-lock-operator-face) 11197 11198 (face font-lock-operator-face) 11199 11203 (face font-lock-constant-face) 11209 11211 (face font-lock-doc-face) 11211 11212 (syntax-table (15) face font-lock-doc-face) 11212 11248 (face font-lock-doc-face) 11248 11249 (syntax-table (15) face font-lock-doc-face) 11249 11251 (face font-lock-doc-face) 11256 11261 (face font-lock-variable-name-face) 11262 11263 (face font-lock-operator-face) 11293 11297 (face font-lock-string-face) 11320 11331 (face font-lock-string-face) 11340 11341 (face font-lock-operator-face) 11341 11348 (face font-lock-string-face) 11371 11387 (face font-lock-string-face) 11410 11428 (face font-lock-string-face) 11434 11436 (face font-lock-comment-delimiter-face) 11436 11495 (face font-lock-comment-face) 11499 11502 (face font-lock-keyword-face) 11509 11511 (face font-lock-keyword-face) 11512 11518 (face font-lock-builtin-face) 11525 11528 (face font-lock-builtin-face) 11535 11536 (face font-lock-operator-face) 11536 11542 (face font-lock-keyword-face) 11547 11548 (face font-lock-operator-face) 11568 11570 (face font-lock-builtin-face) 11615 11617 (face font-lock-builtin-face) 11631 11634 (face font-lock-builtin-face) 11697 11699 (face font-lock-keyword-face) 11721 11725 (face font-lock-keyword-face) 11726 11728 (face font-lock-string-face) 11771 11773 (face font-lock-keyword-face) 11797 11801 (face font-lock-keyword-face) 11802 11804 (face font-lock-string-face) 11820 11824 (face font-lock-keyword-face) 11856 11861 (face font-lock-builtin-face) 11871 11883 (face font-lock-type-face) 11884 11899 (face font-lock-type-face) 11900 11907 (face font-lock-string-face) 11909 11913 (face font-lock-builtin-face) 11913 11914 (face font-lock-operator-face) 11936 11937 (face font-lock-operator-face) 11937 11941 (face font-lock-constant-face) 11943 11956 (face font-lock-type-face) 11962 11972 (face font-lock-string-face) 11985 11986 (face font-lock-operator-face) 11986 11993 (face font-lock-string-face) 11999 12003 (face font-lock-builtin-face) 12003 12004 (face font-lock-operator-face) 12023 12027 (face font-lock-builtin-face) 12027 12028 (face font-lock-operator-face) 12028 12063 (face font-lock-string-face) 12067 12070 (face font-lock-keyword-face) 12071 12074 (face font-lock-function-name-face) 12097 12100 (face font-lock-builtin-face) 12102 12103 (face font-lock-operator-face) 12103 12104 (face font-lock-operator-face) 12105 12109 (face font-lock-constant-face) 12115 12117 (face font-lock-doc-face) 12117 12118 (syntax-table (15) face font-lock-doc-face) 12118 12161 (face font-lock-doc-face) 12161 12162 (syntax-table (15) face font-lock-doc-face) 12162 12164 (face font-lock-doc-face) 12169 12174 (face font-lock-builtin-face) 12232 12244 (face font-lock-type-face) 12245 12260 (face font-lock-type-face) 12261 12268 (face font-lock-string-face) 12270 12274 (face font-lock-builtin-face) 12274 12275 (face font-lock-operator-face) 12297 12298 (face font-lock-operator-face) 12298 12302 (face font-lock-constant-face) 12304 12319 (face font-lock-type-face) 12325 12338 (face font-lock-string-face) 12340 12344 (face font-lock-builtin-face) 12344 12345 (face font-lock-operator-face) 12365 12366 (face font-lock-operator-face) 12381 12382 (face font-lock-operator-face) 12382 12387 (face font-lock-constant-face) 12396 12397 (face font-lock-operator-face) 12410 12423 (face font-lock-type-face) 12429 12439 (face font-lock-string-face) 12452 12453 (face font-lock-operator-face) 12453 12460 (face font-lock-string-face) 12466 12470 (face font-lock-builtin-face) 12470 12471 (face font-lock-operator-face) 12490 12494 (face font-lock-builtin-face) 12494 12495 (face font-lock-operator-face) 12495 12530 (face font-lock-string-face) 12534 12537 (face font-lock-keyword-face) 12538 12546 (face font-lock-function-name-face) 12569 12572 (face font-lock-builtin-face) 12593 12594 (face font-lock-operator-face) 12594 12595 (face font-lock-operator-face) 12596 12600 (face font-lock-constant-face) 12606 12608 (face font-lock-doc-face) 12608 12609 (syntax-table (15) face font-lock-doc-face) 12609 12829 (face font-lock-doc-face) 12829 12830 (syntax-table (15) face font-lock-doc-face) 12830 12832 (face font-lock-doc-face) 12837 12840 (face font-lock-variable-name-face) 12841 12842 (face font-lock-operator-face) 12901 12903 (face font-lock-keyword-face) 12934 12945 (face font-lock-variable-name-face) 12946 12948 (face font-lock-operator-face) 12959 12962 (face font-lock-string-face) 12964 12965 (face font-lock-operator-face) 12972 12977 (face font-lock-builtin-face) 12979 12988 (face font-lock-string-face) 12988 12993 (face nil) 12993 12994 (face font-lock-string-face) 13000 13005 (face font-lock-builtin-face) 13007 13021 (face font-lock-string-face) 13021 13034 (face nil) 13034 13035 (face font-lock-string-face) 13041 13049 (face font-lock-variable-name-face) 13050 13051 (face font-lock-operator-face) 13069 13073 (face font-lock-keyword-face) 13125 13126 (face font-lock-operator-face) 13126 13129 (face font-lock-builtin-face) 13147 13163 (face font-lock-string-face) 13186 13187 (face font-lock-operator-face) 13187 13200 (face font-lock-string-face) 13208 13210 (face font-lock-keyword-face) 13258 13270 (face font-lock-type-face) 13271 13295 (face font-lock-type-face) 13296 13303 (face font-lock-string-face) 13305 13308 (face font-lock-keyword-face) 13309 13314 (face font-lock-function-name-face) 13329 13330 (face font-lock-operator-face) 13330 13331 (face font-lock-operator-face) 13332 13336 (face font-lock-constant-face) 13342 13344 (face font-lock-doc-face) 13344 13345 (syntax-table (15) face font-lock-doc-face) 13345 13389 (face font-lock-doc-face) 13389 13390 (syntax-table (15) face font-lock-doc-face) 13390 13392 (face font-lock-doc-face) 13397 13403 (face font-lock-variable-name-face) 13404 13405 (face font-lock-operator-face) 13433 13438 (face font-lock-builtin-face) 13474 13475 (face font-lock-comment-delimiter-face) 13475 13546 (face font-lock-comment-face)) . 817) (undo-tree-id49 . -13262) (undo-tree-id50 . -27) (undo-tree-id51 . -27) (undo-tree-id52 . -27) (undo-tree-id53 . -408) (undo-tree-id54 . -408) (undo-tree-id55 . -408) (undo-tree-id56 . -408) (undo-tree-id57 . -408) (undo-tree-id58 . -408) (undo-tree-id59 . -408) (undo-tree-id60 . -408) (undo-tree-id61 . -408) (undo-tree-id62 . -687) (undo-tree-id63 . -687) (undo-tree-id64 . -695) (undo-tree-id65 . -687) (undo-tree-id66 . -687) (undo-tree-id67 . -695) (undo-tree-id68 . -726) (undo-tree-id69 . -726) (undo-tree-id70 . -767) (undo-tree-id71 . -767) (undo-tree-id72 . -806) (undo-tree-id73 . -806) (undo-tree-id74 . -847) (undo-tree-id75 . -847) (undo-tree-id76 . -909) (undo-tree-id77 . -909) (undo-tree-id78 . -965) (undo-tree-id79 . -965) (undo-tree-id80 . -1040) (undo-tree-id81 . -1040) (undo-tree-id82 . -1163) (undo-tree-id83 . -1163) (undo-tree-id84 . -1163) (undo-tree-id85 . -1163) (undo-tree-id86 . -1295) (undo-tree-id87 . -1163) (undo-tree-id88 . -1086) (undo-tree-id89 . -1158) (undo-tree-id90 . -1086) (undo-tree-id91 . -1158) (undo-tree-id92 . -1086) (undo-tree-id93 . -1086) (undo-tree-id94 . -1086) (undo-tree-id95 . -1086) (undo-tree-id96 . -1086) (undo-tree-id97 . -1086) (undo-tree-id98 . -1163) (undo-tree-id99 . -1163) (undo-tree-id100 . -1163) (undo-tree-id101 . -1163) (undo-tree-id102 . -1295) (undo-tree-id103 . -1163) (undo-tree-id104 . -1086) (undo-tree-id105 . -1158) (undo-tree-id106 . -1086) (undo-tree-id107 . -1158) (undo-tree-id108 . -1086) (undo-tree-id109 . -1086) (undo-tree-id110 . -1086) (undo-tree-id111 . -1086) (undo-tree-id112 . -1086) (undo-tree-id113 . -1086) (undo-tree-id114 . -1163) (undo-tree-id115 . -1163) (undo-tree-id116 . -1163) (undo-tree-id117 . -1163) (undo-tree-id118 . -1163) (undo-tree-id119 . -1295) (undo-tree-id120 . -1163) (undo-tree-id121 . -1086) (undo-tree-id122 . -1158) (undo-tree-id123 . -1086) (undo-tree-id124 . -1158) (undo-tree-id125 . -1086) (undo-tree-id126 . -1086) (undo-tree-id127 . -1086) (undo-tree-id128 . -1086) (undo-tree-id129 . -1086) (undo-tree-id130 . -1086) (undo-tree-id131 . -1485) (undo-tree-id132 . -1485) (undo-tree-id133 . -1485) (undo-tree-id134 . -1485) (undo-tree-id135 . -1539) (undo-tree-id136 . -1485) (undo-tree-id137 . -1413) (undo-tree-id138 . -1484) (undo-tree-id139 . -1413) (undo-tree-id140 . -1484) (undo-tree-id141 . -1413) (undo-tree-id142 . -1413) (undo-tree-id143 . -1413) (undo-tree-id144 . -1413) (undo-tree-id145 . -1343) (undo-tree-id146 . -1343) (undo-tree-id147 . -1343) (undo-tree-id148 . -1300) (undo-tree-id149 . -1300) (undo-tree-id150 . -1300) (undo-tree-id151 . -1086) (undo-tree-id152 . -1086) (undo-tree-id153 . -1086) (undo-tree-id154 . -640) (undo-tree-id155 . -640) (undo-tree-id156 . -640) (undo-tree-id157 . -640) (undo-tree-id158 . -1484) (undo-tree-id159 . -1413) (undo-tree-id160 . -1413) (undo-tree-id161 . -1413) (undo-tree-id162 . -1480) (undo-tree-id163 . -1485) (undo-tree-id164 . -1485) (undo-tree-id165 . -1485) (undo-tree-id166 . -1485) (undo-tree-id167 . -1539) (undo-tree-id168 . -1485) (undo-tree-id169 . -1413) (undo-tree-id170 . -1484) (undo-tree-id171 . -1413) (undo-tree-id172 . -1484) (undo-tree-id173 . -1413) (undo-tree-id174 . -1413) (undo-tree-id175 . -1413) (undo-tree-id176 . -1413) (undo-tree-id177 . -1343) (undo-tree-id178 . -1343) (undo-tree-id179 . -1343) (undo-tree-id180 . -1300) (undo-tree-id181 . -1300) (undo-tree-id182 . -1300) (undo-tree-id183 . -1086) (undo-tree-id184 . -1086) (undo-tree-id185 . -1086) (undo-tree-id186 . -640) (undo-tree-id187 . -640) (undo-tree-id188 . -640) (undo-tree-id189 . -640) (undo-tree-id190 . -1484) (undo-tree-id191 . -1413) (undo-tree-id192 . -1413) (undo-tree-id193 . -1413) (undo-tree-id194 . -1480) (undo-tree-id195 . -1485) (undo-tree-id196 . -1485) (undo-tree-id197 . -1485) (undo-tree-id198 . -1485) (undo-tree-id199 . -1539) (undo-tree-id200 . -1485) (undo-tree-id201 . -1413) (undo-tree-id202 . -1484) (undo-tree-id203 . -1413) (undo-tree-id204 . -1484) (undo-tree-id205 . -1413) (undo-tree-id206 . -1413) (undo-tree-id207 . -1413) (undo-tree-id208 . -1413) (undo-tree-id209 . -1343) (undo-tree-id210 . -1343) (undo-tree-id211 . -1343) (undo-tree-id212 . -1300) (undo-tree-id213 . -1300) (undo-tree-id214 . -1300) (undo-tree-id215 . -1086) (undo-tree-id216 . -1086) (undo-tree-id217 . -1086) (undo-tree-id218 . -640) (undo-tree-id219 . -640) (undo-tree-id220 . -640) (undo-tree-id221 . -640) (undo-tree-id222 . -1484) (undo-tree-id223 . -1413) (undo-tree-id224 . -1413) (undo-tree-id225 . -1413) (undo-tree-id226 . -1480) (undo-tree-id227 . -27) 844 (t 26049 10158 949146 710000)) nil (26049 10173 890999 701000) 0 nil])
([nil nil ((14379 . 14390) (t 26049 10160 77147 264000)) nil (26049 10173 890718 167000) 0 nil])
([nil current ((14395 . 14399)) nil (26049 10173 890714 87000) 0 nil])
nil

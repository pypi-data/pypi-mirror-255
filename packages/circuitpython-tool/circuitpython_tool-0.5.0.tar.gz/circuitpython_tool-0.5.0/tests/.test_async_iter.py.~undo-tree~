(undo-tree-save-format-version . 1)
"6dcf47d656df1d2e4fa46ab363ca82fd18ad9f89"
[nil nil nil nil (26036 4664 350914 405000) 0 nil]
([nil nil ((958 . 963) (t 26036 3637 903564 306000)) nil (26036 4664 350913 867000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -959) (undo-tree-id20 . -4) 963) nil (26036 4664 350913 596000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -957) (undo-tree-id18 . -1) (#("
" 0 1 (fontified t)) . -958) (undo-tree-id19 . -1) 959) nil (26036 4664 350913 233000) 0 nil])
([nil nil ((959 . 963) (#("    " 0 4 (fontified nil)) . 958) (undo-tree-id17 . -4) (957 . 963)) nil (26036 4664 350912 656000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -959) (undo-tree-id16 . -4) 963) nil (26036 4664 350912 234000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1799 . 1800) (nil fontified nil 1799 . 1800) (nil fontified nil 1795 . 1799) (nil fontified nil 1794 . 1795) (nil fontified nil 1765 . 1794) (nil fontified nil 1756 . 1765) (nil fontified nil 1754 . 1756) (nil fontified nil 1740 . 1754) (nil fontified nil 1735 . 1740) (nil fontified nil 1734 . 1735) (nil fontified nil 1728 . 1734) (nil fontified nil 1717 . 1728) (nil fontified nil 1714 . 1717) (nil fontified nil 1621 . 1714) (nil fontified nil 1619 . 1621) (nil fontified nil 1605 . 1619) (nil fontified nil 1600 . 1605) (nil fontified nil 1599 . 1600) (nil fontified nil 1593 . 1599) (nil fontified nil 1582 . 1593) (nil fontified nil 1579 . 1582) (nil fontified nil 1520 . 1579) (nil fontified nil 1519 . 1520) (nil fontified nil 1478 . 1519) (nil fontified nil 1473 . 1478) (nil fontified nil 1472 . 1473) (nil fontified nil 1466 . 1472) (nil fontified nil 1451 . 1466) (nil fontified nil 1448 . 1451) (nil fontified nil 1447 . 1448) (nil fontified nil 1443 . 1447) (nil fontified nil 1442 . 1443) (nil fontified nil 1441 . 1442) (nil fontified nil 1440 . 1441) (nil fontified nil 1437 . 1440) (nil fontified nil 1427 . 1437) (nil fontified nil 1426 . 1427) (nil fontified nil 1417 . 1426) (nil fontified nil 1396 . 1417) (nil fontified nil 1395 . 1396) (nil fontified nil 1366 . 1395) (nil fontified nil 1365 . 1366) (nil fontified nil 1364 . 1365) (nil fontified nil 1357 . 1364) (nil fontified nil 1347 . 1357) (nil fontified nil 1343 . 1347) (nil fontified nil 1342 . 1343) (nil fontified nil 1341 . 1342) (nil fontified nil 1340 . 1341) (nil fontified nil 1337 . 1340) (nil fontified nil 1333 . 1337) (nil fontified nil 1332 . 1333) (nil fontified nil 1323 . 1332) (nil fontified nil 1272 . 1323) (nil fontified nil 1267 . 1272) (nil fontified nil 1254 . 1267) (nil fontified nil 1252 . 1254) (nil fontified nil 1245 . 1252) (nil fontified nil 1239 . 1245) (nil fontified nil 1229 . 1239) (nil fontified nil 1225 . 1229) (nil fontified nil 1224 . 1225) (nil fontified nil 1223 . 1224) (nil fontified nil 1222 . 1223) (nil fontified nil 1220 . 1222) (nil fontified nil 1215 . 1220) (nil fontified nil 1207 . 1215) (nil fontified nil 1197 . 1207) (nil fontified nil 1196 . 1197) (nil fontified nil 1187 . 1196) (nil fontified nil 1165 . 1187) (nil fontified nil 1164 . 1165) (nil fontified nil 1163 . 1164) (nil fontified nil 1153 . 1163) (nil fontified nil 1129 . 1153) (nil fontified nil 1124 . 1129) (nil fontified nil 1123 . 1124) (nil fontified nil 1118 . 1123) (nil fontified nil 1104 . 1118) (nil fontified nil 1100 . 1104) (nil fontified nil 1099 . 1100) (nil fontified nil 1094 . 1099) (nil fontified nil 1083 . 1094) (nil fontified nil 1080 . 1083) (nil fontified nil 1065 . 1080) (nil fontified nil 1064 . 1065) (nil fontified nil 1063 . 1064) (nil fontified nil 1060 . 1063) (nil fontified nil 1057 . 1060) (nil fontified nil 1056 . 1057) (nil fontified nil 1047 . 1056) (nil fontified nil 1025 . 1047) (nil fontified nil 1024 . 1025) (nil fontified nil 1022 . 1024) (nil fontified nil 1019 . 1022) (nil fontified nil 1003 . 1019) (nil fontified nil 992 . 1003) (nil fontified nil 986 . 992) (nil fontified nil 982 . 986) (nil fontified nil 981 . 982) (nil fontified nil 980 . 981) (nil fontified nil 979 . 980) (nil fontified nil 976 . 979) (nil fontified nil 963 . 976) (nil fontified nil 962 . 963) (nil fontified nil 959 . 962) (959 . 1800)) nil (26036 4664 350911 84000) 0 nil])
([nil nil ((976 . 977)) nil (26036 4664 350908 554000) 0 nil])
([nil nil ((#("delay: float" 0 7 (fontified t) 7 12 (face font-lock-builtin-face fontified t)) . 1209) (undo-tree-id15 . -12) 1221) nil (26036 4664 350908 218000) 0 nil])
([nil nil ((#("        assert delay == 2.5" 0 8 (fontified t) 8 14 (face font-lock-keyword-face fontified t) 14 21 (fontified t) 21 23 (face font-lock-operator-face fontified t) 23 27 (fontified t)) . 1220)) nil (26036 4664 350907 865000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -1219) (undo-tree-id14 . -1) 1220) nil (26036 4664 350907 695000) 0 nil])
([nil nil ((1340 . 1341)) nil (26036 4664 350907 308000) 0 nil])
([nil nil ((#("1, " 0 3 (fontified t)) . 1349) (undo-tree-id7 . -3) (undo-tree-id8 . -1) (undo-tree-id9 . -2) (undo-tree-id10 . -3) (undo-tree-id11 . -3) (undo-tree-id12 . -3) (undo-tree-id13 . -3)) nil (26036 4664 350906 971000) 0 nil])
([nil nil ((1349 . 1355)) nil (26036 4664 350904 851000) 0 nil])
([nil nil ((#("sleep" 0 5 (fontified t)) . 1355) (undo-tree-id6 . -5)) nil (26036 4664 350904 643000) 0 nil])
([nil nil ((#("=" 0 1 (face font-lock-operator-face fontified t)) . -1355) (undo-tree-id4 . -1) (undo-tree-id5 . -1) 1356) nil (26036 4664 350904 114000) 0 nil])
([nil nil ((#("2.5)" 0 4 (fontified t)) . 1479) (undo-tree-id0 . -4) (undo-tree-id1 . -3) (undo-tree-id2 . -2) (undo-tree-id3 . -4)) nil (26036 4664 350903 299000) 0 nil])
([nil nil ((1479 . 1481)) nil (26036 4664 350894 385000) 0 nil])
([nil nil ((1757 . 1758)) nil (26036 4664 350892 123000) 0 nil])
([nil nil ((959 . 960) (t 26036 4664 352565 593000)) nil (26036 4673 231671 333000) 0 nil])
([nil nil ((113 . 128) (t 26036 4665 388569 111000)) nil (26036 4673 231668 463000) 0 nil])
([nil nil ((#("def test_batching() -> None:
    input_queue: asyncio.Queue[int] = asyncio.Queue()

    async def gen() -> AsyncIterator[int]:
        while True:
            yield await input_queue.get()

    wake_event = asyncio.Event()

    async def fake_sleep(delay: float) -> None:
        assert delay == 2.5
        await wake_event.wait()
        wake_event.clear()

    async def body() -> None:
        batched = time_batched(gen(), 1, sleep=fake_sleep)

        async def next_batch() -> list[int]:
            return await asyncio.wait_for(anext(batched), timeout=2.5)

        input_queue.put_nowait(0)
        wake_event.set()
        assert await next_batch() == [0]

        input_queue.put_nowait(1)
        input_queue.put_nowait(2)
        wake_event.set()
        assert await next_batch() == [1, 2]

    asyncio.run(body(), debug=True)


" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 17 (face font-lock-function-name-face fontified t) 17 20 (fontified t) 20 21 (face font-lock-operator-face fontified t) 21 22 (face font-lock-operator-face fontified t) 22 23 (fontified t) 23 27 (face font-lock-constant-face fontified t) 27 33 (fontified t) 33 44 (face font-lock-variable-name-face fontified t) 44 60 (fontified t) 60 63 (face font-lock-builtin-face fontified t) 63 65 (fontified t) 65 66 (face font-lock-operator-face fontified t) 66 88 (fontified t) 88 97 (face font-lock-keyword-face fontified t) 97 98 (fontified t) 98 101 (face font-lock-function-name-face fontified t) 101 104 (fontified t) 104 105 (face font-lock-operator-face fontified t) 105 106 (face font-lock-operator-face fontified t) 106 121 (fontified t) 121 124 (face font-lock-builtin-face fontified t) 124 135 (fontified t) 135 140 (face font-lock-keyword-face fontified t) 140 141 (fontified t) 141 145 (face font-lock-constant-face fontified t) 145 159 (fontified t) 159 164 (face font-lock-keyword-face fontified t) 164 165 (fontified t) 165 170 (face font-lock-keyword-face fontified t) 170 194 (fontified t) 194 204 (face font-lock-variable-name-face fontified t) 204 205 (fontified t) 205 206 (face font-lock-operator-face fontified t) 206 228 (fontified t) 228 237 (face font-lock-keyword-face fontified t) 237 238 (fontified t) 238 248 (face font-lock-function-name-face fontified t) 248 256 (fontified t) 256 261 (face font-lock-builtin-face fontified t) 261 263 (fontified t) 263 264 (face font-lock-operator-face fontified t) 264 265 (face font-lock-operator-face fontified t) 265 266 (fontified t) 266 270 (face font-lock-constant-face fontified t) 270 280 (fontified t) 280 286 (face font-lock-keyword-face fontified t) 286 293 (fontified t) 293 295 (face font-lock-operator-face fontified t) 295 308 (fontified t) 308 313 (face font-lock-keyword-face fontified t) 313 364 (fontified t) 364 373 (face font-lock-keyword-face fontified t) 373 374 (fontified t) 374 378 (face font-lock-function-name-face fontified t) 378 381 (fontified t) 381 382 (face font-lock-operator-face fontified t) 382 383 (face font-lock-operator-face fontified t) 383 384 (fontified t) 384 388 (face font-lock-constant-face fontified t) 388 398 (fontified t) 398 405 (face font-lock-variable-name-face fontified t) 405 406 (fontified t) 406 407 (face font-lock-operator-face fontified t) 407 436 (fontified t) 436 437 (face font-lock-operator-face fontified t) 437 458 (fontified t) 458 467 (face font-lock-keyword-face fontified t) 467 468 (fontified t) 468 478 (face font-lock-function-name-face fontified t) 478 481 (fontified t) 481 482 (face font-lock-operator-face fontified t) 482 483 (face font-lock-operator-face fontified t) 483 484 (fontified t) 484 488 (face font-lock-builtin-face fontified t) 488 489 (fontified t) 489 492 (face font-lock-builtin-face fontified t) 492 507 (fontified t) 507 513 (face font-lock-keyword-face fontified t) 513 514 (fontified t) 514 519 (face font-lock-keyword-face fontified t) 519 560 (fontified t) 560 561 (face font-lock-operator-face fontified t) 561 620 (fontified t) 620 623 (face font-lock-builtin-face fontified t) 623 634 (fontified t) 634 640 (face font-lock-keyword-face fontified t) 640 641 (fontified t) 641 646 (face font-lock-keyword-face fontified t) 646 660 (fontified t) 660 662 (face font-lock-operator-face fontified t) 662 755 (fontified t) 755 758 (face font-lock-builtin-face fontified t) 758 769 (fontified t) 769 775 (face font-lock-keyword-face fontified t) 775 776 (fontified t) 776 781 (face font-lock-keyword-face fontified t) 781 795 (fontified t) 795 797 (face font-lock-operator-face fontified t) 797 835 (fontified t) 835 836 (face font-lock-operator-face fontified t) 836 840 (face font-lock-constant-face fontified t) 840 844 (fontified t)) . 131) (undo-tree-id12 . -28) (undo-tree-id13 . -844) (undo-tree-id14 . -332) (undo-tree-id15 . -842) (undo-tree-id16 . -844) (undo-tree-id17 . -844) 975 (t 26036 4673 236595 705000)) nil (26036 37644 144691 479000) 0 nil])
([nil nil ((#("2" 0 1 (fontified t)) . -127) (undo-tree-id10 . -1) (undo-tree-id11 . -1) 128) nil (26036 37644 144689 614000) 0 nil])
([nil nil ((#("time" 0 4 (fontified t)) . 115) (undo-tree-id9 . -4)) nil (26036 37644 144688 513000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -113) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (#(" " 0 1 (fontified t)) . -114) (undo-tree-id7 . -1) (undo-tree-id8 . -1) 115) nil (26036 37644 144687 626000) 0 nil])
([nil nil ((#("_batched" 0 8 (fontified t)) . 113) (undo-tree-id0 . -8) (undo-tree-id1 . -8) (undo-tree-id2 . -1) (undo-tree-id3 . -8)) nil (26036 37644 144684 611000) 0 nil])
([nil nil ((#("2" 0 1 (face font-lock-function-name-face fontified t)) . -133) (undo-tree-id20 . -1) (undo-tree-id21 . -1) 134 (t 26036 37644 176913 31000)) nil (26036 37701 265685 181000) 0 nil])
([nil nil ((#("2" 0 1 (fontified t)) . -496) (undo-tree-id18 . -1) (undo-tree-id19 . -1) 497) nil (26036 37701 265680 919000) 0 nil])
([nil nil ((199 . 204) (t 26036 37701 272911 867000)) nil (26037 22973 474263 31000) 0 nil])
([nil nil ((204 . 225)) nil (26037 22973 474262 754000) 0 nil])
([nil nil ((225 . 234)) nil (26037 22973 474262 400000) 0 nil])
([nil nil ((#("b" 0 1 (face font-lock-comment-face fontified t)) . -233) (undo-tree-id35 . -1) 234) nil (26037 22973 474262 127000) 0 nil])
([nil nil ((213 . 219)) nil (26037 22973 474261 647000) 0 nil])
([nil nil ((229 . 233)) nil (26037 22973 474261 194000) 0 nil])
([nil nil ((#("n" 0 1 (face font-lock-comment-face fontified t)) . -229) (undo-tree-id31 . -1) (#(" " 0 1 (face font-lock-comment-face fontified t)) . -230) (undo-tree-id32 . -1) (#("a" 0 1 (face font-lock-comment-face fontified t)) . -231) (undo-tree-id33 . -1) (#("s" 0 1 (face font-lock-comment-face fontified t)) . -232) (undo-tree-id34 . -1) 233) nil (26037 22973 474260 870000) 0 nil])
([nil nil ((229 . 236)) nil (26037 22973 474259 327000) 0 nil])
([nil nil ((#("fake" 0 4 (face font-lock-function-name-face fontified t)) . 401) (undo-tree-id30 . -4)) nil (26037 22974 79836 249000) 0 nil])
([nil nil ((386 . 391)) nil (26037 23144 711959 211000) 0 nil] [nil nil ((#("_sleep" 0 6 (face font-lock-function-name-face fontified t)) . 401) (undo-tree-id28 . -1) (undo-tree-id29 . -6)) ((401 . 407)) (26037 22973 730074 895000) 0 nil])
([nil nil ((391 . 405)) nil (26037 23144 711958 843000) 0 nil])
([nil nil ((401 . 406)) ((#("delay" 0 5 (face font-lock-function-name-face fontified t)) . 401) (undo-tree-id37 . -1) (undo-tree-id38 . -2) (undo-tree-id39 . -3) (undo-tree-id40 . -4) (undo-tree-id41 . -5)) (26037 22973 585176 369000) 0 nil])
([nil nil ((#("Manually con" 0 12 (face font-lock-comment-face fontified t)) . 393)) nil (26037 23144 711958 698000) 0 nil])
([nil nil ((#("delay" 0 5 (face font-lock-function-name-face fontified t)) . 401) (undo-tree-id22 . -1) (undo-tree-id23 . -2) (undo-tree-id24 . -3) (undo-tree-id25 . -4) (undo-tree-id26 . -5) (undo-tree-id27 . -5)) ((401 . 406)) (26037 22973 474311 439000) 0 nil])
([nil nil ((393 . 395)) nil (26037 23144 711958 567000) 0 nil])
([nil nil ((401 . 406)) ((#("sleep" 0 5 (face font-lock-function-name-face fontified t)) . 401) (undo-tree-id36 . -5)) (26037 22973 474116 870000) 0 nil])
([nil nil ((#("D" 0 1 (face font-lock-comment-face fontified t)) . -394) (undo-tree-id44 . -1) 395) nil (26037 23144 711958 279000) 0 nil])
nil
([nil nil ((394 . 415)) nil (26037 23144 711957 761000) 0 nil])
([nil nil ((415 . 436)) nil (26037 23144 711957 530000) 0 nil])
([nil nil ((436 . 440)) nil (26037 23144 711957 275000) 0 nil])
([nil nil ((#("u" 0 1 (face font-lock-comment-face fontified t)) . -438) (undo-tree-id42 . -1) (#("s" 0 1 (face font-lock-comment-face fontified t)) . -439) (undo-tree-id43 . -1) 440) nil (26037 23144 711956 776000) 0 nil])
([nil nil ((438 . 449)) nil (26037 23144 711947 595000) 0 nil])
([nil nil ((464 . 468) (t 26037 23144 740399 227000)) nil (26037 23237 899380 495000) 0 nil])
([nil nil ((116 . 122) (t 26037 23237 904386 152000)) nil (26037 23261 272674 608000) 0 nil])
([nil nil ((993 . 1001) (#("    " 0 4 (fontified t)) . 993) (undo-tree-id69 . -4)) nil (26037 23261 272674 353000) 0 nil])
([nil nil ((1001 . 1002)) nil (26037 23261 272674 3000) 0 nil])
([nil nil ((#("#" 0 1 (face font-lock-comment-delimiter-face fontified t)) . -1001) (undo-tree-id67 . -1) (undo-tree-id68 . -1) 1002) nil (26037 23261 272673 820000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -997) (undo-tree-id60 . -4) (undo-tree-id61 . -4) (undo-tree-id62 . -4) (undo-tree-id63 . -4) (undo-tree-id64 . -4) (undo-tree-id65 . -4) (undo-tree-id66 . -4) 1001) nil (26037 23261 272673 142000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -993) (undo-tree-id50 . -4) (undo-tree-id51 . -4) (undo-tree-id52 . -4) (undo-tree-id53 . -4) (undo-tree-id54 . -4) (undo-tree-id55 . -4) (undo-tree-id56 . -4) (undo-tree-id57 . -4) (undo-tree-id58 . -4) (undo-tree-id59 . -4) 997) nil (26037 23261 272671 678000) 0 nil])
([nil nil ((993 . 1001)) nil (26037 23261 272668 646000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -997) (undo-tree-id45 . -4) (undo-tree-id46 . -4) (undo-tree-id47 . -4) (undo-tree-id48 . -4) (undo-tree-id49 . -4) 1001) nil (26037 23261 272668 230000) 0 nil])
([nil nil ((997 . 998)) nil (26037 23261 272659 836000) 0 nil])
([nil nil ((1029 . 1034)) nil (26037 23261 272659 395000) 0 nil])
([nil nil ((1034 . 1037)) nil (26037 23261 272659 5000) 0 nil])
([nil nil ((1037 . 1046)) nil (26037 23261 272655 971000) 0 nil])
([nil nil ((998 . 999) 1046 (t 26037 23261 276382 865000)) nil (26037 23644 507651 828000) 0 nil])
([nil nil ((391 . 392) (t 26037 23646 76328 843000)) nil (26037 25547 821562 662000) 0 nil] [nil nil ((1035 . 1036) (t 26037 23262 252382 728000)) ((#("#" 0 1 (face font-lock-comment-delimiter-face fontified t)) . 1035) (undo-tree-id70 . -1) (undo-tree-id71 . -1)) (26037 23643 936336 718000) 0 nil])
([nil nil ((392 . 406) (#("

    # 'delay" 0 1 (fontified t) 1 2 (fontified t) 2 6 (fontified t) 6 8 (face font-lock-comment-delimiter-face fontified t) 8 14 (face font-lock-comment-face fontified t)) . 392)) nil (26037 25547 821562 159000) 0 nil])
([nil nil ((1036 . 1037) (t 26037 23635 700330 300000)) ((#(" " 0 1 (face font-lock-comment-delimiter-face fontified t)) . 1036) (t 26037 23636 708330 157000)) (26037 23643 936198 778000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 391) 582) nil (26037 25547 821558 552000) 0 nil])
nil
([nil nil ((993 . 1001) (#("    " 0 4 (fontified t)) . 993) (undo-tree-id102 . -4) (t 26037 25547 824238 467000)) nil (26037 34171 648978 686000) 0 nil])
([nil nil ((#("#" 0 1 (face font-lock-comment-delimiter-face fontified t)) . -1001) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (#(" " 0 1 (face font-lock-comment-delimiter-face fontified t)) . -1002) (undo-tree-id100 . -1) (undo-tree-id101 . -1) 1003) nil (26037 34171 648978 3000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -997) (undo-tree-id87 . -4) (undo-tree-id88 . -4) (undo-tree-id89 . -4) (undo-tree-id90 . -4) (undo-tree-id91 . -4) (undo-tree-id92 . -4) (undo-tree-id93 . -4) (undo-tree-id94 . -4) (undo-tree-id95 . -4) 1001) nil (26037 34171 648975 868000) 0 nil])
([nil nil ((#("    await body()" 0 4 (fontified t) 4 9 (face font-lock-keyword-face fontified t) 9 16 (fontified t)) . 1029) (undo-tree-id83 . -16) (undo-tree-id84 . -16) (undo-tree-id85 . -16) (undo-tree-id86 . -16)) nil (26037 34171 648973 799000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -1028) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) 1029) nil (26037 34171 648972 617000) 0 nil])
([nil nil ((#("async" 0 5 (face font-lock-keyword-face fontified t)) . 116) (undo-tree-id76 . -5)) nil (26037 34171 648969 429000) 0 nil])
([nil current ((#(" " 0 1 (fontified t)) . -116) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) 117) nil (26037 34185 987004 445000) 0 nil])
([nil nil ((#("timeout" 0 7 (fontified t)) . 736) (undo-tree-id119 . -7) (t 26037 34171 652922 729000)) ((736 . 743)) (26037 34185 647570 307000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -734) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (#(" " 0 1 (fontified t)) . -735) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) 736) ((734 . 736)) (26037 34185 348409 638000) 0 nil])
([nil nil ((#("=1)" 0 1 (face font-lock-operator-face fontified t) 1 3 (fontified t)) . 734) (undo-tree-id103 . -3) (undo-tree-id104 . -3) (undo-tree-id105 . -3) (undo-tree-id106 . -3) (undo-tree-id107 . -3) (undo-tree-id108 . -3) (undo-tree-id109 . -3) (undo-tree-id110 . -1) (undo-tree-id111 . -3)) ((734 . 737)) (26037 34185 226319 606000) 0 nil])
([nil nil ((734 . 735)) ((#(")" 0 1 (fontified t)) . 734) (undo-tree-id120 . -1)) (26037 34185 226269 15000) 0 nil])
nil

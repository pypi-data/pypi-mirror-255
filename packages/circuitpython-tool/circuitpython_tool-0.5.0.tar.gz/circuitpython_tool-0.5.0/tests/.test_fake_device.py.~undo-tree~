(undo-tree-save-format-version . 1)
"f1983fa6554aad21cfce7c468d98f0069236c4bc"
[nil nil nil nil (26005 47815 353754 355000) 0 nil]
([nil nil ((860 . 867) (t 26005 47821 139257 527000)) nil (26005 47826 762715 234000) 0 nil] [nil nil ((nil rear-nonsticky nil 1307 . 1308) (nil fontified nil 1299 . 1308) (nil fontified nil 1293 . 1299) (nil fontified nil 1291 . 1293) (nil fontified nil 1278 . 1291) (nil fontified nil 1272 . 1278) (nil fontified nil 1265 . 1272) (nil fontified nil 1253 . 1265) (nil fontified nil 1249 . 1253) (nil fontified nil 1247 . 1249) (nil fontified nil 1239 . 1247) (nil fontified nil 1237 . 1239) (nil fontified nil 1231 . 1237) (nil fontified nil 1229 . 1231) (nil fontified nil 1213 . 1229) (nil fontified nil 1207 . 1213) (nil fontified nil 1200 . 1207) (nil fontified nil 1188 . 1200) (nil fontified nil 1184 . 1188) (nil fontified nil 1182 . 1184) (nil fontified nil 1168 . 1182) (nil fontified nil 1162 . 1168) (nil fontified nil 1161 . 1162) (nil fontified nil 1160 . 1161) (nil fontified nil 1149 . 1160) (nil fontified nil 1145 . 1149) (nil fontified nil 1141 . 1145) (nil fontified nil 1139 . 1141) (nil fontified nil 1135 . 1139) (nil fontified nil 1133 . 1135) (nil fontified nil 1129 . 1133) (nil fontified nil 1127 . 1129) (nil fontified nil 1123 . 1127) (nil fontified nil 1108 . 1123) (nil fontified nil 1107 . 1108) (nil fontified nil 1106 . 1107) (nil fontified nil 1103 . 1106) (nil fontified nil 1099 . 1103) (1099 . 1308) 722 (t 26003 17986 548826 401000)) ((#("    dev = device.Device(\"vv\", \"mm\", \"ss\")
    dev.serial_path = Path(\"/serial_path\")
    monkeypatch.setattr(dev, \"get_mountpoint\", lambda: \"/mount\")
    monkeypatch.setattr(cli, \"all_devices\", lambda: [dev])
" 0 4 (fontified nil) 4 7 (face font-lock-variable-name-face fontified nil) 7 8 (fontified nil) 8 9 (face font-lock-operator-face fontified nil) 9 24 (fontified nil) 24 28 (face font-lock-string-face fontified nil) 28 30 (fontified nil) 30 34 (face font-lock-string-face fontified nil) 34 36 (fontified nil) 36 40 (face font-lock-string-face fontified nil) 40 42 (fontified nil) 42 46 (fontified nil) 46 50 (fontified nil) 50 61 (face font-lock-variable-name-face fontified nil) 61 62 (fontified nil) 62 63 (face font-lock-operator-face fontified nil) 63 69 (fontified nil) 69 83 (face font-lock-string-face fontified nil) 83 85 (fontified nil) 85 89 (fontified nil) 89 101 (fontified nil) 101 108 (face font-lock-builtin-face fontified nil) 108 114 (fontified nil) 114 130 (face font-lock-string-face fontified nil) 130 132 (fontified nil) 132 138 (face font-lock-keyword-face fontified nil) 138 140 (fontified nil) 140 148 (face font-lock-string-face fontified nil) 148 150 (fontified nil) 150 154 (fontified nil) 154 166 (fontified nil) 166 173 (face font-lock-builtin-face fontified nil) 173 179 (fontified nil) 179 192 (face font-lock-string-face fontified nil) 192 194 (fontified nil) 194 200 (face font-lock-keyword-face fontified nil) 200 208 (fontified nil) 208 209 (fontified nil rear-nonsticky nil)) . 1099) (undo-tree-id1233 . -208) (undo-tree-id1234 . -208) (nil fontified t 1139 . 1141) (nil fontified t 1182 . 1184) (nil fontified t 1247 . 1249) (nil rear-nonsticky t 1307 . 1308)) (26005 47812 478759 821000) 0 nil])
([nil nil ((1364 . 1369) (t 26005 47826 767534 592000)) nil (26005 47839 471353 542000) 0 nil])
([nil nil ((1566 . 1571)) ((#("
    " 0 1 (fontified t) 1 5 (fontified t)) . 1566) (undo-tree-id1229 . -1) (undo-tree-id1230 . -1) (undo-tree-id1231 . -5) (undo-tree-id1232 . -5)) (26005 47812 160108 522000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1365) (undo-tree-id1237 . -4) (undo-tree-id1238 . -4) (undo-tree-id1239 . -4) (undo-tree-id1240 . -4) (undo-tree-id1241 . -4) 1369) nil (26005 47839 471353 161000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1567) (undo-tree-id12 . -4) 1571) ((1567 . 1571)) (26005 47811 999765 324000) 0 nil])
([nil nil ((1365 . 1384)) nil (26005 47839 471351 282000) 0 nil])
([nil nil ((1567 . 1582)) ((#("def test_to_tom" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 14 (face font-lock-function-name-face fontified t) 14 15 (face font-lock-function-name-face fontified t)) . 1567) (undo-tree-id1225 . -14) (undo-tree-id1226 . -14) (undo-tree-id1227 . -15) (undo-tree-id1228 . -15)) (26005 47811 821062 676000) 0 nil])
([nil nil ((#("-" 0 1 (face font-lock-operator-face fontified t)) . -1383) (undo-tree-id1235 . -1) (undo-tree-id1236 . -1) 1384) nil (26005 47839 471350 999000) 0 nil])
([nil nil ((#("m" 0 1 (face font-lock-function-name-face fontified t)) . -1581) (undo-tree-id11 . -1) 1582) ((1581 . 1582)) (26005 47811 666946 248000) 0 nil])
([nil nil ((1383 . 1384)) nil (26005 47839 471342 329000) 0 nil])
([nil nil ((1581 . 1583)) ((#("ml" 0 2 (face font-lock-function-name-face fontified t)) . 1581) (undo-tree-id1019 . -2) (undo-tree-id1020 . -2) (undo-tree-id1021 . -2) (undo-tree-id1022 . -2) (undo-tree-id1023 . -2) (undo-tree-id1024 . -2) (undo-tree-id1025 . -2) (undo-tree-id1026 . -2) (undo-tree-id1027 . -2) (undo-tree-id1028 . -2) (undo-tree-id1029 . -2) (undo-tree-id1030 . -2) (undo-tree-id1031 . -2) (undo-tree-id1032 . -2) (undo-tree-id1033 . -2) (undo-tree-id1034 . -2) (undo-tree-id1035 . -2) (undo-tree-id1036 . -2) (undo-tree-id1037 . -2) (undo-tree-id1038 . -2) (undo-tree-id1039 . -2) (undo-tree-id1040 . -2) (undo-tree-id1041 . -2) (undo-tree-id1042 . -2) (undo-tree-id1043 . -2) (undo-tree-id1044 . -2) (undo-tree-id1045 . -2) (undo-tree-id1046 . -2) (undo-tree-id1047 . -2) (undo-tree-id1048 . -2) (undo-tree-id1049 . -2) (undo-tree-id1050 . -2) (undo-tree-id1051 . -2) (undo-tree-id1052 . -2) (undo-tree-id1053 . -2) (undo-tree-id1054 . -2) (undo-tree-id1055 . -2) (undo-tree-id1056 . -2) (undo-tree-id1057 . -2) (undo-tree-id1058 . -2) (undo-tree-id1059 . -2) (undo-tree-id1060 . -2) (undo-tree-id1061 . -2) (undo-tree-id1062 . -2) (undo-tree-id1063 . -2) (undo-tree-id1064 . -2) (undo-tree-id1065 . -2) (undo-tree-id1066 . -2) (undo-tree-id1067 . -2) (undo-tree-id1068 . -2) (undo-tree-id1069 . -2) (undo-tree-id1070 . -2) (undo-tree-id1071 . -2) (undo-tree-id1072 . -2) (undo-tree-id1073 . -2) (undo-tree-id1074 . -2) (undo-tree-id1075 . -2) (undo-tree-id1076 . -2) (undo-tree-id1077 . -2) (undo-tree-id1078 . -2) (undo-tree-id1079 . -2) (undo-tree-id1080 . -2) (undo-tree-id1081 . -2) (undo-tree-id1082 . -2) (undo-tree-id1083 . -2) (undo-tree-id1084 . -2) (undo-tree-id1085 . -2) (undo-tree-id1086 . -2) (undo-tree-id1087 . -2) (undo-tree-id1088 . -2) (undo-tree-id1089 . -2) (undo-tree-id1090 . -2) (undo-tree-id1091 . -2) (undo-tree-id1092 . -2) (undo-tree-id1093 . -2) (undo-tree-id1094 . -2) (undo-tree-id1095 . -2) (undo-tree-id1096 . -2) (undo-tree-id1097 . -2) (undo-tree-id1098 . -2) (undo-tree-id1099 . -2) (undo-tree-id1100 . -2) (undo-tree-id1101 . -2) (undo-tree-id1102 . -2) (undo-tree-id1103 . -2) (undo-tree-id1104 . -2) (undo-tree-id1105 . -2) (undo-tree-id1106 . -2) (undo-tree-id1107 . -2) (undo-tree-id1108 . -2) (undo-tree-id1109 . -2) (undo-tree-id1110 . -2) (undo-tree-id1111 . -2) (undo-tree-id1112 . -2) (undo-tree-id1113 . -2) (undo-tree-id1114 . -2) (undo-tree-id1115 . -2) (undo-tree-id1116 . -2) (undo-tree-id1117 . -2) (undo-tree-id1118 . -2) (undo-tree-id1119 . -2) (undo-tree-id1120 . -2) (undo-tree-id1121 . -2) (undo-tree-id1122 . -2) (undo-tree-id1123 . -2) (undo-tree-id1124 . -2) (undo-tree-id1125 . -2) (undo-tree-id1126 . -2) (undo-tree-id1127 . -2) (undo-tree-id1128 . -2) (undo-tree-id1129 . -2) (undo-tree-id1130 . -2) (undo-tree-id1131 . -2) (undo-tree-id1132 . -2) (undo-tree-id1133 . -2) (undo-tree-id1134 . -2) (undo-tree-id1135 . -2) (undo-tree-id1136 . -2) (undo-tree-id1137 . -2) (undo-tree-id1138 . -2) (undo-tree-id1139 . -2) (undo-tree-id1140 . -2) (undo-tree-id1141 . -2) (undo-tree-id1142 . -2) (undo-tree-id1143 . -2) (undo-tree-id1144 . -2) (undo-tree-id1145 . -2) (undo-tree-id1146 . -2) (undo-tree-id1147 . -2) (undo-tree-id1148 . -2) (undo-tree-id1149 . -2) (undo-tree-id1150 . -2) (undo-tree-id1151 . -2) (undo-tree-id1152 . -2) (undo-tree-id1153 . -2) (undo-tree-id1154 . -2) (undo-tree-id1155 . -2) (undo-tree-id1156 . -2) (undo-tree-id1157 . -2) (undo-tree-id1158 . -2) (undo-tree-id1159 . -2) (undo-tree-id1160 . -2) (undo-tree-id1161 . -2) (undo-tree-id1162 . -2) (undo-tree-id1163 . -2) (undo-tree-id1164 . -2) (undo-tree-id1165 . -2) (undo-tree-id1166 . -2) (undo-tree-id1167 . -2) (undo-tree-id1168 . -2) (undo-tree-id1169 . -2) (undo-tree-id1170 . -2) (undo-tree-id1171 . -2) (undo-tree-id1172 . -2) (undo-tree-id1173 . -2) (undo-tree-id1174 . -2) (undo-tree-id1175 . -2) (undo-tree-id1176 . -2) (undo-tree-id1177 . -2) (undo-tree-id1178 . -2) (undo-tree-id1179 . -2) (undo-tree-id1180 . -2) (undo-tree-id1181 . -2) (undo-tree-id1182 . -2) (undo-tree-id1183 . -2) (undo-tree-id1184 . -2) (undo-tree-id1185 . -2) (undo-tree-id1186 . -2) (undo-tree-id1187 . -2) (undo-tree-id1188 . -2) (undo-tree-id1189 . -2) (undo-tree-id1190 . -2) (undo-tree-id1191 . -2) (undo-tree-id1192 . -2) (undo-tree-id1193 . -2) (undo-tree-id1194 . -2) (undo-tree-id1195 . -2) (undo-tree-id1196 . -2) (undo-tree-id1197 . -2) (undo-tree-id1198 . -2) (undo-tree-id1199 . -2) (undo-tree-id1200 . -2) (undo-tree-id1201 . -2) (undo-tree-id1202 . -2) (undo-tree-id1203 . -2) (undo-tree-id1204 . -2) (undo-tree-id1205 . -2) (undo-tree-id1206 . -2) (undo-tree-id1207 . -2) (undo-tree-id1208 . -2) (undo-tree-id1209 . -2) (undo-tree-id1210 . -2) (undo-tree-id1211 . -2) (undo-tree-id1212 . -2) (undo-tree-id1213 . -2) (undo-tree-id1214 . -2) (undo-tree-id1215 . -2) (undo-tree-id1216 . -2) (undo-tree-id1217 . -2) (undo-tree-id1218 . -2) (undo-tree-id1219 . -2) (undo-tree-id1220 . -2) (undo-tree-id1221 . -2) (undo-tree-id1222 . -2) (undo-tree-id1223 . -2) (undo-tree-id1224 . -2)) (26005 47811 465959 868000) 0 nil])
([nil nil ((1384 . 1392)) nil (26005 47839 471342 195000) 0 nil])
([nil nil ((1583 . 1594)) ((#("(tmp_path: " 0 1 (fontified t) 1 11 (fontified t)) . 1583) (undo-tree-id813 . -1) (undo-tree-id814 . -1) (undo-tree-id815 . -1) (undo-tree-id816 . -1) (undo-tree-id817 . -1) (undo-tree-id818 . -1) (undo-tree-id819 . -1) (undo-tree-id820 . -1) (undo-tree-id821 . -1) (undo-tree-id822 . -1) (undo-tree-id823 . -1) (undo-tree-id824 . -1) (undo-tree-id825 . -1) (undo-tree-id826 . -1) (undo-tree-id827 . -1) (undo-tree-id828 . -1) (undo-tree-id829 . -1) (undo-tree-id830 . -1) (undo-tree-id831 . -1) (undo-tree-id832 . -1) (undo-tree-id833 . -1) (undo-tree-id834 . -1) (undo-tree-id835 . -1) (undo-tree-id836 . -1) (undo-tree-id837 . -1) (undo-tree-id838 . -1) (undo-tree-id839 . -1) (undo-tree-id840 . -1) (undo-tree-id841 . -1) (undo-tree-id842 . -1) (undo-tree-id843 . -1) (undo-tree-id844 . -1) (undo-tree-id845 . -1) (undo-tree-id846 . -1) (undo-tree-id847 . -1) (undo-tree-id848 . -1) (undo-tree-id849 . -1) (undo-tree-id850 . -1) (undo-tree-id851 . -1) (undo-tree-id852 . -1) (undo-tree-id853 . -1) (undo-tree-id854 . -1) (undo-tree-id855 . -1) (undo-tree-id856 . -1) (undo-tree-id857 . -1) (undo-tree-id858 . -1) (undo-tree-id859 . -1) (undo-tree-id860 . -1) (undo-tree-id861 . -1) (undo-tree-id862 . -1) (undo-tree-id863 . -1) (undo-tree-id864 . -1) (undo-tree-id865 . -1) (undo-tree-id866 . -1) (undo-tree-id867 . -1) (undo-tree-id868 . -1) (undo-tree-id869 . -1) (undo-tree-id870 . -1) (undo-tree-id871 . -1) (undo-tree-id872 . -1) (undo-tree-id873 . -1) (undo-tree-id874 . -1) (undo-tree-id875 . -1) (undo-tree-id876 . -1) (undo-tree-id877 . -1) (undo-tree-id878 . -1) (undo-tree-id879 . -1) (undo-tree-id880 . -1) (undo-tree-id881 . -1) (undo-tree-id882 . -1) (undo-tree-id883 . -1) (undo-tree-id884 . -1) (undo-tree-id885 . -1) (undo-tree-id886 . -1) (undo-tree-id887 . -1) (undo-tree-id888 . -1) (undo-tree-id889 . -1) (undo-tree-id890 . -1) (undo-tree-id891 . -1) (undo-tree-id892 . -1) (undo-tree-id893 . -1) (undo-tree-id894 . -1) (undo-tree-id895 . -1) (undo-tree-id896 . -1) (undo-tree-id897 . -1) (undo-tree-id898 . -1) (undo-tree-id899 . -1) (undo-tree-id900 . -1) (undo-tree-id901 . -1) (undo-tree-id902 . -1) (undo-tree-id903 . -1) (undo-tree-id904 . -1) (undo-tree-id905 . -1) (undo-tree-id906 . -1) (undo-tree-id907 . -1) (undo-tree-id908 . -1) (undo-tree-id909 . -1) (undo-tree-id910 . -1) (undo-tree-id911 . -1) (undo-tree-id912 . -1) (undo-tree-id913 . -1) (undo-tree-id914 . -1) (undo-tree-id915 . -1) (undo-tree-id916 . -1) (undo-tree-id917 . -1) (undo-tree-id918 . -1) (undo-tree-id919 . -1) (undo-tree-id920 . -1) (undo-tree-id921 . -1) (undo-tree-id922 . -1) (undo-tree-id923 . -1) (undo-tree-id924 . -1) (undo-tree-id925 . -1) (undo-tree-id926 . -1) (undo-tree-id927 . -1) (undo-tree-id928 . -1) (undo-tree-id929 . -1) (undo-tree-id930 . -1) (undo-tree-id931 . -1) (undo-tree-id932 . -1) (undo-tree-id933 . -1) (undo-tree-id934 . -1) (undo-tree-id935 . -1) (undo-tree-id936 . -1) (undo-tree-id937 . -1) (undo-tree-id938 . -1) (undo-tree-id939 . -1) (undo-tree-id940 . -1) (undo-tree-id941 . -1) (undo-tree-id942 . -1) (undo-tree-id943 . -1) (undo-tree-id944 . -1) (undo-tree-id945 . -1) (undo-tree-id946 . -1) (undo-tree-id947 . -1) (undo-tree-id948 . -1) (undo-tree-id949 . -1) (undo-tree-id950 . -1) (undo-tree-id951 . -1) (undo-tree-id952 . -1) (undo-tree-id953 . -1) (undo-tree-id954 . -1) (undo-tree-id955 . -1) (undo-tree-id956 . -1) (undo-tree-id957 . -1) (undo-tree-id958 . -1) (undo-tree-id959 . -1) (undo-tree-id960 . -1) (undo-tree-id961 . -1) (undo-tree-id962 . -1) (undo-tree-id963 . -1) (undo-tree-id964 . -1) (undo-tree-id965 . -1) (undo-tree-id966 . -1) (undo-tree-id967 . -1) (undo-tree-id968 . -1) (undo-tree-id969 . -1) (undo-tree-id970 . -1) (undo-tree-id971 . -1) (undo-tree-id972 . -1) (undo-tree-id973 . -1) (undo-tree-id974 . -1) (undo-tree-id975 . -1) (undo-tree-id976 . -1) (undo-tree-id977 . -1) (undo-tree-id978 . -1) (undo-tree-id979 . -1) (undo-tree-id980 . -1) (undo-tree-id981 . -1) (undo-tree-id982 . -1) (undo-tree-id983 . -1) (undo-tree-id984 . -1) (undo-tree-id985 . -1) (undo-tree-id986 . -1) (undo-tree-id987 . -1) (undo-tree-id988 . -1) (undo-tree-id989 . -1) (undo-tree-id990 . -1) (undo-tree-id991 . -1) (undo-tree-id992 . -1) (undo-tree-id993 . -1) (undo-tree-id994 . -1) (undo-tree-id995 . -1) (undo-tree-id996 . -1) (undo-tree-id997 . -1) (undo-tree-id998 . -1) (undo-tree-id999 . -1) (undo-tree-id1000 . -1) (undo-tree-id1001 . -1) (undo-tree-id1002 . -1) (undo-tree-id1003 . -1) (undo-tree-id1004 . -1) (undo-tree-id1005 . -1) (undo-tree-id1006 . -1) (undo-tree-id1007 . -1) (undo-tree-id1008 . -1) (undo-tree-id1009 . -1) (undo-tree-id1010 . -1) (undo-tree-id1011 . -1) (undo-tree-id1012 . -1) (undo-tree-id1013 . -1) (undo-tree-id1014 . -1) (undo-tree-id1015 . -1) (undo-tree-id1016 . -1) (undo-tree-id1017 . -1) (undo-tree-id1018 . -1)) (26005 47811 291100 394000) 0 nil])
([nil nil ((1392 . 1397)) nil (26005 47839 471341 917000) 0 nil])
([nil nil ((#("tmp_path: " 0 10 (fontified t)) . 1584)) ((1584 . 1594)) (26005 47811 101740 744000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1676 . 1677) (nil fontified nil 1676 . 1677) (nil fontified nil 1669 . 1676) (nil fontified nil 1665 . 1669) (nil fontified nil 1663 . 1665) (nil fontified nil 1659 . 1663) (nil fontified nil 1657 . 1659) (nil fontified nil 1653 . 1657) (nil fontified nil 1620 . 1653) (nil fontified nil 1612 . 1620) (nil fontified nil 1607 . 1612) (nil fontified nil 1606 . 1607) (nil fontified nil 1581 . 1606) (nil fontified nil 1569 . 1581) (nil fontified nil 1564 . 1569) (nil fontified nil 1563 . 1564) (nil fontified nil 1534 . 1563) (nil fontified nil 1525 . 1534) (nil fontified nil 1520 . 1525) (nil fontified nil 1519 . 1520) (nil fontified nil 1494 . 1519) (nil fontified nil 1490 . 1494) (nil fontified nil 1476 . 1490) (nil fontified nil 1472 . 1476) (nil fontified nil 1458 . 1472) (nil fontified nil 1454 . 1458) (nil fontified nil 1419 . 1454) (nil fontified nil 1418 . 1419) (nil fontified nil 1417 . 1418) (nil fontified nil 1401 . 1417) (nil fontified nil 1397 . 1401) (1397 . 1677)) nil (26005 47839 471341 267000) 0 nil])
([nil nil ((1584 . 1594)) ((#(") -> None:" 0 2 (fontified t) 2 3 (face font-lock-operator-face fontified t) 3 4 (face font-lock-operator-face fontified t) 4 5 (fontified t) 5 9 (face font-lock-constant-face fontified t) 9 10 (fontified t)) . 1584) (undo-tree-id607 . -10) (undo-tree-id608 . -10) (undo-tree-id609 . -10) (undo-tree-id610 . -10) (undo-tree-id611 . -10) (undo-tree-id612 . -10) (undo-tree-id613 . -10) (undo-tree-id614 . -10) (undo-tree-id615 . -10) (undo-tree-id616 . -10) (undo-tree-id617 . -10) (undo-tree-id618 . -10) (undo-tree-id619 . -10) (undo-tree-id620 . -10) (undo-tree-id621 . -10) (undo-tree-id622 . -10) (undo-tree-id623 . -10) (undo-tree-id624 . -10) (undo-tree-id625 . -10) (undo-tree-id626 . -10) (undo-tree-id627 . -10) (undo-tree-id628 . -10) (undo-tree-id629 . -10) (undo-tree-id630 . -10) (undo-tree-id631 . -10) (undo-tree-id632 . -10) (undo-tree-id633 . -10) (undo-tree-id634 . -10) (undo-tree-id635 . -10) (undo-tree-id636 . -10) (undo-tree-id637 . -10) (undo-tree-id638 . -10) (undo-tree-id639 . -10) (undo-tree-id640 . -10) (undo-tree-id641 . -10) (undo-tree-id642 . -10) (undo-tree-id643 . -10) (undo-tree-id644 . -10) (undo-tree-id645 . -10) (undo-tree-id646 . -10) (undo-tree-id647 . -10) (undo-tree-id648 . -10) (undo-tree-id649 . -10) (undo-tree-id650 . -10) (undo-tree-id651 . -10) (undo-tree-id652 . -10) (undo-tree-id653 . -10) (undo-tree-id654 . -10) (undo-tree-id655 . -10) (undo-tree-id656 . -10) (undo-tree-id657 . -10) (undo-tree-id658 . -10) (undo-tree-id659 . -10) (undo-tree-id660 . -10) (undo-tree-id661 . -10) (undo-tree-id662 . -10) (undo-tree-id663 . -10) (undo-tree-id664 . -10) (undo-tree-id665 . -10) (undo-tree-id666 . -10) (undo-tree-id667 . -10) (undo-tree-id668 . -10) (undo-tree-id669 . -10) (undo-tree-id670 . -10) (undo-tree-id671 . -10) (undo-tree-id672 . -10) (undo-tree-id673 . -10) (undo-tree-id674 . -10) (undo-tree-id675 . -10) (undo-tree-id676 . -10) (undo-tree-id677 . -10) (undo-tree-id678 . -10) (undo-tree-id679 . -10) (undo-tree-id680 . -10) (undo-tree-id681 . -10) (undo-tree-id682 . -10) (undo-tree-id683 . -10) (undo-tree-id684 . -10) (undo-tree-id685 . -10) (undo-tree-id686 . -10) (undo-tree-id687 . -10) (undo-tree-id688 . -10) (undo-tree-id689 . -10) (undo-tree-id690 . -10) (undo-tree-id691 . -10) (undo-tree-id692 . -10) (undo-tree-id693 . -10) (undo-tree-id694 . -10) (undo-tree-id695 . -10) (undo-tree-id696 . -10) (undo-tree-id697 . -10) (undo-tree-id698 . -10) (undo-tree-id699 . -10) (undo-tree-id700 . -10) (undo-tree-id701 . -10) (undo-tree-id702 . -10) (undo-tree-id703 . -10) (undo-tree-id704 . -10) (undo-tree-id705 . -10) (undo-tree-id706 . -10) (undo-tree-id707 . -10) (undo-tree-id708 . -10) (undo-tree-id709 . -10) (undo-tree-id710 . -10) (undo-tree-id711 . -10) (undo-tree-id712 . -10) (undo-tree-id713 . -10) (undo-tree-id714 . -10) (undo-tree-id715 . -10) (undo-tree-id716 . -10) (undo-tree-id717 . -10) (undo-tree-id718 . -10) (undo-tree-id719 . -10) (undo-tree-id720 . -10) (undo-tree-id721 . -10) (undo-tree-id722 . -10) (undo-tree-id723 . -10) (undo-tree-id724 . -10) (undo-tree-id725 . -10) (undo-tree-id726 . -10) (undo-tree-id727 . -10) (undo-tree-id728 . -10) (undo-tree-id729 . -10) (undo-tree-id730 . -10) (undo-tree-id731 . -10) (undo-tree-id732 . -10) (undo-tree-id733 . -10) (undo-tree-id734 . -10) (undo-tree-id735 . -10) (undo-tree-id736 . -10) (undo-tree-id737 . -10) (undo-tree-id738 . -10) (undo-tree-id739 . -10) (undo-tree-id740 . -10) (undo-tree-id741 . -10) (undo-tree-id742 . -10) (undo-tree-id743 . -10) (undo-tree-id744 . -10) (undo-tree-id745 . -10) (undo-tree-id746 . -10) (undo-tree-id747 . -10) (undo-tree-id748 . -10) (undo-tree-id749 . -10) (undo-tree-id750 . -10) (undo-tree-id751 . -10) (undo-tree-id752 . -10) (undo-tree-id753 . -10) (undo-tree-id754 . -10) (undo-tree-id755 . -10) (undo-tree-id756 . -10) (undo-tree-id757 . -10) (undo-tree-id758 . -10) (undo-tree-id759 . -10) (undo-tree-id760 . -10) (undo-tree-id761 . -10) (undo-tree-id762 . -10) (undo-tree-id763 . -10) (undo-tree-id764 . -10) (undo-tree-id765 . -10) (undo-tree-id766 . -10) (undo-tree-id767 . -10) (undo-tree-id768 . -10) (undo-tree-id769 . -10) (undo-tree-id770 . -10) (undo-tree-id771 . -10) (undo-tree-id772 . -10) (undo-tree-id773 . -10) (undo-tree-id774 . -10) (undo-tree-id775 . -10) (undo-tree-id776 . -10) (undo-tree-id777 . -10) (undo-tree-id778 . -10) (undo-tree-id779 . -10) (undo-tree-id780 . -10) (undo-tree-id781 . -10) (undo-tree-id782 . -10) (undo-tree-id783 . -10) (undo-tree-id784 . -10) (undo-tree-id785 . -10) (undo-tree-id786 . -10) (undo-tree-id787 . -10) (undo-tree-id788 . -10) (undo-tree-id789 . -10) (undo-tree-id790 . -10) (undo-tree-id791 . -10) (undo-tree-id792 . -10) (undo-tree-id793 . -10) (undo-tree-id794 . -10) (undo-tree-id795 . -10) (undo-tree-id796 . -10) (undo-tree-id797 . -10) (undo-tree-id798 . -10) (undo-tree-id799 . -10) (undo-tree-id800 . -10) (undo-tree-id801 . -10) (undo-tree-id802 . -10) (undo-tree-id803 . -10) (undo-tree-id804 . -10) (undo-tree-id805 . -10) (undo-tree-id806 . -10) (undo-tree-id807 . -10) (undo-tree-id808 . -10) (undo-tree-id809 . -10) (undo-tree-id810 . -10) (undo-tree-id811 . -10) (undo-tree-id812 . -10)) (26005 47810 854735 368000) 0 nil])
([nil nil ((1677 . 1678) 1639) nil (26005 47839 471336 553000) 0 nil])
([nil nil ((1594 . 1599)) ((#("
    " 0 1 (fontified t) 1 5 (fontified t)) . 1594) (undo-tree-id539 . -1) (undo-tree-id540 . -5) (undo-tree-id541 . -5) (undo-tree-id542 . -5) (undo-tree-id543 . -5) (undo-tree-id544 . -5) (undo-tree-id545 . -5) (undo-tree-id546 . -5) (undo-tree-id547 . -5) (undo-tree-id548 . -5) (undo-tree-id549 . -5) (undo-tree-id550 . -5) (undo-tree-id551 . -5) (undo-tree-id552 . -5) (undo-tree-id553 . -5) (undo-tree-id554 . -5) (undo-tree-id555 . -5) (undo-tree-id556 . -5) (undo-tree-id557 . -5) (undo-tree-id558 . -5) (undo-tree-id559 . -5) (undo-tree-id560 . -5) (undo-tree-id561 . -5) (undo-tree-id562 . -5) (undo-tree-id563 . -5) (undo-tree-id564 . -5) (undo-tree-id565 . -5) (undo-tree-id566 . -5) (undo-tree-id567 . -5) (undo-tree-id568 . -5) (undo-tree-id569 . -5) (undo-tree-id570 . -5) (undo-tree-id571 . -5) (undo-tree-id572 . -5) (undo-tree-id573 . -5) (undo-tree-id574 . -5) (undo-tree-id575 . -5) (undo-tree-id576 . -5) (undo-tree-id577 . -5) (undo-tree-id578 . -5) (undo-tree-id579 . -5) (undo-tree-id580 . -5) (undo-tree-id581 . -5) (undo-tree-id582 . -5) (undo-tree-id583 . -5) (undo-tree-id584 . -5) (undo-tree-id585 . -5) (undo-tree-id586 . -5) (undo-tree-id587 . -5) (undo-tree-id588 . -5) (undo-tree-id589 . -5) (undo-tree-id590 . -5) (undo-tree-id591 . -5) (undo-tree-id592 . -5) (undo-tree-id593 . -5) (undo-tree-id594 . -5) (undo-tree-id595 . -5) (undo-tree-id596 . -5) (undo-tree-id597 . -5) (undo-tree-id598 . -5) (undo-tree-id599 . -5) (undo-tree-id600 . -5) (undo-tree-id601 . -5) (undo-tree-id602 . -5) (undo-tree-id603 . -5) (undo-tree-id604 . -5) (undo-tree-id605 . -5) (undo-tree-id606 . -5)) (26005 47810 688190 570000) 0 nil])
([nil nil ((1365 . 1394) (#("def test_to_toml() -> None:
    " 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 16 (face font-lock-function-name-face fontified t) 16 19 (fontified t) 19 20 (face font-lock-operator-face fontified t) 20 21 (face font-lock-operator-face fontified t) 21 22 (fontified t) 22 26 (face font-lock-constant-face fontified t) 26 28 (fontified t) 28 32 (fontified t)) . 1365) (undo-tree-id19 . -32) (undo-tree-id20 . -32) 1398 (t 26005 47839 500162 745000)) nil (26005 47869 269478 192000) 0 nil])
([nil nil ((1599 . 1611)) ((#("devices = [\"" 0 7 (face font-lock-variable-name-face fontified t) 7 8 (fontified t) 8 9 (face font-lock-operator-face fontified t) 9 11 (fontified t) 11 12 (face font-lock-string-face fontified t)) . 1599) (undo-tree-id516 . -12) (undo-tree-id517 . -12) (undo-tree-id518 . -10) (undo-tree-id519 . -10) (undo-tree-id520 . -10) (undo-tree-id521 . -10) (undo-tree-id522 . -10) (undo-tree-id523 . -10) (undo-tree-id524 . -10) (undo-tree-id525 . -10) (undo-tree-id526 . -10) (undo-tree-id527 . -10) (undo-tree-id528 . -10) (undo-tree-id529 . -10) (undo-tree-id530 . -10) (undo-tree-id531 . -10) (undo-tree-id532 . -10) (undo-tree-id533 . -10) (undo-tree-id534 . -10) (undo-tree-id535 . -10) (undo-tree-id536 . -10) (undo-tree-id537 . -10) (undo-tree-id538 . -10)) (26005 47810 512641 765000) 0 nil])
([nil nil ((1676 . 1680) (#("    " 0 4 (fontified nil)) . 1675) (undo-tree-id18 . -4) (1674 . 1680) (t 26005 47839 952185 77000)) nil (26005 47869 269477 401000) 0 nil])
([nil nil ((#("\"" 0 1 (face font-lock-string-face fontified t)) . -1610) (undo-tree-id10 . -1) 1611) ((1610 . 1611)) (26005 47810 368477 448000) 0 nil])
([nil nil ((1680 . 1701)) nil (26005 47869 269476 763000) 0 nil])
([nil nil ((1610 . 1630)) ((#("FakeDevice(\"a\", \"b\"," 0 11 (fontified t) 11 14 (face font-lock-string-face fontified t) 14 16 (fontified t) 16 19 (face font-lock-string-face fontified t) 19 20 (fontified t)) . 1610) (undo-tree-id514 . -20) (undo-tree-id515 . -20)) (26005 47810 213768 408000) 0 nil])
([nil nil ((1701 . 1722)) nil (26005 47869 269476 645000) 0 nil])
([nil nil ((1630 . 1637)) ((#(" \"c\", \"" 0 1 (fontified t) 1 4 (face font-lock-string-face fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 7 (face font-lock-string-face fontified t)) . 1630) (undo-tree-id512 . -7) (undo-tree-id513 . -7)) (26005 47809 869871 807000) 0 nil])
([nil nil ((1722 . 1724)) nil (26005 47869 269476 511000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1635) (undo-tree-id8 . -1) (#("\"" 0 1 (face font-lock-string-face fontified t)) . -1636) (undo-tree-id9 . -1) 1637) ((1635 . 1637)) (26005 47809 829428 636000) 0 nil])
([nil nil ((1726 . 1730) (#("    " 0 4 (fontified nil)) . 1725) (undo-tree-id17 . -4) (1724 . 1730)) nil (26005 47869 269476 321000) 0 nil])
([nil nil ((1635 . 1662)) ((#("
                          " 0 1 (fontified t) 1 27 (fontified t)) . 1635) (undo-tree-id510 . -27) (undo-tree-id511 . -27)) (26005 47809 788780 876000) 0 nil])
([nil nil ((1730 . 1743)) nil (26005 47869 269475 791000) 0 nil])
([nil nil ((1662 . 1673)) ((#("partition_a" 0 10 (fontified t) 10 11 (fontified t)) . 1662) (undo-tree-id508 . -11) (undo-tree-id509 . -11)) (26005 47809 748335 688000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -1740) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (#("a" 0 1 (fontified t)) . -1741) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (#("k" 0 1 (fontified t)) . -1742) (undo-tree-id15 . -1) (undo-tree-id16 . -1) 1743) nil (26005 47869 269475 332000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . -1672) (undo-tree-id7 . -1) 1673) ((1672 . 1673)) (26005 47809 709054 494000) 0 nil])
([nil nil ((1740 . 1743)) nil (26005 47869 269472 989000) 0 nil])
([nil nil ((1672 . 1676)) ((#("path" 0 4 (fontified t)) . 1672)) (26005 47809 668845 278000) 0 nil])
([nil nil ((#("v" 0 1 (fontified t)) . -1742) (undo-tree-id3 . -1) (undo-tree-id4 . -1) 1743) nil (26005 47869 269472 739000) 0 nil])
([nil nil ((1635 . 1662)) ((#("
                          " 0 1 (fontified t) 1 27 (fontified t)) . 1635) (undo-tree-id506 . -27) (undo-tree-id507 . -27)) (26005 47809 628362 213000) 0 nil])
([nil nil ((1742 . 1755)) nil (26005 47869 269471 812000) 0 nil])
([nil nil ((1662 . 1681)) ((#("mountpoint=\"/mount\"" 0 10 (fontified t) 10 11 (face font-lock-operator-face fontified t) 11 19 (face font-lock-string-face fontified t)) . 1662)) (26005 47809 588027 633000) 0 nil])
([nil nil ((1755 . 1769)) nil (26005 47869 269471 449000) 0 nil])
([nil nil ((1594 . 1599)) ((#("
    " 0 1 (fontified t) 1 5 (fontified t)) . 1594) (undo-tree-id366 . -5) (undo-tree-id367 . -1) (undo-tree-id368 . -5) (undo-tree-id369 . -5) (undo-tree-id370 . -5) (undo-tree-id371 . -5) (undo-tree-id372 . -5) (undo-tree-id373 . -5) (undo-tree-id374 . -5) (undo-tree-id375 . -5) (undo-tree-id376 . -5) (undo-tree-id377 . -5) (undo-tree-id378 . -5) (undo-tree-id379 . -5) (undo-tree-id380 . -5) (undo-tree-id381 . -5) (undo-tree-id382 . -5) (undo-tree-id383 . -5) (undo-tree-id384 . -5) (undo-tree-id385 . -5) (undo-tree-id386 . -5) (undo-tree-id387 . -5) (undo-tree-id388 . -5) (undo-tree-id389 . -5) (undo-tree-id390 . -5) (undo-tree-id391 . -5) (undo-tree-id392 . -5) (undo-tree-id393 . -5) (undo-tree-id394 . -5) (undo-tree-id395 . -5) (undo-tree-id396 . -5) (undo-tree-id397 . -5) (undo-tree-id398 . -5) (undo-tree-id399 . -5) (undo-tree-id400 . -5) (undo-tree-id401 . -5) (undo-tree-id402 . -5) (undo-tree-id403 . -5) (undo-tree-id404 . -5) (undo-tree-id405 . -5) (undo-tree-id406 . -1) (undo-tree-id407 . -5) (undo-tree-id408 . -5) (undo-tree-id409 . -5) (undo-tree-id410 . -5) (undo-tree-id411 . -5) (undo-tree-id412 . -5) (undo-tree-id413 . -5) (undo-tree-id414 . -5) (undo-tree-id415 . -5) (undo-tree-id416 . -5) (undo-tree-id417 . -5) (undo-tree-id418 . -5) (undo-tree-id419 . -5) (undo-tree-id420 . -5) (undo-tree-id421 . -5) (undo-tree-id422 . -5) (undo-tree-id423 . -5) (undo-tree-id424 . -5) (undo-tree-id425 . -5) (undo-tree-id426 . -5) (undo-tree-id427 . -5) (undo-tree-id428 . -5) (undo-tree-id429 . -5) (undo-tree-id430 . -5) (undo-tree-id431 . -5) (undo-tree-id432 . -5) (undo-tree-id433 . -5) (undo-tree-id434 . -5) (undo-tree-id435 . -5) (undo-tree-id436 . -5) (undo-tree-id437 . -5) (undo-tree-id438 . -5) (undo-tree-id439 . -5) (undo-tree-id440 . -5) (undo-tree-id441 . -5) (undo-tree-id442 . -5) (undo-tree-id443 . -5) (undo-tree-id444 . -5) (undo-tree-id445 . -5) (undo-tree-id446 . -5) (undo-tree-id447 . -5) (undo-tree-id448 . -5) (undo-tree-id449 . -5) (undo-tree-id450 . -5) (undo-tree-id451 . -5) (undo-tree-id452 . -5) (undo-tree-id453 . -5) (undo-tree-id454 . -5) (undo-tree-id455 . -5) (undo-tree-id456 . -5) (undo-tree-id457 . -5) (undo-tree-id458 . -5) (undo-tree-id459 . -5) (undo-tree-id460 . -5) (undo-tree-id461 . -5) (undo-tree-id462 . -5) (undo-tree-id463 . -5) (undo-tree-id464 . -5) (undo-tree-id465 . -5) (undo-tree-id466 . -5) (undo-tree-id467 . -5) (undo-tree-id468 . -5) (undo-tree-id469 . -5) (undo-tree-id470 . -5) (undo-tree-id471 . -5) (undo-tree-id472 . -5) (undo-tree-id473 . -5) (undo-tree-id474 . -5) (undo-tree-id475 . -5) (undo-tree-id476 . -5) (undo-tree-id477 . -5) (undo-tree-id478 . -5) (undo-tree-id479 . -5) (undo-tree-id480 . -5) (undo-tree-id481 . -5) (undo-tree-id482 . -5) (undo-tree-id483 . -5) (undo-tree-id484 . -5) (undo-tree-id485 . -5) (undo-tree-id486 . -5) (undo-tree-id487 . -5) (undo-tree-id488 . -5) (undo-tree-id489 . -5) (undo-tree-id490 . -5) (undo-tree-id491 . -5) (undo-tree-id492 . -5) (undo-tree-id493 . -5) (undo-tree-id494 . -5) (undo-tree-id495 . -5) (undo-tree-id496 . -5) (undo-tree-id497 . -5) (undo-tree-id498 . -5) (undo-tree-id499 . -5) (undo-tree-id500 . -5) (undo-tree-id501 . -5) (undo-tree-id502 . -5) (undo-tree-id503 . -5) (undo-tree-id504 . -1) (undo-tree-id505 . -5)) (26005 47809 547728 306000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -1724) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) 1725) nil (26005 47869 269468 893000) 0 nil])
([nil nil ((1599 . 1609)) ((#("devices = " 0 7 (face font-lock-variable-name-face fontified t) 7 8 (fontified t) 8 9 (face font-lock-operator-face fontified t) 9 10 (fontified t)) . 1599) (undo-tree-id329 . -10) (undo-tree-id330 . -10) (undo-tree-id331 . -10) (undo-tree-id332 . -10) (undo-tree-id333 . -10) (undo-tree-id334 . -10) (undo-tree-id335 . -10) (undo-tree-id336 . -10) (undo-tree-id337 . -10) (undo-tree-id338 . -10) (undo-tree-id339 . -10) (undo-tree-id340 . -10) (undo-tree-id341 . -10) (undo-tree-id342 . -10) (undo-tree-id343 . -10) (undo-tree-id344 . -10) (undo-tree-id345 . -10) (undo-tree-id346 . -10) (undo-tree-id347 . -10) (undo-tree-id348 . -10) (undo-tree-id349 . -10) (undo-tree-id350 . -10) (undo-tree-id351 . -10) (undo-tree-id352 . -10) (undo-tree-id353 . -10) (undo-tree-id354 . -10) (undo-tree-id355 . -10) (undo-tree-id356 . -10) (undo-tree-id357 . -10) (undo-tree-id358 . -10) (undo-tree-id359 . -10) (undo-tree-id360 . -10) (undo-tree-id361 . -10) (undo-tree-id362 . -10) (undo-tree-id363 . -10) (undo-tree-id364 . -10) (undo-tree-id365 . -10)) (26005 47809 507985 29000) 0 nil])
([nil nil ((#("fake" 0 4 (fontified t)) . 1739) (undo-tree-id26 . -2) (undo-tree-id27 . -4) (t 26005 47869 273638 126000)) nil (26005 47878 102793 802000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1808 . 1809) (nil fontified nil 1796 . 1809) (nil fontified nil 1788 . 1796) (nil fontified nil 1783 . 1788) (nil fontified nil 1782 . 1783) (nil fontified nil 1757 . 1782) (nil fontified nil 1745 . 1757) (nil fontified nil 1740 . 1745) (nil fontified nil 1739 . 1740) (nil fontified nil 1710 . 1739) (nil fontified nil 1701 . 1710) (nil fontified nil 1696 . 1701) (nil fontified nil 1695 . 1696) (nil fontified nil 1670 . 1695) (nil fontified nil 1667 . 1670) (nil fontified nil 1653 . 1667) (nil fontified nil 1650 . 1653) (nil fontified nil 1636 . 1650) (nil fontified nil 1633 . 1636) (nil fontified nil 1609 . 1633) (1609 . 1809)) ((#("FakeDevice(
            \"v\",
            \"m\",
            \"s\",
            serial_path=Path(\"/serial\"),
            partition_path=Path(\"/partition\"),
            mountpoint=Path(\"/mount\"),
        )," 0 12 (fontified nil) 12 24 (fontified nil) 24 26 (fontified nil face font-lock-string-face) 26 27 (fontified nil face font-lock-string-face) 27 29 (fontified nil) 29 41 (fontified nil) 41 43 (face font-lock-string-face fontified nil) 43 44 (face font-lock-string-face fontified nil) 44 46 (fontified nil) 46 58 (fontified nil) 58 60 (face font-lock-string-face fontified nil) 60 61 (face font-lock-string-face fontified nil) 61 63 (fontified nil) 63 86 (fontified nil) 86 87 (face font-lock-operator-face fontified nil) 87 92 (fontified nil) 92 101 (face font-lock-string-face fontified nil) 101 104 (fontified nil) 104 130 (fontified nil) 130 131 (face font-lock-operator-face fontified nil) 131 136 (fontified nil) 136 148 (face font-lock-string-face fontified nil) 148 151 (fontified nil) 151 173 (fontified nil) 173 174 (face font-lock-operator-face fontified nil) 174 179 (fontified nil) 179 187 (face font-lock-string-face fontified nil) 187 190 (fontified nil) 190 199 (fontified nil) 199 200 (rear-nonsticky nil fontified nil)) . 1609) (undo-tree-id325 . -199) (undo-tree-id326 . -29) (undo-tree-id327 . -200) (undo-tree-id328 . -200) (nil fontified t 1609 . 1621) (nil fontified nil 1636 . 1638) (nil fontified t 1653 . 1655) (nil fontified t 1670 . 1672) (nil fontified t 1710 . 1713) (nil fontified t 1757 . 1760) (nil fontified t 1796 . 1799) (nil rear-nonsticky t 1808 . 1809)) (26005 47809 466770 743000) 0 nil])
([nil nil ((#("_device" 0 7 (fontified t)) . 1739) (undo-tree-id24 . -1) (undo-tree-id25 . -7)) nil (26005 47878 102792 898000) 0 nil])
([nil nil ((#("," 0 1 (rear-nonsticky t fontified t)) . -1808) (undo-tree-id6 . -1) 1809) ((1808 . 1809)) (26005 47808 865787 229000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -1739) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) 1740) nil (26005 47878 102790 187000) 0 nil])
([nil nil ((#("    devices = [FakeDevice(\"a\", \"b\", \"c\",
                          mountpoint=\"/mount\"
                          partition_path" 0 4 (fontified t) 4 11 (face font-lock-variable-name-face fontified t) 11 12 (fontified t) 12 13 (face font-lock-operator-face fontified t) 13 26 (fontified t) 26 29 (face font-lock-string-face fontified t) 29 31 (fontified t) 31 34 (face font-lock-string-face fontified t) 34 36 (fontified t) 36 39 (face font-lock-string-face fontified t) 39 41 (fontified t) 41 77 (fontified t) 77 78 (face font-lock-operator-face fontified t) 78 86 (face font-lock-string-face fontified t) 86 87 (fontified t) 87 127 (fontified t)) . 1809) (undo-tree-id5 . -127) 1936) ((1809 . 1936)) (26005 47808 696909 602000) 0 nil])
([nil nil ((#("device" 0 6 (fontified t)) . 1692) (undo-tree-id29 . -6) (undo-tree-id30 . -6) (t 26005 47878 130078 533000)) nil (26005 47891 632556 758000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -1808) (undo-tree-id3 . -1) (undo-tree-id4 . -1) 1809) ((1808 . 1809)) (26005 47808 566233 341000) 0 nil])
([nil nil ((#("fake" 0 4 (fontified t)) . 1687) (undo-tree-id38 . -4)) nil (26005 47897 38726 913000) 0 nil] [nil nil ((#(".to" 0 3 (fontified t)) . 1692) (undo-tree-id28 . -3)) ((1692 . 1695)) (26005 47891 632519 585000) 0 nil])
([nil nil ((1808 . 1813)) ((#("
    " 0 1 (fontified t) 1 5 (fontified t)) . 1808)) (26005 47808 167281 13000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . -1687) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (#("." 0 1 (fontified t)) . -1688) (undo-tree-id36 . -1) (undo-tree-id37 . -1) 1689) nil (26005 47897 38725 983000) 0 nil])
nil
([nil nil ((1609 . 1610)) ((#("[" 0 1 (fontified t)) . 1609)) (26005 47807 773989 911000) 0 nil])
([nil nil ((108 . 117)) nil (26005 47897 38713 518000) 0 nil])
([nil nil ((1809 . 1810)) ((#("." 0 1 (fontified t)) . 1809)) (26005 47806 490473 577000) 0 nil])
([nil nil ((1755 . 1759) (#("    " 0 4 (fontified nil)) . 1754) (undo-tree-id75 . -4) (undo-tree-id76 . -4) (undo-tree-id77 . -4) (1753 . 1759) (t 26005 47897 43021 53000)) nil (26005 47907 703973 595000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . 1809)) ((1809 . 1810)) (26005 47806 6325 168000) 0 nil])
([nil nil ((1759 . 1770)) nil (26005 47907 703972 652000) 0 nil])
([nil nil ((1809 . 1810)) ((#("," 0 1 (fontified t)) . 1809) (undo-tree-id323 . -1) (undo-tree-id324 . -1)) (26005 47804 828679 892000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1765) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (#("(" 0 1 (fontified t)) . -1766) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (#("d" 0 1 (fontified t)) . -1767) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (#("e" 0 1 (fontified t)) . -1768) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (#("v" 0 1 (fontified t)) . -1769) (undo-tree-id73 . -1) (undo-tree-id74 . -1) 1770) nil (26005 47907 703971 785000) 0 nil])
([nil nil ((1636 . 1637)) ((#("a" 0 1 (face font-lock-string-face fontified t)) . 1636)) (26005 47804 714472 712000) 0 nil])
([nil nil ((1765 . 1767)) nil (26005 47907 703965 466000) 0 nil])
([nil nil ((1654 . 1655)) ((#("a" 0 1 (face font-lock-string-face fontified t)) . 1654)) (26005 47804 573865 871000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t)) . -1765) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (#("e" 0 1 (fontified t)) . -1766) (undo-tree-id43 . -1) (undo-tree-id44 . -1) 1767) nil (26005 47907 703965 3000) 0 nil])
([nil nil ((1672 . 1673)) ((#("a" 0 1 (face font-lock-string-face fontified t)) . 1672)) (26005 47804 399474 777000) 0 nil])
([nil nil ((1765 . 1786)) nil (26005 47907 703955 495000) 0 nil])
([nil nil ((1813 . 1829)) ((#("
               " 0 1 (fontified t) 1 14 (fontified t) 14 16 (fontified t)) . 1813) (undo-tree-id319 . -16) (undo-tree-id320 . -16) (undo-tree-id321 . -16) (undo-tree-id322 . -16)) (26005 47804 59162 282000) 0 nil])
([nil nil ((1786 . 1793)) nil (26005 47907 703951 712000) 0 nil])
([nil nil ((1829 . 1850)) ((#("FakeDevice(\"vb\", \"mb\"" 0 11 (fontified t) 11 15 (face font-lock-string-face fontified t) 15 17 (fontified t) 17 21 (face font-lock-string-face fontified t)) . 1829) (undo-tree-id315 . -21) (undo-tree-id316 . -21) (undo-tree-id317 . -21) (undo-tree-id318 . -21)) (26005 47804 19130 685000) 0 nil])
([nil nil ((1427 . 1436) (t 26005 47907 707553 621000)) nil (26005 47923 380841 228000) 0 nil])
([nil nil ((1850 . 1858)) ((#(", \"sb\")]" 0 2 (fontified t) 2 6 (face font-lock-string-face fontified t) 6 7 (fontified t) 7 8 (fontified t)) . 1850) (undo-tree-id311 . -7) (undo-tree-id312 . -7) (undo-tree-id313 . -7) (undo-tree-id314 . -7)) (26005 47803 979212 74000) 0 nil])
([nil nil ((1436 . 1452)) nil (26005 47923 380840 781000) 0 nil])
([nil nil ((#("]" 0 1 (fontified t)) . 1857)) ((1857 . 1858)) (26005 47803 939694 92000) 0 nil])
([nil nil ((1664 . 1673)) nil (26005 47923 380840 651000) 0 nil])
([nil nil ((1857 . 1859)) ((#(",]" 0 1 (fontified t) 1 2 (fontified t)) . 1857) (undo-tree-id307 . -2) (undo-tree-id308 . -2) (undo-tree-id309 . -2) (undo-tree-id310 . -2)) (26005 47803 899250 835000) 0 nil])
([nil nil ((1673 . 1684)) nil (26005 47923 380840 455000) 0 nil])
([nil nil ((1861 . 1865) (#("    " 0 4 (fontified nil)) . 1860) (1859 . 1865)) ((#("
    
" 0 1 (fontified t) 1 5 (fontified nil) 5 6 (fontified nil)) . 1859) (1860 . 1864) (#("    " 0 4 (fontified t)) . 1861)) (26005 47803 858954 808000) 0 nil])
([nil nil ((#("m" 0 1 (face font-lock-comment-face fontified t)) . -1680) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (#("n" 0 1 (face font-lock-comment-face fontified t)) . -1681) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (#("a" 0 1 (face font-lock-comment-face fontified t)) . -1682) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (#("l" 0 1 (face font-lock-comment-face fontified t)) . -1683) (undo-tree-id96 . -1) (undo-tree-id97 . -1) 1684) nil (26005 47923 380839 780000) 0 nil])
([nil nil ((1599 . 1608)) ((#("original_" 0 9 (face font-lock-variable-name-face fontified t)) . 1599)) (26005 47803 818901 982000) 0 nil])
([nil nil ((1680 . 1696)) nil (26005 47923 380824 619000) 0 nil])
([nil nil ((#("


" 0 1 (fontified t) 1 2 (fontified nil) 2 3 (fontified nil)) . 1869) (#("    " 0 4 (fontified nil)) . 1871) (#("    " 0 4 (fontified t)) . 1870) (1879 . 1880)) ((#("
" 0 1 (fontified nil)) . 1879) (1870 . 1874) (1871 . 1875) (1869 . 1872)) (26005 47803 778194 839000) 0 nil])
([nil nil ((1 . 1854) (#("from pathlib import Path

import pytest

from circuitpython_tool.fake_device import FakeDevice, all_devices, to_toml


def test_empty_str() -> None:
    assert all_devices(\"\") == []


def test_required_fields() -> None:
    toml = \"\"\"
[[devices]]
vendor = \"a\"
model = \"b\"
serial = \"c\"

[[devices]]
vendor = \"d\"
model = \"e\"
serial = \"f\"
    \"\"\"
    assert all_devices(toml) == [FakeDevice(\"a\", \"b\", \"c\"), FakeDevice(\"d\", \"e\", \"f\")]


def test_missing_required_fields() -> None:
    toml = \"\"\"
[[devices]]
vendor = \"v\"
# model = \"m\"
serial = \"s\"
   \"\"\"
    with pytest.raises(KeyError) as exception_info:
        all_devices(toml)
    assert \"model\" in str(exception_info.value)


def test_optional_fields() -> None:
    toml = \"\"\"
[[devices]]
vendor = \"v\"
model = \"m\"
serial = \"s\"

serial_path = \"/serial\"
partition_path = \"/partition\"
mountpoint = \"/mount\"
   \"\"\"
    assert all_devices(toml) == [
        FakeDevice(
            \"v\",
            \"m\",
            \"s\",
            serial_path=Path(\"/serial\"),
            partition_path=Path(\"/partition\"),
            mountpoint=Path(\"/mount\"),
        ),
    ]


def test_file_read(tmp_path: Path) -> None:
    toml = \"\"\"
[[devices]]
vendor = \"v\"
model = \"m\"
serial = \"s\"
      \"\"\"
    file_path = tmp_path / \"devices.toml\"
    file_path.write_text(toml)
    assert all_devices(file_path) == [FakeDevice(\"v\", \"m\", \"s\")]


def test_to_toml() -> None:
    original_devices = [
        # All fields set
        FakeDevice(
            \"va\",
            \"ma\",
            \"sa\",
            serial_path=Path(\"/serial\"),
            partition_path=Path(\"/partition\"),
            mountpoint=Path(\"/mount\"),
        ),
        # Optional fields unset
        FakeDevice(\"vb\", \"mb\", \"sb\"),
    ]

    toml = to_toml(original_devices)
    devices = all_devices(toml)

    assert devices == original_devices
" 0 233 (fontified nil) 233 234 (fontified nil syntax-table (15)) 234 340 (fontified nil) 340 341 (fontified nil syntax-table (15)) 341 490 (fontified nil) 490 491 (fontified nil syntax-table (15)) 491 1850 (fontified nil)) . 1) (undo-tree-id0 . -148) (t 26005 47923 388337 973000)) nil (26046 49185 442671 827000) 0 nil])
([nil nil ((1309 . 1876) (#("def test_file_read(tmp_path: Path) -> None:
    toml = \"\"\"
[[devices]]
vendor = \"v\"
model = \"m\"
serial = \"s\"
      \"\"\"
    file_path = tmp_path / \"devices.toml\"
    file_path.write_text(toml)
    assert all_devices(file_path) == [FakeDevice(\"v\", \"m\", \"s\")]

def test_to_toml() -> None:
    original_devices = [FakeDevice(
            \"va\",
            \"ma\",
            \"sa\",
            serial_path=Path(\"/serial\"),
            partition_path=Path(\"/partition\"),
            mountpoint=Path(\"/mount\"),
        ),
               FakeDevice(\"vb\", \"mb\", \"sb\")," 0 3 (face font-lock-keyword-face) 4 18 (face font-lock-function-name-face) 35 36 (face font-lock-operator-face) 36 37 (face font-lock-operator-face) 38 42 (face font-lock-constant-face) 48 52 (face font-lock-variable-name-face) 53 54 (face font-lock-operator-face) 55 57 (face font-lock-string-face) 57 58 (syntax-table (15) face font-lock-string-face) 58 115 (face font-lock-string-face) 115 116 (syntax-table (15) face font-lock-string-face) 116 118 (face font-lock-string-face) 123 132 (face font-lock-variable-name-face) 133 134 (face font-lock-operator-face) 144 145 (face font-lock-operator-face) 146 160 (face font-lock-string-face) 196 202 (face font-lock-keyword-face) 226 228 (face font-lock-operator-face) 241 244 (face font-lock-string-face) 246 249 (face font-lock-string-face) 251 254 (face font-lock-string-face) 258 261 (face font-lock-keyword-face) 262 274 (face font-lock-function-name-face) 277 278 (face font-lock-operator-face) 278 279 (face font-lock-operator-face) 280 284 (face font-lock-constant-face) 286 290 (fontified t) 290 299 (face font-lock-variable-name-face fontified t) 299 306 (face font-lock-variable-name-face fontified t) 306 307 (fontified t) 307 308 (face font-lock-operator-face fontified t) 308 309 (fontified t) 309 310 (fontified t) 310 322 (fontified t) 322 334 (fontified t) 334 336 (face font-lock-string-face fontified t) 336 337 (face font-lock-string-face fontified t) 337 338 (face font-lock-string-face fontified t) 338 340 (fontified t) 340 352 (fontified t) 352 354 (face font-lock-string-face fontified t) 354 355 (face font-lock-string-face fontified t) 355 356 (face font-lock-string-face fontified t) 356 358 (fontified t) 358 370 (fontified t) 370 372 (face font-lock-string-face fontified t) 372 373 (face font-lock-string-face fontified t) 373 374 (face font-lock-string-face fontified t) 374 376 (fontified t) 376 399 (fontified t) 399 400 (face font-lock-operator-face fontified t) 400 405 (fontified t) 405 414 (face font-lock-string-face fontified t) 414 443 (fontified t) 443 444 (face font-lock-operator-face fontified t) 444 449 (fontified t) 449 461 (face font-lock-string-face fontified t) 461 486 (fontified t) 486 487 (face font-lock-operator-face fontified t) 487 492 (fontified t) 492 500 (face font-lock-string-face fontified t) 500 503 (fontified t) 503 512 (fontified t) 512 513 (fontified t) 513 514 (fontified t) 514 527 (fontified t) 527 529 (fontified t) 529 540 (fontified t) 540 544 (face font-lock-string-face fontified t) 544 546 (fontified t) 546 550 (face font-lock-string-face fontified t) 550 552 (fontified t) 552 556 (face font-lock-string-face fontified t) 556 557 (fontified t) 557 558 (fontified t)) . 1309) (undo-tree-id31 . -512) (undo-tree-id32 . -286) (undo-tree-id34 . -290) (undo-tree-id36 . -309) (undo-tree-id38 . -290) (undo-tree-id40 . -309) (undo-tree-id42 . -290) (undo-tree-id44 . -309) (undo-tree-id46 . -527) (undo-tree-id48 . -290) (undo-tree-id50 . -309) (undo-tree-id52 . -290) (undo-tree-id54 . -309) (undo-tree-id56 . -290) (undo-tree-id58 . -309) (undo-tree-id60 . -290) (undo-tree-id62 . -309) (undo-tree-id64 . -290) (undo-tree-id66 . -309) (undo-tree-id68 . -290) (undo-tree-id70 . -309) (undo-tree-id72 . -290) (undo-tree-id74 . -309) (undo-tree-id76 . -290) (undo-tree-id78 . -309) (undo-tree-id80 . -290) (undo-tree-id82 . -309) (undo-tree-id84 . -290) (undo-tree-id86 . -309) (undo-tree-id88 . -290) (undo-tree-id90 . -309) (undo-tree-id92 . -290) (undo-tree-id94 . -309) (undo-tree-id96 . -290) (undo-tree-id98 . -309) (undo-tree-id100 . -290) (undo-tree-id102 . -309) (undo-tree-id104 . -290) (undo-tree-id106 . -309) (undo-tree-id108 . -290) (undo-tree-id110 . -309) (undo-tree-id112 . -290) (undo-tree-id114 . -309) (undo-tree-id116 . -290) (undo-tree-id118 . -309) (undo-tree-id120 . -290) (undo-tree-id122 . -309) (undo-tree-id124 . -290) (undo-tree-id126 . -309) (undo-tree-id128 . -290) (undo-tree-id130 . -309) (undo-tree-id132 . -290) (undo-tree-id134 . -309) (undo-tree-id136 . -290) (undo-tree-id138 . -309) (undo-tree-id140 . -290) (undo-tree-id142 . -309) (undo-tree-id144 . -290) (undo-tree-id146 . -309) (undo-tree-id148 . -290) (undo-tree-id150 . -309) (undo-tree-id152 . -290) (undo-tree-id154 . -309) (undo-tree-id156 . -290) (undo-tree-id158 . -309) (undo-tree-id160 . -290) (undo-tree-id162 . -309) (undo-tree-id164 . -290) (undo-tree-id166 . -309) (undo-tree-id168 . -290) (undo-tree-id170 . -309) (undo-tree-id172 . -290) (undo-tree-id174 . -309) (undo-tree-id176 . -290) (undo-tree-id178 . -309) (undo-tree-id180 . -290) (undo-tree-id182 . -309) (undo-tree-id184 . -290) (undo-tree-id186 . -309) (undo-tree-id188 . -290) (undo-tree-id190 . -309) (undo-tree-id192 . -290) (undo-tree-id194 . -309) (undo-tree-id196 . -290) (undo-tree-id198 . -309) (undo-tree-id200 . -290) (undo-tree-id202 . -309) (undo-tree-id204 . -290) (undo-tree-id206 . -309) (undo-tree-id208 . -290) (undo-tree-id210 . -309) (undo-tree-id212 . -290) (undo-tree-id214 . -309) (undo-tree-id216 . -290) (undo-tree-id218 . -309) (undo-tree-id220 . -290) (undo-tree-id222 . -309) (undo-tree-id224 . -290) (undo-tree-id226 . -309) (undo-tree-id228 . -290) (undo-tree-id230 . -309) (undo-tree-id232 . -290) (undo-tree-id234 . -309) (undo-tree-id236 . -290) (undo-tree-id238 . -309) (undo-tree-id240 . -290) (undo-tree-id242 . -309) (undo-tree-id244 . -290) (undo-tree-id246 . -309) (undo-tree-id248 . -290) (undo-tree-id250 . -309) (undo-tree-id252 . -290) (undo-tree-id254 . -309)) ((1309 . 1867) (#("
def test_file_read(tmp_path: Path) -> None:
    toml = \"\"\"
[[devices]]
vendor = \"v\"
model = \"m\"
serial = \"s\"
      \"\"\"
    file_path = tmp_path / \"devices.toml\"
    file_path.write_text(toml)
    assert all_devices(file_path) == [FakeDevice(\"v\", \"m\", \"s\")]


def test_to_toml() -> None:
    original_devices = [
        FakeDevice(
            \"va\",
            \"ma\",
            \"sa\",
            serial_path=Path(\"/serial\"),
            partition_path=Path(\"/partition\"),
            mountpoint=Path(\"/mount\"),
        ),
        FakeDevice(\"vb\", \"mb\", \"sb\"),
    " 0 1 (fontified t) 1 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t) 5 19 (face font-lock-function-name-face fontified t) 19 36 (fontified t) 36 37 (face font-lock-operator-face fontified t) 37 38 (face font-lock-operator-face fontified t) 38 39 (fontified t) 39 43 (face font-lock-constant-face fontified t) 43 49 (fontified t) 49 53 (face font-lock-variable-name-face fontified t) 53 54 (fontified t) 54 55 (face font-lock-operator-face fontified t) 55 56 (fontified t) 56 58 (face font-lock-string-face fontified t) 58 59 (face font-lock-string-face syntax-table (15) fontified t) 59 116 (face font-lock-string-face fontified t) 116 117 (face font-lock-string-face syntax-table (15) fontified t) 117 119 (face font-lock-string-face fontified t) 119 124 (fontified t) 124 133 (face font-lock-variable-name-face fontified t) 133 134 (fontified t) 134 135 (face font-lock-operator-face fontified t) 135 145 (fontified t) 145 146 (face font-lock-operator-face fontified t) 146 147 (fontified t) 147 161 (face font-lock-string-face fontified t) 161 197 (fontified t) 197 203 (face font-lock-keyword-face fontified t) 203 227 (fontified t) 227 229 (face font-lock-operator-face fontified t) 229 242 (fontified t) 242 245 (face font-lock-string-face fontified t) 245 247 (fontified t) 247 250 (face font-lock-string-face fontified t) 250 252 (fontified t) 252 255 (face font-lock-string-face fontified t) 255 260 (fontified t) 260 263 (face font-lock-keyword-face fontified t) 263 264 (fontified t) 264 276 (face font-lock-function-name-face fontified t) 276 279 (fontified t) 279 280 (face font-lock-operator-face fontified t) 280 281 (face font-lock-operator-face fontified t) 281 282 (fontified t) 282 286 (face font-lock-constant-face fontified t) 286 288 (fontified t) 288 292 (fontified t) 292 308 (face font-lock-variable-name-face fontified t) 308 309 (fontified t) 309 310 (face font-lock-operator-face fontified t) 310 345 (fontified t) 345 349 (face font-lock-string-face fontified t) 349 363 (fontified t) 363 367 (face font-lock-string-face fontified t) 367 381 (fontified t) 381 385 (face font-lock-string-face fontified t) 385 410 (fontified t) 410 411 (face font-lock-operator-face fontified t) 411 416 (fontified t) 416 425 (face font-lock-string-face fontified t) 425 454 (fontified t) 454 455 (face font-lock-operator-face fontified t) 455 460 (fontified t) 460 472 (face font-lock-string-face fontified t) 472 497 (fontified t) 497 498 (face font-lock-operator-face fontified t) 498 503 (fontified t) 503 511 (face font-lock-string-face fontified t) 511 544 (fontified t) 544 548 (face font-lock-string-face fontified t) 548 550 (fontified t) 550 554 (face font-lock-string-face fontified t) 554 556 (fontified t) 556 560 (face font-lock-string-face fontified t) 560 567 (fontified t)) . 1309) (undo-tree-id258 . -343) (undo-tree-id259 . -288) (undo-tree-id260 . -288) (undo-tree-id261 . -288) (undo-tree-id262 . -288) (undo-tree-id263 . -288) (undo-tree-id264 . -288) (undo-tree-id265 . -292) (undo-tree-id266 . -292) (undo-tree-id267 . -292) (undo-tree-id268 . -292) (undo-tree-id269 . -311) (undo-tree-id270 . -292) (undo-tree-id271 . -292) (undo-tree-id272 . -292) (undo-tree-id273 . -292) (undo-tree-id274 . -311) (undo-tree-id275 . -292) (undo-tree-id276 . -292) (undo-tree-id277 . -292) (undo-tree-id278 . -292) (undo-tree-id279 . -311) (undo-tree-id280 . -292) (undo-tree-id281 . -292) (undo-tree-id282 . -292) (undo-tree-id283 . -292) (undo-tree-id284 . -311) (undo-tree-id285 . -292) (undo-tree-id286 . -292) (undo-tree-id287 . -292) (undo-tree-id288 . -292) (undo-tree-id289 . -311) (undo-tree-id290 . -292) (undo-tree-id291 . -292) (undo-tree-id292 . -292) (undo-tree-id293 . -292) (undo-tree-id294 . -311) (undo-tree-id295 . -292) (undo-tree-id296 . -292) (undo-tree-id297 . -292) (undo-tree-id298 . -311) (undo-tree-id299 . -292) (undo-tree-id300 . -292) (undo-tree-id301 . -292) (undo-tree-id302 . -311) (undo-tree-id303 . -292) (undo-tree-id304 . -292) (undo-tree-id305 . -292) (undo-tree-id306 . -311) (t 26005 47780 529271 237000)) (26005 47803 177850 941000) 0 nil])
([nil nil ((#("[" 0 1 (fontified t)) . -380) (undo-tree-id5 . -1) (undo-tree-id6 . -1) 381 (t 26046 49185 474755 783000)) nil (26046 49280 942974 965000) 0 nil])
([nil nil ((#("    original_devices = [
        FakeDevice(
            \"va\",
            \"ma\",
            \"sa\",
            serial_path=Path(\"/serial\"),
            partition_path=Path(\"/partition\"),
            mountpoint=Path(\"/mount\"),
        ),
        FakeDevice(\"vb\", \"mb\", \"sb\"),
    ]" 0 4 (fontified t) 4 20 (face font-lock-variable-name-face fontified t) 20 21 (fontified t) 21 22 (face font-lock-operator-face fontified t) 22 57 (fontified t) 57 61 (face font-lock-string-face fontified t) 61 75 (fontified t) 75 79 (face font-lock-string-face fontified t) 79 93 (fontified t) 93 97 (face font-lock-string-face fontified t) 97 122 (fontified t) 122 123 (face font-lock-operator-face fontified t) 123 128 (fontified t) 128 137 (face font-lock-string-face fontified t) 137 166 (fontified t) 166 167 (face font-lock-operator-face fontified t) 167 172 (fontified t) 172 184 (face font-lock-string-face fontified t) 184 209 (fontified t) 209 210 (face font-lock-operator-face fontified t) 210 215 (fontified t) 215 223 (face font-lock-string-face fontified t) 223 256 (fontified t) 256 260 (face font-lock-string-face fontified t) 260 262 (fontified t) 262 266 (face font-lock-string-face fontified t) 266 268 (fontified t) 268 272 (face font-lock-string-face fontified t) 272 279 (fontified t) 279 280 (fontified t)) . 1597) (undo-tree-id255 . -280) (undo-tree-id256 . -55) (undo-tree-id257 . -280) (t 26005 47780 529271 237000)) ((1597 . 1877)) (26005 47802 800504 761000) 0 nil])
([nil nil ((380 . 381)) nil (26046 49280 942973 336000) 0 nil])
nil
([nil nil ((#("}" 0 1 (fontified t)) . -380) (undo-tree-id3 . -1) (undo-tree-id4 . -1) 381) nil (26046 49280 942972 959000) 0 nil])
([nil nil ((380 . 381)) nil (26046 49280 942971 605000) 0 nil])
([nil nil ((#("]" 0 1 (fontified t)) . -433) (undo-tree-id1 . -1) (undo-tree-id2 . -1) 434) nil (26046 49280 942970 910000) 0 nil])
([nil nil ((433 . 434)) nil (26046 49280 942959 351000) 0 nil])
([nil nil ((#("[" 0 1 (fontified t)) . -900) (undo-tree-id22 . -1) 901 (t 26046 49280 943234 892000)) nil (26046 49425 75928 971000) 0 nil])
([nil nil ((900 . 901)) nil (26046 49425 75928 545000) 0 nil])
([nil nil ((#("]" 0 1 (fontified t)) . -1115) (undo-tree-id21 . -1) 1116) nil (26046 49425 75928 248000) 0 nil])
([nil nil ((1115 . 1116)) nil (26046 49425 75927 828000) 0 nil])
([nil nil ((#("]" 0 1 (fontified t)) . -1374) (undo-tree-id20 . -1) 1375) nil (26046 49425 75927 508000) 0 nil])
([nil nil ((1374 . 1375)) nil (26046 49425 75926 732000) 0 nil])
([nil nil ((#("[" 0 1 (fontified t)) . -1348) (undo-tree-id18 . -1) (undo-tree-id19 . -1) 1349) nil (26046 49425 75926 461000) 0 nil])
([nil nil ((1348 . 1349)) nil (26046 49425 75924 793000) 0 nil])
([nil nil ((#("}" 0 1 (fontified t)) . -1348) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) 1349) nil (26046 49425 75924 101000) 0 nil])
([nil nil ((1348 . 1349)) nil (26046 49425 75920 801000) 0 nil])
([nil nil ((#("}" 0 1 (fontified t)) . -1348) (undo-tree-id7 . -1) (undo-tree-id8 . -1) 1349) nil (26046 49425 75919 873000) 0 nil])
([nil current ((1348 . 1349)) nil (26046 49425 75907 227000) 0 nil])
nil

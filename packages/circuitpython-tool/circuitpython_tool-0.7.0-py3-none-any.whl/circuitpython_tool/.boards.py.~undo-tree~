(undo-tree-save-format-version . 1)
"23a65c0b16635316b476329b6afc3e7d670631f0"
[nil nil nil nil (26019 5827 890864 183000) 0 nil]
([nil nil ((1 . 9)) nil (26019 5827 890863 347000) 0 nil])
([nil nil ((#("def boar" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 8 (face font-lock-function-name-face fontified t)) . 1)) nil (26019 5827 890863 173000) 0 nil])
([nil nil ((1 . 7)) nil (26019 5827 890862 787000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -6) (undo-tree-id33 . -1) 7) nil (26019 5827 890862 514000) 0 nil])
([nil nil ((#("cclas" 0 5 (fontified t)) . 1)) nil (26019 5827 890861 923000) 0 nil])
([nil nil ((1 . 13)) nil (26019 5827 890861 709000) 0 nil])
([nil nil ((1 . 2)) nil (26019 5827 890861 458000) 0 nil])
([nil nil ((1 . 22)) nil (26019 5827 890861 263000) 0 nil])
([nil nil ((22 . 33)) nil (26019 5827 890861 42000) 0 nil])
([nil nil ((33 . 34)) nil (26019 5827 890860 825000) 0 nil])
([nil nil ((34 . 36)) nil (26019 5827 890860 582000) 0 nil])
([nil nil ((36 . 47)) nil (26019 5827 890860 379000) 0 nil])
([nil nil ((#("s" 0 1 (face font-lock-type-face fontified t)) . -46) (undo-tree-id32 . -1) 47) nil (26019 5827 890860 135000) 0 nil])
([nil nil ((59 . 64)) nil (26019 5827 890859 694000) 0 nil])
([nil nil ((64 . 71)) nil (26019 5827 890859 476000) 0 nil])
([nil nil ((71 . 76)) nil (26019 5827 890859 89000) 0 nil])
([nil nil ((76 . 85)) nil (26019 5827 890858 970000) 0 nil])
([nil nil ((85 . 90)) nil (26019 5827 890858 766000) 0 nil])
([nil nil ((90 . 98)) nil (26019 5827 890858 658000) 0 nil])
([nil nil ((35 . 36)) nil (26019 5827 890858 389000) 0 nil])
([nil nil ((35 . 36)) nil (26019 5827 890858 186000) 0 nil])
([nil nil ((36 . 41)) nil (26019 5827 890858 40000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -36) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (#("r" 0 1 (fontified t)) . -37) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (#("o" 0 1 (fontified t)) . -38) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (#("m" 0 1 (face font-lock-keyword-face fontified t)) . -39) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (#(" " 0 1 (fontified t)) . -40) (undo-tree-id30 . -1) (undo-tree-id31 . -1) 41) nil (26019 5827 890857 349000) 0 nil])
([nil nil ((36 . 51)) nil (26019 5827 890851 42000) 0 nil])
([nil nil ((51 . 52)) nil (26019 5827 890850 823000) 0 nil])
([nil nil ((52 . 73)) nil (26019 5827 890850 307000) 0 nil])
([nil nil ((73 . 77)) nil (26019 5827 890849 714000) 0 nil])
([nil nil ((77 . 82)) nil (26019 5827 890849 448000) 0 nil])
([nil nil ((#("5" 0 1 (fontified t)) . -81) (undo-tree-id0 . -1) (undo-tree-id1 . -1) 82) nil (26019 5827 890848 835000) 0 nil])
([nil nil ((81 . 82)) nil (26019 5827 890838 215000) 0 nil])
([nil nil ((146 . 147) 82) nil (26019 5827 890834 841000) 0 nil])
([nil nil ((147 . 152) (t 26019 5827 893598 654000)) nil (26019 6004 168907 704000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -148) (undo-tree-id70 . -4) 152) nil (26019 6004 168907 95000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -147) (undo-tree-id69 . -1) 148) nil (26019 6004 168906 643000) 0 nil])
([nil nil ((147 . 152)) nil (26019 6004 168906 132000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -148) (undo-tree-id68 . -4) 152) nil (26019 6004 168905 881000) 0 nil])
([nil nil ((148 . 166)) nil (26019 6004 168904 223000) 0 nil])
([nil nil ((#("-" 0 1 (face font-lock-operator-face fontified t)) . -164) (undo-tree-id66 . -1) (#(">" 0 1 (face font-lock-operator-face fontified t)) . -165) (undo-tree-id67 . -1) 166) nil (26019 6004 168903 876000) 0 nil])
([nil nil ((164 . 173)) nil (26019 6004 168903 357000) 0 nil])
([nil nil ((173 . 180)) nil (26019 6004 168902 962000) 0 nil])
([nil nil ((180 . 185)) nil (26019 6004 168902 728000) 0 nil])
([nil nil ((185 . 198)) nil (26019 6004 168902 583000) 0 nil])
([nil nil ((180 . 185)) nil (26019 6004 168902 453000) 0 nil])
([nil nil ((185 . 196)) nil (26019 6004 168902 171000) 0 nil])
([nil nil ((196 . 201)) nil (26019 6004 168901 959000) 0 nil])
([nil nil ((#("    boards = []
    
    return boards" 0 4 (fontified t) 4 10 (face font-lock-variable-name-face fontified t) 10 11 (fontified t) 11 12 (face font-lock-operator-face fontified t) 12 20 (fontified t) 20 21 (fontified t) 21 25 (fontified t) 25 31 (face font-lock-keyword-face fontified t) 31 38 (fontified t)) . 181) (undo-tree-id65 . -38) 219) nil (26019 6004 168901 689000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -180) (undo-tree-id63 . -1) (undo-tree-id64 . -1) 181) nil (26019 6004 168901 225000) 0 nil])
([nil nil ((148 . 152) 180) nil (26019 6004 168900 614000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -148) 184) nil (26019 6004 168900 288000) 0 nil])
([nil nil ((83 . 84)) nil (26019 6004 168899 984000) 0 nil])
([nil nil ((83 . 84)) nil (26019 6004 168899 852000) 0 nil])
([nil nil ((84 . 93)) nil (26019 6004 168899 557000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t)) . -91) (undo-tree-id61 . -1) (#("=" 0 1 (face font-lock-operator-face fontified t)) . -92) (undo-tree-id62 . -1) 93) nil (26019 6004 168899 272000) 0 nil])
([nil nil ((91 . 95)) nil (26019 6004 168898 767000) 0 nil])
([nil nil ((95 . 96)) nil (26019 6004 168898 545000) 0 nil])
([nil nil ((#("h" 0 1 (fontified t)) . -95) (undo-tree-id60 . -1) 96) nil (26019 6004 168898 266000) 0 nil])
([nil nil ((95 . 101)) nil (26019 6004 168897 833000) 0 nil])
([nil nil ((#("[" 0 1 (face font-lock-string-face fontified t)) . -99) (undo-tree-id58 . -1) (#("s" 0 1 (face font-lock-string-face fontified t)) . -100) (undo-tree-id59 . -1) 101) nil (26019 6004 168897 446000) 0 nil])
([nil nil ((99 . 104)) nil (26019 6004 168896 868000) 0 nil])
([nil nil ((104 . 114)) nil (26019 6004 168896 692000) 0 nil])
([nil nil ((#("y" 0 1 (face font-lock-string-face fontified t)) . -112) (undo-tree-id56 . -1) (#("t" 0 1 (face font-lock-string-face fontified t)) . -113) (undo-tree-id57 . -1) 114) nil (26019 6004 168896 409000) 0 nil])
([nil nil ((112 . 122)) nil (26019 6004 168895 690000) 0 nil])
([nil nil ((188 . 192) 220) nil (26019 6004 168895 470000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -188) 224) nil (26019 6004 168895 141000) 0 nil])
([nil nil ((220 . 225)) nil (26019 6004 168894 971000) 0 nil])
([nil nil ((225 . 243)) nil (26019 6004 168894 707000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t)) . -239) (undo-tree-id52 . -1) (#("a" 0 1 (fontified t)) . -240) (undo-tree-id53 . -1) (#("i" 0 1 (fontified t)) . -241) (undo-tree-id54 . -1) (#("t" 0 1 (fontified t)) . -242) (undo-tree-id55 . -1) 243) nil (26019 6004 168894 475000) 0 nil])
([nil nil ((239 . 240)) nil (26019 6004 168893 492000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . -239) (undo-tree-id51 . -1) 240) nil (26019 6004 168893 266000) 0 nil])
([nil nil ((239 . 240)) nil (26019 6004 168892 955000) 0 nil])
([nil nil ((237 . 250) (#("Bea" 0 3 (fontified t)) . -237) (undo-tree-id50 . -3) 240) nil (26019 6004 168892 695000) 0 nil])
([nil nil ((250 . 261)) nil (26019 6004 168892 216000) 0 nil])
([nil nil ((261 . 265)) nil (26019 6004 168891 894000) 0 nil])
([nil nil ((#("/" 0 1 (face font-lock-operator-face fontified t)) . -259) (undo-tree-id44 . -1) (#("g" 0 1 (fontified t)) . -260) (undo-tree-id45 . -1) (#("e" 0 1 (fontified t)) . -261) (undo-tree-id46 . -1) (#("t" 0 1 (fontified t)) . -262) (undo-tree-id47 . -1) (#("(" 0 1 (fontified t)) . -263) (undo-tree-id48 . -1) (#("\"" 0 1 (face font-lock-string-face fontified t)) . -264) (undo-tree-id49 . -1) 265) nil (26019 6004 168891 496000) 0 nil])
([nil nil ((259 . 267)) nil (26019 6004 168888 878000) 0 nil])
([nil nil ((#("}" 0 1 (face font-lock-string-face fontified t)) . -266) (undo-tree-id43 . -1) 267) nil (26019 6004 168888 714000) 0 nil])
([nil nil ((266 . 276)) nil (26019 6004 168888 244000) 0 nil])
([nil nil ((#("/" 0 1 (face font-lock-operator-face fontified t)) . -275) (undo-tree-id42 . -1) 276) nil (26019 6004 168887 975000) 0 nil])
([nil nil ((275 . 276)) nil (26019 6004 168887 122000) 0 nil])
([nil nil ((#("|" 0 1 (face font-lock-operator-face fontified t)) . -275) (undo-tree-id41 . -1) 276) nil (26019 6004 168886 764000) 0 nil])
([nil nil ((275 . 286)) nil (26019 6004 168886 187000) 0 nil])
([nil nil ((286 . 291)) nil (26019 6004 168886 46000) 0 nil])
([nil nil ((#("
" 0 1 (face font-lock-string-face fontified t)) . -286) (undo-tree-id36 . -1) (#(" " 0 1 (face font-lock-string-face fontified t)) . -287) (undo-tree-id37 . -1) (#(" " 0 1 (face font-lock-string-face fontified t)) . -288) (undo-tree-id38 . -1) (#(" " 0 1 (face font-lock-string-face fontified t)) . -289) (undo-tree-id39 . -1) (#(" " 0 1 (face font-lock-string-face fontified t)) . -290) (undo-tree-id40 . -1) 291) nil (26019 6004 168885 555000) 0 nil])
([nil nil ((286 . 307)) nil (26019 6004 168883 865000) 0 nil])
([nil nil ((307 . 317)) nil (26019 6004 168883 639000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . -316) (undo-tree-id34 . -1) (undo-tree-id35 . -1) 317) nil (26019 6004 168883 270000) 0 nil])
([nil nil ((316 . 317)) nil (26019 6004 168875 417000) 0 nil])
([nil nil ((317 . 318)) nil (26019 6004 168871 639000) 0 nil])
([nil nil ((317 . 318) (t 26019 6004 192470 734000)) nil (26019 6005 667781 420000) 0 nil])
([nil nil ((#("g" 0 1 (fontified t)) . -317) (undo-tree-id71 . -1) (undo-tree-id72 . -1) 318) nil (26019 6005 667778 522000) 0 nil])
([nil nil ((124 . 332) (#("@dataclass
class Board:
    id: str
    name: str
    url: str

def get_boards() -> list[Board]:
    downloads = BeautifulSoup(requests.get(f'{BASE_URL}/downloads')).find_all(class_=\"download\"" 0 10 (face font-lock-type-face fontified t) 10 11 (fontified t) 11 16 (face font-lock-keyword-face fontified t) 16 17 (fontified t) 17 22 (face font-lock-type-face fontified t) 22 24 (fontified t) 24 28 (fontified t) 28 30 (face font-lock-builtin-face fontified t) 30 32 (fontified t) 32 35 (face font-lock-builtin-face fontified t) 35 36 (fontified t) 36 46 (fontified t) 46 49 (face font-lock-builtin-face fontified t) 49 50 (fontified t) 50 59 (fontified t) 59 62 (face font-lock-builtin-face fontified t) 62 63 (fontified t) 63 64 (fontified t) 64 67 (face font-lock-keyword-face fontified t) 67 68 (fontified t) 68 78 (face font-lock-function-name-face fontified t) 78 81 (fontified t) 81 82 (face font-lock-operator-face fontified t) 82 83 (face font-lock-operator-face fontified t) 83 84 (fontified t) 84 88 (face font-lock-builtin-face fontified t) 88 97 (fontified t) 97 101 (fontified t) 101 110 (face font-lock-variable-name-face fontified t) 110 111 (fontified t) 111 112 (face font-lock-operator-face fontified t) 112 113 (fontified t) 113 141 (fontified t) 141 142 (face font-lock-string-face fontified t) 142 152 (face nil fontified t) 152 163 (face font-lock-string-face fontified t) 163 175 (fontified t) 175 181 (fontified t) 181 182 (face font-lock-operator-face fontified t) 182 192 (face font-lock-string-face fontified t)) . 124) (undo-tree-id65 . -96) (undo-tree-id66 . -63) (undo-tree-id67 . -62) (undo-tree-id68 . -87) (undo-tree-id69 . -162) (undo-tree-id70 . -162) (t 26019 6005 668461 291000)) nil (26019 6226 239963 65000) 0 nil])
([nil nil ((334 . 338) (t 26019 6010 728428 918000)) nil (26019 6226 239961 513000) 0 nil])
([nil nil ((338 . 357)) nil (26019 6226 239961 316000) 0 nil])
([nil nil ((357 . 366)) nil (26019 6226 239961 165000) 0 nil])
([nil nil ((#("    for d in downloads:" 0 4 (fontified t) 4 7 (face font-lock-keyword-face fontified t) 7 10 (fontified t) 10 12 (face font-lock-keyword-face fontified t) 12 23 (fontified t)) . 334) (undo-tree-id36 . -4) (undo-tree-id37 . -4) (undo-tree-id38 . -4) (undo-tree-id39 . -4) (undo-tree-id40 . -4) (undo-tree-id41 . -5) (undo-tree-id42 . -6) (undo-tree-id43 . -7) (undo-tree-id44 . -8) (undo-tree-id45 . -9) (undo-tree-id46 . -10) (undo-tree-id47 . -11) (undo-tree-id48 . -12) (undo-tree-id49 . -13) (undo-tree-id50 . -14) (undo-tree-id51 . -15) (undo-tree-id52 . -16) (undo-tree-id53 . -17) (undo-tree-id54 . -18) (undo-tree-id55 . -19) (undo-tree-id56 . -20) (undo-tree-id57 . -21) (undo-tree-id58 . -22) (undo-tree-id59 . -4) (undo-tree-id60 . -23) (undo-tree-id61 . -4) (undo-tree-id62 . -4) (undo-tree-id63 . -4) (undo-tree-id64 . -23)) nil (26019 6226 239960 748000) 0 nil])
([nil nil ((334 . 338)) nil (26019 6226 239945 703000) 0 nil])
([nil nil ((338 . 353)) nil (26019 6226 239945 562000) 0 nil])
([nil nil ((353 . 359)) nil (26019 6226 239945 204000) 0 nil])
([nil nil ((#("'" 0 1 (face font-lock-string-face fontified t)) . -358) (undo-tree-id34 . -1) (undo-tree-id35 . -1) 359) nil (26019 6226 239944 912000) 0 nil])
([nil nil ((358 . 368)) nil (26019 6226 239944 186000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -367) (undo-tree-id32 . -1) (undo-tree-id33 . -1) 368) nil (26019 6226 239943 997000) 0 nil])
([nil nil ((367 . 369)) nil (26019 6226 239942 897000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -368) (undo-tree-id30 . -1) (undo-tree-id31 . -1) 369) nil (26019 6226 239942 710000) 0 nil])
([nil nil ((368 . 372)) nil (26019 6226 239942 157000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -369) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (#("d" 0 1 (fontified t)) . -370) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (#("." 0 1 (fontified t)) . -371) (undo-tree-id28 . -1) (undo-tree-id29 . -1) 372) nil (26019 6226 239941 623000) 0 nil])
([nil nil ((369 . 370)) nil (26019 6226 239937 682000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t)) . -368) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (#("m" 0 1 (fontified t)) . -369) (undo-tree-id16 . -1) (undo-tree-id17 . -1) 370) nil (26019 6226 239937 297000) 0 nil])
([nil nil ((368 . 388)) nil (26019 6226 239914 950000) 0 nil])
([nil nil ((#("-" 0 1 (face font-lock-operator-face fontified t)) . -387) (undo-tree-id4 . -1) (undo-tree-id5 . -1) 388) nil (26019 6226 239914 689000) 0 nil])
([nil nil ((387 . 388)) nil (26019 6226 239913 803000) 0 nil])
([nil nil ((#("0" 0 1 (fontified t)) . -387) (undo-tree-id2 . -1) (undo-tree-id3 . -1) 388) nil (26019 6226 239913 507000) 0 nil])
([nil nil ((387 . 408)) nil (26019 6226 239912 322000) 0 nil])
([nil nil ((408 . 413)) nil (26019 6226 239912 36000) 0 nil])
([nil nil ((413 . 434)) nil (26019 6226 239911 799000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t)) . -433) (undo-tree-id0 . -1) (undo-tree-id1 . -1) 434) nil (26019 6226 239911 437000) 0 nil])
([nil nil ((433 . 434)) nil (26019 6226 239900 662000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . 435) (#("        " 0 8 (fontified nil)) . 435) (443 . 444) 434) nil (26019 6226 239896 832000) 0 nil])
([nil nil ((346 . 455) (#("Board(d.get(\"data-id\"), d.get(\"data-name\"), d.find('a').get('href')) for d in downloads" 0 12 (fontified t) 12 21 (face font-lock-string-face fontified t) 21 30 (fontified t) 30 41 (face font-lock-string-face fontified t) 41 51 (fontified t) 51 54 (face font-lock-string-face fontified t) 54 60 (fontified t) 60 66 (face font-lock-string-face fontified t) 66 69 (fontified t) 69 72 (face font-lock-keyword-face fontified t) 72 75 (fontified t) 75 77 (face font-lock-keyword-face fontified t) 77 87 (fontified t)) . 346) (t 26019 6226 245083 418000)) nil (26019 6274 52154 188000) 0 nil])
([nil nil ((399 . 410) (t 26019 6226 729206 732000)) nil (26019 6274 52151 451000) 0 nil])
([nil nil ((#(" beautifulsoup4" 0 15 (fontified t)) . 67) (undo-tree-id0 . -15) (t 26019 6274 58879 559000)) nil (26019 6324 675608 377000) 0 nil])
([nil nil ((67 . 81)) nil (26019 6324 675597 616000) 0 nil])
([nil nil ((289 . 294) (t 26019 6324 678838 52000)) nil (26019 6386 347862 682000) 0 nil])
([nil nil ((294 . 315) (t 26019 6386 349851 601000)) nil (26019 6522 778940 524000) 0 nil])
([nil nil ((315 . 318)) nil (26019 6522 778937 333000) 0 nil])
([nil nil ((252 . 360) (#("requests.get(f\"{BASE_URL}/downloads\").text, features=\"html.parser\").find_all(
        class_=\"download\"
    " 0 14 (fontified t) 14 15 (face font-lock-string-face fontified t) 15 25 (face nil fontified t) 25 36 (face font-lock-string-face fontified t) 36 52 (fontified t) 52 53 (face font-lock-operator-face fontified t) 53 66 (face font-lock-string-face fontified t) 66 78 (fontified t) 78 92 (fontified t) 92 93 (face font-lock-operator-face fontified t) 93 103 (face font-lock-string-face fontified t) 103 108 (fontified t)) . 252) (undo-tree-id16 . -103) (undo-tree-id17 . -35) (t 26019 6522 780141 537000)) nil (26019 6652 204612 494000) 0 nil])
([nil nil ((188 . 192) (#("    " 0 4 (fontified nil)) . 187) (undo-tree-id15 . -4) (186 . 192) (t 26019 6523 224206 720000)) nil (26019 6652 204611 390000) 0 nil])
([nil nil ((192 . 196)) nil (26019 6652 204610 754000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t)) . -192) (undo-tree-id11 . -1) (#("e" 0 1 (fontified t)) . -193) (undo-tree-id12 . -1) (#("g" 0 1 (fontified t)) . -194) (undo-tree-id13 . -1) (#(" " 0 1 (fontified t)) . -195) (undo-tree-id14 . -1) 196) nil (26019 6652 204610 43000) 0 nil])
([nil nil ((192 . 204)) nil (26019 6652 204608 823000) 0 nil])
([nil nil ((#("d" 0 1 (face font-lock-type-face fontified t)) . -203) (undo-tree-id10 . -1) 204) nil (26019 6652 204608 298000) 0 nil])
([nil nil ((203 . 205)) nil (26019 6652 204607 608000) 0 nil])
([nil nil ((205 . 210)) nil (26019 6652 204607 350000) 0 nil])
([nil nil ((210 . 213)) nil (26019 6652 204606 955000) 0 nil])
([nil nil ((#("g" 0 1 (fontified t)) . -210) (undo-tree-id7 . -1) (#("e" 0 1 (fontified t)) . -211) (undo-tree-id8 . -1) (#("t" 0 1 (fontified t)) . -212) (undo-tree-id9 . -1) 213) nil (26019 6652 204606 398000) 0 nil])
([nil nil ((210 . 217)) nil (26019 6652 204603 486000) 0 nil])
([nil nil ((210 . 213)) nil (26019 6652 204603 21000) 0 nil])
([nil nil ((213 . 214)) nil (26019 6652 204602 765000) 0 nil])
([nil nil ((221 . 241)) nil (26019 6652 204602 614000) 0 nil])
([nil nil ((241 . 250)) nil (26019 6652 204602 448000) 0 nil])
([nil nil ((#("def get_boards() -> list[Board]:" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 14 (face font-lock-function-name-face fontified t) 14 17 (fontified t) 17 18 (face font-lock-operator-face fontified t) 18 19 (face font-lock-operator-face fontified t) 19 20 (fontified t) 20 24 (face font-lock-builtin-face fontified t) 24 32 (fontified t)) . 253)) nil (26019 6652 204601 972000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -250) (undo-tree-id4 . -1) (#("
" 0 1 (fontified t)) . -251) (undo-tree-id5 . -1) (#("
" 0 1 (fontified t)) . -252) (undo-tree-id6 . -1) 253) nil (26019 6652 204601 479000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -246) (undo-tree-id3 . -4) 250) nil (26019 6652 204600 230000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -242) (undo-tree-id2 . -4) 246) nil (26019 6652 204599 446000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -241) (undo-tree-id1 . -1) 242) nil (26019 6652 204598 927000) 0 nil])
([nil nil ((242 . 250) (#("    " 0 4 (fontified t)) . 242) 272) nil (26019 6652 204597 834000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -246) 276) nil (26019 6652 204597 493000) 0 nil])
([nil nil ((242 . 250) (#("    " 0 4 (fontified t)) . 242) 272) nil (26019 6652 204597 173000) 0 nil])
([nil nil ((285 . 289) 311) nil (26019 6652 204596 953000) 0 nil])
([nil nil ((356 . 364) (#("    " 0 4 (fontified t)) . 356) 389) nil (26019 6652 204596 620000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -360) 393) nil (26019 6652 204596 264000) 0 nil])
([nil nil ((356 . 364) (#("    " 0 4 (fontified t)) . 356) 389) nil (26019 6652 204595 630000) 0 nil])
([nil nil ((394 . 402) (#("    " 0 4 (fontified t)) . 394) (undo-tree-id0 . -4) 406) nil (26019 6652 204595 36000) 0 nil])
([nil nil ((419 . 423) 427) nil (26019 6652 204581 851000) 0 nil])
([nil nil ((511 . 515) 523) nil (26019 6652 204581 393000) 0 nil])
([nil nil ((534 . 542) (#("    " 0 4 (fontified t)) . 534) 539) nil (26019 6652 204577 782000) 0 nil])
([nil nil ((232 . 531) (#("'Board']:
        downloads = BeautifulSoup(
            requests.get(f\"{BASE_URL}/downloads\").text, features=\"html.parser\"
        ).find_all(class_=\"download\")
        return [
            Board(d.get(\"data-id\"), d.get(\"data-name\"), BASE_URL + d.find(\"a\").get(\"href\")" 0 7 (face font-lock-string-face fontified t) 7 9 (fontified t) 9 10 (fontified t) 10 18 (fontified t) 18 27 (face font-lock-variable-name-face fontified t) 27 28 (fontified t) 28 29 (face font-lock-operator-face fontified t) 29 44 (fontified t) 44 45 (fontified t) 45 71 (fontified t) 71 72 (face font-lock-string-face fontified t) 72 82 (face nil fontified t) 82 93 (face font-lock-string-face fontified t) 93 109 (fontified t) 109 110 (face font-lock-operator-face fontified t) 110 123 (face font-lock-string-face fontified t) 123 124 (fontified t) 124 132 (fontified t) 132 149 (fontified t) 149 150 (face font-lock-operator-face fontified t) 150 160 (face font-lock-string-face fontified t) 160 161 (fontified t) 161 162 (fontified t) 162 170 (fontified t) 170 176 (face font-lock-keyword-face fontified t) 176 178 (fontified t) 178 179 (fontified t) 179 203 (fontified t) 203 212 (face font-lock-string-face fontified t) 212 221 (fontified t) 221 232 (face font-lock-string-face fontified t) 232 244 (fontified t) 244 245 (face font-lock-operator-face fontified t) 245 246 (fontified t) 246 253 (fontified t) 253 256 (face font-lock-string-face fontified t) 256 262 (fontified t) 262 268 (face font-lock-string-face fontified t) 268 269 (fontified t)) . 232) (undo-tree-id14 . -162) (undo-tree-id15 . -162) (undo-tree-id16 . -248) (undo-tree-id17 . -44) (undo-tree-id18 . -44) (t 26019 6652 209649 719000)) nil (26019 6718 591276 266000) 0 nil])
([nil nil ((574 . 579) (t 26019 6652 677754 248000)) nil (26019 6718 591275 181000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -575) (undo-tree-id9 . -4) (undo-tree-id10 . -4) (undo-tree-id11 . -4) (undo-tree-id12 . -4) (undo-tree-id13 . -4) 579) nil (26019 6718 591274 795000) 0 nil])
([nil nil ((575 . 579)) nil (26019 6718 591273 513000) 0 nil])
([nil nil ((579 . 585)) nil (26019 6718 591273 239000) 0 nil])
([nil nil ((#("t" 0 1 (face font-lock-function-name-face fontified t)) . -584) (undo-tree-id7 . -1) (undo-tree-id8 . -1) 585) nil (26019 6718 591272 825000) 0 nil])
([nil nil ((584 . 587)) nil (26019 6718 591272 69000) 0 nil])
([nil nil ((#("get_" 0 4 (face font-lock-function-name-face fontified t)) . 583) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -2) (undo-tree-id4 . -3) (undo-tree-id5 . -4) (undo-tree-id6 . -4)) nil (26019 6718 591271 707000) 0 nil])
([nil nil ((583 . 602)) nil (26019 6718 591259 129000) 0 nil])
([nil nil ((602 . 607)) nil (26019 6718 591258 913000) 0 nil])
([nil nil ((607 . 616)) nil (26019 6718 591258 715000) 0 nil])
([nil nil ((616 . 625)) nil (26019 6718 591258 369000) 0 nil])
([nil nil ((625 . 626)) nil (26019 6718 591255 169000) 0 nil])
([nil nil ((#("list" 0 4 (face font-lock-builtin-face fontified t)) . 227) (t 26019 6718 595732 900000)) nil (26019 6827 93725 990000) 0 nil])
([nil nil ((227 . 231)) nil (26019 6827 93725 817000) 0 nil])
([nil nil ((232 . 237)) nil (26019 6827 93725 691000) 0 nil])
([nil nil ((#("[" 0 1 (fontified t)) . -414) (undo-tree-id23 . -1) 415) nil (26019 6827 93725 406000) 0 nil])
([nil nil ((414 . 415)) nil (26019 6827 93725 55000) 0 nil])
([nil nil ((#("]" 0 1 (fontified t)) . -577) (undo-tree-id22 . -1) 578) nil (26019 6827 93724 695000) 0 nil])
([nil nil ((577 . 578)) nil (26019 6827 93724 312000) 0 nil])
([nil nil ((415 . 428)) nil (26019 6827 93724 189000) 0 nil])
([nil nil ((428 . 431)) nil (26019 6827 93724 62000) 0 nil])
([nil nil ((431 . 444)) nil (26019 6827 93723 901000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -443) (undo-tree-id20 . -1) (undo-tree-id21 . -1) 444) nil (26019 6827 93723 514000) 0 nil])
([nil nil ((443 . 446)) nil (26019 6827 93721 935000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 445) (undo-tree-id19 . -1) 609) nil (26019 6827 93719 430000) 0 nil])
([nil nil ((#("
           " 0 1 (fontified t) 1 12 (fontified t)) . 445) (t 26019 6827 99011 944000)) nil (26019 21573 628001 707000) 0 nil])
([nil nil ((630 . 639) (t 26019 6827 535037 148000)) nil (26019 21573 628001 422000) 0 nil])
([nil nil ((639 . 652)) nil (26019 21573 628001 251000) 0 nil])
([nil nil ((615 . 619)) nil (26019 21573 628001 5000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -639) (undo-tree-id12 . -4) (undo-tree-id13 . -4) (undo-tree-id14 . -4) (undo-tree-id15 . -4) (undo-tree-id16 . -4) (undo-tree-id17 . -4) 643) nil (26019 21573 628000 666000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -635) (undo-tree-id4 . -4) (undo-tree-id5 . -4) (undo-tree-id6 . -4) (undo-tree-id7 . -4) (undo-tree-id8 . -4) (undo-tree-id9 . -4) (undo-tree-id10 . -4) (undo-tree-id11 . -4) 639) nil (26019 21573 627998 712000) 0 nil])
([nil nil ((635 . 643)) nil (26019 21573 627996 743000) 0 nil])
([nil nil ((643 . 664)) nil (26019 21573 627996 480000) 0 nil])
([nil nil ((664 . 665)) nil (26019 21573 627996 177000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t)) . -664) (undo-tree-id2 . -1) (undo-tree-id3 . -1) 665) nil (26019 21573 627995 824000) 0 nil])
([nil nil ((677 . 678)) nil (26019 21573 627994 888000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -677) (undo-tree-id0 . -1) (undo-tree-id1 . -1) 678) nil (26019 21573 627994 363000) 0 nil])
([nil nil ((677 . 698)) nil (26019 21573 627983 668000) 0 nil])
([nil nil ((698 . 711)) nil (26019 21573 627983 524000) 0 nil])
([nil nil ((711 . 720)) nil (26019 21573 627983 245000) 0 nil])
([nil nil ((720 . 741)) nil (26019 21573 627983 120000) 0 nil])
([nil nil ((741 . 744)) nil (26019 21573 627982 991000) 0 nil])
([nil nil ((744 . 753)) nil (26019 21573 627982 717000) 0 nil])
([nil nil ((753 . 766)) nil (26019 21573 627982 511000) 0 nil])
([nil nil ((766 . 775)) nil (26019 21573 627982 165000) 0 nil])
([nil nil ((775 . 787)) nil (26019 21573 627978 987000) 0 nil])
([nil nil ((745 . 746) (t 26019 21573 632148 549000)) nil (26019 21831 931368 641000) 0 nil])
([nil nil ((#("get" 0 3 (face font-lock-function-name-face fontified t)) . 214) (t 26019 21574 112149 152000)) nil (26019 21831 931368 253000) 0 nil])
([nil nil ((214 . 215)) nil (26019 21831 931367 882000) 0 nil])
([nil nil ((#("a" 0 1 (face font-lock-function-name-face fontified t)) . -214) (undo-tree-id1 . -1) 215) nil (26019 21831 931367 306000) 0 nil])
([nil nil ((#("_" 0 1 (face font-lock-function-name-face fontified t)) . -214) (undo-tree-id0 . -1) 215) nil (26019 21831 931364 72000) 0 nil])
([nil nil ((682 . 687) (t 26019 21831 932047 399000)) nil (26019 21908 901865 881000) 0 nil])
([nil nil ((746 . 754) (t 26019 21908 931737 176000)) nil (26019 22588 90971 871000) 0 nil])
([nil nil ((754 . 757)) nil (26019 22588 90971 683000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -754) (undo-tree-id58 . -1) (#("o" 0 1 (fontified t)) . -755) (undo-tree-id59 . -1) (#("t" 0 1 (fontified t)) . -756) (undo-tree-id60 . -1) 757) nil (26019 22588 90971 460000) 0 nil])
([nil nil ((754 . 764)) nil (26019 22588 90970 651000) 0 nil])
([nil nil ((764 . 765)) nil (26019 22588 90970 427000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . -764) (undo-tree-id57 . -1) 765) nil (26019 22588 90970 99000) 0 nil])
([nil nil ((764 . 780)) nil (26019 22588 90969 196000) 0 nil])
([nil nil ((#("'" 0 1 (face font-lock-string-face fontified t)) . -778) (undo-tree-id55 . -1) (#("o" 0 1 (face font-lock-string-face fontified t)) . -779) (undo-tree-id56 . -1) 780) nil (26019 22588 90968 599000) 0 nil])
([nil nil ((778 . 784)) nil (26019 22588 90568 682000) 0 nil])
([nil nil ((#("option" 0 6 (fontified t)) . 778)) nil (26019 22588 90568 535000) 0 nil])
([nil nil ((778 . 785)) nil (26019 22588 90568 394000) 0 nil])
([nil nil ((#("=" 0 1 (face font-lock-operator-face fontified t)) . -783) (undo-tree-id53 . -1) (#("\"" 0 1 (face font-lock-string-face fontified t)) . -784) (undo-tree-id54 . -1) 785) nil (26019 22588 90568 206000) 0 nil])
([nil nil ((783 . 784)) nil (26019 22588 90567 514000) 0 nil])
([nil nil ((#("-" 0 1 (face font-lock-operator-face fontified t)) . -783) (undo-tree-id52 . -1) 784) nil (26019 22588 90567 246000) 0 nil])
([nil nil ((783 . 794)) nil (26019 22588 90566 734000) 0 nil])
([nil nil ((794 . 795)) nil (26019 22588 90566 542000) 0 nil])
([nil nil ((#("class_='section')" 0 6 (fontified t) 6 7 (face font-lock-operator-face fontified t) 7 16 (face font-lock-string-face fontified t) 16 17 (fontified t)) . 778) (undo-tree-id43 . -12) (undo-tree-id44 . -12) (undo-tree-id45 . -12) (undo-tree-id46 . -12) (undo-tree-id47 . -12) (undo-tree-id48 . -12) (undo-tree-id49 . -8) (undo-tree-id50 . -5) (undo-tree-id51 . -17)) nil (26019 22588 90566 98000) 0 nil])
([nil nil ((778 . 786)) nil (26019 22588 90564 399000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t)) . -784) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (#("i" 0 1 (fontified t)) . -785) (undo-tree-id41 . -1) (undo-tree-id42 . -1) 786) nil (26019 22588 90563 700000) 0 nil])
([nil nil ((784 . 786)) nil (26019 22588 90561 728000) 0 nil])
([nil nil ((#("{" 0 1 (fontified t)) . -785) (undo-tree-id35 . -1) (undo-tree-id36 . -1) 786) nil (26019 22588 90561 556000) 0 nil])
([nil nil ((785 . 787)) nil (26019 22588 90560 970000) 0 nil])
([nil nil ((785 . 789)) nil (26019 22588 90560 788000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t)) . -785) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (#("a" 0 1 (fontified t)) . -786) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (#("t" 0 1 (fontified t)) . -787) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (#("a" 0 1 (fontified t)) . -788) (undo-tree-id33 . -1) (undo-tree-id34 . -1) 789) nil (26019 22588 90560 232000) 0 nil])
([nil nil ((785 . 806)) nil (26019 22588 90555 296000) 0 nil])
([nil nil ((806 . 807)) nil (26019 22588 90555 140000) 0 nil])
([nil nil ((778 . 787)) nil (26019 22588 90555 5000) 0 nil])
([nil nil ((#("'" 0 1 (face font-lock-string-face fontified t)) . -785) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (#(" " 0 1 (fontified t)) . -786) (undo-tree-id13 . -1) (undo-tree-id14 . -1) 787) nil (26019 22588 90554 771000) 0 nil])
([nil nil ((785 . 788)) nil (26019 22588 90553 231000) 0 nil])
([nil nil ((#("page" 0 4 (fontified t)) . 836) (undo-tree-id8 . -4)) nil (26019 22588 90552 993000) 0 nil])
([nil nil ((836 . 843)) nil (26019 22588 90552 604000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t)) . -841) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (#("n" 0 1 (fontified t)) . -842) (undo-tree-id6 . -1) (undo-tree-id7 . -1) 843) nil (26019 22588 90552 213000) 0 nil])
([nil nil ((841 . 843)) nil (26019 22588 90542 597000) 0 nil])
([nil nil ((843 . 846)) nil (26019 22588 90538 862000) 0 nil])
([nil nil ((746 . 818) (#("        options = page.find_all('option', attrs={'data-locale': 'en-us'" 0 8 (fontified t) 8 15 (face font-lock-variable-name-face fontified t) 15 16 (fontified t) 16 17 (face font-lock-operator-face fontified t) 17 32 (fontified t) 32 40 (face font-lock-string-face fontified t) 40 42 (fontified t) 42 47 (fontified t) 47 48 (face font-lock-operator-face fontified t) 48 49 (fontified t) 49 50 (face font-lock-string-face fontified t) 50 54 (face font-lock-string-face fontified t) 54 55 (face font-lock-string-face fontified t) 55 61 (face font-lock-string-face fontified t) 61 62 (face font-lock-string-face fontified t) 62 64 (fontified t) 64 65 (face font-lock-string-face fontified t) 65 67 (face font-lock-string-face fontified t) 67 68 (face font-lock-string-face fontified t) 68 70 (face font-lock-string-face fontified t) 70 71 (face font-lock-string-face fontified t)) . 746) (undo-tree-id0 . -32) (undo-tree-id1 . -32) (undo-tree-id2 . -32) (undo-tree-id3 . -32) (undo-tree-id4 . -32) (undo-tree-id5 . -32) (undo-tree-id6 . -32) (undo-tree-id7 . -48) (undo-tree-id8 . -48) (undo-tree-id9 . -48) (undo-tree-id10 . -49) (undo-tree-id11 . -49) (undo-tree-id12 . -49) (undo-tree-id13 . -49) (undo-tree-id14 . -49) (undo-tree-id15 . -49) (undo-tree-id16 . -49) (undo-tree-id17 . -49) (undo-tree-id18 . -39) (undo-tree-id19 . -39) (undo-tree-id20 . -39) (undo-tree-id21 . -57) (undo-tree-id22 . -57) (undo-tree-id23 . -57) (undo-tree-id24 . -57) (undo-tree-id25 . -57) (undo-tree-id26 . -57) (undo-tree-id27 . -55) (undo-tree-id28 . -50) (undo-tree-id29 . -42) (undo-tree-id30 . -42) (undo-tree-id31 . -42) (undo-tree-id32 . -42) (undo-tree-id33 . -42) (undo-tree-id34 . -42) (undo-tree-id35 . -42) (undo-tree-id36 . -42) (undo-tree-id37 . -42) (undo-tree-id38 . -42) (t 26019 22588 94516 151000)) nil (26019 22616 674454 710000) 0 nil])
([nil nil ((745 . 754) (t 26019 22588 530515 901000)) nil (26019 22616 674192 919000) 0 nil])
([nil nil ((754 . 766)) nil (26019 22616 674189 413000) 0 nil])
([nil nil ((746 . 747) (t 26019 22616 702500 601000)) nil (26019 22699 899661 732000) 0 nil])
([nil nil ((#("        options = page.find_all(\"option\", attrs={\"data-locale\": \"en-us\"})" 0 8 (fontified t) 8 15 (face font-lock-variable-name-face fontified t) 15 16 (fontified t) 16 17 (face font-lock-operator-face fontified t) 17 32 (fontified t) 32 40 (face font-lock-string-face fontified t) 40 47 (fontified t) 47 48 (face font-lock-operator-face fontified t) 48 49 (fontified t) 49 62 (face font-lock-string-face fontified t) 62 64 (fontified t) 64 71 (face font-lock-string-face fontified t) 71 73 (fontified t)) . 769) (undo-tree-id324 . -8) (undo-tree-id325 . -8) (undo-tree-id326 . -49) (undo-tree-id327 . -8) (undo-tree-id328 . -8) (undo-tree-id329 . -49) (undo-tree-id330 . -8) (undo-tree-id331 . -8) (undo-tree-id332 . -49) (undo-tree-id333 . -20) (undo-tree-id334 . -73) (undo-tree-id335 . -8) (undo-tree-id336 . -8) (undo-tree-id337 . -49) (undo-tree-id338 . -8) (undo-tree-id339 . -8) (undo-tree-id340 . -49) (undo-tree-id341 . -8) (undo-tree-id342 . -8) (undo-tree-id343 . -49) (undo-tree-id344 . -73) (undo-tree-id345 . -73) (undo-tree-id346 . -73) (undo-tree-id347 . -73) (t 26019 22617 186500 353000)) nil (26019 22699 899661 331000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -767) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (#("
" 0 1 (fontified t)) . -768) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (undo-tree-id323 . -1) 769) nil (26019 22699 899656 120000) 0 nil])
([nil nil ((nil rear-nonsticky nil 818 . 819) (nil fontified nil 817 . 819) (nil fontified nil 810 . 817) (nil fontified nil 808 . 810) (nil fontified nil 795 . 808) (nil fontified nil 794 . 795) (nil fontified nil 793 . 794) (nil fontified nil 786 . 793) (nil fontified nil 778 . 786) (nil fontified nil 763 . 778) (nil fontified nil 762 . 763) (nil fontified nil 761 . 762) (nil fontified nil 754 . 761) (nil fontified nil 746 . 754) (746 . 819)) nil (26019 22699 899632 486000) 0 nil])
([nil nil ((819 . 828)) nil (26019 22699 899632 40000) 0 nil])
([nil nil ((828 . 838)) nil (26019 22699 899631 895000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . -834) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (#("9" 0 1 (fontified t)) . -835) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (#("o" 0 1 (fontified t)) . -836) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (#("t" 0 1 (fontified t)) . -837) (undo-tree-id215 . -1) (undo-tree-id216 . -1) 838) nil (26019 22699 899631 448000) 0 nil])
([nil nil ((#("        inspec" 0 8 (fontified t) 8 14 (fontified t)) . 820) (undo-tree-id180 . -8) (undo-tree-id181 . -8) (undo-tree-id182 . -9) (undo-tree-id183 . -10) (undo-tree-id184 . -11) (undo-tree-id185 . -12) (undo-tree-id186 . -13) (undo-tree-id187 . -14) (undo-tree-id188 . -14) (undo-tree-id189 . -14) (undo-tree-id190 . -14) (undo-tree-id191 . -14) (undo-tree-id192 . -14) (undo-tree-id193 . -14) (undo-tree-id194 . -14) (undo-tree-id195 . -14) (undo-tree-id196 . -14)) nil (26019 22699 899627 230000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -819) (undo-tree-id159 . -1) (undo-tree-id160 . 1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) 820) nil (26019 22699 899623 845000) 0 nil])
([nil nil ((#("u" 0 1 (face font-lock-string-face fontified t)) . -814) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (#("s" 0 1 (face font-lock-string-face fontified t)) . -815) (undo-tree-id157 . -1) (undo-tree-id158 . -1) 816) nil (26019 22699 899619 28000) 0 nil])
([nil nil ((814 . 816)) nil (26019 22699 899617 831000) 0 nil])
([nil nil ((#("        breakpoint()" 0 8 (fontified t) 8 18 (face font-lock-builtin-face fontified t) 18 20 (fontified t)) . 820) (undo-tree-id78 . -20) (undo-tree-id79 . -20) (undo-tree-id80 . -20) (undo-tree-id81 . -20) (undo-tree-id82 . -20) (undo-tree-id83 . -20) (undo-tree-id84 . -20) (undo-tree-id85 . -20) (undo-tree-id86 . -20) (undo-tree-id87 . -20) (undo-tree-id88 . -20) (undo-tree-id89 . -20) (undo-tree-id90 . -20) (undo-tree-id91 . -20) (undo-tree-id92 . -20) (undo-tree-id93 . -20) (undo-tree-id94 . -20) (undo-tree-id95 . -20) (undo-tree-id96 . -20) (undo-tree-id97 . -20) (undo-tree-id98 . -20) (undo-tree-id99 . -20) (undo-tree-id100 . -20) (undo-tree-id101 . -20) (undo-tree-id102 . -20) (undo-tree-id103 . -20) (undo-tree-id104 . -20) (undo-tree-id105 . -20) (undo-tree-id106 . -20) (undo-tree-id107 . -20) (undo-tree-id108 . -20) (undo-tree-id109 . -20) (undo-tree-id110 . -20) (undo-tree-id111 . -20) (undo-tree-id112 . -20) (undo-tree-id113 . -20) (undo-tree-id114 . -20) (undo-tree-id115 . -20) (undo-tree-id116 . -20) (undo-tree-id117 . -20) (undo-tree-id118 . -20) (undo-tree-id119 . -20) (undo-tree-id120 . -20) (undo-tree-id121 . -20) (undo-tree-id122 . -20) (undo-tree-id123 . -20) (undo-tree-id124 . -20) (undo-tree-id125 . -20) (undo-tree-id126 . -20) (undo-tree-id127 . -20) (undo-tree-id128 . -20) (undo-tree-id129 . -20) (undo-tree-id130 . -20) (undo-tree-id131 . -20) (undo-tree-id132 . -20) (undo-tree-id133 . -20) (undo-tree-id134 . -20) (undo-tree-id135 . -20) (undo-tree-id136 . -20) (undo-tree-id137 . -20) (undo-tree-id138 . -20) (undo-tree-id139 . -20) (undo-tree-id140 . -20) (undo-tree-id141 . -20) (undo-tree-id142 . -20) (undo-tree-id143 . -20) (undo-tree-id144 . -20) (undo-tree-id145 . -20) (undo-tree-id146 . -20) (undo-tree-id147 . -20) (undo-tree-id148 . -20) (undo-tree-id149 . -20) (undo-tree-id150 . -20) (undo-tree-id151 . -20) (undo-tree-id152 . -20) (undo-tree-id153 . -20)) nil (26019 22699 899616 702000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -819) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . 1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) 820) nil (26019 22699 899596 252000) 0 nil])
([nil nil ((746 . 747) (t 26019 22699 926464 764000)) nil (26019 22955 993080 384000) 0 nil])
([nil nil ((746 . 747) (t 26019 22700 402464 596000)) nil (26019 22955 993080 126000) 0 nil])
([nil nil ((#("v" 0 1 (fontified t)) . -746) (undo-tree-id15 . -1) (undo-tree-id16 . -1) 747) nil (26019 22955 993079 766000) 0 nil])
([nil nil ((746 . 754)) nil (26019 22955 993079 137000) 0 nil])
([nil nil ((754 . 766)) nil (26019 22956 454496 532000) 0 nil])
([nil nil ((908 . 913)) nil (26019 23043 106822 65000) 0 nil] [nil nil ((#("strings = []" 0 7 (face font-lock-variable-name-face fontified t) 7 8 (fontified t) 8 9 (face font-lock-operator-face fontified t) 9 12 (fontified t)) . 754) (undo-tree-id2 . -1) (undo-tree-id3 . -2) (undo-tree-id4 . -3) (undo-tree-id5 . -4) (undo-tree-id6 . -5) (undo-tree-id7 . -6) (undo-tree-id8 . -7) (undo-tree-id9 . -8) (undo-tree-id10 . -9) (undo-tree-id11 . -10) (undo-tree-id12 . -11) (undo-tree-id13 . -12) (undo-tree-id14 . -12)) ((754 . 766)) (26019 22956 160149 615000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -909) (undo-tree-id25 . -4) 913) nil (26019 23043 106821 912000) 0 nil])
([nil nil ((754 . 756)) ((#("ve" 0 1 (fontified t) 1 2 (fontified t)) . 754) (undo-tree-id17 . -2) (undo-tree-id18 . -2) (undo-tree-id19 . -2)) (26019 22955 993113 231000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -907) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (#("
" 0 1 (fontified t)) . -908) (undo-tree-id24 . -1) 909) nil (26019 23043 106821 443000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . -755) (undo-tree-id0 . -1) (undo-tree-id1 . -1) 756) ((755 . 756)) (26019 22955 992889 797000) 0 nil])
([nil nil ((123 . 124)) nil (26019 23043 106820 247000) 0 nil])
nil
([nil nil ((123 . 133)) nil (26019 23043 106820 99000) 0 nil])
([nil nil ((133 . 134)) nil (26019 23043 106819 973000) 0 nil])
([nil nil ((134 . 147)) nil (26019 23043 106819 790000) 0 nil])
([nil nil ((#("Mirror:" 0 6 (face font-lock-type-face fontified t) 6 7 (fontified t)) . 140)) nil (26019 23043 106819 419000) 0 nil])
([nil nil ((140 . 148)) nil (26019 23043 106819 141000) 0 nil])
([nil nil ((148 . 153)) nil (26019 23043 106818 984000) 0 nil])
([nil nil ((153 . 162)) nil (26019 23043 106818 790000) 0 nil])
([nil nil ((162 . 165)) nil (26019 23043 106818 573000) 0 nil])
([nil nil ((165 . 170)) nil (26019 23043 106818 389000) 0 nil])
([nil nil ((170 . 174)) nil (26019 23043 106818 169000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t)) . -173) (undo-tree-id21 . -1) 174) nil (26019 23043 106817 923000) 0 nil])
([nil nil ((173 . 178)) nil (26019 23043 106817 35000) 0 nil])
([nil nil ((#("str" 0 3 (face font-lock-builtin-face fontified t)) . 681) (undo-tree-id20 . -3)) nil (26019 23043 106816 652000) 0 nil])
([nil nil ((681 . 688)) nil (26019 23043 106810 842000) 0 nil])
([nil nil ((805 . 814)) nil (26019 23043 106853 386000) 0 nil])
([nil nil ((814 . 817)) nil (26019 23140 936844 391000) 0 nil] [nil nil ((814 . 822)) ((#("versions" 0 8 (fontified t)) . 814) (undo-tree-id26 . -8)) (26019 23043 106807 514000) 0 nil])
([nil nil ((#("v" 0 1 (fontified t)) . -814) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (#("a" 0 1 (fontified t)) . -815) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (#("l" 0 1 (fontified t)) . -816) (undo-tree-id241 . -1) (undo-tree-id242 . -1) 817) nil (26019 23140 936843 714000) 0 nil])
nil
([nil nil ((814 . 825)) nil (26019 23140 936839 447000) 0 nil])
([nil nil ((825 . 827)) nil (26019 23140 936839 200000) 0 nil])
([nil nil ((827 . 828)) nil (26019 23140 936838 915000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -827) (undo-tree-id229 . -1) (undo-tree-id230 . -1) 828) nil (26019 23140 936838 600000) 0 nil])
([nil nil ((827 . 836)) nil (26019 23140 936837 631000) 0 nil])
([nil nil ((836 . 857)) nil (26019 23140 936837 404000) 0 nil])
([nil nil ((857 . 860)) nil (26019 23140 936837 77000) 0 nil])
([nil nil ((#("        for section in page.find" 0 8 (fontified t) 8 11 (face font-lock-keyword-face fontified t) 11 20 (fontified t) 20 22 (face font-lock-keyword-face fontified t) 22 32 (fontified t)) . 828) (undo-tree-id202 . -8) (undo-tree-id203 . -8) (undo-tree-id204 . -9) (undo-tree-id205 . -10) (undo-tree-id206 . -11) (undo-tree-id207 . -12) (undo-tree-id208 . -13) (undo-tree-id209 . -14) (undo-tree-id210 . -15) (undo-tree-id211 . -16) (undo-tree-id212 . -17) (undo-tree-id213 . -18) (undo-tree-id214 . -19) (undo-tree-id215 . -20) (undo-tree-id216 . -21) (undo-tree-id217 . -22) (undo-tree-id218 . -23) (undo-tree-id219 . -24) (undo-tree-id220 . -25) (undo-tree-id221 . -26) (undo-tree-id222 . -27) (undo-tree-id223 . -28) (undo-tree-id224 . -29) (undo-tree-id225 . -30) (undo-tree-id226 . -31) (undo-tree-id227 . -32) (undo-tree-id228 . -32)) nil (26019 23140 936836 349000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -827) (undo-tree-id171 . -1) (undo-tree-id172 . 1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) 828) nil (26019 23140 936827 143000) 0 nil])
([nil nil ((#("]" 0 1 (fontified t)) . -826) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id170 . -1) 827) nil (26019 23140 936814 566000) 0 nil])
([nil nil ((826 . 827)) nil (26019 23140 936430 740000) 0 nil])
([nil nil ((#("[" 0 1 (fontified t)) . -825) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (#("]" 0 1 (fontified t)) . -826) (undo-tree-id136 . -1) (undo-tree-id137 . -1) 827) nil (26019 23140 936429 530000) 0 nil])
([nil nil ((825 . 827)) nil (26019 23140 936910 851000) 0 nil])
([nil nil ((827 . 836)) nil (26019 23298 767594 619000) 0 nil] [nil nil ((#("        versions = []" 0 8 (fontified t) 8 16 (face font-lock-variable-name-face fontified t) 16 17 (fontified t) 17 18 (face font-lock-operator-face fontified t) 18 21 (fontified t)) . 806) (undo-tree-id27 . -8) (undo-tree-id28 . -8) (undo-tree-id29 . -8) (undo-tree-id30 . -8) (undo-tree-id31 . -8) (undo-tree-id32 . -8) (undo-tree-id33 . -8) (undo-tree-id34 . -9) (undo-tree-id35 . -10) (undo-tree-id36 . -11) (undo-tree-id37 . -12) (undo-tree-id38 . -13) (undo-tree-id39 . -14) (undo-tree-id40 . -15) (undo-tree-id41 . -16) (undo-tree-id42 . -17) (undo-tree-id43 . -18) (undo-tree-id44 . -19) (undo-tree-id45 . -19) (undo-tree-id46 . -19) (undo-tree-id47 . -19) (undo-tree-id48 . -19) (undo-tree-id49 . -19) (undo-tree-id50 . -8) (undo-tree-id51 . -8) (undo-tree-id52 . -19) (undo-tree-id53 . -19) (undo-tree-id54 . -19) (undo-tree-id55 . -19) (undo-tree-id56 . -19) (undo-tree-id57 . -19) (undo-tree-id58 . -19) (undo-tree-id59 . -19) (undo-tree-id60 . -19) (undo-tree-id61 . -19) (undo-tree-id62 . -19) (undo-tree-id63 . -19) (undo-tree-id64 . -19) (undo-tree-id65 . -19) (undo-tree-id66 . -19) (undo-tree-id67 . -19) (undo-tree-id68 . -19) (undo-tree-id69 . -19) (undo-tree-id70 . -19) (undo-tree-id71 . -19) (undo-tree-id72 . -19) (undo-tree-id73 . -19) (undo-tree-id74 . -19) (undo-tree-id75 . -19) (undo-tree-id76 . -19) (undo-tree-id77 . -19) (undo-tree-id78 . -19) (undo-tree-id79 . -19) (undo-tree-id80 . -19) (undo-tree-id81 . -8) (undo-tree-id82 . -8) (undo-tree-id83 . -8) (undo-tree-id84 . -19) (undo-tree-id85 . -8) (undo-tree-id86 . -8) (undo-tree-id87 . -8) (undo-tree-id88 . -19) (undo-tree-id89 . -8) (undo-tree-id90 . -8) (undo-tree-id91 . -8) (undo-tree-id92 . -19) (undo-tree-id93 . -19) (undo-tree-id94 . -19) (undo-tree-id95 . -19) (undo-tree-id96 . -20) (undo-tree-id97 . -21) (undo-tree-id98 . -21)) ((806 . 827)) (26019 23140 936413 378000) 0 nil])
([nil nil ((836 . 839)) nil (26019 23298 767594 479000) 0 nil])
nil
([nil nil ((#("f" 0 1 (fontified t)) . -836) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (#("o" 0 1 (fontified t)) . -837) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (undo-tree-id369 . -1) (#("r" 0 1 (face font-lock-keyword-face fontified t)) . -838) (undo-tree-id370 . -1) (undo-tree-id371 . -1) 839) nil (26019 23298 767594 207000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -832) (undo-tree-id349 . -4) (undo-tree-id350 . -4) (undo-tree-id351 . -4) (undo-tree-id352 . -4) (undo-tree-id353 . -4) (undo-tree-id354 . -4) (undo-tree-id355 . -4) (undo-tree-id356 . -4) (undo-tree-id357 . -4) (undo-tree-id358 . -4) (undo-tree-id359 . -4) 836) nil (26019 23298 767591 411000) 0 nil])
([nil nil ((#("[" 0 1 (fontified t)) . -992) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (undo-tree-id342 . -1) (undo-tree-id343 . -1) (undo-tree-id344 . -1) (#("]" 0 1 (fontified t)) . -993) (undo-tree-id345 . -1) (undo-tree-id346 . -1) (undo-tree-id347 . -1) (undo-tree-id348 . -1) 994) nil (26019 23298 767589 415000) 0 nil])
([nil nil ((992 . 1000)) nil (26019 23298 767587 373000) 0 nil])
([nil nil ((#("        inspect(options[0])
        breakpoint()" 0 8 (fontified t) 8 28 (fontified t) 28 36 (fontified t) 36 46 (face font-lock-builtin-face fontified t) 46 48 (fontified t)) . 928) (undo-tree-id330 . -48) (undo-tree-id331 . -48) (undo-tree-id332 . -48) (undo-tree-id333 . -48) (undo-tree-id334 . -48) (undo-tree-id335 . -48) (undo-tree-id336 . -48) (undo-tree-id337 . -48) (undo-tree-id338 . -48) (undo-tree-id339 . -48)) nil (26019 23298 767587 153000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -927) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (undo-tree-id329 . -1) 928) nil (26019 23298 767585 275000) 0 nil])
([nil nil ((927 . 936)) nil (26019 23298 767551 892000) 0 nil])
([nil nil ((936 . 937)) nil (26019 23298 767551 751000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -936) (undo-tree-id313 . -1) (undo-tree-id314 . -1) 937) nil (26019 23298 767551 565000) 0 nil])
([nil nil ((#("options" 0 7 (face font-lock-variable-name-face fontified t)) . 862) (undo-tree-id312 . -7)) nil (26019 23298 767550 989000) 0 nil])
([nil nil ((862 . 875)) nil (26019 23298 767550 663000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -875) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (#("=" 0 1 (face font-lock-operator-face fontified t)) . -876) (undo-tree-id310 . -1) (undo-tree-id311 . -1) 877) nil (26019 23298 767550 302000) 0 nil])
([nil nil ((#("        strings = []" 0 8 (fontified t) 8 15 (face font-lock-variable-name-face fontified t) 15 16 (fontified t) 16 17 (face font-lock-operator-face fontified t) 17 20 (fontified t)) . 833) (undo-tree-id298 . -20) (undo-tree-id299 . -20)) nil (26019 23298 767546 905000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -832) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . 1) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) 833) nil (26019 23298 767546 245000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -828) (undo-tree-id274 . -4) (undo-tree-id275 . -4) (undo-tree-id276 . -4) (undo-tree-id277 . -4) (undo-tree-id278 . -4) (undo-tree-id279 . -4) (undo-tree-id280 . -4) (undo-tree-id281 . -4) (undo-tree-id282 . -4) (undo-tree-id283 . -4) (undo-tree-id284 . -4) (undo-tree-id285 . -4) (undo-tree-id286 . -4) (undo-tree-id287 . -4) (undo-tree-id288 . -4) (undo-tree-id289 . -4) (undo-tree-id290 . -4) (undo-tree-id291 . -4) 832) nil (26019 23298 767544 844000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -827) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (undo-tree-id254 . 1) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) 828) nil (26019 23298 767540 705000) 0 nil])
([nil nil ((905 . 906)) nil (26019 23298 767535 859000) 0 nil])
([nil nil ((906 . 919)) nil (26019 23298 767535 642000) 0 nil])
([nil nil ((919 . 935)) nil (26019 23298 767535 489000) 0 nil])
([nil nil ((#("        from rich import inspect" 0 8 (fontified t) 8 12 (face font-lock-keyword-face fontified t) 12 18 (fontified t) 18 24 (face font-lock-keyword-face fontified t) 24 25 (fontified t) 25 32 (fontified t)) . 773) (undo-tree-id248 . -32) (undo-tree-id249 . -28) (undo-tree-id250 . -32) (undo-tree-id251 . -32)) nil (26019 23298 767535 205000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -772) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) 773) nil (26019 23298 880147 13000) 0 nil])
([nil nil ((#("            versions.append(" 0 28 (fontified t)) . 874) (undo-tree-id376 . -28) (undo-tree-id377 . -28)) nil (26019 23317 149884 487000) 0 nil] [nil nil ((772 . 781)) ((#("
        " 0 1 (fontified t) 1 9 (fontified t)) . 772) (undo-tree-id373 . -9) (undo-tree-id374 . -1) (undo-tree-id375 . -9)) (26019 23298 767626 831000) 0 nil])
([nil nil ((874 . 886)) nil (26019 23317 149878 264000) 0 nil])
([nil nil ((781 . 787)) ((#("return" 0 6 (face font-lock-keyword-face fontified t)) . 781) (undo-tree-id372 . -6)) (26019 23298 767524 61000) 0 nil])
([nil nil ((886 . 906)) nil (26019 23317 149877 978000) 0 nil])
nil
([nil nil ((906 . 911)) nil (26019 23317 258389 270000) 0 nil])
([nil nil ((911 . 913)) nil (26019 23333 952090 889000) 0 nil] [nil nil ((911 . 924)) ((#("
            " 0 1 (face font-lock-string-face fontified t) 1 13 (face font-lock-string-face fontified t)) . 911) (undo-tree-id379 . -13) (undo-tree-id380 . -1) (undo-tree-id381 . -13)) (26019 23317 149917 60000) 0 nil])
([nil nil ((#("attrs" 0 5 (fontified t)) . 899) (undo-tree-id429 . -5)) nil (26019 23333 952090 637000) 0 nil])
([nil nil ((924 . 925)) ((#("\\" 0 1 (face font-lock-string-face fontified t)) . 924) (undo-tree-id378 . -1)) (26019 23317 149874 178000) 0 nil])
([nil nil ((899 . 902)) nil (26019 23333 952090 289000) 0 nil])
nil
([nil nil ((#("[" 0 1 (fontified t)) . -902) (undo-tree-id427 . -1) (undo-tree-id428 . -1) 903) nil (26019 23333 952090 125000) 0 nil])
([nil nil ((902 . 903)) nil (26019 23333 952089 508000) 0 nil])
([nil nil ((#("]" 0 1 (fontified t)) . -910) (undo-tree-id424 . -1) (undo-tree-id425 . -1) (undo-tree-id426 . -1) 911) nil (26019 23333 952089 201000) 0 nil])
([nil nil ((910 . 911)) nil (26019 23333 952087 864000) 0 nil])
([nil nil ((911 . 924)) nil (26019 23333 952087 624000) 0 nil])
([nil nil ((924 . 935)) nil (26019 23333 952087 382000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . -929) (undo-tree-id382 . -1) (undo-tree-id383 . -1) (undo-tree-id384 . -1) (undo-tree-id385 . -1) (undo-tree-id386 . -1) (undo-tree-id387 . -1) (undo-tree-id388 . -1) (undo-tree-id389 . -1) (undo-tree-id390 . -1) (undo-tree-id391 . -1) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (#("p" 0 1 (fontified t)) . -930) (undo-tree-id394 . -1) (undo-tree-id395 . -1) (undo-tree-id396 . -1) (undo-tree-id397 . -1) (undo-tree-id398 . -1) (undo-tree-id399 . -1) (undo-tree-id400 . -1) (undo-tree-id401 . -1) (undo-tree-id402 . -1) (undo-tree-id403 . -1) (#("o" 0 1 (fontified t)) . -931) (undo-tree-id404 . -1) (undo-tree-id405 . -1) (undo-tree-id406 . -1) (undo-tree-id407 . -1) (undo-tree-id408 . -1) (undo-tree-id409 . -1) (undo-tree-id410 . -1) (undo-tree-id411 . -1) (#("i" 0 1 (fontified t)) . -932) (undo-tree-id412 . -1) (undo-tree-id413 . -1) (undo-tree-id414 . -1) (undo-tree-id415 . -1) (undo-tree-id416 . -1) (undo-tree-id417 . -1) (#("n" 0 1 (fontified t)) . -933) (undo-tree-id418 . -1) (undo-tree-id419 . -1) (undo-tree-id420 . -1) (undo-tree-id421 . -1) (#("t" 0 1 (fontified t)) . -934) (undo-tree-id422 . -1) (undo-tree-id423 . -1) 935) nil (26019 23333 952086 530000) 0 nil])
([nil nil ((929 . 936)) nil (26019 23333 952069 977000) 0 nil])
([nil nil ((#("        " 0 8 (fontified t)) . 937) (969 . 970) 936) nil (26019 23333 952066 29000) 0 nil])
([nil nil ((123 . 912) (#("@dataclass
class Version:
    version: str
    url: str

@dataclass
class Board:
    id: str
    name: str
    url: str

    @staticmethod
    def all() -> dict[str, \"Board\"]:
        downloads = BeautifulSoup(
            requests.get(f\"{BASE_URL}/downloads\").text, features=\"html.parser\"
        ).find_all(class_=\"download\")
        return {
            d.get(\"data-id\"): Board(
                d.get(\"data-id\"), d.get(\"data-name\"), BASE_URL + d.find(\"a\").get(\"href\")
            )
            for d in downloads
        }

    def versions(self) -> list[Version]:
        page = BeautifulSoup(requests.get(self.url).text, features=\"html.parser\")
        versions = []
        for option in page.find_all(\"option\", attrs={\"data-locale\": \"en-US\"}):
            url = option.get('value'" 0 10 (face font-lock-type-face fontified t) 10 11 (fontified t) 11 16 (face font-lock-keyword-face fontified t) 16 17 (fontified t) 17 24 (face font-lock-type-face fontified t) 24 26 (fontified t) 26 39 (fontified t) 39 42 (face font-lock-builtin-face fontified t) 42 43 (fontified t) 43 52 (fontified t) 52 55 (face font-lock-builtin-face fontified t) 55 56 (fontified t) 56 57 (fontified t) 57 67 (face font-lock-type-face fontified t) 67 68 (fontified t) 68 73 (face font-lock-keyword-face fontified t) 73 74 (fontified t) 74 79 (face font-lock-type-face fontified t) 79 85 (fontified t) 85 87 (face font-lock-builtin-face fontified t) 87 89 (fontified t) 89 92 (face font-lock-builtin-face fontified t) 92 103 (fontified t) 103 106 (face font-lock-builtin-face fontified t) 106 107 (fontified t) 107 116 (fontified t) 116 119 (face font-lock-builtin-face fontified t) 119 120 (fontified t) 120 121 (fontified t) 121 125 (fontified t) 125 126 (fontified t) 126 138 (face font-lock-builtin-face fontified t) 138 139 (fontified t) 139 143 (fontified t) 143 146 (face font-lock-keyword-face fontified t) 146 147 (fontified t) 147 150 (face font-lock-function-name-face fontified t) 150 153 (fontified t) 153 154 (face font-lock-operator-face fontified t) 154 155 (face font-lock-operator-face fontified t) 155 156 (fontified t) 156 160 (face font-lock-builtin-face fontified t) 160 161 (fontified t) 161 164 (face font-lock-builtin-face fontified t) 164 166 (fontified t) 166 173 (face font-lock-string-face fontified t) 173 176 (fontified t) 176 184 (fontified t) 184 193 (face font-lock-variable-name-face fontified t) 193 194 (fontified t) 194 195 (face font-lock-operator-face fontified t) 195 237 (fontified t) 237 238 (face font-lock-string-face fontified t) 238 248 (face nil fontified t) 248 259 (face font-lock-string-face fontified t) 259 275 (fontified t) 275 276 (face font-lock-operator-face fontified t) 276 289 (face font-lock-string-face fontified t) 289 315 (fontified t) 315 316 (face font-lock-operator-face fontified t) 316 326 (face font-lock-string-face fontified t) 326 328 (fontified t) 328 336 (fontified t) 336 342 (face font-lock-keyword-face fontified t) 342 345 (fontified t) 345 363 (fontified t) 363 372 (face font-lock-string-face fontified t) 372 374 (fontified t) 374 382 (fontified t) 382 404 (fontified t) 404 413 (face font-lock-string-face fontified t) 413 422 (fontified t) 422 433 (face font-lock-string-face fontified t) 433 445 (fontified t) 445 446 (face font-lock-operator-face fontified t) 446 454 (fontified t) 454 457 (face font-lock-string-face fontified t) 457 463 (fontified t) 463 469 (face font-lock-string-face fontified t) 469 483 (fontified t) 483 485 (fontified t) 485 497 (fontified t) 497 500 (face font-lock-keyword-face fontified t) 500 503 (fontified t) 503 505 (face font-lock-keyword-face fontified t) 505 516 (fontified t) 516 525 (fontified t) 525 526 (fontified t) 526 527 (fontified t) 527 531 (fontified t) 531 534 (face font-lock-keyword-face fontified t) 534 535 (fontified t) 535 543 (face font-lock-function-name-face fontified t) 543 544 (fontified t) 544 548 (face font-lock-keyword-face fontified t) 548 550 (fontified t) 550 551 (face font-lock-operator-face fontified t) 551 552 (face font-lock-operator-face fontified t) 552 553 (fontified t) 553 557 (face font-lock-builtin-face fontified t) 557 565 (fontified t) 565 568 (fontified t) 568 576 (fontified t) 576 580 (face font-lock-variable-name-face fontified t) 580 581 (fontified t) 581 582 (face font-lock-operator-face fontified t) 582 597 (fontified t) 597 610 (fontified t) 610 614 (face font-lock-keyword-face fontified t) 614 634 (fontified t) 634 635 (face font-lock-operator-face fontified t) 635 648 (face font-lock-string-face fontified t) 648 649 (fontified t) 649 650 (fontified t) 650 658 (fontified t) 658 666 (face font-lock-variable-name-face fontified t) 666 667 (fontified t) 667 668 (face font-lock-operator-face fontified t) 668 671 (fontified t) 671 672 (fontified t) 672 680 (fontified t) 680 683 (face font-lock-keyword-face fontified t) 683 691 (fontified t) 691 693 (face font-lock-keyword-face fontified t) 693 708 (fontified t) 708 716 (face font-lock-string-face fontified t) 716 723 (fontified t) 723 724 (face font-lock-operator-face fontified t) 724 725 (fontified t) 725 738 (face font-lock-string-face fontified t) 738 740 (fontified t) 740 747 (face font-lock-string-face fontified t) 747 748 (fontified t) 748 749 (fontified t rear-nonsticky t) 749 751 (fontified t) 751 763 (fontified t) 763 766 (face font-lock-variable-name-face fontified t) 766 767 (fontified t) 767 768 (face font-lock-operator-face fontified t) 768 780 (fontified t) 780 787 (face font-lock-string-face fontified t)) . 123) (undo-tree-id3 . -161) (undo-tree-id4 . -749) (undo-tree-id5 . -161) (undo-tree-id6 . -161) (undo-tree-id7 . -526) (undo-tree-id8 . -526) (undo-tree-id9 . -161) (undo-tree-id10 . -161) (undo-tree-id11 . -526) (undo-tree-id12 . -119) (undo-tree-id13 . -106) (undo-tree-id14 . -526) (undo-tree-id15 . -210) (undo-tree-id16 . -671) (undo-tree-id17 . -567) (undo-tree-id18 . -749) (undo-tree-id19 . -787) (undo-tree-id20 . -779) (undo-tree-id21 . -787) (undo-tree-id22 . -56) (undo-tree-id23 . -56) (undo-tree-id24 . -56) (undo-tree-id25 . -56) (undo-tree-id26 . -56) (undo-tree-id27 . -56) (undo-tree-id28 . -43) (undo-tree-id29 . -55) (undo-tree-id30 . -55) (undo-tree-id31 . -55) (undo-tree-id32 . -55) (undo-tree-id33 . -55) (undo-tree-id34 . -55) (undo-tree-id35 . -55) (undo-tree-id36 . -55) (undo-tree-id37 . -55) (undo-tree-id38 . -55) (t 26019 23333 958485 564000)) nil (26019 23366 971491 712000) 0 nil])
([nil nil ((181 . 185) (#("    " 0 4 (fontified nil)) . 180) (undo-tree-id214 . -4) (179 . 185) (t 26019 23334 438485 703000)) nil (26019 23449 445937 462000) 0 nil] [nil nil ((180 . 184) (#("    " 0 4 (fontified nil)) . 179) (undo-tree-id0 . -4) (undo-tree-id1 . -4) (undo-tree-id2 . -4) (178 . 184) (t 26019 23334 438485 703000)) ((#("
    
" 0 1 (fontified t) 1 5 (fontified nil) 5 6 (fontified nil)) . 178) (undo-tree-id39 . -6) (undo-tree-id40 . -5) (undo-tree-id41 . -5) (undo-tree-id42 . -6) (179 . 183) (#("    " 0 4 (fontified t)) . 180) (undo-tree-id43 . -4)) (26019 23366 971337 97000) 0 nil])
([nil nil ((185 . 190)) nil (26019 23449 445937 55000) 0 nil])
nil
([nil nil ((#("t" 0 1 (face font-lock-type-face fontified t)) . -188) (undo-tree-id212 . -1) (#("a" 0 1 (face font-lock-type-face fontified t)) . -189) (undo-tree-id213 . -1) 190) nil (26019 23449 445936 873000) 0 nil])
([nil nil ((188 . 198)) nil (26019 23449 445936 11000) 0 nil])
([nil nil ((198 . 203)) nil (26019 23449 445935 811000) 0 nil])
([nil nil ((203 . 219)) nil (26019 23449 445935 696000) 0 nil])
([nil nil ((219 . 224)) nil (26019 23449 445935 580000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -216) (undo-tree-id204 . -1) (#("e" 0 1 (fontified t)) . -217) (undo-tree-id205 . -1) (#("l" 0 1 (fontified t)) . -218) (undo-tree-id206 . -1) (#("f" 0 1 (face font-lock-keyword-face fontified t)) . -219) (undo-tree-id207 . -1) (#(")" 0 1 (fontified t)) . -220) (undo-tree-id208 . -1) (#(" " 0 1 (fontified t)) . -221) (undo-tree-id209 . -1) (#("-" 0 1 (face font-lock-operator-face fontified t)) . -222) (undo-tree-id210 . -1) (#(">" 0 1 (face font-lock-operator-face fontified t)) . -223) (undo-tree-id211 . -1) 224) nil (26019 23449 445935 249000) 0 nil])
([nil nil ((216 . 220)) nil (26019 23449 445933 504000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -219) (undo-tree-id203 . -1) 220) nil (26019 23449 445933 338000) 0 nil])
([nil nil ((219 . 231)) nil (26019 23449 445932 923000) 0 nil])
([nil nil ((231 . 240)) nil (26019 23449 445932 665000) 0 nil])
([nil nil ((857 . 866)) nil (26019 23449 445932 424000) 0 nil])
([nil nil ((866 . 869)) nil (26019 23449 445932 73000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -866) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (#("o" 0 1 (fontified t)) . -867) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (#("r" 0 1 (face font-lock-keyword-face fontified t)) . -868) (undo-tree-id201 . -1) (undo-tree-id202 . -1) 869) nil (26019 23449 445931 688000) 0 nil])
([nil nil ((#("        versions = []" 0 8 (fontified t) 8 16 (face font-lock-variable-name-face fontified t) 16 17 (fontified t) 17 18 (face font-lock-operator-face fontified t) 18 21 (fontified t)) . 836) (undo-tree-id190 . -21)) nil (26019 23449 445928 768000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -835) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) 836) nil (26019 23449 445928 54000) 0 nil])
([nil nil ((835 . 844)) nil (26019 23449 445927 306000) 0 nil])
([nil nil ((844 . 849)) nil (26019 23449 445927 181000) 0 nil])
([nil nil ((#("        for [" 0 8 (fontified t) 8 11 (face font-lock-keyword-face fontified t) 11 13 (fontified t)) . 836) (undo-tree-id167 . -8) (undo-tree-id168 . -8) (undo-tree-id169 . -9) (undo-tree-id170 . -10) (undo-tree-id171 . -11) (undo-tree-id172 . -12) (undo-tree-id173 . -13) (undo-tree-id174 . -8) (undo-tree-id175 . -8) (undo-tree-id176 . -8) (undo-tree-id177 . -8) (undo-tree-id178 . -8) (undo-tree-id179 . -8) (undo-tree-id180 . -8) (undo-tree-id181 . -8) (undo-tree-id182 . -8) (undo-tree-id183 . -8) (undo-tree-id184 . -8) (undo-tree-id185 . -8) (undo-tree-id186 . -13)) nil (26019 23449 445926 829000) 0 nil])
([nil nil ((836 . 844)) nil (26019 23449 445923 11000) 0 nil])
([nil nil ((844 . 859)) nil (26019 23449 445922 884000) 0 nil])
([nil nil ((859 . 880)) nil (26019 23449 445922 671000) 0 nil])
([nil nil ((880 . 891)) nil (26019 23449 445922 442000) 0 nil])
([nil nil ((#("page.find_all(\"option\", attrs={\"data-locale\": \"en-US\"}):" 0 14 (fontified t) 14 22 (face font-lock-string-face fontified t) 22 29 (fontified t) 29 30 (face font-lock-operator-face fontified t) 30 31 (fontified t) 31 44 (face font-lock-string-face fontified t) 44 46 (fontified t) 46 53 (face font-lock-string-face fontified t) 53 56 (fontified t)) . 923) (undo-tree-id158 . -18) (undo-tree-id159 . -18) (undo-tree-id160 . -33) (undo-tree-id161 . -32) (undo-tree-id162 . -24) (undo-tree-id163 . -15) (undo-tree-id164 . -10) (undo-tree-id165 . -5) (undo-tree-id166 . -56)) nil (26019 23449 445922 202000) 0 nil])
([nil nil ((nil rear-nonsticky nil 946 . 947) (nil fontified nil 944 . 947) (nil fontified nil 937 . 944) (nil fontified nil 935 . 937) (nil fontified nil 922 . 935) (nil fontified nil 921 . 922) (nil fontified nil 920 . 921) (nil fontified nil 913 . 920) (nil fontified nil 905 . 913) (nil fontified nil 891 . 905) (891 . 947)) nil (26019 23449 445920 353000) 0 nil])
([nil nil ((#(":" 0 1 (rear-nonsticky t fontified t)) . -946) (undo-tree-id156 . -1) (undo-tree-id157 . -1) 947) nil (26019 23449 445919 767000) 0 nil])
([nil nil ((946 . 947)) nil (26019 23449 445919 187000) 0 nil])
([nil nil ((#("        
        for option in 
            url = option.get(\"value\")
            breakpoint()

        return versions
" 0 8 (fontified t) 8 9 (fontified t) 9 17 (fontified t) 17 20 (face font-lock-keyword-face fontified t) 20 28 (fontified t) 28 30 (face font-lock-keyword-face fontified t) 30 31 (fontified t) 31 32 (fontified t) 32 44 (fontified t) 44 47 (face font-lock-variable-name-face fontified t) 47 48 (fontified t) 48 49 (face font-lock-operator-face fontified t) 49 61 (fontified t) 61 68 (face font-lock-string-face fontified t) 68 70 (fontified t) 70 82 (fontified t) 82 92 (face font-lock-builtin-face fontified t) 92 94 (fontified t) 94 95 (fontified t) 95 96 (fontified t) 96 104 (fontified t) 104 110 (face font-lock-keyword-face fontified t) 110 119 (fontified t) 119 120 (fontified t)) . 948) (undo-tree-id103 . -111) (undo-tree-id104 . -111) (undo-tree-id105 . -120) (undo-tree-id106 . -31) (undo-tree-id107 . -31) (undo-tree-id108 . -17) (undo-tree-id109 . -17) (undo-tree-id110 . -17) (undo-tree-id111 . -17) (undo-tree-id112 . -17) (undo-tree-id113 . -17) (undo-tree-id114 . -44) (undo-tree-id115 . -44) (undo-tree-id116 . -50) (undo-tree-id117 . -8) (undo-tree-id118 . -8) (undo-tree-id119 . -8) (undo-tree-id120 . -8) (undo-tree-id121 . -8) (undo-tree-id122 . -8) (undo-tree-id123 . -17) (undo-tree-id124 . -17) (undo-tree-id125 . -17) (undo-tree-id126 . -17) (undo-tree-id127 . -17) (undo-tree-id128 . -17) (undo-tree-id129 . -44) (undo-tree-id130 . -44) (undo-tree-id131 . -50) (undo-tree-id132 . -17) (undo-tree-id133 . -17) (undo-tree-id134 . -17) (undo-tree-id135 . -17) (undo-tree-id136 . -17) (undo-tree-id137 . -17) (undo-tree-id138 . -44) (undo-tree-id139 . -44) (undo-tree-id140 . -50) (undo-tree-id141 . -8) (undo-tree-id142 . -31) (undo-tree-id143 . -31) (undo-tree-id144 . -31) (undo-tree-id145 . -31) (undo-tree-id146 . -31) (undo-tree-id147 . -31) (undo-tree-id148 . -31) (undo-tree-id149 . -8) (undo-tree-id150 . -44) (undo-tree-id151 . -44) (undo-tree-id152 . -50) (undo-tree-id153 . -8) (undo-tree-id154 . -120) (undo-tree-id155 . -120) 1068) nil (26019 23449 445918 477000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -947) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) 948) nil (26019 23449 445877 632000) 0 nil])
([nil nil ((#("        " 0 8 (fontified t)) . 232) (947 . 948)) nil (26019 23492 613254 152000) 0 nil])
([nil nil ((232 . 240) (t 26019 23449 450522 73000)) nil (26019 24333 180906 926000) 0 nil] [nil nil ((853 . 854) (t 26019 23449 450522 73000)) ((#("g" 0 1 (fontified t)) . 853) (undo-tree-id215 . -1)) (26019 23492 613108 671000) 0 nil])
([nil nil ((81 . 82)) nil (26019 24333 180906 610000) 0 nil])
nil
([nil nil ((82 . 91)) nil (26019 24333 180906 417000) 0 nil])
([nil nil ((250 . 253)) nil (26019 24333 180906 182000) 0 nil])
([nil nil ((#("re." 0 3 (fontified t)) . 250)) nil (26019 24333 180905 948000) 0 nil])
([nil nil ((226 . 234)) nil (26019 24333 180905 721000) 0 nil])
([nil nil ((258 . 267)) nil (26019 24333 180905 514000) 0 nil])
([nil nil ((267 . 273)) nil (26019 24333 180905 310000) 0 nil])
([nil nil ((#("e" 0 1 (face font-lock-string-face fontified t)) . -268) (undo-tree-id240 . -1) (#("n" 0 1 (face font-lock-string-face fontified t)) . -269) (undo-tree-id241 . -1) (#("-" 0 1 (face font-lock-string-face fontified t)) . -270) (undo-tree-id242 . -1) (#("U" 0 1 (face font-lock-string-face fontified t)) . -271) (undo-tree-id243 . -1) (#("S" 0 1 (face font-lock-string-face fontified t)) . -272) (undo-tree-id244 . -1) 273) nil (26019 24333 180904 805000) 0 nil])
([nil nil ((268 . 269)) nil (26019 24333 180902 903000) 0 nil])
([nil nil ((269 . 270)) nil (26019 24333 180902 692000) 0 nil])
([nil nil ((#("        re.match(\"-(" 0 11 (fontified t) 11 16 (face font-lock-keyword-face fontified t) 16 17 (fontified t) 17 20 (face font-lock-string-face fontified t)) . 250) (undo-tree-id224 . -8) (undo-tree-id225 . -8) (undo-tree-id226 . -8) (undo-tree-id227 . -20) (undo-tree-id228 . -20) (undo-tree-id229 . -20) (undo-tree-id230 . -20) (undo-tree-id231 . -20) (undo-tree-id232 . -20) (undo-tree-id233 . -20) (undo-tree-id234 . -20) (undo-tree-id235 . -20) (undo-tree-id236 . -20) (undo-tree-id237 . -20) (undo-tree-id238 . -20) (undo-tree-id239 . -20)) nil (26019 24333 180901 941000) 0 nil])
([nil nil ((250 . 258)) nil (26019 24333 180895 411000) 0 nil])
([nil nil ((258 . 270)) nil (26019 24333 180895 147000) 0 nil])
([nil nil ((#("[" 0 1 (fontified t)) . -269) (undo-tree-id222 . -1) (undo-tree-id223 . -1) 270) nil (26019 24333 180894 848000) 0 nil])
([nil nil ((269 . 280)) nil (26019 24333 180893 528000) 0 nil])
([nil nil ((280 . 289)) nil (26019 24333 180893 308000) 0 nil])
([nil nil ((289 . 291)) nil (26019 24333 180892 962000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -289) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (#("n" 0 1 (face font-lock-keyword-face fontified t)) . -290) (undo-tree-id220 . -1) (undo-tree-id221 . -1) 291) nil (26019 24333 180892 341000) 0 nil])
([nil nil ((289 . 295)) nil (26019 24333 180882 990000) 0 nil])
([nil nil ((295 . 301)) nil (26019 24333 180879 989000) 0 nil])
([nil nil ((1 . 1041) (#("from dataclasses import dataclass

import requests
from bs4 import BeautifulSoup
import re

BASE_URL = \"https://circuitpython.org\"


@dataclass
class Version:
    version: str
    url: str

    @staticmethod
    def from_url(url: str) -> 'Version':
        parts = url.split('-')
        breakpoint()


@dataclass
class Board:
    id: str
    name: str
    url: str

    @staticmethod
    def all() -> dict[str, \"Board\"]:
        downloads = BeautifulSoup(
            requests.get(f\"{BASE_URL}/downloads\").text, features=\"html.parser\"
        ).find_all(class_=\"download\")
        return {
            d.get(\"data-id\"): Board(
                d.get(\"data-id\"), d.get(\"data-name\"), BASE_URL + d.find(\"a\").get(\"href\")
            )
            for d in downloads
        }

    def versions(self) -> list[Version]:
        page = BeautifulSoup(requests.get(self.url).text, features=\"html.parser\")
        return [Version.from_url(option) for option in page.find_all(\"option\", attrs={\"data-locale\": \"en-US\"})" 0 4 (face font-lock-keyword-face fontified t) 4 17 (fontified t) 17 23 (face font-lock-keyword-face fontified t) 23 34 (fontified t) 34 35 (fontified t) 35 41 (face font-lock-keyword-face fontified t) 41 51 (fontified t) 51 55 (face font-lock-keyword-face fontified t) 55 60 (fontified t) 60 66 (face font-lock-keyword-face fontified t) 66 81 (fontified t) 81 87 (face font-lock-keyword-face fontified t) 87 90 (fontified t) 90 91 (fontified t) 91 92 (fontified t) 92 100 (face font-lock-variable-name-face fontified t) 100 101 (fontified t) 101 102 (face font-lock-operator-face fontified t) 102 103 (fontified t) 103 130 (face font-lock-string-face fontified t) 130 131 (fontified t) 131 132 (fontified t) 132 133 (fontified t) 133 143 (face font-lock-type-face fontified t) 143 144 (fontified t) 144 149 (face font-lock-keyword-face fontified t) 149 150 (fontified t) 150 157 (face font-lock-type-face fontified t) 157 172 (fontified t) 172 175 (face font-lock-builtin-face fontified t) 175 176 (fontified t) 176 185 (fontified t) 185 187 (face font-lock-builtin-face fontified t) 187 188 (face font-lock-builtin-face fontified t) 188 189 (fontified t) 189 190 (fontified t) 190 194 (fontified t) 194 195 (fontified t) 195 207 (face font-lock-builtin-face fontified t) 207 208 (fontified t) 208 212 (fontified t) 212 215 (face font-lock-keyword-face fontified t) 215 216 (fontified t) 216 224 (face font-lock-function-name-face fontified t) 224 230 (fontified t) 230 233 (face font-lock-builtin-face fontified t) 233 235 (fontified t) 235 236 (face font-lock-operator-face fontified t) 236 237 (face font-lock-operator-face fontified t) 237 238 (fontified t) 238 247 (face font-lock-string-face fontified t) 247 249 (fontified t) 249 257 (fontified t) 257 262 (face font-lock-variable-name-face fontified t) 262 263 (fontified t) 263 264 (face font-lock-operator-face fontified t) 264 275 (fontified t) 275 278 (face font-lock-string-face fontified t) 278 280 (fontified t) 280 288 (fontified t) 288 298 (face font-lock-builtin-face fontified t) 298 300 (fontified t) 300 301 (fontified t) 301 303 (fontified t) 303 313 (face font-lock-type-face fontified t) 313 314 (fontified t) 314 319 (face font-lock-keyword-face fontified t) 319 320 (fontified t) 320 325 (face font-lock-type-face fontified t) 325 331 (fontified t) 331 333 (face font-lock-builtin-face fontified t) 333 335 (fontified t) 335 338 (face font-lock-builtin-face fontified t) 338 349 (fontified t) 349 352 (face font-lock-builtin-face fontified t) 352 362 (fontified t) 362 365 (face font-lock-builtin-face fontified t) 365 372 (fontified t) 372 384 (face font-lock-builtin-face fontified t) 384 389 (fontified t) 389 392 (face font-lock-keyword-face fontified t) 392 393 (fontified t) 393 396 (face font-lock-function-name-face fontified t) 396 399 (fontified t) 399 400 (face font-lock-operator-face fontified t) 400 401 (face font-lock-operator-face fontified t) 401 402 (fontified t) 402 406 (face font-lock-builtin-face fontified t) 406 407 (fontified t) 407 410 (face font-lock-builtin-face fontified t) 410 412 (fontified t) 412 413 (face font-lock-string-face fontified t) 413 418 (face font-lock-string-face fontified t) 418 419 (face font-lock-string-face fontified t) 419 430 (fontified t) 430 439 (face font-lock-variable-name-face fontified t) 439 440 (fontified t) 440 441 (face font-lock-operator-face fontified t) 441 483 (fontified t) 483 484 (face font-lock-string-face fontified t) 484 494 (face nil fontified t) 494 495 (face font-lock-string-face fontified t) 495 504 (face font-lock-string-face fontified t) 504 505 (face font-lock-string-face fontified t) 505 521 (fontified t) 521 522 (face font-lock-operator-face fontified t) 522 523 (face font-lock-string-face fontified t) 523 534 (face font-lock-string-face fontified t) 534 535 (face font-lock-string-face fontified t) 535 561 (fontified t) 561 562 (face font-lock-operator-face fontified t) 562 563 (face font-lock-string-face fontified t) 563 571 (face font-lock-string-face fontified t) 571 572 (face font-lock-string-face fontified t) 572 582 (fontified t) 582 588 (face font-lock-keyword-face fontified t) 588 609 (fontified t) 609 610 (face font-lock-string-face fontified t) 610 614 (face font-lock-string-face fontified t) 614 615 (face font-lock-string-face fontified t) 615 617 (face font-lock-string-face fontified t) 617 618 (face font-lock-string-face fontified t) 618 650 (fontified t) 650 651 (face font-lock-string-face fontified t) 651 655 (face font-lock-string-face fontified t) 655 656 (face font-lock-string-face fontified t) 656 658 (face font-lock-string-face fontified t) 658 659 (face font-lock-string-face fontified t) 659 668 (fontified t) 668 669 (face font-lock-string-face fontified t) 669 673 (face font-lock-string-face fontified t) 673 674 (face font-lock-string-face fontified t) 674 678 (face font-lock-string-face fontified t) 678 679 (face font-lock-string-face fontified t) 679 691 (fontified t) 691 692 (face font-lock-operator-face fontified t) 692 700 (fontified t) 700 701 (face font-lock-string-face fontified t) 701 702 (face font-lock-string-face fontified t) 702 703 (face font-lock-string-face fontified t) 703 709 (fontified t) 709 710 (face font-lock-string-face fontified t) 710 714 (face font-lock-string-face fontified t) 714 715 (face font-lock-string-face fontified t) 715 743 (fontified t) 743 746 (face font-lock-keyword-face fontified t) 746 749 (fontified t) 749 751 (face font-lock-keyword-face fontified t) 751 777 (fontified t) 777 780 (face font-lock-keyword-face fontified t) 780 781 (fontified t) 781 789 (face font-lock-function-name-face fontified t) 789 790 (fontified t) 790 794 (face font-lock-keyword-face fontified t) 794 796 (fontified t) 796 797 (face font-lock-operator-face fontified t) 797 798 (face font-lock-operator-face fontified t) 798 799 (fontified t) 799 803 (face font-lock-builtin-face fontified t) 803 814 (fontified t) 814 822 (fontified t) 822 826 (face font-lock-variable-name-face fontified t) 826 827 (fontified t) 827 828 (face font-lock-operator-face fontified t) 828 856 (fontified t) 856 860 (face font-lock-keyword-face fontified t) 860 880 (fontified t) 880 881 (face font-lock-operator-face fontified t) 881 882 (face font-lock-string-face fontified t) 882 893 (face font-lock-string-face fontified t) 893 894 (face font-lock-string-face fontified t) 894 896 (fontified t) 896 904 (fontified t) 904 910 (face font-lock-keyword-face fontified t) 910 920 (fontified t) 920 937 (fontified t) 937 940 (face font-lock-keyword-face fontified t) 940 948 (fontified t) 948 950 (face font-lock-keyword-face fontified t) 950 951 (fontified t) 951 965 (fontified t) 965 966 (face font-lock-string-face fontified t) 966 972 (face font-lock-string-face fontified t) 972 973 (face font-lock-string-face fontified t) 973 980 (fontified t) 980 981 (face font-lock-operator-face fontified t) 981 982 (fontified t) 982 983 (face font-lock-string-face fontified t) 983 987 (face font-lock-string-face fontified t) 987 988 (face font-lock-string-face fontified t) 988 994 (face font-lock-string-face fontified t) 994 995 (face font-lock-string-face fontified t) 995 997 (fontified t) 997 998 (face font-lock-string-face fontified t) 998 1000 (face font-lock-string-face fontified t) 1000 1001 (face font-lock-string-face fontified t) 1001 1003 (face font-lock-string-face fontified t) 1003 1004 (face font-lock-string-face fontified t) 1004 1006 (fontified t)) . 1) (undo-tree-id0 . -132) (undo-tree-id1 . -249) (undo-tree-id2 . -50) (undo-tree-id3 . -132) (undo-tree-id4 . -132) (undo-tree-id5 . -132) (undo-tree-id6 . -951) (undo-tree-id7 . -365) (undo-tree-id8 . -921) (undo-tree-id9 . -301) (undo-tree-id10 . -249) (undo-tree-id11 . -249) (undo-tree-id12 . -249) (undo-tree-id13 . -249) (undo-tree-id14 . -249) (undo-tree-id15 . -249) (undo-tree-id16 . -249) (undo-tree-id17 . -249) (undo-tree-id18 . -249) (undo-tree-id19 . -249) (undo-tree-id20 . -249) (undo-tree-id21 . -249) (undo-tree-id22 . -249) (undo-tree-id23 . -249) (undo-tree-id24 . -268) (undo-tree-id25 . -288) (undo-tree-id26 . -288) (undo-tree-id27 . -288) (undo-tree-id28 . -300) (undo-tree-id29 . -300) (undo-tree-id30 . -300) (undo-tree-id31 . -389) (undo-tree-id32 . -389) (undo-tree-id33 . -430) (undo-tree-id34 . -430) (undo-tree-id35 . -430) (undo-tree-id36 . -442) (undo-tree-id37 . -430) (undo-tree-id38 . -430) (undo-tree-id39 . -430) (undo-tree-id40 . -442) (undo-tree-id41 . -430) (undo-tree-id42 . -430) (undo-tree-id43 . -430) (undo-tree-id44 . -442) (undo-tree-id45 . -582) (undo-tree-id46 . -582) (undo-tree-id47 . -582) (undo-tree-id48 . -582) (undo-tree-id49 . -582) (undo-tree-id50 . -582) (undo-tree-id51 . -582) (undo-tree-id52 . -582) (undo-tree-id53 . -582) (undo-tree-id54 . -582) (undo-tree-id55 . -582) (undo-tree-id56 . -582) (undo-tree-id57 . -582) (undo-tree-id58 . -582) (undo-tree-id59 . -582) (undo-tree-id60 . -582) (undo-tree-id61 . -582) (undo-tree-id62 . -582) (undo-tree-id63 . -582) (undo-tree-id64 . -822) (undo-tree-id65 . -822) (undo-tree-id66 . -882) (undo-tree-id67 . -904) (undo-tree-id68 . -904) (undo-tree-id69 . -904) (undo-tree-id70 . -904) (undo-tree-id71 . -904) (undo-tree-id72 . -904) (undo-tree-id73 . -300) (undo-tree-id74 . -300) (undo-tree-id75 . -300) (undo-tree-id76 . -300) (undo-tree-id77 . -300) (undo-tree-id78 . -300) (undo-tree-id79 . -300) (undo-tree-id80 . -300) (undo-tree-id81 . -300) (undo-tree-id82 . -300) (undo-tree-id83 . -300) (undo-tree-id84 . -300) (undo-tree-id85 . -300) (undo-tree-id86 . -300) (undo-tree-id87 . -934) (undo-tree-id88 . -934) (undo-tree-id89 . -934) (undo-tree-id90 . -934) (undo-tree-id91 . -934) (undo-tree-id92 . -934) (undo-tree-id93 . -896) (undo-tree-id94 . -935) (undo-tree-id95 . -935) (undo-tree-id96 . -935) (undo-tree-id97 . -176) (undo-tree-id98 . -935) (undo-tree-id99 . -935) (undo-tree-id100 . -176) (undo-tree-id101 . -176) (undo-tree-id102 . -935) (undo-tree-id103 . -935) (undo-tree-id104 . -935) (undo-tree-id105 . -935) (undo-tree-id106 . -935) (t 26019 24333 211181 624000)) nil (26019 24359 937570 319000) 0 nil])
([nil nil ((949 . 955) (t 26019 24333 655181 993000)) nil (26019 24359 937319 518000) 0 nil])
([nil nil ((954 . 961)) nil (26019 24359 937316 861000) 0 nil])
([nil nil ((954 . 961) (#("'value'" 0 7 (face font-lock-string-face fontified t)) . 954) (t 26019 24359 943203 656000)) nil (26019 24635 867434 934000) 0 nil])
([nil nil ((280 . 284) (t 26019 24360 423204 50000)) nil (26019 24635 867434 740000) 0 nil])
([nil nil ((#("import re" 0 6 (face font-lock-keyword-face fontified t) 6 9 (fontified t)) . 1)) nil (26019 24635 867434 564000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -1) (undo-tree-id9 . -1) 2) nil (26019 24635 867434 317000) 0 nil])
([nil nil ((274 . 275)) nil (26019 24635 867433 953000) 0 nil])
([nil nil ((275 . 295)) nil (26019 24635 867433 835000) 0 nil])
([nil nil ((#("parts" 0 5 (face font-lock-variable-name-face fontified t)) . 248)) nil (26019 24635 867433 499000) 0 nil])
([nil nil ((248 . 255)) nil (26019 24635 867433 202000) 0 nil])
([nil nil ((#("        breakpoint()" 0 8 (fontified t) 8 18 (face font-lock-builtin-face fontified t) 18 20 (fontified t)) . 298)) nil (26019 24635 867432 804000) 0 nil])
([nil nil ((298 . 306)) nil (26019 24635 867432 602000) 0 nil])
([nil nil ((306 . 321)) nil (26019 24635 867432 226000) 0 nil])
([nil nil ((#("url.split(\"-\")[-1].removesuffix('.uf2')" 0 10 (fontified t) 10 13 (face font-lock-string-face fontified t) 13 15 (fontified t) 15 16 (face font-lock-operator-face fontified t) 16 32 (fontified t) 32 38 (face font-lock-string-face fontified t) 38 39 (fontified t)) . 258) (undo-tree-id7 . -18) (undo-tree-id8 . -14)) nil (26019 24635 867431 876000) 0 nil])
([nil nil ((282 . 295)) nil (26019 24635 867430 682000) 0 nil])
([nil nil ((nil rear-nonsticky nil 333 . 334) (nil fontified nil 333 . 334) (nil fontified nil 327 . 333) (nil fontified nil 311 . 327) (nil fontified nil 310 . 311) (nil fontified nil 308 . 310) (nil fontified nil 305 . 308) (nil fontified nil 295 . 305) (295 . 334)) nil (26019 24635 867430 491000) 0 nil])
([nil nil ((334 . 335)) nil (26019 24635 867430 49000) 0 nil])
([nil nil ((335 . 348)) nil (26019 24635 867429 825000) 0 nil])
([nil nil ((348 . 351)) nil (26019 24635 867429 672000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . -350) (undo-tree-id6 . -1) 351) nil (26019 24635 867429 406000) 0 nil])
([nil nil ((350 . 352)) nil (26019 24635 867429 13000) 0 nil])
([nil nil ((#("        version = " 0 8 (fontified t) 8 15 (face font-lock-variable-name-face fontified t) 15 16 (fontified t) 16 17 (face font-lock-operator-face fontified t) 17 18 (fontified t)) . 240) (undo-tree-id4 . -18) (undo-tree-id5 . -18)) nil (26019 24635 867428 737000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -239) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) 240) nil (26019 24635 867427 887000) 0 nil])
([nil nil ((239 . 240)) nil (26019 24635 867425 811000) 0 nil])
([nil nil ((#("x" 0 1 (fontified t)) . -239) (undo-tree-id0 . -1) 240) nil (26019 27766 485297 183000) 0 nil])
([nil nil ((263 . 303) (#("
            url.split(\"-\")[-1].removesuffix('.uf2'),
           " 0 1 (fontified t) 1 13 (fontified t) 13 23 (fontified t) 23 26 (face font-lock-string-face fontified t) 26 28 (fontified t) 28 29 (face font-lock-operator-face fontified t) 29 45 (fontified t) 45 51 (face font-lock-string-face fontified t) 51 52 (fontified t rear-nonsticky t) 52 54 (fontified t) 54 65 (fontified t)) . 263) (undo-tree-id323 . 65) (undo-tree-id324 . 65)) ((263 . 328) (#("url.split(\"-\")[-1].removesuffix(\".uf2\")," 0 10 (fontified t) 10 13 (face font-lock-string-face fontified t) 13 15 (fontified t) 15 16 (face font-lock-operator-face fontified t) 16 32 (fontified t) 32 38 (face font-lock-string-face fontified t) 38 40 (fontified t)) . 263) (undo-tree-id321 . 40) (undo-tree-id322 . 40)) (26019 27767 259363 674000) 0 nil])
([nil nil ((#("        return Version(url.split(\"-\")[-1].removesuffix(\".uf2\"), url)" 0 8 (fontified t) 8 14 (face font-lock-keyword-face fontified t) 14 23 (fontified t) 23 33 (fontified t) 33 36 (face font-lock-string-face fontified t) 36 38 (fontified t) 38 39 (face font-lock-operator-face fontified t) 39 55 (fontified t) 55 61 (face font-lock-string-face fontified t) 61 63 (fontified t) 63 68 (fontified t)) . 240) (undo-tree-id328 . 45) (undo-tree-id329 . 68)) nil (26019 27782 962689 527000) 0 nil] [nil nil ((#("    @staticmethod
    def from_url(url: str) -> \"Version\":
        return Version(url.split(\"-\")[-1].removesuffix(\".uf2\"), url)
" 0 5 (fontified t) 5 17 (face font-lock-builtin-face fontified t) 17 18 (fontified t) 18 22 (fontified t) 22 25 (face font-lock-keyword-face fontified t) 25 26 (fontified t) 26 34 (face font-lock-function-name-face fontified t) 34 40 (fontified t) 40 43 (face font-lock-builtin-face fontified t) 43 45 (fontified t) 45 46 (face font-lock-operator-face fontified t) 46 47 (face font-lock-operator-face fontified t) 47 48 (fontified t) 48 57 (face font-lock-string-face fontified t) 57 58 (fontified t) 58 59 (fontified t) 59 67 (fontified t) 67 73 (face font-lock-keyword-face fontified t) 73 82 (fontified t) 82 92 (fontified t) 92 95 (face font-lock-string-face fontified t) 95 97 (fontified t) 97 98 (face font-lock-operator-face fontified t) 98 114 (fontified t) 114 120 (face font-lock-string-face fontified t) 120 122 (fontified t) 122 127 (fontified t) 127 128 (fontified t)) . 181) (undo-tree-id297 . 46) (undo-tree-id298 . 46) (undo-tree-id299 . -22) (undo-tree-id300 . -22) (undo-tree-id301 . -67) (undo-tree-id302 . -67) (undo-tree-id303 . -67) (undo-tree-id304 . -67) (undo-tree-id305 . -67) (undo-tree-id306 . -67) (undo-tree-id307 . -67) (undo-tree-id308 . -67) (undo-tree-id309 . -67) (undo-tree-id310 . -67) (undo-tree-id311 . -67) (undo-tree-id312 . -67) (undo-tree-id313 . -67) (undo-tree-id314 . -67)) ((181 . 309)) (26019 27764 393167 2000) 0 nil])
([nil nil ((240 . 248)) nil (26019 27782 962688 462000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -179) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (#("
" 0 1 (fontified t)) . -180) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) 181) ((179 . 181)) (26019 27763 294648 975000) 0 nil])
([nil nil ((248 . 254)) nil (26019 27782 962688 303000) 0 nil])
([nil nil ((773 . 782)) ((#("
        " 0 1 (fontified t) 1 9 (fontified t)) . 773)) (26019 27763 154857 911000) 0 nil])
([nil nil ((35 . 36)) nil (26019 27782 962688 69000) 0 nil])
([nil nil ((782 . 784)) ((#("de" 0 1 (fontified t) 1 2 (fontified t)) . 782)) (26019 27762 995060 852000) 0 nil])
([nil nil ((36 . 45)) nil (26019 27782 962687 826000) 0 nil])
([nil nil ((784 . 785)) ((#("f" 0 1 (face font-lock-keyword-face fontified t)) . 784)) (26019 27762 835250 407000) 0 nil])
([nil nil ((#("return" 0 6 (face font-lock-keyword-face fontified t)) . 258) (undo-tree-id325 . -6) (undo-tree-id326 . 6) (undo-tree-id327 . -6)) nil (26019 27782 962687 210000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t)) . -782) (undo-tree-id61 . -1) (#("e" 0 1 (fontified t)) . -783) (undo-tree-id62 . -1) (#("f" 0 1 (face font-lock-keyword-face fontified t)) . -784) (undo-tree-id63 . -1) 785) ((782 . 785)) (26019 27762 685845 554000) 0 nil])
([nil nil ((258 . 268)) nil (26019 27782 962677 73000) 0 nil])
([nil nil ((782 . 802)) ((#("def make_version(str" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 16 (face font-lock-function-name-face fontified t) 16 17 (fontified t) 17 18 (face font-lock-builtin-face fontified t) 18 19 (face font-lock-builtin-face fontified t) 19 20 (face font-lock-builtin-face fontified t)) . 782)) (26019 27762 540637 698000) 0 nil])
([nil nil ((1 . 45) (#("from dataclasses import dataclass

import re" 0 4 (face font-lock-keyword-face fontified t) 4 17 (fontified t) 17 23 (face font-lock-keyword-face fontified t) 23 34 (fontified t) 34 35 (fontified t) 35 41 (face font-lock-keyword-face fontified t) 41 44 (fontified t)) . 1) (t 26019 27782 970493 914000)) nil (26019 27832 978988 624000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -799) (undo-tree-id58 . -1) (#("t" 0 1 (fontified t)) . -800) (undo-tree-id59 . -1) (#("r" 0 1 (face font-lock-builtin-face fontified t)) . -801) (undo-tree-id60 . -1) 802) ((799 . 802)) (26019 27762 400842 940000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t)) . -267) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) 268 (t 26019 27783 350494 232000)) nil (26019 27832 978988 157000) 0 nil])
([nil nil ((#("        def make_version(" 0 8 (fontified t) 8 11 (face font-lock-keyword-face fontified t) 11 12 (fontified t) 12 24 (face font-lock-function-name-face fontified t) 24 25 (fontified t)) . 774)) ((774 . 799)) (26019 27762 261041 941000) 0 nil])
([nil nil ((267 . 278)) nil (26019 27832 978985 843000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -773) (undo-tree-id57 . -1) 774) ((773 . 774)) (26019 27762 126354 540000) 0 nil])
([nil nil ((278 . 279)) nil (26019 27832 978985 728000) 0 nil])
([nil nil ((773 . 782)) ((#("
        " 0 1 (fontified t) 1 9 (fontified t)) . 773) (undo-tree-id294 . -9)) (26019 27761 976446 219000) 0 nil])
([nil nil ((#("-" 0 1 (face font-lock-string-face fontified t)) . -278) (undo-tree-id8 . -1) 279) nil (26019 27832 978985 568000) 0 nil])
([nil nil ((782 . 795)) ((#("versions = []" 0 8 (face font-lock-variable-name-face fontified t) 8 9 (fontified t) 9 10 (face font-lock-operator-face fontified t) 10 13 (fontified t)) . 782) (undo-tree-id293 . -13)) (26019 27761 826738 734000) 0 nil])
([nil nil ((278 . 279)) nil (26019 27832 978985 54000) 0 nil])
([nil nil ((795 . 804)) ((#("
        " 0 1 (fontified t) 1 9 (fontified t)) . 795)) (26019 27761 607742 660000) 0 nil])
([nil nil ((#("." 0 1 (face font-lock-string-face fontified t)) . -278) (undo-tree-id7 . -1) 279) nil (26019 27832 978984 861000) 0 nil])
([nil nil ((804 . 819)) ((#("return versions" 0 6 (face font-lock-keyword-face fontified t) 6 15 (fontified t)) . 804)) (26019 27753 703018 716000) 0 nil])
([nil nil ((278 . 285)) nil (26019 27832 978984 530000) 0 nil])
([nil nil ((#("for option in page.find_all(\"option\", attrs={\"data-locale\": \"en-US\"})" 0 3 (face font-lock-keyword-face fontified t) 3 11 (fontified t) 11 13 (face font-lock-keyword-face fontified t) 13 28 (fontified t) 28 36 (face font-lock-string-face fontified t) 36 43 (fontified t) 43 44 (face font-lock-operator-face fontified t) 44 45 (fontified t) 45 58 (face font-lock-string-face fontified t) 58 60 (fontified t) 60 67 (face font-lock-string-face fontified t) 67 69 (fontified t)) . 899)) ((899 . 968)) (26019 27753 558256 357000) 0 nil])
([nil nil ((#("us" 0 2 (face font-lock-string-face fontified t)) . 271) (undo-tree-id3 . 2) (undo-tree-id4 . -1) (undo-tree-id5 . -2) (undo-tree-id6 . -2)) nil (26019 27832 978984 276000) 0 nil])
([nil nil ((795 . 804)) ((#("
        " 0 1 (fontified t) 1 9 (fontified t)) . 795) (undo-tree-id244 . -9) (undo-tree-id245 . -9) (undo-tree-id246 . -9) (undo-tree-id247 . -9) (undo-tree-id248 . -9) (undo-tree-id249 . -9) (undo-tree-id250 . -9) (undo-tree-id251 . -9) (undo-tree-id252 . -9) (undo-tree-id253 . -9) (undo-tree-id254 . -9) (undo-tree-id255 . -9) (undo-tree-id256 . -9) (undo-tree-id257 . -9) (undo-tree-id258 . -9) (undo-tree-id259 . -9) (undo-tree-id260 . -9) (undo-tree-id261 . -9) (undo-tree-id262 . -9) (undo-tree-id263 . -9) (undo-tree-id264 . -9) (undo-tree-id265 . -9) (undo-tree-id266 . -9) (undo-tree-id267 . -9) (undo-tree-id268 . -9) (undo-tree-id269 . -9) (undo-tree-id270 . -9) (undo-tree-id271 . -9) (undo-tree-id272 . -9) (undo-tree-id273 . -9) (undo-tree-id274 . -9) (undo-tree-id275 . -9) (undo-tree-id276 . -9) (undo-tree-id277 . -9) (undo-tree-id278 . -9) (undo-tree-id279 . -9) (undo-tree-id280 . -9) (undo-tree-id281 . -9) (undo-tree-id282 . -9) (undo-tree-id283 . -9) (undo-tree-id284 . -9) (undo-tree-id285 . -9) (undo-tree-id286 . -9) (undo-tree-id287 . -9) (undo-tree-id288 . -9) (undo-tree-id289 . -9) (undo-tree-id290 . -9) (undo-tree-id291 . -9) (undo-tree-id292 . -9)) (26019 27753 412762 362000) 0 nil])
([nil nil ((271 . 273)) nil (26019 27832 978982 905000) 0 nil])
([nil nil ((nil rear-nonsticky nil 872 . 873) (804 . 873)) ((#("for option in page.find_all(\"option\", attrs={\"data-locale\": \"en-US\"})" 0 3 (face font-lock-keyword-face fontified nil) 3 11 (fontified nil) 11 13 (face font-lock-keyword-face fontified nil) 13 28 (fontified nil) 28 36 (face font-lock-string-face fontified nil) 36 43 (fontified nil) 43 44 (face font-lock-operator-face fontified nil) 44 45 (fontified nil) 45 58 (face font-lock-string-face fontified nil) 58 60 (fontified nil) 60 67 (face font-lock-string-face fontified nil) 67 68 (fontified nil) 68 69 (fontified nil rear-nonsticky nil)) . 804) (nil rear-nonsticky t 872 . 873)) (26019 27753 277902 875000) 0 nil])
([nil nil ((#("match" 0 5 (face font-lock-keyword-face fontified t)) . 261) (undo-tree-id1 . 5) (undo-tree-id2 . -5)) nil (26019 27832 978982 678000) 0 nil])
([nil nil ((873 . 874)) ((#(":" 0 1 (fontified t)) . 873)) (26019 27753 138756 271000) 0 nil])
([nil nil ((261 . 267)) nil (26019 27832 978981 456000) 0 nil])
([nil nil ((874 . 887)) ((#("
            " 0 1 (fontified t) 1 13 (fontified t)) . 874)) (26019 27752 993299 756000) 0 nil])
([nil nil ((258 . 262)) nil (26019 27832 978981 314000) 0 nil])
([nil nil ((887 . 897)) ((#("versions.a" 0 9 (fontified t) 9 10 (fontified t)) . 887) (undo-tree-id242 . 1) (undo-tree-id243 . 1)) (26019 27752 833528 650000) 0 nil])
([nil nil ((290 . 299)) nil (26019 27832 978981 4000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . 896)) ((896 . 897)) (26019 27752 543914 433000) 0 nil])
([nil nil ((299 . 308)) nil (26019 27832 978980 808000) 0 nil])
([nil nil ((181 . 185) (#("    " 0 4 (fontified nil)) . 180) (179 . 185)) ((#("
    
" 0 1 (fontified t) 1 5 (fontified nil) 5 6 (fontified nil)) . 179) (undo-tree-id155 . -6) (undo-tree-id156 . -6) (undo-tree-id157 . -6) (undo-tree-id158 . -6) (undo-tree-id159 . -6) (undo-tree-id160 . -6) (undo-tree-id161 . -6) (undo-tree-id162 . -6) (undo-tree-id163 . -6) (undo-tree-id164 . -6) (undo-tree-id165 . -6) (undo-tree-id166 . -6) (undo-tree-id167 . -6) (undo-tree-id168 . -6) (undo-tree-id169 . -6) (180 . 184) (#("    " 0 4 (fontified t)) . 181) (undo-tree-id170 . -4) (undo-tree-id171 . -4) (undo-tree-id172 . -4) (undo-tree-id173 . -4) (undo-tree-id174 . -4) (undo-tree-id175 . -4) (undo-tree-id176 . -4) (undo-tree-id177 . -4) (undo-tree-id178 . -4) (undo-tree-id179 . -4) (undo-tree-id180 . -4) (undo-tree-id181 . -4) (undo-tree-id182 . -4) (undo-tree-id183 . -4) (undo-tree-id184 . -4)) (26019 27750 407004 146000) 0 nil] [nil nil ((#("            versions." 0 21 (fontified t)) . 875) (undo-tree-id42 . -12) (undo-tree-id44 . -14) (undo-tree-id46 . -16) (undo-tree-id48 . -18) (undo-tree-id50 . -20) (undo-tree-id52 . -21) (undo-tree-id54 . -21)) ((875 . 896)) (26019 27691 744470 879000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . -307) (undo-tree-id0 . -1) 308) nil (26019 27832 978980 302000) 0 nil])
([nil nil ((185 . 197)) ((#("def from_url" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 12 (face font-lock-function-name-face fontified t)) . 185) (undo-tree-id144 . -12) (undo-tree-id145 . -12) (undo-tree-id146 . -12) (undo-tree-id147 . -12) (undo-tree-id148 . -12) (undo-tree-id149 . -12) (undo-tree-id150 . -12) (undo-tree-id151 . -12) (undo-tree-id152 . -12) (undo-tree-id153 . -12) (undo-tree-id154 . -12)) (26019 27750 365938 460000) 0 nil])
([nil nil ((875 . 887)) ((#("            " 0 12 (fontified t)) . 875)) (26019 27691 600411 614000) 0 nil])
([nil nil ((307 . 311)) nil (26019 27832 978968 615000) 0 nil])
([nil nil ((180 . 185)) ((#("
    " 0 1 (fontified t) 1 5 (fontified t)) . 180)) (26019 27750 325923 770000) 0 nil])
([nil nil ((804 . 805)) ((#("#" 0 1 (face font-lock-comment-delimiter-face fontified t)) . 804)) (26019 27691 444905 545000) 0 nil])
([nil nil ((272 . 289) (#("'en_US-(.+)\\.uf2'" 0 17 (face font-lock-string-face fontified t)) . -272) (undo-tree-id0 . -4) (undo-tree-id1 . -4) (undo-tree-id2 . -11) (undo-tree-id3 . -11) (undo-tree-id4 . -17) (undo-tree-id5 . -17) (undo-tree-id6 . -17) (undo-tree-id7 . -17) (undo-tree-id8 . -17) (undo-tree-id9 . -17) (undo-tree-id10 . -17) (undo-tree-id11 . -17) (t 26019 27832 986535 594000)) nil (26019 27848 823283 843000) 0 nil])
([nil nil ((185 . 198)) ((#("@staticmethod" 0 1 (fontified t) 1 13 (face font-lock-builtin-face fontified t)) . 185)) (26019 27750 285293 360000) 0 nil])
([nil nil ((875 . 884)) ((#("
        " 0 1 (face font-lock-comment-face fontified t) 1 9 (fontified t)) . 875) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -9) (undo-tree-id75 . -9) (undo-tree-id76 . -9) (undo-tree-id77 . -9) (undo-tree-id78 . -1) (undo-tree-id79 . -9)) (26019 27691 300782 769000) 0 nil])
([nil nil ((289 . 294) (t 26019 27833 470535 997000)) nil (26019 27848 823266 672000) 0 nil])
([nil nil ((215 . 216)) ((#("(" 0 1 (fontified t)) . 215) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1)) (26019 27750 245616 324000) 0 nil])
([nil nil ((884 . 888)) ((#("for " 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t)) . 884) (undo-tree-id67 . -4) (undo-tree-id68 . -4) (undo-tree-id69 . -4) (undo-tree-id70 . -4)) (26019 27691 146375 163000) 0 nil])
([nil nil ((#("m" 0 1 (face font-lock-variable-name-face fontified t)) . 258) (undo-tree-id16 . 1) (t 26019 27848 830548 771000)) nil (26019 27895 12882 652000) 0 nil])
([nil nil ((216 . 237)) ((#("url: str) -> 'Version" 0 5 (fontified t) 5 8 (face font-lock-builtin-face fontified t) 8 10 (fontified t) 10 11 (face font-lock-operator-face fontified t) 11 12 (face font-lock-operator-face fontified t) 12 13 (fontified t) 13 21 (face font-lock-string-face fontified t)) . 216) (undo-tree-id122 . -21) (undo-tree-id123 . -21) (undo-tree-id124 . -21) (undo-tree-id125 . -21) (undo-tree-id126 . -21) (undo-tree-id127 . -21) (undo-tree-id128 . -21) (undo-tree-id129 . -21) (undo-tree-id130 . -21) (undo-tree-id131 . -21) (undo-tree-id132 . -21)) (26019 27750 205176 498000) 0 nil])
([nil nil ((888 . 891)) ((#("sec" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . 888) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -3)) (26019 27690 985426 985000) 0 nil])
([nil nil ((#("=" 0 1 (face font-lock-operator-face fontified t)) . -259) (#(" " 0 1 (fontified t)) . -260) 261) nil (26019 27895 12882 125000) 0 nil])
([nil nil ((237 . 239)) ((#("':" 0 1 (face font-lock-string-face fontified t) 1 2 (fontified t)) . 237) (undo-tree-id111 . -2) (undo-tree-id112 . -2) (undo-tree-id113 . -2) (undo-tree-id114 . -2) (undo-tree-id115 . -2) (undo-tree-id116 . -2) (undo-tree-id117 . -2) (undo-tree-id118 . -2) (undo-tree-id119 . -2) (undo-tree-id120 . -2) (undo-tree-id121 . -2)) (26019 27750 164790 931000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . -889) (undo-tree-id35 . -1) (undo-tree-id37 . -1) (#("c" 0 1 (fontified t)) . -890) (undo-tree-id39 . -1) 891) ((889 . 891)) (26019 27690 831118 265000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -258) 259) nil (26019 27895 12881 901000) 0 nil])
([nil nil ((239 . 248)) ((#("
        " 0 1 (fontified t) 1 9 (fontified t)) . 239) (undo-tree-id100 . -9) (undo-tree-id101 . -9) (undo-tree-id102 . -9) (undo-tree-id103 . -9) (undo-tree-id104 . -9) (undo-tree-id105 . -9) (undo-tree-id106 . -9) (undo-tree-id107 . -9) (undo-tree-id108 . -9) (undo-tree-id109 . -9) (undo-tree-id110 . -1)) (26019 27750 123654 949000) 0 nil])
([nil nil ((889 . 891)) ((#("se" 0 1 (fontified t) 1 2 (fontified t)) . 889) (undo-tree-id63 . -2)) (26019 27690 676006 702000) 0 nil])
([nil nil ((258 . 266)) nil (26019 27895 12881 722000) 0 nil])
([nil nil ((35 . 44)) ((#("import re" 0 6 (face font-lock-keyword-face fontified t) 6 9 (fontified t)) . 35)) (26019 27750 83662 181000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -888) (undo-tree-id19 . -1) (undo-tree-id21 . -1) (undo-tree-id23 . -1) (undo-tree-id25 . -1) (undo-tree-id27 . -1) (#("s" 0 1 (fontified t)) . -889) (undo-tree-id29 . -1) (undo-tree-id31 . -1) (#("e" 0 1 (fontified t)) . -890) (undo-tree-id33 . -1) 891) ((888 . 891)) (26019 27690 511280 394000) 0 nil])
([nil nil ((#("v" 0 1 (fontified t)) . -258) (#("e" 0 1 (fontified t)) . -259) (#("r" 0 1 (fontified t)) . -260) (#("s" 0 1 (fontified t)) . -261) (#("i" 0 1 (fontified t)) . -262) (#("o" 0 1 (fontified t)) . -263) (#("n" 0 1 (fontified t)) . -264) (#(" " 0 1 (fontified t)) . -265) 266) nil (26019 27895 12881 328000) 0 nil])
([nil nil ((257 . 272)) ((#("return re.match" 0 6 (face font-lock-keyword-face fontified t) 6 10 (fontified t) 10 15 (face font-lock-keyword-face fontified t)) . 257) (undo-tree-id92 . -8) (undo-tree-id93 . -9) (undo-tree-id94 . -10) (undo-tree-id95 . -11) (undo-tree-id96 . -12) (undo-tree-id97 . -13) (undo-tree-id98 . -14) (undo-tree-id99 . -15)) (26019 27750 42884 525000) 0 nil])
([nil nil ((#("        for " 0 8 (fontified t) 8 11 (face font-lock-keyword-face fontified t) 11 12 (fontified t)) . 876) (undo-tree-id3 . -8) (undo-tree-id5 . -10) (undo-tree-id7 . -12) (undo-tree-id9 . -12) (undo-tree-id11 . -12) (undo-tree-id13 . -12) (undo-tree-id15 . -12) (undo-tree-id17 . -12)) ((876 . 888)) (26019 27690 291211 752000) 0 nil])
([nil nil ((258 . 273)) nil (26019 27895 12880 973000) 0 nil])
([nil nil ((#("        return re.match" 0 8 (fontified t) 8 14 (face font-lock-keyword-face fontified t) 14 18 (fontified t) 18 23 (face font-lock-keyword-face fontified t)) . 249) (undo-tree-id80 . -8) (undo-tree-id81 . 23) (undo-tree-id82 . -8) (undo-tree-id83 . -16) (undo-tree-id84 . -17) (undo-tree-id85 . -18) (undo-tree-id86 . -19) (undo-tree-id87 . -20) (undo-tree-id88 . -21) (undo-tree-id89 . -22) (undo-tree-id90 . -23) (undo-tree-id91 . -23)) ((249 . 272)) (26019 27750 2892 624000) 0 nil])
([nil nil ((876 . 884)) ((#("        " 0 8 (fontified t)) . 876) (undo-tree-id61 . -8) (undo-tree-id62 . -8)) (26019 27690 46772 374000) 0 nil])
([nil nil ((273 . 286)) nil (26019 27895 12880 850000) 0 nil])
([nil nil ((249 . 257)) ((#("        " 0 8 (fontified t)) . 249)) (26019 27749 403728 682000) 0 nil])
([nil nil ((884 . 896)) ((#("breakpoint()" 0 10 (face font-lock-builtin-face fontified t) 10 12 (fontified t)) . 884) (undo-tree-id60 . -12)) (26019 27689 592425 666000) 0 nil])
([nil nil ((319 . 325)) nil (26019 27895 12880 730000) 0 nil])
([nil nil ((257 . 266)) ((#("re.match(" 0 3 (fontified t) 3 8 (face font-lock-keyword-face fontified t) 8 9 (fontified t)) . 257)) (26019 27749 88208 942000) 0 nil])
([nil nil ((#("            " 0 12 (fontified t)) . 989) (#("            " 0 12 (fontified t)) . 897) (undo-tree-id1 . -12) 896) ((897 . 909) (989 . 1001)) (26019 27689 397761 90000) 0 nil])
([nil nil ((325 . 329)) nil (26019 27895 12880 508000) 0 nil])
nil
([nil nil ((181 . 977) (#("@dataclass
class Board:
    id: str
    name: str
    url: str

    @staticmethod
    def all() -> dict[str, \"Board\"]:
        downloads = BeautifulSoup(
            requests.get(f\"{BASE_URL}/downloads\").text, features=\"html.parser\"
        ).find_all(class_=\"download\")
        return {
            d.get(\"data-id\"): Board(
                d.get(\"data-id\"), d.get(\"data-name\"), BASE_URL + d.find(\"a\").get(\"href\")
            )
            for d in downloads
        }

    def versions(self) -> list[Version]:
        page = BeautifulSoup(requests.get(self.url).text, features=\"html.parser\")
        versions = []
        #for option in page.find_all(\"option\", attrs={\"data-locale\": \"en-US\"}):
        breakpoint()

        return versions
        return [
            Version.from_url(option.get(\"value\"))

        " 0 10 (face font-lock-type-face fontified t) 10 11 (fontified t) 11 16 (face font-lock-keyword-face fontified t) 16 17 (fontified t) 17 22 (face font-lock-type-face fontified t) 22 28 (fontified t) 28 30 (face font-lock-builtin-face fontified t) 30 32 (fontified t) 32 35 (face font-lock-builtin-face fontified t) 35 46 (fontified t) 46 49 (face font-lock-builtin-face fontified t) 49 59 (fontified t) 59 62 (face font-lock-builtin-face fontified t) 62 69 (fontified t) 69 81 (face font-lock-builtin-face fontified t) 81 86 (fontified t) 86 89 (face font-lock-keyword-face fontified t) 89 90 (fontified t) 90 93 (face font-lock-function-name-face fontified t) 93 96 (fontified t) 96 97 (face font-lock-operator-face fontified t) 97 98 (face font-lock-operator-face fontified t) 98 99 (fontified t) 99 103 (face font-lock-builtin-face fontified t) 103 104 (fontified t) 104 107 (face font-lock-builtin-face fontified t) 107 109 (fontified t) 109 116 (face font-lock-string-face fontified t) 116 127 (fontified t) 127 136 (face font-lock-variable-name-face fontified t) 136 137 (fontified t) 137 138 (face font-lock-operator-face fontified t) 138 180 (fontified t) 180 181 (face font-lock-string-face fontified t) 181 191 (face nil fontified t) 191 202 (face font-lock-string-face fontified t) 202 218 (fontified t) 218 219 (face font-lock-operator-face fontified t) 219 232 (face font-lock-string-face fontified t) 232 258 (fontified t) 258 259 (face font-lock-operator-face fontified t) 259 269 (face font-lock-string-face fontified t) 269 279 (fontified t) 279 285 (face font-lock-keyword-face fontified t) 285 306 (fontified t) 306 315 (face font-lock-string-face fontified t) 315 347 (fontified t) 347 356 (face font-lock-string-face fontified t) 356 365 (fontified t) 365 376 (face font-lock-string-face fontified t) 376 388 (fontified t) 388 389 (face font-lock-operator-face fontified t) 389 397 (fontified t) 397 400 (face font-lock-string-face fontified t) 400 406 (fontified t) 406 412 (face font-lock-string-face fontified t) 412 440 (fontified t) 440 443 (face font-lock-keyword-face fontified t) 443 446 (fontified t) 446 448 (face font-lock-keyword-face fontified t) 448 474 (fontified t) 474 477 (face font-lock-keyword-face fontified t) 477 478 (fontified t) 478 486 (face font-lock-function-name-face fontified t) 486 487 (fontified t) 487 491 (face font-lock-keyword-face fontified t) 491 493 (fontified t) 493 494 (face font-lock-operator-face fontified t) 494 495 (face font-lock-operator-face fontified t) 495 496 (fontified t) 496 500 (face font-lock-builtin-face fontified t) 500 511 (fontified t) 511 519 (fontified t) 519 523 (face font-lock-variable-name-face fontified t) 523 524 (fontified t) 524 525 (face font-lock-operator-face fontified t) 525 553 (fontified t) 553 557 (face font-lock-keyword-face fontified t) 557 577 (fontified t) 577 578 (face font-lock-operator-face fontified t) 578 591 (face font-lock-string-face fontified t) 591 593 (fontified t) 593 601 (fontified t) 601 609 (face font-lock-variable-name-face fontified t) 609 610 (fontified t) 610 611 (face font-lock-operator-face fontified t) 611 615 (fontified t) 615 623 (fontified t) 623 624 (face font-lock-comment-delimiter-face fontified t) 624 627 (face font-lock-comment-face fontified t) 627 635 (face font-lock-comment-face fontified t) 635 637 (face font-lock-comment-face fontified t) 637 652 (face font-lock-comment-face fontified t) 652 660 (face font-lock-comment-face fontified t) 660 667 (face font-lock-comment-face fontified t) 667 668 (face font-lock-comment-face fontified t) 668 669 (face font-lock-comment-face fontified t) 669 682 (face font-lock-comment-face fontified t) 682 684 (face font-lock-comment-face fontified t) 684 691 (face font-lock-comment-face fontified t) 691 692 (face font-lock-comment-face fontified t) 692 693 (face font-lock-comment-face rear-nonsticky t fontified t) 693 695 (face font-lock-comment-face fontified t) 695 703 (fontified t) 703 713 (face font-lock-builtin-face fontified t) 713 715 (fontified t) 715 716 (fontified t) 716 717 (fontified t) 717 725 (fontified t) 725 731 (face font-lock-keyword-face fontified t) 731 740 (fontified t) 740 741 (fontified t) 741 749 (fontified t) 749 755 (face font-lock-keyword-face fontified t) 755 758 (fontified t) 758 798 (fontified t) 798 805 (face font-lock-string-face fontified t) 805 808 (fontified t) 808 809 (fontified t) 809 817 (fontified t)) . 181) (undo-tree-id1 . -623) (undo-tree-id3 . -560) (undo-tree-id5 . -741) (undo-tree-id7 . -716) (undo-tree-id9 . -716) (undo-tree-id11 . -716) (undo-tree-id13 . -694) (undo-tree-id15 . -615) (undo-tree-id17 . -615) (undo-tree-id19 . -615) (undo-tree-id21 . -615) (undo-tree-id22 . -615) (undo-tree-id24 . -615) (t 26019 25275 211857 321000)) ((181 . 998) (#("
@dataclass
class Board:
    id: str
    name: str
    url: str

    @staticmethod
    def all() -> dict[str, \"Board\"]:
        downloads = BeautifulSoup(
            requests.get(f\"{BASE_URL}/downloads\").text, features=\"html.parser\"
        ).find_all(class_=\"download\")
        return {
            d.get(\"data-id\"): Board(
                d.get(\"data-id\"), d.get(\"data-name\"), BASE_URL + d.find(\"a\").get(\"href\")
            )
            for d in downloads
        }

    def versions(self) -> list[Version]:
        page = BeautifulSoup(requests.get(self.url).text, features=\"html.parser\")
        versions = []
        # for option in page.find_all(\"option\", attrs={\"data-locale\": \"en-US\"}):
        breakpoint()

        return versions
        return [Version.from_url(option.get(\"value\"))" 0 1 (fontified t) 1 11 (face font-lock-type-face fontified t) 11 12 (fontified t) 12 17 (face font-lock-keyword-face fontified t) 17 18 (fontified t) 18 23 (face font-lock-type-face fontified t) 23 29 (fontified t) 29 31 (face font-lock-builtin-face fontified t) 31 33 (fontified t) 33 36 (face font-lock-builtin-face fontified t) 36 47 (fontified t) 47 50 (face font-lock-builtin-face fontified t) 50 60 (fontified t) 60 63 (face font-lock-builtin-face fontified t) 63 70 (fontified t) 70 82 (face font-lock-builtin-face fontified t) 82 87 (fontified t) 87 90 (face font-lock-keyword-face fontified t) 90 91 (fontified t) 91 94 (face font-lock-function-name-face fontified t) 94 97 (fontified t) 97 98 (face font-lock-operator-face fontified t) 98 99 (face font-lock-operator-face fontified t) 99 100 (fontified t) 100 104 (face font-lock-builtin-face fontified t) 104 105 (fontified t) 105 108 (face font-lock-builtin-face fontified t) 108 110 (fontified t) 110 117 (face font-lock-string-face fontified t) 117 128 (fontified t) 128 137 (face font-lock-variable-name-face fontified t) 137 138 (fontified t) 138 139 (face font-lock-operator-face fontified t) 139 181 (fontified t) 181 182 (face font-lock-string-face fontified t) 182 192 (face nil fontified t) 192 203 (face font-lock-string-face fontified t) 203 219 (fontified t) 219 220 (face font-lock-operator-face fontified t) 220 233 (face font-lock-string-face fontified t) 233 259 (fontified t) 259 260 (face font-lock-operator-face fontified t) 260 270 (face font-lock-string-face fontified t) 270 280 (fontified t) 280 286 (face font-lock-keyword-face fontified t) 286 307 (fontified t) 307 316 (face font-lock-string-face fontified t) 316 348 (fontified t) 348 357 (face font-lock-string-face fontified t) 357 366 (fontified t) 366 377 (face font-lock-string-face fontified t) 377 389 (fontified t) 389 390 (face font-lock-operator-face fontified t) 390 398 (fontified t) 398 401 (face font-lock-string-face fontified t) 401 407 (fontified t) 407 413 (face font-lock-string-face fontified t) 413 441 (fontified t) 441 444 (face font-lock-keyword-face fontified t) 444 447 (fontified t) 447 449 (face font-lock-keyword-face fontified t) 449 475 (fontified t) 475 478 (face font-lock-keyword-face fontified t) 478 479 (fontified t) 479 487 (face font-lock-function-name-face fontified t) 487 488 (fontified t) 488 492 (face font-lock-keyword-face fontified t) 492 494 (fontified t) 494 495 (face font-lock-operator-face fontified t) 495 496 (face font-lock-operator-face fontified t) 496 497 (fontified t) 497 501 (face font-lock-builtin-face fontified t) 501 520 (fontified t) 520 524 (face font-lock-variable-name-face fontified t) 524 525 (fontified t) 525 526 (face font-lock-operator-face fontified t) 526 554 (fontified t) 554 558 (face font-lock-keyword-face fontified t) 558 578 (fontified t) 578 579 (face font-lock-operator-face fontified t) 579 592 (face font-lock-string-face fontified t) 592 602 (fontified t) 602 610 (face font-lock-variable-name-face fontified t) 610 611 (fontified t) 611 612 (face font-lock-operator-face fontified t) 612 616 (fontified t) 616 624 (fontified t) 624 626 (face font-lock-comment-delimiter-face fontified t) 626 696 (face font-lock-comment-face fontified t) 696 697 (face font-lock-comment-face fontified t) 697 705 (fontified t) 705 715 (face font-lock-builtin-face fontified t) 715 727 (fontified t) 727 733 (face font-lock-keyword-face fontified t) 733 751 (fontified t) 751 757 (face font-lock-keyword-face fontified t) 757 787 (fontified t) 787 794 (face font-lock-string-face fontified t) 794 796 (fontified t)) . 181) (undo-tree-id36 . -615) (undo-tree-id37 . -718) (undo-tree-id38 . -616) (undo-tree-id39 . -616) (undo-tree-id40 . -83) (undo-tree-id41 . -83) (undo-tree-id42 . 100) (undo-tree-id43 . 180) (undo-tree-id44 . -717) (undo-tree-id45 . -742) (undo-tree-id46 . -742) (undo-tree-id47 . -751) (undo-tree-id48 . -751) (undo-tree-id49 . -616) (undo-tree-id50 . -616) (undo-tree-id51 . -616) (undo-tree-id52 . -616) (undo-tree-id53 . -616) (undo-tree-id54 . -616) (undo-tree-id55 . -616) (undo-tree-id56 . -616) (undo-tree-id57 . -616) (undo-tree-id58 . -751) (undo-tree-id59 . -751) (t 26019 25275 691857 633000)) (26019 27688 813517 632000) 0 nil])
([nil nil ((329 . 342)) nil (26019 27895 12880 343000) 0 nil])
([nil nil ((#("        # for option in page.find_all(\"option\", attrs={\"data-locale\": \"en-US\"}):" 0 8 (fontified t) 8 10 (face font-lock-comment-delimiter-face fontified t) 10 80 (face font-lock-comment-face fontified t)) . 797) (t 26019 25275 691857 633000)) ((797 . 877)) (26019 27688 643939 216000) 0 nil] [nil nil ((#("        # for option in page.find_all(\"option\", attrs={\"data-locale\": \"en-US\"}):" 0 8 (fontified t) 8 10 (face font-lock-comment-delimiter-face fontified t) 10 80 (face font-lock-comment-face fontified t)) . 797) (undo-tree-id0 . -80) (t 26019 25275 691857 633000)) ((797 . 877)) (26019 27012 548436 373000) 0 nil])
([nil nil ((342 . 346)) nil (26019 27895 12880 105000) 0 nil])
([nil nil ((797 . 805)) ((#("        " 0 8 (fontified t)) . 797) (undo-tree-id30 . 8) (undo-tree-id31 . -8) (undo-tree-id32 . -8) (undo-tree-id33 . -8) (undo-tree-id34 . -8) (undo-tree-id35 . -8)) (26019 27688 488982 166000) 0 nil])
([nil nil ((797 . 805)) ((#("        " 0 8 (fontified t)) . 797) (undo-tree-id26 . -8)) (26019 27012 548386 647000) 0 nil])
([nil nil ((#("        breakpoint()" 0 8 (fontified t) 8 18 (face font-lock-builtin-face fontified t) 18 20 (fontified t)) . 347) (undo-tree-id14 . 20) (undo-tree-id15 . -20)) nil (26019 27895 12879 700000) 0 nil])
([nil nil ((805 . 826)) ((#("for section in page.f" 0 3 (face font-lock-keyword-face fontified t) 3 12 (fontified t) 12 14 (face font-lock-keyword-face fontified t) 14 20 (fontified t) 20 21 (fontified t)) . 805) (undo-tree-id28 . -20) (undo-tree-id29 . -21)) (26019 27688 314191 800000) 0 nil])
nil
([nil current ((#("
" 0 1 (fontified t)) . -346) (undo-tree-id12 . -1) (undo-tree-id13 . -1) 347) nil (26019 27895 12876 813000) 0 nil])
([nil nil ((826 . 835)) ((#("ind_all('" 0 8 (fontified t) 8 9 (face font-lock-string-face fontified t)) . 826)) (26019 27688 120287 37000) 0 nil])
nil
([nil nil ((#("find_all('" 0 9 (fontified t) 9 10 (face font-lock-string-face fontified t)) . 825) (undo-tree-id27 . 10)) ((825 . 835)) (26019 27687 981470 581000) 0 nil])
([nil nil ((825 . 833)) ((#("select('" 0 7 (fontified t) 7 8 (face font-lock-string-face fontified t)) . 825)) (26019 27687 981417 336000) 0 nil])
nil

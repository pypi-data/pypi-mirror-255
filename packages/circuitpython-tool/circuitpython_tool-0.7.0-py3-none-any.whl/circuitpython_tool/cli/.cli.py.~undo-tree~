(undo-tree-save-format-version . 1)
"eeeb8a86604abf988d0354523869f0d705730d18"
[nil nil nil nil (26049 8398 493941 145000) 0 nil]
([nil nil ((#("sort_key):" 0 10 (fontified t)) . 15509) (undo-tree-id6 . -6) (undo-tree-id7 . -5) (undo-tree-id8 . -10) (t 26049 8376 201243 215000)) nil (26049 8398 493940 363000) 0 nil])
([nil nil ((15509 . 15514)) nil (26049 8398 493939 295000) 0 nil])
([nil nil ((#("(" 0 1 (fontified t)) . -15512) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (#(")" 0 1 (fontified t)) . -15513) (undo-tree-id4 . -1) (undo-tree-id5 . -1) 15514) nil (26049 8398 493938 566000) 0 nil])
([nil nil ((15512 . 15513)) nil (26049 8398 493920 852000) 0 nil])
([nil nil ((15513 . 15514) (t 26049 8398 525200 138000)) nil (26049 8399 203104 723000) 0 nil])
([nil nil ((961 . 1067) (#("
    BoardParam,
    ConfigStorageParam,
    FakeDeviceParam,
    LocaleParam,
    label_or_query_argument,
" 0 108 (fontified t)) . 961) 15514 (t 26049 8399 669198 126000)) nil (26049 8409 190435 529000) 0 nil])
([nil nil ((961 . 1069) (#("BoardParam, ConfigStorageParam, FakeDeviceParam,
                     LocaleParam, label_or_query_argument" 0 106 (fontified nil)) . 961) (t 26049 8404 45190 603000)) nil (26049 8409 190435 141000) 0 nil])
([nil nil ((15512 . 15516) (t 26049 8404 261190 239000)) nil (26049 8409 190434 762000) 0 nil])
([nil nil ((#("g" 0 1 (fontified t)) . -15513) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (#("e" 0 1 (fontified t)) . -15514) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (#("t" 0 1 (fontified t)) . -15515) (undo-tree-id10 . -1) (undo-tree-id11 . -1) 15516) nil (26049 8409 190433 980000) 0 nil])
([nil nil ((15513 . 15517)) nil (26049 8409 190414 503000) 0 nil])
([nil nil ((#("Device.key.fget):" 0 17 (fontified t)) . 15502) (undo-tree-id14 . -17) (undo-tree-id15 . -17) (undo-tree-id16 . -10) (undo-tree-id17 . -11) (undo-tree-id18 . -11) (undo-tree-id19 . -11) (undo-tree-id20 . -11) (undo-tree-id21 . -11) (undo-tree-id22 . -15) (undo-tree-id23 . -15) (undo-tree-id24 . -15) (undo-tree-id25 . -15) (undo-tree-id26 . -17) (undo-tree-id27 . -17) (undo-tree-id28 . -17) (undo-tree-id29 . -17) (undo-tree-id30 . -17) (undo-tree-id31 . -17) (undo-tree-id32 . -11) (undo-tree-id33 . -7) (undo-tree-id34 . -17) (t 26049 8410 341180 254000)) nil (26049 8501 524963 928000) 0 nil])
([nil nil ((15502 . 15507)) nil (26049 8501 524958 104000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . -15506) (undo-tree-id12 . -1) (undo-tree-id13 . -1) 15507) nil (26049 8501 524957 523000) 0 nil])
([nil nil ((15506 . 15519)) nil (26049 8501 524946 826000) 0 nil])
([nil nil ((961 . 1067) (#("
    BoardParam,
    ConfigStorageParam,
    FakeDeviceParam,
    LocaleParam,
    label_or_query_argument,
" 0 108 (fontified nil)) . 961) (t 26049 8502 637089 169000)) nil (26049 10158 944462 884000) 0 nil])
([nil nil ((961 . 1069) (#("BoardParam, ConfigStorageParam, FakeDeviceParam,
                     LocaleParam, label_or_query_argument" 0 106 (fontified nil)) . 961) 15517 (t 26049 8527 665082 509000)) nil (26049 10158 944462 504000) 0 nil])
([nil nil ((961 . 1069) (#("BoardParam, ConfigStorageParam, FakeDeviceParam,
                     LocaleParam, label_or_query_argument" 0 106 (fontified nil)) . 961) (t 26049 8533 181081 999000) (961 . 1067) ("
    BoardParam,
    ConfigStorageParam,
    FakeDeviceParam,
    LocaleParam,
    label_or_query_argument,
" . 961) (t 26049 8527 873082 483000)) nil (26049 10158 944461 793000) 0 nil])
([nil nil ((961 . 1069) (#("BoardParam, ConfigStorageParam, FakeDeviceParam,
                     LocaleParam, label_or_query_argument" 0 106 (fontified nil)) . 961) (t 26049 8585 613093 447000) (961 . 1067) ("
    BoardParam,
    ConfigStorageParam,
    FakeDeviceParam,
    LocaleParam,
    label_or_query_argument,
" . 961) (t 26049 8533 389081 987000)) nil (26049 10158 944461 342000) 0 nil])
([nil nil ((961 . 1069) (#("BoardParam, ConfigStorageParam, FakeDeviceParam,
                     LocaleParam, label_or_query_argument" 0 106 (fontified nil)) . 961) (t 26049 8616 601113 319000) (961 . 1067) ("
    BoardParam,
    ConfigStorageParam,
    FakeDeviceParam,
    LocaleParam,
    label_or_query_argument,
" . 961) (t 26049 8585 821093 548000)) nil (26049 10158 944460 615000) 0 nil])
([nil nil ((961 . 1069) (#("BoardParam, ConfigStorageParam, FakeDeviceParam,
                     LocaleParam, label_or_query_argument" 0 106 (fontified nil)) . 961) (t 26049 8654 685150 45000) (961 . 1067) ("
    BoardParam,
    ConfigStorageParam,
    FakeDeviceParam,
    LocaleParam,
    label_or_query_argument,
" . 961) (t 26049 8616 813113 486000)) nil (26049 10158 944459 599000) 0 nil])
([nil nil ((961 . 1069) (#("BoardParam, ConfigStorageParam, FakeDeviceParam,
                     LocaleParam, label_or_query_argument" 0 106 (fontified nil)) . 961) (t 26049 8702 473213 919000) (961 . 1067) ("
    BoardParam,
    ConfigStorageParam,
    FakeDeviceParam,
    LocaleParam,
    label_or_query_argument,
" . 961) (t 26049 8654 893150 280000)) nil (26049 10158 944458 323000) 0 nil])
([nil nil ((961 . 1069) (#("BoardParam, ConfigStorageParam, FakeDeviceParam,
                     LocaleParam, label_or_query_argument" 0 106 (fontified nil)) . 961) (t 26049 8764 501323 692000) (961 . 1067) ("
    BoardParam,
    ConfigStorageParam,
    FakeDeviceParam,
    LocaleParam,
    label_or_query_argument,
" . 961) (t 26049 8702 689214 250000)) nil (26049 10158 944457 427000) 0 nil])
([nil nil ((961 . 1067) (#("
    BoardParam,
    ConfigStorageParam,
    FakeDeviceParam,
    LocaleParam,
    label_or_query_argument,
" 0 108 (fontified nil)) . 961) (t 26049 8764 713324 116000)) nil (26049 10158 944456 633000) 0 nil])
([nil nil ((961 . 1069) (#("BoardParam, ConfigStorageParam, FakeDeviceParam,
                     LocaleParam, label_or_query_argument" 0 106 (fontified nil)) . 961) (t 26049 8769 789334 346000)) nil (26049 10158 944456 72000) 0 nil])
([nil nil ((961 . 1069) (#("BoardParam, ConfigStorageParam, FakeDeviceParam,
                     LocaleParam, label_or_query_argument" 0 106 (fontified nil)) . 961) (t 26049 8773 745342 448000) (961 . 1067) ("
    BoardParam,
    ConfigStorageParam,
    FakeDeviceParam,
    LocaleParam,
    label_or_query_argument,
" . 961) (t 26049 8770 1334 777000)) nil (26049 10158 944455 737000) 0 nil])
([nil nil ((961 . 1067) ("
    BoardParam,
    ConfigStorageParam,
    FakeDeviceParam,
    LocaleParam,
    label_or_query_argument,
" . 961) (t 26049 8773 949342 869000)) nil (26049 10158 944454 783000) 0 nil])
([nil nil ((961 . 1069) (#("BoardParam, ConfigStorageParam, FakeDeviceParam,
                     LocaleParam, label_or_query_argument" 0 106 (fontified nil)) . 961) 15517 (t 26049 8853 557527 915000)) nil (26049 10158 944454 246000) 0 nil])
([nil nil ((961 . 1069) (#("BoardParam, ConfigStorageParam, FakeDeviceParam,
                     LocaleParam, label_or_query_argument" 0 106 (fontified nil)) . 961) (t 26049 8879 197595 782000) (961 . 1067) ("
    BoardParam,
    ConfigStorageParam,
    FakeDeviceParam,
    LocaleParam,
    label_or_query_argument,
" . 961) (t 26049 8853 765528 450000)) nil (26049 10158 944453 604000) 0 nil])
([nil nil ((961 . 1067) ("
    BoardParam,
    ConfigStorageParam,
    FakeDeviceParam,
    LocaleParam,
    label_or_query_argument,
" . 961) (t 26049 8879 405596 348000)) nil (26049 10158 944453 178000) 0 nil])
([nil nil ((961 . 1069) ("BoardParam, ConfigStorageParam, FakeDeviceParam,
                     LocaleParam, label_or_query_argument" . 961) (t 26049 8896 289643 90000)) nil (26049 10158 944452 849000) 0 nil])
([nil nil ((961 . 1069) (#("BoardParam, ConfigStorageParam, FakeDeviceParam,
                     LocaleParam, label_or_query_argument" 0 106 (fontified nil)) . 961) (t 26049 8910 825684 567000) (961 . 1067) ("
    BoardParam,
    ConfigStorageParam,
    FakeDeviceParam,
    LocaleParam,
    label_or_query_argument,
" . 961) (t 26049 8896 497643 676000)) nil (26049 10158 944452 300000) 0 nil])
([nil nil ((961 . 1069) (#("BoardParam, ConfigStorageParam, FakeDeviceParam,
                     LocaleParam, label_or_query_argument" 0 106 (fontified nil)) . 961) (t 26049 8942 985780 295000) (961 . 1067) ("
    BoardParam,
    ConfigStorageParam,
    FakeDeviceParam,
    LocaleParam,
    label_or_query_argument,
" . 961) (t 26049 8911 37685 181000)) nil (26049 10158 944451 257000) 0 nil])
([nil nil ((961 . 1067) ("
    BoardParam,
    ConfigStorageParam,
    FakeDeviceParam,
    LocaleParam,
    label_or_query_argument,
" . 961) (t 26049 8943 201780 956000)) nil (26049 10158 944450 500000) 0 nil])
([nil nil ((961 . 1069) (#("BoardParam, ConfigStorageParam, FakeDeviceParam,
                     LocaleParam, label_or_query_argument" 0 106 (fontified nil)) . 961) 15517 (t 26049 8978 701892 616000)) nil (26049 10158 944449 719000) 0 nil])
([nil nil ((961 . 1069) (#("BoardParam, ConfigStorageParam, FakeDeviceParam,
                     LocaleParam, label_or_query_argument" 0 106 (fontified nil)) . 961) (t 26049 9007 821988 579000) (961 . 1067) ("
    BoardParam,
    ConfigStorageParam,
    FakeDeviceParam,
    LocaleParam,
    label_or_query_argument,
" . 961) (t 26049 8978 917893 313000)) nil (26049 10158 944448 824000) 0 nil])
([nil nil ((961 . 1069) (#("BoardParam, ConfigStorageParam, FakeDeviceParam,
                     LocaleParam, label_or_query_argument" 0 106 (fontified nil)) . 961) (t 26049 9020 482031 459000) (961 . 1067) ("
    BoardParam,
    ConfigStorageParam,
    FakeDeviceParam,
    LocaleParam,
    label_or_query_argument,
" . 961) (t 26049 9008 29989 278000)) nil (26049 10158 944447 963000) 0 nil])
([nil nil ((961 . 1069) (#("BoardParam, ConfigStorageParam, FakeDeviceParam,
                     LocaleParam, label_or_query_argument" 0 106 (fontified nil)) . 961) (t 26049 9105 706337 188000) (961 . 1067) ("
    BoardParam,
    ConfigStorageParam,
    FakeDeviceParam,
    LocaleParam,
    label_or_query_argument,
" . 961) (t 26049 9020 690032 169000)) nil (26049 10158 944447 269000) 0 nil])
([nil nil ((961 . 1069) (#("BoardParam, ConfigStorageParam, FakeDeviceParam,
                     LocaleParam, label_or_query_argument" 0 106 (fontified nil)) . 961) (t 26049 9447 647033 587000) (961 . 1067) ("
    BoardParam,
    ConfigStorageParam,
    FakeDeviceParam,
    LocaleParam,
    label_or_query_argument,
" . 961) (t 26049 9105 914337 967000)) nil (26049 10158 944446 163000) 0 nil])
([nil nil ((961 . 1069) (#("BoardParam, ConfigStorageParam, FakeDeviceParam,
                     LocaleParam, label_or_query_argument" 0 106 (fontified nil)) . 961) (t 26049 9508 554607 429000) (961 . 1067) ("
    BoardParam,
    ConfigStorageParam,
    FakeDeviceParam,
    LocaleParam,
    label_or_query_argument,
" . 961) (t 26049 9447 863031 942000)) nil (26049 10158 944445 693000) 0 nil])
([nil nil ((961 . 1067) (#("
    BoardParam,
    ConfigStorageParam,
    FakeDeviceParam,
    LocaleParam,
    label_or_query_argument,
" 0 108 (fontified nil)) . 961) (t 26049 9508 766606 71000)) nil (26049 10158 944445 151000) 0 nil])
([nil nil ((961 . 1069) ("BoardParam, ConfigStorageParam, FakeDeviceParam,
                     LocaleParam, label_or_query_argument" . 961) (t 26049 9517 470551 72000)) nil (26049 10158 944444 774000) 0 nil])
([nil nil ((961 . 1069) (#("BoardParam, ConfigStorageParam, FakeDeviceParam,
                     LocaleParam, label_or_query_argument" 0 106 (fontified nil)) . 961) (t 26049 9564 826275 709000) (961 . 1067) ("
    BoardParam,
    ConfigStorageParam,
    FakeDeviceParam,
    LocaleParam,
    label_or_query_argument,
" . 961) (t 26049 9517 690549 699000)) nil (26049 10158 944444 80000) 0 nil])
([nil nil ((961 . 1069) (#("BoardParam, ConfigStorageParam, FakeDeviceParam,
                     LocaleParam, label_or_query_argument" 0 106 (fontified nil)) . 961) (t 26049 9570 830243 555000) (961 . 1067) ("
    BoardParam,
    ConfigStorageParam,
    FakeDeviceParam,
    LocaleParam,
    label_or_query_argument,
" . 961) (t 26049 9565 46274 519000)) nil (26049 10158 944443 217000) 0 nil])
([nil nil ((961 . 1069) (#("BoardParam, ConfigStorageParam, FakeDeviceParam,
                     LocaleParam, label_or_query_argument" 0 106 (fontified nil)) . 961) (t 26049 9602 946081 550000) (961 . 1067) ("
    BoardParam,
    ConfigStorageParam,
    FakeDeviceParam,
    LocaleParam,
    label_or_query_argument,
" . 961) (t 26049 9571 50242 388000)) nil (26049 10158 944442 140000) 0 nil])
([nil nil ((961 . 1069) (#("BoardParam, ConfigStorageParam, FakeDeviceParam,
                     LocaleParam, label_or_query_argument" 0 106 (fontified nil)) . 961) (t 26049 9625 37979 502000) (961 . 1067) ("
    BoardParam,
    ConfigStorageParam,
    FakeDeviceParam,
    LocaleParam,
    label_or_query_argument,
" . 961) (t 26049 9603 158080 536000)) nil (26049 10158 944441 541000) 0 nil])
([nil nil ((961 . 1067) ("
    BoardParam,
    ConfigStorageParam,
    FakeDeviceParam,
    LocaleParam,
    label_or_query_argument,
" . 961) (t 26049 9625 253978 542000)) nil (26049 10158 944441 11000) 0 nil])
([nil nil ((961 . 1069) (#("BoardParam, ConfigStorageParam, FakeDeviceParam,
                     LocaleParam, label_or_query_argument" 0 106 (fontified nil)) . 961) 15517 (t 26049 9711 701646 596000)) nil (26049 10158 944440 487000) 0 nil])
([nil nil ((961 . 1067) ("
    BoardParam,
    ConfigStorageParam,
    FakeDeviceParam,
    LocaleParam,
    label_or_query_argument,
" . 961) (t 26049 9711 909645 917000)) nil (26049 10158 944439 895000) 0 nil])
([nil nil ((961 . 1069) (#("BoardParam, ConfigStorageParam, FakeDeviceParam,
                     LocaleParam, label_or_query_argument" 0 106 (fontified nil)) . 961) (t 26049 9761 161500 71000)) nil (26049 10158 944439 532000) 0 nil])
([nil nil ((961 . 1067) ("
    BoardParam,
    ConfigStorageParam,
    FakeDeviceParam,
    LocaleParam,
    label_or_query_argument,
" . 961) (t 26049 9761 381499 485000)) nil (26049 10158 944439 147000) 0 nil])
([nil nil ((961 . 1069) ("BoardParam, ConfigStorageParam, FakeDeviceParam,
                     LocaleParam, label_or_query_argument" . 961) (t 26049 9768 281481 344000)) nil (26049 10158 944438 281000) 0 nil])
([nil nil ((961 . 1069) (#("BoardParam, ConfigStorageParam, FakeDeviceParam,
                     LocaleParam, label_or_query_argument" 0 106 (fontified nil)) . 961) (t 26049 9787 541433 540000) (961 . 1067) ("
    BoardParam,
    ConfigStorageParam,
    FakeDeviceParam,
    LocaleParam,
    label_or_query_argument,
" . 961) (t 26049 9768 497480 786000)) nil (26049 10158 944437 502000) 0 nil])
([nil nil ((961 . 1069) (#("BoardParam, ConfigStorageParam, FakeDeviceParam,
                     LocaleParam, label_or_query_argument" 0 106 (fontified nil)) . 961) (t 26049 9811 745379 146000) (961 . 1067) ("
    BoardParam,
    ConfigStorageParam,
    FakeDeviceParam,
    LocaleParam,
    label_or_query_argument,
" . 961) (t 26049 9787 761433 16000)) nil (26049 10158 944436 376000) 0 nil])
([nil nil ((961 . 1069) (#("BoardParam, ConfigStorageParam, FakeDeviceParam,
                     LocaleParam, label_or_query_argument" 0 106 (fontified nil)) . 961) (t 26049 9930 817194 667000) (961 . 1067) ("
    BoardParam,
    ConfigStorageParam,
    FakeDeviceParam,
    LocaleParam,
    label_or_query_argument,
" . 961) (t 26049 9811 957378 696000)) nil (26049 10158 944435 653000) 0 nil])
([nil nil ((961 . 1067) ("
    BoardParam,
    ConfigStorageParam,
    FakeDeviceParam,
    LocaleParam,
    label_or_query_argument,
" . 961) (t 26049 9931 25194 455000)) nil (26049 10158 944434 534000) 0 nil])
([nil nil ((961 . 1069) ("BoardParam, ConfigStorageParam, FakeDeviceParam,
                     LocaleParam, label_or_query_argument" . 961) (t 26049 9940 721184 957000)) nil (26049 10158 944433 820000) 0 nil])
([nil nil ((961 . 1069) ("BoardParam, ConfigStorageParam, FakeDeviceParam,
                     LocaleParam, label_or_query_argument" . 961) (t 26049 9956 317171 253000) (961 . 1067) ("
    BoardParam,
    ConfigStorageParam,
    FakeDeviceParam,
    LocaleParam,
    label_or_query_argument,
" . 961) (t 26049 9940 933184 758000)) nil (26049 10158 944432 809000) 0 nil])
([nil nil ((961 . 1069) (#("BoardParam, ConfigStorageParam, FakeDeviceParam,
                     LocaleParam, label_or_query_argument" 0 106 (fontified nil)) . 961) (t 26049 9965 809163 847000) (961 . 1067) ("
    BoardParam,
    ConfigStorageParam,
    FakeDeviceParam,
    LocaleParam,
    label_or_query_argument,
" . 961) (t 26049 9956 529171 80000)) nil (26049 10158 944431 904000) 0 nil])
([nil nil ((961 . 1069) ("BoardParam, ConfigStorageParam, FakeDeviceParam,
                     LocaleParam, label_or_query_argument" . 961) (t 26049 9973 945158 49000) (961 . 1067) (#("
    BoardParam,
    ConfigStorageParam,
    FakeDeviceParam,
    LocaleParam,
    label_or_query_argument,
" 0 108 (fontified nil)) . 961) (t 26049 9966 17163 693000)) nil (26049 10158 944431 158000) 0 nil])
([nil nil ((961 . 1069) (#("BoardParam, ConfigStorageParam, FakeDeviceParam,
                     LocaleParam, label_or_query_argument" 0 106 (fontified nil)) . 961) (t 26049 10042 45128 360000) (961 . 1067) ("
    BoardParam,
    ConfigStorageParam,
    FakeDeviceParam,
    LocaleParam,
    label_or_query_argument,
" . 961) (t 26049 9974 161157 903000)) nil (26049 10158 944430 278000) 0 nil])
([nil nil ((961 . 1069) (#("BoardParam, ConfigStorageParam, FakeDeviceParam,
                     LocaleParam, label_or_query_argument" 0 106 (fontified nil)) . 961) (t 26049 10054 29126 423000) (961 . 1067) ("
    BoardParam,
    ConfigStorageParam,
    FakeDeviceParam,
    LocaleParam,
    label_or_query_argument,
" . 961) (t 26049 10042 253128 319000)) nil (26049 10158 944429 210000) 0 nil])
([nil nil ((14195 . 14199) (#("    " 0 4 (fontified nil)) . 14194) (undo-tree-id48 . -4) (14193 . 14199) (t 26049 10054 241126 398000)) nil (26049 10158 944428 360000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -14195) (undo-tree-id47 . -4) 14199) nil (26049 10158 944427 315000) 0 nil])
([nil nil ((14195 . 14207)) nil (26049 10158 944426 645000) 0 nil])
([nil nil ((14207 . 14208)) nil (26049 10158 944426 175000) 0 nil])
([nil nil ((14208 . 14214)) nil (26049 10158 944425 905000) 0 nil])
([nil nil ((#("e" 0 1 (face font-lock-function-name-face fontified t)) . -14212) (undo-tree-id45 . -1) (#("n" 0 1 (face font-lock-function-name-face fontified t)) . -14213) (undo-tree-id46 . -1) 14214) nil (26049 10158 944425 503000) 0 nil])
([nil nil ((14212 . 14230)) nil (26049 10158 944424 589000) 0 nil])
([nil nil ((14230 . 14235)) nil (26049 10158 944424 251000) 0 nil])
([nil nil ((14116 . 14121)) nil (26049 10158 944423 719000) 0 nil])
([nil nil ((14121 . 14128)) nil (26049 10158 944423 308000) 0 nil])
([nil nil ((14128 . 14149)) nil (26049 10158 944422 822000) 0 nil])
([nil nil ((14149 . 14170)) nil (26049 10158 944422 439000) 0 nil])
([nil nil ((14170 . 14171)) nil (26049 10158 944422 134000) 0 nil])
([nil nil ((14248 . 14253)) nil (26049 10158 944421 723000) 0 nil])
([nil nil ((14253 . 14255)) nil (26049 10158 944420 917000) 0 nil])
([nil nil ((#("O" 0 1 (face font-lock-comment-face fontified t)) . -14254) (undo-tree-id44 . -1) 14255) nil (26049 10158 944420 496000) 0 nil])
([nil nil ((14254 . 14267)) nil (26049 10158 944419 756000) 0 nil])
([nil nil ((#("0" 0 1 (face font-lock-comment-face fontified t)) . -14265) (undo-tree-id42 . -1) (#(":" 0 1 (face font-lock-comment-face fontified t)) . -14266) (undo-tree-id43 . -1) 14267) nil (26049 10158 944419 347000) 0 nil])
([nil nil ((14265 . 14286)) nil (26049 10158 944418 355000) 0 nil])
([nil nil ((14286 . 14307)) nil (26049 10158 944417 906000) 0 nil])
([nil nil ((#("o" 0 1 (face font-lock-comment-face fontified t)) . -14305) (undo-tree-id40 . -1) (#("i" 0 1 (face font-lock-comment-face fontified t)) . -14306) (undo-tree-id41 . -1) 14307) nil (26049 10158 944417 524000) 0 nil])
([nil nil ((14305 . 14306)) nil (26049 10158 944416 663000) 0 nil])
([nil nil ((#("o" 0 1 (face font-lock-comment-face fontified t)) . -14303) (undo-tree-id37 . -1) (#("n" 0 1 (face font-lock-comment-face fontified t)) . -14304) (undo-tree-id38 . -1) (#("l" 0 1 (face font-lock-comment-face fontified t)) . -14305) (undo-tree-id39 . -1) 14306) nil (26049 10158 944415 915000) 0 nil])
([nil nil ((14303 . 14305)) nil (26049 10158 944414 354000) 0 nil])
([nil nil ((14305 . 14310)) nil (26049 10158 944413 940000) 0 nil])
([nil nil ((#("." 0 1 (face font-lock-comment-face fontified t)) . -14309) (undo-tree-id36 . -1) 14310) nil (26049 10158 944413 422000) 0 nil])
([nil nil ((14309 . 14325)) nil (26049 10158 944412 370000) 0 nil])
([nil nil ((14367 . 14370)) nil (26049 10158 944411 788000) 0 nil])
([nil nil ((#("    dev" 0 7 (fontified t)) . 14363)) nil (26049 10158 944411 515000) 0 nil])
([nil nil ((14363 . 14367)) nil (26049 10158 944410 933000) 0 nil])
([nil nil ((14367 . 14373)) nil (26049 10158 944410 495000) 0 nil])
([nil nil ((14373 . 14375)) nil (26049 10158 944409 930000) 0 nil])
([nil nil ((#("F" 0 1 (fontified t)) . -14374) (undo-tree-id35 . -1) 14375) nil (26049 10158 944409 562000) 0 nil])
([nil nil ((14374 . 14389)) nil (26049 10158 944401 574000) 0 nil])
([nil nil ((806 . 807)) nil (26049 10158 944401 171000) 0 nil])
([nil nil ((807 . 817)) nil (26049 10158 944400 765000) 0 nil])
([nil nil ((817 . 838)) nil (26049 10158 944400 47000) 0 nil])
([nil nil ((838 . 844)) nil (26049 10158 944395 112000) 0 nil])
([nil nil ((817 . 14365) (#("uf2_device import Uf2Device
from ..hw.query import Query
from ..uf2 import Board
from . import completion
from .config import Config, ConfigStorage, DeviceLabel
from .params import (
    BoardParam,
    ConfigStorageParam,
    FakeDeviceParam,
    LocaleParam,
    label_or_query_argument,
)
from .shared_state import SharedState

# Use `rich` for tracebacks and logging.
traceback.install(show_locals=True)
logging.basicConfig(
    level=\"NOTSET\",
    format=\"%(message)s\",
    datefmt=\"[%X]\",
    handlers=[
        RichHandler(rich_tracebacks=True, markup=True, omit_repeated_times=False)
    ],
)
logger = logging.getLogger(__name__)


def _render_device(self: Device) -> Table:
    table = Table(\"Property\", \"Value\")
    table.add_row(\"Vendor\", self.vendor)
    table.add_row(\"Model\", self.model)
    table.add_row(\"Serial\", self.serial)
    table.add_row(\"Partition Path\", str(self.partition_path))
    table.add_row(\"Serial Path\", str(self.serial_path))
    table.add_row(\"Mountpoint\", str(self.get_mountpoint()))
    return table


setattr(Device, \"__rich__\", _render_device)


def get_query(device_labels: dict[str, DeviceLabel], arg: str) -> Query:
    \"\"\"Extract query from a string specifying either a device label or a query.

    Raises ValueError if the string matched neither.\"\"\"
    for k, v in device_labels.items():
        if arg == k:
            return v.query
    return Query.parse(arg)


pass_shared_state = click.make_pass_decorator(SharedState, ensure=True)
\"\"\"Decorator for passing SharedState to a function.\"\"\"

# These can be removed in python 3.12
#
# Type variables for return value and function parameters.
R = TypeVar(\"R\")
P = ParamSpec(\"P\")


def pass_config_storage(
    f: Callable[Concatenate[ConfigStorage, P], R]
) -> Callable[P, R]:
    \"\"\"Decorator for passing ConfigStorage to a function.\"\"\"

    @pass_shared_state
    @wraps(f)
    def inner(state: SharedState, /, *args: P.args, **kwargs: P.kwargs) -> R:
        return f(state.config_storage, *args, **kwargs)

    return inner


def pass_read_only_config(f: Callable[Concatenate[Config, P], R]) -> Callable[P, R]:
    \"\"\"Decorator for supplying a function with a read-only snapshot of our current Config.\"\"\"

    @pass_config_storage
    @wraps(f)
    def inner(config_storage: ConfigStorage, /, *args: P.args, **kwargs: P.kwargs) -> R:
        with config_storage.open() as config:
            return f(config, *args, **kwargs)

    return inner


@click.version_option(VERSION, \"--version\", \"-v\")
@click.group(
    context_settings=dict(
        help_option_names=[\"-h\", \"--help\"], auto_envvar_prefix=\"CIRCUITPYTHON_TOOL\"
    ),
    epilog=f\"Version: {VERSION}\",
)
@click.option(
    \"--config\",
    \"-c\",
    \"config_path\",
    type=ConfigStorageParam(),
    default=ConfigStorage(),
    expose_value=False,
    show_envvar=True,
    # Force evaluation of this paramter early so that later parameters can
    # assume the config has already been found.
    is_eager=True,
    help=\"Path to configuration TOML file for device labels and source trees.\",
)
@click.option(
    \"--log-level\",
    \"-l\",
    type=click.Choice([\"DEBUG\", \"INFO\", \"WARNING\", \"ERROR\"]),
    default=\"INFO\",
    show_envvar=True,
    help=\"Only display logs at or above ths level.\",
)
@click.option(
    \"--fake-device-config\",
    \"-f\",
    type=FakeDeviceParam(),
    expose_value=False,
    show_envvar=True,
    # Force evaluation of this paramter early so that later parameters can
    # assume the config has already been found.
    is_eager=True,
    help=\"Path to TOML configuration file for fake devices. For use in tests and demos.\",
)
def main(log_level: str) -> None:
    \"\"\"Tool for interfacing with CircuitPython devices.\"\"\"
    root_logger = logging.getLogger()
    root_logger.setLevel(log_level)


@main.command()
@label_or_query_argument(\"query\", default=Query.any())
@click.option(
    \"-s\",
    \"--save\",
    \"fake_device_save_path\",
    type=click.Path(dir_okay=False, path_type=Path),
    help=\"If set, save devices to a TOML file for later recall using the --fake-devices flag.\",
)
@pass_read_only_config
@pass_shared_state
def devices(
    state: SharedState, config: Config, query: Query, fake_device_save_path: Path | None
) -> None:
    \"\"\"List all connected CircuitPython devices.

    If QUERY is specified, only devices matching that query are listed.\"\"\"
    devices = query.matching_devices(state.all_devices())
    if devices:
        print(\"Connected CircuitPython devices:\", devices_table(devices))
    else:
        print(\":person_shrugging: [blue]No[/] connected CircuitPython devices found.\")

    if fake_device_save_path:
        logging.info(f\"Saving device list to {str(fake_device_save_path)}\")
        fake_device_save_path.write_text(fake_device.to_toml(devices))


@main.group()
def label() -> None:
    \"\"\"Manage device labels.\"\"\"
    pass


@label.command(\"list\")
@pass_read_only_config
def label_list(config: Config) -> None:
    \"\"\"List all device labels.\"\"\"
    labels = config.device_labels
    if not labels:
        print(\":person_shrugging: [blue]No[/] existing labels found.\")
        return
    table = Table(\"Label\", \"Query\")
    for name, label in config.device_labels.items():
        table.add_row(name, label.query.as_str())
    print(table)


@label.command(\"add\")
@click.argument(\"key\", required=True, shell_complete=completion.device_label)
@label_or_query_argument(\"query\")
@click.option(
    \"--force\",
    \"-f\",
    is_flag=True,
    help=\"Add the new label even if a label with the same name already exists.\"
    \"The new QUERY value will override the previous stored value.\",
)
@pass_config_storage
def label_add(
    config_storage: ConfigStorage, key: str, query: Query, force: bool
) -> None:
    \"\"\"Add a new device label.

    Creates a new device label with the name KEY, referencing the given QUERY.
    \"\"\"
    with config_storage.open() as config:
        labels = config.device_labels
        old_label = labels.get(key)
        if old_label:
            if force:
                logger.info(f\"Label [blue]{key}[/] already exists. Proceeding anyway.\")
            else:
                print(
                    f\":thumbs_down: Label [red]{key}[/] already exists: \",
                    old_label.query.as_str(),
                )
                exit(1)

        label = DeviceLabel(query)
        labels[key] = label
    print(
        f\":thumbs_up: Label [blue]{key}[/] added [green]successfully[/]: {label.query.as_str()}\"
    )


@label.command(\"remove\")
@click.confirmation_option(
    \"--yes\", \"-y\", prompt=\"Are you sure you want to delete this label?\"
)
@click.argument(\"label_name\", shell_complete=completion.device_label)
@click.option(
    \"--force\",
    \"-f\",
    is_flag=True,
    help=\"Return success even if there was no matching label to remove.\",
)
@pass_config_storage
def label_remove(config_storage: ConfigStorage, label_name: str, force: bool) -> None:
    \"\"\"Delete a device label.\"\"\"
    with config_storage.open() as config:
        label = config.device_labels.get(label_name)
        if label:
            logger.debug(f\"Found label [blue]{label_name}[/]: {label}\")
            del config.device_labels[label_name]
        elif force:
            logger.info(f\"Label [blue]{label_name}[/] not found. Proceeding anyway.\")
        else:
            print(f\":thumbs_down: Label [red]{label_name}[/] does not exist.\")
            exit(1)
    print(f\":thumbs_up: Label [blue]{label_name}[/] [green]successfully[/] deleted.\")


def get_source_dir(source_dir: Path | None) -> Path:
    source_dir = source_dir or fs.guess_source_dir(Path.cwd())
    if source_dir is None:
        print(
            \":thumbs_down: [red]Failed[/red] to guess source directory. \"
            \"Either change the current directory, \"
            \"or explicitly specify the directory using [blue]--dir[/].\"
        )
        exit(1)
    return source_dir


@main.command
@click.option(
    \"--dir\",
    \"-d\",
    \"source_dir\",
    type=click.Path(exists=True, file_okay=False, path_type=Path),
    required=False,
    help=\"Path containing source code to upload. \"
    \"If not specified, the source directory is guessed by searching the current directory and \"
    \"its descendants for user code (e.g. code.py).\",
)
@label_or_query_argument(\"query\", required=True)
def upload(source_dir: Path | None, query: Query) -> None:
    \"\"\"Upload code to device.\"\"\"
    source_dir = get_source_dir(source_dir)
    print(f\"Source directory: {source_dir}\")
    device = distinct_device(query)
    mountpoint = device.mount_if_needed()
    print(\"Uploading to device: \", device)
    fs.upload([source_dir], mountpoint)
    print(\":thumbs_up: Upload [green]succeeded.\")


@main.command
@click.option(
    \"--dir\",
    \"-d\",
    \"source_dir\",
    type=click.Path(exists=True, file_okay=False, path_type=Path),
    required=False,
    help=\"Path containing source code to upload. \"
    \"If not specified, the source directory is guessed by searching the current directory and \"
    \"its descendants for user code (e.g. code.py).\",
)
@label_or_query_argument(\"query\")
def watch(source_dir: Path | None, query: Query) -> None:
    \"\"\"Continuously upload code to device in response to source file changes.

    The contents of the source tree TREE_NAME will be copied onto the device
    with the label LABEL_NAME.

    This command will always perform at least one upload. Then this command
    waits for filesystem events from all paths and descendant paths of the
    source tree. Currently this command will only properly track file
    modifications. Creation of new files and folders requires you to rerun this
    command in order to monitor them.
    \"\"\"
    source_dir = get_source_dir(source_dir)
    print(f\"Source directory: {source_dir}\")
    device = distinct_device(query)
    print(\"Target device: \")
    print(device)
    # Always do at least one upload at the start.
    source_dirs = [source_dir]
    fs.upload(source_dirs, device.mount_if_needed())

    # TODO(dhrosa): Expose delay as a flag.
    events = time_batched(fs.watch_all(source_dirs), delay=lambda: asyncio.sleep(0.5))

    async def watch_loop() -> None:
        while True:
            with get_console().status(
                \"[yellow]Waiting[/yellow] for file modification.\"
            ):
                modified_paths = await anext(events)
                logger.info(f\"Modified paths: {[str(p) for p in modified_paths]}\")
            with get_console().status(\"Uploading to device.\"):
                fs.upload(source_dirs, device.mount_if_needed())

    try:
        asyncio.run(watch_loop())
    except KeyboardInterrupt:
        print(\"Watch [magenta]cancelled[/magenta] by keyboard interrupt.\")


@main.command
@label_or_query_argument(\"query\")
def connect(query: Query) -> None:
    \"\"\"Connect to a device's serial terminal.\"\"\"
    device = distinct_device(query)
    logger.info(\"Launching minicom for \")
    logger.info(device)
    assert device.serial_path is not None
    execlp(\"minicom\", \"minicom\", \"-D\", str(device.serial_path))


@main.group
def uf2() -> None:
    \"\"\"Search and download CircuitPython UF2 binaries.\"\"\"
    pass


@uf2.command
def versions() -> None:
    \"\"\"List available CircuitPython boards.\"\"\"
    table = Table()
    table.add_column(\"Id\")
    table.add_column(\"Downloads\", justify=\"right\")
    table.add_column(\"Stable Version\")
    table.add_column(\"Unstable Version\")
    # Sort boards by decreasing popularity, then alphabetically.
    for board in sorted(Board.all(), key=lambda b: (-b.download_count, b.id)):
        table.add_row(
            board.id,
            str(board.download_count),
            board.stable_version.label if board.stable_version else \"\",
            board.unstable_version.label if board.unstable_version else \"\",
        )
    with get_console().pager():
        print(table)


@uf2.command
@click.argument(\"board\", type=BoardParam(), required=True)
@click.option(
    \"--locale\",
    default=\"en_US\",
    type=LocaleParam(),
    help=\"Locale for CircuitPython install.\",
)
def url(board: Board, locale: str) -> None:
    \"\"\"Print download URL for CircuitPython image.\"\"\"
    print(board.download_url(board.most_recent_version, locale))


@uf2.command
@click.argument(\"board\", type=BoardParam(), required=True)
@click.argument(
    \"destination\", type=click.Path(path_type=Path), required=False, default=Path.cwd()
)
@click.option(
    \"--locale\",
    default=\"en_US\",
    type=LocaleParam(),
    help=\"Locale for CircuitPython install.\",
)
def download(board: Board, locale: str, destination: Path) -> None:
    \"\"\"Download CircuitPython image for the requested board.

    If DESTINATION is not provided, the file is downloaded to the current directory.
    If DESTINATION is a directory, the filename is automatically generated.
    \"\"\"
    url = board.download_url(board.most_recent_version, locale)
    if destination.is_dir():
        destination /= url.split(\"/\")[-1]
    print(f\"Source: {url}\")
    print(f\"Destination: {destination}\")
    response = urlopen(url)
    with progress.wrap_file(
        response,
        total=int(response.headers[\"Content-Length\"]),
        description=\"Downloading\",
    ) as f:
        destination.write_bytes(f.read())


@uf2.command
@label_or_query_argument(\"query\")
def enter(query: Query) -> None:
    \"\"\"Restart selected device into UF2 bootloader.\"\"\"
    device = distinct_device(query)
    print(device)
    device.uf2_enter()
    #TODO(dhrosa): Wait for bootloader device to come online before exiting." 0 11 (fontified t) 11 17 (face font-lock-keyword-face fontified t) 17 27 (fontified t) 27 28 (fontified t) 28 32 (face font-lock-keyword-face fontified t) 32 44 (fontified t) 44 50 (face font-lock-keyword-face fontified t) 50 57 (fontified t) 57 61 (face font-lock-keyword-face fontified t) 61 68 (fontified t) 68 74 (face font-lock-keyword-face fontified t) 74 81 (fontified t) 81 85 (face font-lock-keyword-face fontified t) 85 88 (fontified t) 88 94 (face font-lock-keyword-face fontified t) 94 106 (fontified t) 106 110 (face font-lock-keyword-face fontified t) 110 119 (fontified t) 119 125 (face font-lock-keyword-face fontified t) 125 161 (fontified t) 161 165 (face font-lock-keyword-face fontified t) 165 174 (fontified t) 174 180 (face font-lock-keyword-face fontified t) 180 182 (fontified t) 182 290 (fontified t) 290 292 (fontified t) 292 296 (face font-lock-keyword-face fontified t) 296 311 (fontified t) 311 317 (face font-lock-keyword-face fontified t) 317 331 (fontified t) 331 333 (face font-lock-comment-delimiter-face fontified t) 333 372 (face font-lock-comment-face fontified t) 372 401 (fontified t) 401 402 (face font-lock-operator-face fontified t) 402 406 (face font-lock-constant-face fontified t) 406 438 (fontified t) 438 439 (face font-lock-operator-face fontified t) 439 447 (face font-lock-string-face fontified t) 447 453 (fontified t) 453 459 (face font-lock-builtin-face fontified t) 459 460 (face font-lock-operator-face fontified t) 460 473 (face font-lock-string-face fontified t) 473 486 (fontified t) 486 487 (face font-lock-operator-face fontified t) 487 493 (face font-lock-string-face fontified t) 493 507 (fontified t) 507 508 (face font-lock-operator-face fontified t) 508 545 (fontified t) 545 546 (face font-lock-operator-face fontified t) 546 550 (face font-lock-constant-face fontified t) 550 558 (fontified t) 558 559 (face font-lock-operator-face fontified t) 559 563 (face font-lock-constant-face fontified t) 563 584 (fontified t) 584 585 (face font-lock-operator-face fontified t) 585 590 (face font-lock-constant-face fontified t) 590 601 (fontified t) 601 607 (face font-lock-variable-name-face fontified t) 607 608 (fontified t) 608 609 (face font-lock-operator-face fontified t) 609 628 (fontified t) 628 636 (face font-lock-builtin-face fontified t) 636 640 (fontified t) 640 643 (face font-lock-keyword-face fontified t) 643 644 (fontified t) 644 658 (face font-lock-function-name-face fontified t) 658 659 (fontified t) 659 663 (face font-lock-keyword-face fontified t) 663 673 (fontified t) 673 674 (face font-lock-operator-face fontified t) 674 675 (face font-lock-operator-face fontified t) 675 687 (fontified t) 687 692 (face font-lock-variable-name-face fontified t) 692 693 (fontified t) 693 694 (face font-lock-operator-face fontified t) 694 701 (fontified t) 701 711 (face font-lock-string-face fontified t) 711 713 (fontified t) 713 720 (face font-lock-string-face fontified t) 720 722 (fontified t) 722 740 (fontified t) 740 748 (face font-lock-string-face fontified t) 748 750 (fontified t) 750 754 (face font-lock-keyword-face fontified t) 754 781 (fontified t) 781 788 (face font-lock-string-face fontified t) 788 790 (fontified t) 790 794 (face font-lock-keyword-face fontified t) 794 820 (fontified t) 820 828 (face font-lock-string-face fontified t) 828 830 (fontified t) 830 834 (face font-lock-keyword-face fontified t) 834 861 (fontified t) 861 877 (face font-lock-string-face fontified t) 877 879 (fontified t) 879 882 (face font-lock-builtin-face fontified t) 882 883 (fontified t) 883 887 (face font-lock-keyword-face fontified t) 887 923 (fontified t) 923 936 (face font-lock-string-face fontified t) 936 938 (fontified t) 938 941 (face font-lock-builtin-face fontified t) 941 942 (fontified t) 942 946 (face font-lock-keyword-face fontified t) 946 979 (fontified t) 979 991 (face font-lock-string-face fontified t) 991 993 (fontified t) 993 996 (face font-lock-builtin-face fontified t) 996 997 (fontified t) 997 1001 (face font-lock-keyword-face fontified t) 1001 1025 (fontified t) 1025 1031 (face font-lock-keyword-face fontified t) 1031 1040 (fontified t) 1040 1047 (face font-lock-builtin-face fontified t) 1047 1056 (fontified t) 1056 1066 (face font-lock-string-face fontified t) 1066 1086 (fontified t) 1086 1089 (face font-lock-keyword-face fontified t) 1089 1090 (fontified t) 1090 1099 (face font-lock-function-name-face fontified t) 1099 1115 (fontified t) 1115 1119 (face font-lock-builtin-face fontified t) 1119 1120 (fontified t) 1120 1123 (face font-lock-builtin-face fontified t) 1123 1144 (fontified t) 1144 1147 (face font-lock-builtin-face fontified t) 1147 1149 (fontified t) 1149 1150 (face font-lock-operator-face fontified t) 1150 1151 (face font-lock-operator-face fontified t) 1151 1163 (fontified t) 1163 1165 (face font-lock-doc-face fontified t) 1165 1166 (face font-lock-doc-face fontified t syntax-table (15)) 1166 1292 (face font-lock-doc-face fontified t) 1292 1293 (face font-lock-doc-face fontified t syntax-table (15)) 1293 1295 (face font-lock-doc-face fontified t) 1295 1300 (fontified t) 1300 1303 (face font-lock-keyword-face fontified t) 1303 1309 (fontified t) 1309 1311 (face font-lock-keyword-face fontified t) 1311 1343 (fontified t) 1343 1345 (face font-lock-keyword-face fontified t) 1345 1350 (fontified t) 1350 1352 (face font-lock-operator-face fontified t) 1352 1368 (fontified t) 1368 1374 (face font-lock-keyword-face fontified t) 1374 1387 (fontified t) 1387 1393 (face font-lock-keyword-face fontified t) 1393 1413 (fontified t) 1413 1430 (face font-lock-variable-name-face fontified t) 1430 1431 (fontified t) 1431 1432 (face font-lock-operator-face fontified t) 1432 1478 (fontified t) 1478 1479 (face font-lock-operator-face fontified t) 1479 1483 (face font-lock-constant-face fontified t) 1483 1485 (fontified t) 1485 1487 (face font-lock-doc-face fontified t) 1487 1488 (face font-lock-doc-face fontified t syntax-table (15)) 1488 1528 (face font-lock-doc-face fontified t) 1528 1536 (fontified t face font-lock-doc-face) 1536 1537 (fontified t face font-lock-doc-face syntax-table (15)) 1537 1539 (fontified t face font-lock-doc-face) 1539 1540 (fontified t) 1541 1543 (face font-lock-comment-delimiter-face) 1543 1579 (face font-lock-comment-face) 1579 1580 (face font-lock-comment-delimiter-face) 1580 1581 (face font-lock-comment-face) 1581 1583 (face font-lock-comment-delimiter-face) 1583 1640 (face font-lock-comment-face) 1640 1641 (face font-lock-variable-name-face) 1642 1643 (face font-lock-operator-face) 1652 1655 (face font-lock-string-face) 1657 1658 (face font-lock-variable-name-face) 1659 1660 (face font-lock-operator-face) 1671 1674 (face font-lock-string-face) 1678 1681 (face font-lock-keyword-face) 1682 1701 (face font-lock-function-name-face) 1755 1756 (face font-lock-operator-face) 1756 1757 (face font-lock-operator-face) 1778 1780 (face font-lock-doc-face) 1780 1781 (syntax-table (15) face font-lock-doc-face) 1781 1831 (face font-lock-doc-face) 1831 1832 (syntax-table (15) face font-lock-doc-face) 1832 1834 (face font-lock-doc-face) 1840 1858 (face font-lock-type-face) 1863 1869 (face font-lock-type-face) 1877 1880 (face font-lock-keyword-face) 1881 1886 (face font-lock-function-name-face) 1907 1908 (face font-lock-operator-face) 1910 1911 (face font-lock-operator-face) 1925 1927 (face font-lock-operator-face) 1945 1946 (face font-lock-operator-face) 1946 1947 (face font-lock-operator-face) 1959 1965 (face font-lock-keyword-face) 1990 1991 (face font-lock-operator-face) 1997 1999 (face font-lock-operator-face) 2012 2018 (face font-lock-keyword-face) 2027 2030 (face font-lock-keyword-face) 2031 2052 (face font-lock-function-name-face) 2093 2094 (face font-lock-operator-face) 2094 2095 (face font-lock-operator-face) 2116 2118 (face font-lock-doc-face) 2118 2119 (syntax-table (15) face font-lock-doc-face) 2119 2202 (face font-lock-doc-face) 2202 2203 (syntax-table (15) face font-lock-doc-face) 2203 2205 (face font-lock-doc-face) 2211 2231 (face font-lock-type-face) 2236 2242 (face font-lock-type-face) 2250 2253 (face font-lock-keyword-face) 2254 2259 (face font-lock-function-name-face) 2291 2292 (face font-lock-operator-face) 2294 2295 (face font-lock-operator-face) 2309 2311 (face font-lock-operator-face) 2329 2330 (face font-lock-operator-face) 2330 2331 (face font-lock-operator-face) 2343 2347 (face font-lock-keyword-face) 2363 2367 (face font-lock-builtin-face) 2370 2372 (face font-lock-keyword-face) 2393 2399 (face font-lock-keyword-face) 2410 2411 (face font-lock-operator-face) 2417 2419 (face font-lock-operator-face) 2432 2438 (face font-lock-keyword-face) 2447 2468 (face font-lock-type-face) 2478 2489 (face font-lock-string-face) 2491 2495 (face font-lock-string-face) 2497 2509 (face font-lock-type-face) 2531 2532 (face font-lock-operator-face) 2532 2536 (face font-lock-builtin-face) 2563 2564 (face font-lock-operator-face) 2565 2569 (face font-lock-string-face) 2571 2579 (face font-lock-string-face) 2600 2601 (face font-lock-operator-face) 2601 2621 (face font-lock-string-face) 2639 2640 (face font-lock-operator-face) 2641 2651 (face font-lock-string-face) 2651 2660 (face nil) 2660 2661 (face font-lock-string-face) 2665 2678 (face font-lock-type-face) 2684 2694 (face font-lock-string-face) 2700 2704 (face font-lock-string-face) 2710 2723 (face font-lock-string-face) 2729 2733 (face font-lock-builtin-face) 2733 2734 (face font-lock-operator-face) 2767 2768 (face font-lock-operator-face) 2801 2802 (face font-lock-operator-face) 2802 2807 (face font-lock-constant-face) 2824 2825 (face font-lock-operator-face) 2825 2829 (face font-lock-constant-face) 2835 2837 (face font-lock-comment-delimiter-face) 2837 2906 (face font-lock-comment-face) 2910 2912 (face font-lock-comment-delimiter-face) 2912 2954 (face font-lock-comment-face) 2966 2967 (face font-lock-operator-face) 2967 2971 (face font-lock-constant-face) 2977 2981 (face font-lock-builtin-face) 2981 2982 (face font-lock-operator-face) 2982 3051 (face font-lock-string-face) 3055 3068 (face font-lock-type-face) 3074 3087 (face font-lock-string-face) 3093 3097 (face font-lock-string-face) 3103 3107 (face font-lock-builtin-face) 3107 3108 (face font-lock-operator-face) 3122 3129 (face font-lock-string-face) 3131 3137 (face font-lock-string-face) 3139 3148 (face font-lock-string-face) 3150 3157 (face font-lock-string-face) 3172 3173 (face font-lock-operator-face) 3173 3179 (face font-lock-string-face) 3196 3197 (face font-lock-operator-face) 3197 3201 (face font-lock-constant-face) 3207 3211 (face font-lock-builtin-face) 3211 3212 (face font-lock-operator-face) 3212 3254 (face font-lock-string-face) 3258 3271 (face font-lock-type-face) 3277 3299 (face font-lock-string-face) 3305 3309 (face font-lock-string-face) 3315 3319 (face font-lock-builtin-face) 3319 3320 (face font-lock-operator-face) 3355 3356 (face font-lock-operator-face) 3356 3361 (face font-lock-constant-face) 3378 3379 (face font-lock-operator-face) 3379 3383 (face font-lock-constant-face) 3389 3391 (face font-lock-comment-delimiter-face) 3391 3460 (face font-lock-comment-face) 3464 3466 (face font-lock-comment-delimiter-face) 3466 3508 (face font-lock-comment-face) 3520 3521 (face font-lock-operator-face) 3521 3525 (face font-lock-constant-face) 3531 3535 (face font-lock-builtin-face) 3535 3536 (face font-lock-operator-face) 3536 3615 (face font-lock-string-face) 3619 3622 (face font-lock-keyword-face) 3623 3627 (face font-lock-function-name-face) 3639 3642 (face font-lock-builtin-face) 3644 3645 (face font-lock-operator-face) 3645 3646 (face font-lock-operator-face) 3647 3651 (face font-lock-constant-face) 3657 3659 (face font-lock-doc-face) 3659 3660 (syntax-table (15) face font-lock-doc-face) 3660 3708 (face font-lock-doc-face) 3708 3709 (syntax-table (15) face font-lock-doc-face) 3709 3711 (face font-lock-doc-face) 3716 3727 (face font-lock-variable-name-face) 3728 3729 (face font-lock-operator-face) 3788 3801 (face font-lock-type-face) 3804 3828 (face font-lock-type-face) 3829 3836 (face font-lock-string-face) 3845 3846 (face font-lock-operator-face) 3852 3855 (face font-lock-builtin-face) 3859 3872 (face font-lock-type-face) 3878 3882 (face font-lock-string-face) 3888 3896 (face font-lock-string-face) 3902 3925 (face font-lock-string-face) 3931 3935 (face font-lock-builtin-face) 3935 3936 (face font-lock-operator-face) 3955 3956 (face font-lock-operator-face) 3956 3961 (face font-lock-constant-face) 3972 3973 (face font-lock-operator-face) 3984 3988 (face font-lock-builtin-face) 3988 3989 (face font-lock-operator-face) 3989 4074 (face font-lock-string-face) 4078 4100 (face font-lock-type-face) 4101 4119 (face font-lock-type-face) 4120 4123 (face font-lock-keyword-face) 4124 4131 (face font-lock-function-name-face) 4215 4216 (face font-lock-operator-face) 4217 4221 (face font-lock-constant-face) 4224 4225 (face font-lock-operator-face) 4225 4226 (face font-lock-operator-face) 4227 4231 (face font-lock-constant-face) 4237 4239 (face font-lock-doc-face) 4239 4240 (syntax-table (15) face font-lock-doc-face) 4240 4354 (face font-lock-doc-face) 4354 4355 (syntax-table (15) face font-lock-doc-face) 4355 4357 (face font-lock-doc-face) 4362 4369 (face font-lock-variable-name-face) 4370 4371 (face font-lock-operator-face) 4420 4422 (face font-lock-keyword-face) 4440 4445 (face font-lock-builtin-face) 4446 4480 (face font-lock-string-face) 4510 4514 (face font-lock-keyword-face) 4524 4529 (face font-lock-builtin-face) 4530 4601 (face font-lock-string-face) 4608 4610 (face font-lock-keyword-face) 4656 4679 (face font-lock-string-face) 4679 4680 (face nil) 4680 4683 (face font-lock-builtin-face) 4683 4707 (face nil) 4707 4708 (face font-lock-string-face) 4783 4794 (face font-lock-type-face) 4797 4800 (face font-lock-keyword-face) 4801 4806 (face font-lock-function-name-face) 4809 4810 (face font-lock-operator-face) 4810 4811 (face font-lock-operator-face) 4812 4816 (face font-lock-constant-face) 4822 4824 (face font-lock-doc-face) 4824 4825 (syntax-table (15) face font-lock-doc-face) 4825 4846 (face font-lock-doc-face) 4846 4847 (syntax-table (15) face font-lock-doc-face) 4847 4849 (face font-lock-doc-face) 4854 4858 (face font-lock-keyword-face) 4861 4875 (face font-lock-type-face) 4876 4882 (face font-lock-string-face) 4884 4906 (face font-lock-type-face) 4907 4910 (face font-lock-keyword-face) 4911 4921 (face font-lock-function-name-face) 4938 4939 (face font-lock-operator-face) 4939 4940 (face font-lock-operator-face) 4941 4945 (face font-lock-constant-face) 4951 4953 (face font-lock-doc-face) 4953 4954 (syntax-table (15) face font-lock-doc-face) 4954 4977 (face font-lock-doc-face) 4977 4978 (syntax-table (15) face font-lock-doc-face) 4978 4980 (face font-lock-doc-face) 4985 4991 (face font-lock-variable-name-face) 4992 4993 (face font-lock-operator-face) 5019 5021 (face font-lock-keyword-face) 5022 5025 (face font-lock-keyword-face) 5042 5047 (face font-lock-builtin-face) 5048 5103 (face font-lock-string-face) 5113 5119 (face font-lock-keyword-face) 5124 5129 (face font-lock-variable-name-face) 5130 5131 (face font-lock-operator-face) 5138 5145 (face font-lock-string-face) 5147 5154 (face font-lock-string-face) 5160 5163 (face font-lock-keyword-face) 5176 5178 (face font-lock-keyword-face) 5263 5268 (face font-lock-builtin-face) 5278 5292 (face font-lock-type-face) 5293 5298 (face font-lock-string-face) 5300 5315 (face font-lock-type-face) 5316 5321 (face font-lock-string-face) 5331 5332 (face font-lock-operator-face) 5332 5336 (face font-lock-constant-face) 5352 5353 (face font-lock-operator-face) 5378 5402 (face font-lock-type-face) 5403 5410 (face font-lock-string-face) 5412 5425 (face font-lock-type-face) 5431 5440 (face font-lock-string-face) 5446 5450 (face font-lock-string-face) 5463 5464 (face font-lock-operator-face) 5464 5468 (face font-lock-constant-face) 5474 5478 (face font-lock-builtin-face) 5478 5479 (face font-lock-operator-face) 5479 5549 (face font-lock-string-face) 5554 5616 (face font-lock-string-face) 5620 5640 (face font-lock-type-face) 5641 5644 (face font-lock-keyword-face) 5645 5654 (face font-lock-function-name-face) 5696 5699 (face font-lock-builtin-face) 5722 5726 (face font-lock-builtin-face) 5729 5730 (face font-lock-operator-face) 5730 5731 (face font-lock-operator-face) 5732 5736 (face font-lock-constant-face) 5742 5744 (face font-lock-doc-face) 5744 5745 (syntax-table (15) face font-lock-doc-face) 5745 5853 (face font-lock-doc-face) 5853 5854 (syntax-table (15) face font-lock-doc-face) 5854 5856 (face font-lock-doc-face) 5861 5865 (face font-lock-keyword-face) 5881 5885 (face font-lock-builtin-face) 5888 5890 (face font-lock-keyword-face) 5907 5913 (face font-lock-variable-name-face) 5914 5915 (face font-lock-operator-face) 5945 5954 (face font-lock-variable-name-face) 5955 5956 (face font-lock-operator-face) 5981 5983 (face font-lock-keyword-face) 6007 6009 (face font-lock-keyword-face) 6046 6059 (face font-lock-string-face) 6059 6064 (face nil) 6064 6103 (face font-lock-string-face) 6117 6121 (face font-lock-keyword-face) 6139 6144 (face font-lock-builtin-face) 6167 6193 (face font-lock-string-face) 6193 6198 (face nil) 6198 6219 (face font-lock-string-face) 6301 6305 (face font-lock-constant-face) 6318 6323 (face font-lock-variable-name-face) 6324 6325 (face font-lock-operator-face) 6353 6359 (face font-lock-variable-name-face) 6365 6366 (face font-lock-operator-face) 6377 6382 (face font-lock-builtin-face) 6393 6418 (face font-lock-string-face) 6418 6423 (face nil) 6423 6457 (face font-lock-string-face) 6457 6479 (face nil) 6479 6480 (face font-lock-string-face) 6489 6503 (face font-lock-type-face) 6504 6512 (face font-lock-string-face) 6514 6540 (face font-lock-type-face) 6546 6553 (face font-lock-string-face) 6555 6559 (face font-lock-string-face) 6567 6568 (face font-lock-operator-face) 6568 6613 (face font-lock-string-face) 6616 6631 (face font-lock-type-face) 6632 6644 (face font-lock-string-face) 6660 6661 (face font-lock-operator-face) 6686 6699 (face font-lock-type-face) 6705 6714 (face font-lock-string-face) 6720 6724 (face font-lock-string-face) 6737 6738 (face font-lock-operator-face) 6738 6742 (face font-lock-constant-face) 6748 6752 (face font-lock-builtin-face) 6752 6753 (face font-lock-operator-face) 6753 6816 (face font-lock-string-face) 6820 6840 (face font-lock-type-face) 6841 6844 (face font-lock-keyword-face) 6845 6857 (face font-lock-function-name-face) 6901 6904 (face font-lock-builtin-face) 6913 6917 (face font-lock-builtin-face) 6919 6920 (face font-lock-operator-face) 6920 6921 (face font-lock-operator-face) 6922 6926 (face font-lock-constant-face) 6932 6934 (face font-lock-doc-face) 6934 6935 (syntax-table (15) face font-lock-doc-face) 6935 6957 (face font-lock-doc-face) 6957 6958 (syntax-table (15) face font-lock-doc-face) 6958 6960 (face font-lock-doc-face) 6965 6969 (face font-lock-keyword-face) 6985 6989 (face font-lock-builtin-face) 6992 6994 (face font-lock-keyword-face) 7011 7016 (face font-lock-variable-name-face) 7017 7018 (face font-lock-operator-face) 7064 7066 (face font-lock-keyword-face) 7100 7119 (face font-lock-string-face) 7119 7131 (face nil) 7131 7136 (face font-lock-string-face) 7136 7143 (face nil) 7143 7144 (face font-lock-string-face) 7158 7161 (face font-lock-keyword-face) 7203 7207 (face font-lock-keyword-face) 7240 7253 (face font-lock-string-face) 7253 7265 (face nil) 7265 7299 (face font-lock-string-face) 7309 7313 (face font-lock-keyword-face) 7327 7332 (face font-lock-builtin-face) 7334 7360 (face font-lock-string-face) 7360 7372 (face nil) 7372 7392 (face font-lock-string-face) 7406 7410 (face font-lock-constant-face) 7418 7423 (face font-lock-builtin-face) 7425 7450 (face font-lock-string-face) 7450 7462 (face nil) 7462 7498 (face font-lock-string-face) 7502 7505 (face font-lock-keyword-face) 7506 7520 (face font-lock-function-name-face) 7538 7539 (face font-lock-operator-face) 7540 7544 (face font-lock-constant-face) 7546 7547 (face font-lock-operator-face) 7547 7548 (face font-lock-operator-face) 7559 7569 (face font-lock-variable-name-face) 7570 7571 (face font-lock-operator-face) 7583 7585 (face font-lock-keyword-face) 7622 7624 (face font-lock-keyword-face) 7636 7638 (face font-lock-keyword-face) 7639 7643 (face font-lock-constant-face) 7653 7658 (face font-lock-builtin-face) 7672 7733 (face font-lock-string-face) 7746 7785 (face font-lock-string-face) 7798 7857 (face font-lock-string-face) 7876 7880 (face font-lock-constant-face) 7888 7894 (face font-lock-keyword-face) 7908 7921 (face font-lock-type-face) 7922 7935 (face font-lock-type-face) 7941 7948 (face font-lock-string-face) 7954 7958 (face font-lock-string-face) 7964 7976 (face font-lock-string-face) 7982 7986 (face font-lock-builtin-face) 7986 7987 (face font-lock-operator-face) 8004 8005 (face font-lock-operator-face) 8005 8009 (face font-lock-constant-face) 8020 8021 (face font-lock-operator-face) 8021 8026 (face font-lock-constant-face) 8037 8038 (face font-lock-operator-face) 8057 8058 (face font-lock-operator-face) 8058 8063 (face font-lock-constant-face) 8069 8073 (face font-lock-builtin-face) 8073 8074 (face font-lock-operator-face) 8074 8115 (face font-lock-string-face) 8120 8211 (face font-lock-string-face) 8216 8263 (face font-lock-string-face) 8267 8291 (face font-lock-type-face) 8292 8299 (face font-lock-string-face) 8309 8310 (face font-lock-operator-face) 8310 8314 (face font-lock-constant-face) 8316 8319 (face font-lock-keyword-face) 8320 8326 (face font-lock-function-name-face) 8344 8345 (face font-lock-operator-face) 8346 8350 (face font-lock-constant-face) 8366 8367 (face font-lock-operator-face) 8367 8368 (face font-lock-operator-face) 8369 8373 (face font-lock-constant-face) 8379 8381 (face font-lock-doc-face) 8381 8382 (syntax-table (15) face font-lock-doc-face) 8382 8404 (face font-lock-doc-face) 8404 8405 (syntax-table (15) face font-lock-doc-face) 8405 8407 (face font-lock-doc-face) 8412 8422 (face font-lock-variable-name-face) 8423 8424 (face font-lock-operator-face) 8456 8461 (face font-lock-builtin-face) 8463 8482 (face font-lock-string-face) 8482 8494 (face nil) 8494 8495 (face font-lock-string-face) 8501 8507 (face font-lock-variable-name-face) 8508 8509 (face font-lock-operator-face) 8537 8547 (face font-lock-variable-name-face) 8548 8549 (face font-lock-operator-face) 8579 8584 (face font-lock-builtin-face) 8585 8608 (face font-lock-string-face) 8662 8667 (face font-lock-builtin-face) 8668 8706 (face font-lock-string-face) 8710 8723 (face font-lock-type-face) 8724 8737 (face font-lock-type-face) 8743 8750 (face font-lock-string-face) 8756 8760 (face font-lock-string-face) 8766 8778 (face font-lock-string-face) 8784 8788 (face font-lock-builtin-face) 8788 8789 (face font-lock-operator-face) 8806 8807 (face font-lock-operator-face) 8807 8811 (face font-lock-constant-face) 8822 8823 (face font-lock-operator-face) 8823 8828 (face font-lock-constant-face) 8839 8840 (face font-lock-operator-face) 8859 8860 (face font-lock-operator-face) 8860 8865 (face font-lock-constant-face) 8871 8875 (face font-lock-builtin-face) 8875 8876 (face font-lock-operator-face) 8876 8917 (face font-lock-string-face) 8922 9013 (face font-lock-string-face) 9018 9065 (face font-lock-string-face) 9069 9093 (face font-lock-type-face) 9094 9101 (face font-lock-string-face) 9103 9106 (face font-lock-keyword-face) 9107 9112 (face font-lock-function-name-face) 9130 9131 (face font-lock-operator-face) 9132 9136 (face font-lock-constant-face) 9152 9153 (face font-lock-operator-face) 9153 9154 (face font-lock-operator-face) 9155 9159 (face font-lock-constant-face) 9165 9167 (face font-lock-doc-face) 9167 9168 (syntax-table (15) face font-lock-doc-face) 9168 9692 (face font-lock-doc-face) 9692 9693 (syntax-table (15) face font-lock-doc-face) 9693 9695 (face font-lock-doc-face) 9700 9710 (face font-lock-variable-name-face) 9711 9712 (face font-lock-operator-face) 9744 9749 (face font-lock-builtin-face) 9751 9770 (face font-lock-string-face) 9770 9782 (face nil) 9782 9783 (face font-lock-string-face) 9789 9795 (face font-lock-variable-name-face) 9796 9797 (face font-lock-operator-face) 9825 9830 (face font-lock-builtin-face) 9831 9848 (face font-lock-string-face) 9854 9859 (face font-lock-builtin-face) 9872 9874 (face font-lock-comment-delimiter-face) 9874 9918 (face font-lock-comment-face) 9922 9933 (face font-lock-variable-name-face) 9934 9935 (face font-lock-operator-face) 10007 10009 (face font-lock-comment-delimiter-face) 10009 10047 (face font-lock-comment-face) 10051 10057 (face font-lock-variable-name-face) 10058 10059 (face font-lock-operator-face) 10105 10106 (face font-lock-operator-face) 10106 10112 (face font-lock-keyword-face) 10139 10148 (face font-lock-keyword-face) 10149 10159 (face font-lock-function-name-face) 10162 10163 (face font-lock-operator-face) 10163 10164 (face font-lock-operator-face) 10165 10169 (face font-lock-constant-face) 10179 10184 (face font-lock-keyword-face) 10185 10189 (face font-lock-constant-face) 10203 10207 (face font-lock-keyword-face) 10246 10295 (face font-lock-string-face) 10327 10341 (face font-lock-variable-name-face) 10342 10343 (face font-lock-operator-face) 10344 10349 (face font-lock-keyword-face) 10393 10410 (face font-lock-string-face) 10410 10412 (face nil) 10412 10415 (face font-lock-builtin-face) 10415 10419 (face nil) 10419 10422 (face font-lock-keyword-face) 10422 10425 (face nil) 10425 10427 (face font-lock-keyword-face) 10427 10444 (face nil) 10444 10445 (face font-lock-string-face) 10459 10463 (face font-lock-keyword-face) 10485 10507 (face font-lock-string-face) 10580 10583 (face font-lock-keyword-face) 10623 10629 (face font-lock-keyword-face) 10630 10647 (face font-lock-type-face) 10657 10662 (face font-lock-builtin-face) 10663 10722 (face font-lock-string-face) 10726 10739 (face font-lock-type-face) 10740 10764 (face font-lock-type-face) 10765 10772 (face font-lock-string-face) 10774 10777 (face font-lock-keyword-face) 10778 10785 (face font-lock-function-name-face) 10800 10801 (face font-lock-operator-face) 10801 10802 (face font-lock-operator-face) 10803 10807 (face font-lock-constant-face) 10813 10815 (face font-lock-doc-face) 10815 10816 (syntax-table (15) face font-lock-doc-face) 10816 10854 (face font-lock-doc-face) 10854 10855 (syntax-table (15) face font-lock-doc-face) 10855 10857 (face font-lock-doc-face) 10862 10868 (face font-lock-variable-name-face) 10869 10870 (face font-lock-operator-face) 10910 10934 (face font-lock-string-face) 10964 10970 (face font-lock-keyword-face) 10990 10992 (face font-lock-keyword-face) 10993 10996 (face font-lock-keyword-face) 10997 11001 (face font-lock-constant-face) 11013 11022 (face font-lock-string-face) 11024 11033 (face font-lock-string-face) 11035 11039 (face font-lock-string-face) 11041 11044 (face font-lock-builtin-face) 11068 11079 (face font-lock-type-face) 11080 11083 (face font-lock-keyword-face) 11084 11087 (face font-lock-function-name-face) 11090 11091 (face font-lock-operator-face) 11091 11092 (face font-lock-operator-face) 11093 11097 (face font-lock-constant-face) 11103 11105 (face font-lock-doc-face) 11105 11106 (syntax-table (15) face font-lock-doc-face) 11106 11153 (face font-lock-doc-face) 11153 11154 (syntax-table (15) face font-lock-doc-face) 11154 11156 (face font-lock-doc-face) 11161 11165 (face font-lock-keyword-face) 11168 11180 (face font-lock-type-face) 11181 11184 (face font-lock-keyword-face) 11185 11193 (face font-lock-function-name-face) 11196 11197 (face font-lock-operator-face) 11197 11198 (face font-lock-operator-face) 11199 11203 (face font-lock-constant-face) 11209 11211 (face font-lock-doc-face) 11211 11212 (syntax-table (15) face font-lock-doc-face) 11212 11248 (face font-lock-doc-face) 11248 11249 (syntax-table (15) face font-lock-doc-face) 11249 11251 (face font-lock-doc-face) 11256 11261 (face font-lock-variable-name-face) 11262 11263 (face font-lock-operator-face) 11293 11297 (face font-lock-string-face) 11320 11331 (face font-lock-string-face) 11340 11341 (face font-lock-operator-face) 11341 11348 (face font-lock-string-face) 11371 11387 (face font-lock-string-face) 11410 11428 (face font-lock-string-face) 11434 11436 (face font-lock-comment-delimiter-face) 11436 11495 (face font-lock-comment-face) 11499 11502 (face font-lock-keyword-face) 11509 11511 (face font-lock-keyword-face) 11512 11518 (face font-lock-builtin-face) 11525 11528 (face font-lock-builtin-face) 11535 11536 (face font-lock-operator-face) 11536 11542 (face font-lock-keyword-face) 11547 11548 (face font-lock-operator-face) 11568 11570 (face font-lock-builtin-face) 11615 11617 (face font-lock-builtin-face) 11631 11634 (face font-lock-builtin-face) 11697 11699 (face font-lock-keyword-face) 11721 11725 (face font-lock-keyword-face) 11726 11728 (face font-lock-string-face) 11771 11773 (face font-lock-keyword-face) 11797 11801 (face font-lock-keyword-face) 11802 11804 (face font-lock-string-face) 11820 11824 (face font-lock-keyword-face) 11856 11861 (face font-lock-builtin-face) 11871 11883 (face font-lock-type-face) 11884 11899 (face font-lock-type-face) 11900 11907 (face font-lock-string-face) 11909 11913 (face font-lock-builtin-face) 11913 11914 (face font-lock-operator-face) 11936 11937 (face font-lock-operator-face) 11937 11941 (face font-lock-constant-face) 11943 11956 (face font-lock-type-face) 11962 11972 (face font-lock-string-face) 11985 11986 (face font-lock-operator-face) 11986 11993 (face font-lock-string-face) 11999 12003 (face font-lock-builtin-face) 12003 12004 (face font-lock-operator-face) 12023 12027 (face font-lock-builtin-face) 12027 12028 (face font-lock-operator-face) 12028 12063 (face font-lock-string-face) 12067 12070 (face font-lock-keyword-face) 12071 12074 (face font-lock-function-name-face) 12097 12100 (face font-lock-builtin-face) 12102 12103 (face font-lock-operator-face) 12103 12104 (face font-lock-operator-face) 12105 12109 (face font-lock-constant-face) 12115 12117 (face font-lock-doc-face) 12117 12118 (syntax-table (15) face font-lock-doc-face) 12118 12161 (face font-lock-doc-face) 12161 12162 (syntax-table (15) face font-lock-doc-face) 12162 12164 (face font-lock-doc-face) 12169 12174 (face font-lock-builtin-face) 12232 12244 (face font-lock-type-face) 12245 12260 (face font-lock-type-face) 12261 12268 (face font-lock-string-face) 12270 12274 (face font-lock-builtin-face) 12274 12275 (face font-lock-operator-face) 12297 12298 (face font-lock-operator-face) 12298 12302 (face font-lock-constant-face) 12304 12319 (face font-lock-type-face) 12325 12338 (face font-lock-string-face) 12340 12344 (face font-lock-builtin-face) 12344 12345 (face font-lock-operator-face) 12365 12366 (face font-lock-operator-face) 12381 12382 (face font-lock-operator-face) 12382 12387 (face font-lock-constant-face) 12396 12397 (face font-lock-operator-face) 12410 12423 (face font-lock-type-face) 12429 12439 (face font-lock-string-face) 12452 12453 (face font-lock-operator-face) 12453 12460 (face font-lock-string-face) 12466 12470 (face font-lock-builtin-face) 12470 12471 (face font-lock-operator-face) 12490 12494 (face font-lock-builtin-face) 12494 12495 (face font-lock-operator-face) 12495 12530 (face font-lock-string-face) 12534 12537 (face font-lock-keyword-face) 12538 12546 (face font-lock-function-name-face) 12569 12572 (face font-lock-builtin-face) 12593 12594 (face font-lock-operator-face) 12594 12595 (face font-lock-operator-face) 12596 12600 (face font-lock-constant-face) 12606 12608 (face font-lock-doc-face) 12608 12609 (syntax-table (15) face font-lock-doc-face) 12609 12829 (face font-lock-doc-face) 12829 12830 (syntax-table (15) face font-lock-doc-face) 12830 12832 (face font-lock-doc-face) 12837 12840 (face font-lock-variable-name-face) 12841 12842 (face font-lock-operator-face) 12901 12903 (face font-lock-keyword-face) 12934 12945 (face font-lock-variable-name-face) 12946 12948 (face font-lock-operator-face) 12959 12962 (face font-lock-string-face) 12964 12965 (face font-lock-operator-face) 12972 12977 (face font-lock-builtin-face) 12979 12988 (face font-lock-string-face) 12988 12993 (face nil) 12993 12994 (face font-lock-string-face) 13000 13005 (face font-lock-builtin-face) 13007 13021 (face font-lock-string-face) 13021 13034 (face nil) 13034 13035 (face font-lock-string-face) 13041 13049 (face font-lock-variable-name-face) 13050 13051 (face font-lock-operator-face) 13069 13073 (face font-lock-keyword-face) 13125 13126 (face font-lock-operator-face) 13126 13129 (face font-lock-builtin-face) 13147 13163 (face font-lock-string-face) 13186 13187 (face font-lock-operator-face) 13187 13200 (face font-lock-string-face) 13208 13210 (face font-lock-keyword-face) 13258 13270 (face font-lock-type-face) 13271 13295 (face font-lock-type-face) 13296 13303 (face font-lock-string-face) 13305 13308 (face font-lock-keyword-face) 13309 13314 (face font-lock-function-name-face) 13329 13330 (face font-lock-operator-face) 13330 13331 (face font-lock-operator-face) 13332 13336 (face font-lock-constant-face) 13342 13344 (face font-lock-doc-face) 13344 13345 (syntax-table (15) face font-lock-doc-face) 13345 13389 (face font-lock-doc-face) 13389 13390 (syntax-table (15) face font-lock-doc-face) 13390 13392 (face font-lock-doc-face) 13397 13403 (face font-lock-variable-name-face) 13404 13405 (face font-lock-operator-face) 13433 13438 (face font-lock-builtin-face) 13474 13475 (face font-lock-comment-delimiter-face) 13475 13546 (face font-lock-comment-face)) . 817) (undo-tree-id49 . -13262) (undo-tree-id50 . -27) (undo-tree-id51 . -27) (undo-tree-id52 . -27) (undo-tree-id53 . -408) (undo-tree-id54 . -408) (undo-tree-id55 . -408) (undo-tree-id56 . -408) (undo-tree-id57 . -408) (undo-tree-id58 . -408) (undo-tree-id59 . -408) (undo-tree-id60 . -408) (undo-tree-id61 . -408) (undo-tree-id62 . -687) (undo-tree-id63 . -687) (undo-tree-id64 . -695) (undo-tree-id65 . -687) (undo-tree-id66 . -687) (undo-tree-id67 . -695) (undo-tree-id68 . -726) (undo-tree-id69 . -726) (undo-tree-id70 . -767) (undo-tree-id71 . -767) (undo-tree-id72 . -806) (undo-tree-id73 . -806) (undo-tree-id74 . -847) (undo-tree-id75 . -847) (undo-tree-id76 . -909) (undo-tree-id77 . -909) (undo-tree-id78 . -965) (undo-tree-id79 . -965) (undo-tree-id80 . -1040) (undo-tree-id81 . -1040) (undo-tree-id82 . -1163) (undo-tree-id83 . -1163) (undo-tree-id84 . -1163) (undo-tree-id85 . -1163) (undo-tree-id86 . -1295) (undo-tree-id87 . -1163) (undo-tree-id88 . -1086) (undo-tree-id89 . -1158) (undo-tree-id90 . -1086) (undo-tree-id91 . -1158) (undo-tree-id92 . -1086) (undo-tree-id93 . -1086) (undo-tree-id94 . -1086) (undo-tree-id95 . -1086) (undo-tree-id96 . -1086) (undo-tree-id97 . -1086) (undo-tree-id98 . -1163) (undo-tree-id99 . -1163) (undo-tree-id100 . -1163) (undo-tree-id101 . -1163) (undo-tree-id102 . -1295) (undo-tree-id103 . -1163) (undo-tree-id104 . -1086) (undo-tree-id105 . -1158) (undo-tree-id106 . -1086) (undo-tree-id107 . -1158) (undo-tree-id108 . -1086) (undo-tree-id109 . -1086) (undo-tree-id110 . -1086) (undo-tree-id111 . -1086) (undo-tree-id112 . -1086) (undo-tree-id113 . -1086) (undo-tree-id114 . -1163) (undo-tree-id115 . -1163) (undo-tree-id116 . -1163) (undo-tree-id117 . -1163) (undo-tree-id118 . -1163) (undo-tree-id119 . -1295) (undo-tree-id120 . -1163) (undo-tree-id121 . -1086) (undo-tree-id122 . -1158) (undo-tree-id123 . -1086) (undo-tree-id124 . -1158) (undo-tree-id125 . -1086) (undo-tree-id126 . -1086) (undo-tree-id127 . -1086) (undo-tree-id128 . -1086) (undo-tree-id129 . -1086) (undo-tree-id130 . -1086) (undo-tree-id131 . -1485) (undo-tree-id132 . -1485) (undo-tree-id133 . -1485) (undo-tree-id134 . -1485) (undo-tree-id135 . -1539) (undo-tree-id136 . -1485) (undo-tree-id137 . -1413) (undo-tree-id138 . -1484) (undo-tree-id139 . -1413) (undo-tree-id140 . -1484) (undo-tree-id141 . -1413) (undo-tree-id142 . -1413) (undo-tree-id143 . -1413) (undo-tree-id144 . -1413) (undo-tree-id145 . -1343) (undo-tree-id146 . -1343) (undo-tree-id147 . -1343) (undo-tree-id148 . -1300) (undo-tree-id149 . -1300) (undo-tree-id150 . -1300) (undo-tree-id151 . -1086) (undo-tree-id152 . -1086) (undo-tree-id153 . -1086) (undo-tree-id154 . -640) (undo-tree-id155 . -640) (undo-tree-id156 . -640) (undo-tree-id157 . -640) (undo-tree-id158 . -1484) (undo-tree-id159 . -1413) (undo-tree-id160 . -1413) (undo-tree-id161 . -1413) (undo-tree-id162 . -1480) (undo-tree-id163 . -1485) (undo-tree-id164 . -1485) (undo-tree-id165 . -1485) (undo-tree-id166 . -1485) (undo-tree-id167 . -1539) (undo-tree-id168 . -1485) (undo-tree-id169 . -1413) (undo-tree-id170 . -1484) (undo-tree-id171 . -1413) (undo-tree-id172 . -1484) (undo-tree-id173 . -1413) (undo-tree-id174 . -1413) (undo-tree-id175 . -1413) (undo-tree-id176 . -1413) (undo-tree-id177 . -1343) (undo-tree-id178 . -1343) (undo-tree-id179 . -1343) (undo-tree-id180 . -1300) (undo-tree-id181 . -1300) (undo-tree-id182 . -1300) (undo-tree-id183 . -1086) (undo-tree-id184 . -1086) (undo-tree-id185 . -1086) (undo-tree-id186 . -640) (undo-tree-id187 . -640) (undo-tree-id188 . -640) (undo-tree-id189 . -640) (undo-tree-id190 . -1484) (undo-tree-id191 . -1413) (undo-tree-id192 . -1413) (undo-tree-id193 . -1413) (undo-tree-id194 . -1480) (undo-tree-id195 . -1485) (undo-tree-id196 . -1485) (undo-tree-id197 . -1485) (undo-tree-id198 . -1485) (undo-tree-id199 . -1539) (undo-tree-id200 . -1485) (undo-tree-id201 . -1413) (undo-tree-id202 . -1484) (undo-tree-id203 . -1413) (undo-tree-id204 . -1484) (undo-tree-id205 . -1413) (undo-tree-id206 . -1413) (undo-tree-id207 . -1413) (undo-tree-id208 . -1413) (undo-tree-id209 . -1343) (undo-tree-id210 . -1343) (undo-tree-id211 . -1343) (undo-tree-id212 . -1300) (undo-tree-id213 . -1300) (undo-tree-id214 . -1300) (undo-tree-id215 . -1086) (undo-tree-id216 . -1086) (undo-tree-id217 . -1086) (undo-tree-id218 . -640) (undo-tree-id219 . -640) (undo-tree-id220 . -640) (undo-tree-id221 . -640) (undo-tree-id222 . -1484) (undo-tree-id223 . -1413) (undo-tree-id224 . -1413) (undo-tree-id225 . -1413) (undo-tree-id226 . -1480) (undo-tree-id227 . -27) 844 (t 26049 10158 949146 710000)) nil (26049 10173 890999 701000) 0 nil])
([nil nil ((14379 . 14390) (t 26049 10160 77147 264000)) nil (26049 10173 890718 167000) 0 nil])
([nil nil ((14395 . 14399)) nil (26049 10173 890714 87000) 0 nil])
([nil nil ((999 . 1107) (#("BoardParam, ConfigStorageParam, FakeDeviceParam,
                     LocaleParam, label_or_query_argument" 0 106 (fontified nil)) . 999) (t 26049 10184 573160 919000) (999 . 1105) (#("
    BoardParam,
    ConfigStorageParam,
    FakeDeviceParam,
    LocaleParam,
    label_or_query_argument,
" 0 108 (fontified t)) . 999) 14399 (t 26049 10175 61155 251000)) nil (26049 22285 688009 715000) 0 nil])
([nil nil ((999 . 1107) (#("BoardParam, ConfigStorageParam, FakeDeviceParam,
                     LocaleParam, label_or_query_argument" 0 106 (fontified nil)) . 999) (t 26049 10245 509207 574000) (999 . 1105) ("
    BoardParam,
    ConfigStorageParam,
    FakeDeviceParam,
    LocaleParam,
    label_or_query_argument,
" . 999) (t 26049 10184 797161 58000)) nil (26049 22285 688009 351000) 0 nil])
([nil nil ((999 . 1107) (#("BoardParam, ConfigStorageParam, FakeDeviceParam,
                     LocaleParam, label_or_query_argument" 0 106 (fontified nil)) . 999) (t 26049 10336 661307 588000) (999 . 1105) ("
    BoardParam,
    ConfigStorageParam,
    FakeDeviceParam,
    LocaleParam,
    label_or_query_argument,
" . 999) (t 26049 10245 725207 770000)) nil (26049 22285 688008 927000) 0 nil])
([nil nil ((999 . 1107) (#("BoardParam, ConfigStorageParam, FakeDeviceParam,
                     LocaleParam, label_or_query_argument" 0 106 (fontified nil)) . 999) (t 26049 10402 929399 965000) (999 . 1105) ("
    BoardParam,
    ConfigStorageParam,
    FakeDeviceParam,
    LocaleParam,
    label_or_query_argument,
" . 999) (t 26049 10336 869307 853000)) nil (26049 22285 688008 581000) 0 nil])
([nil nil ((999 . 1107) (#("BoardParam, ConfigStorageParam, FakeDeviceParam,
                     LocaleParam, label_or_query_argument" 0 106 (fontified nil)) . 999) (t 26049 10407 689407 173000) (999 . 1105) ("
    BoardParam,
    ConfigStorageParam,
    FakeDeviceParam,
    LocaleParam,
    label_or_query_argument,
" . 999) (t 26049 10403 145400 291000)) nil (26049 22285 688008 208000) 0 nil])
([nil nil ((999 . 1105) ("
    BoardParam,
    ConfigStorageParam,
    FakeDeviceParam,
    LocaleParam,
    label_or_query_argument,
" . 999) (t 26049 10407 901407 495000)) nil (26049 22285 688007 794000) 0 nil])
([nil nil ((999 . 1107) (#("BoardParam, ConfigStorageParam, FakeDeviceParam,
                     LocaleParam, label_or_query_argument" 0 106 (fontified nil)) . 999) 14397 (t 26049 10430 517442 748000)) nil (26049 22285 688007 595000) 0 nil])
([nil nil ((999 . 1105) ("
    BoardParam,
    ConfigStorageParam,
    FakeDeviceParam,
    LocaleParam,
    label_or_query_argument,
" . 999) (t 26049 10430 733443 92000)) nil (26049 22285 688007 342000) 0 nil])
([nil nil ((999 . 1107) (#("BoardParam, ConfigStorageParam, FakeDeviceParam,
                     LocaleParam, label_or_query_argument" 0 106 (fontified nil)) . 999) 14397 (t 26049 10479 477524 411000)) nil (26049 22285 688007 14000) 0 nil])
([nil nil ((999 . 1107) (#("BoardParam, ConfigStorageParam, FakeDeviceParam,
                     LocaleParam, label_or_query_argument" 0 106 (fontified nil)) . 999) (t 26049 10530 593616 832000) (999 . 1105) ("
    BoardParam,
    ConfigStorageParam,
    FakeDeviceParam,
    LocaleParam,
    label_or_query_argument,
" . 999) (t 26049 10479 689524 780000)) nil (26049 22285 688006 699000) 0 nil])
([nil nil ((999 . 1107) (#("BoardParam, ConfigStorageParam, FakeDeviceParam,
                     LocaleParam, label_or_query_argument" 0 106 (fontified nil)) . 999) (t 26049 10538 989632 665000) (999 . 1105) ("
    BoardParam,
    ConfigStorageParam,
    FakeDeviceParam,
    LocaleParam,
    label_or_query_argument,
" . 999) (t 26049 10530 805617 229000)) nil (26049 22285 688006 283000) 0 nil])
([nil nil ((999 . 1107) (#("BoardParam, ConfigStorageParam, FakeDeviceParam,
                     LocaleParam, label_or_query_argument" 0 106 (fontified nil)) . 999) (t 26049 10597 501747 747000) (999 . 1105) ("
    BoardParam,
    ConfigStorageParam,
    FakeDeviceParam,
    LocaleParam,
    label_or_query_argument,
" . 999) (t 26049 10539 201633 67000)) nil (26049 22285 688005 609000) 0 nil])
([nil nil ((999 . 1105) ("
    BoardParam,
    ConfigStorageParam,
    FakeDeviceParam,
    LocaleParam,
    label_or_query_argument,
" . 999) (t 26049 10597 709748 170000)) nil (26049 22285 688005 156000) 0 nil])
([nil nil ((999 . 1107) (#("BoardParam, ConfigStorageParam, FakeDeviceParam,
                     LocaleParam, label_or_query_argument" 0 106 (fontified nil)) . 999) (t 26049 10661 65881 379000)) nil (26049 22285 688004 923000) 0 nil])
([nil nil ((999 . 1107) (#("BoardParam, ConfigStorageParam, FakeDeviceParam,
                     LocaleParam, label_or_query_argument" 0 106 (fontified nil)) . 999) (t 26049 10745 502071 54000) (999 . 1105) ("
    BoardParam,
    ConfigStorageParam,
    FakeDeviceParam,
    LocaleParam,
    label_or_query_argument,
" . 999) (t 26049 10661 277881 839000)) nil (26049 22285 688004 718000) 0 nil])
([nil nil ((999 . 1107) (#("BoardParam, ConfigStorageParam, FakeDeviceParam,
                     LocaleParam, label_or_query_argument" 0 106 (fontified nil)) . 999) (t 26049 11022 142766 732000) (999 . 1105) ("
    BoardParam,
    ConfigStorageParam,
    FakeDeviceParam,
    LocaleParam,
    label_or_query_argument,
" . 999) (t 26049 10745 722071 563000)) nil (26049 22285 688004 336000) 0 nil])
([nil nil ((999 . 1105) ("
    BoardParam,
    ConfigStorageParam,
    FakeDeviceParam,
    LocaleParam,
    label_or_query_argument,
" . 999) (t 26049 11022 354767 299000)) nil (26049 22285 688004 72000) 0 nil])
([nil nil ((999 . 1107) ("BoardParam, ConfigStorageParam, FakeDeviceParam,
                     LocaleParam, label_or_query_argument" . 999) (t 26049 11055 526856 630000)) nil (26049 22285 688003 902000) 0 nil])
([nil nil ((999 . 1105) (#("
    BoardParam,
    ConfigStorageParam,
    FakeDeviceParam,
    LocaleParam,
    label_or_query_argument,
" 0 108 (fontified nil)) . 999) (t 26049 11055 746857 225000)) nil (26049 22285 688003 734000) 0 nil])
([nil nil ((999 . 1107) ("BoardParam, ConfigStorageParam, FakeDeviceParam,
                     LocaleParam, label_or_query_argument" . 999) (t 26049 11061 482872 777000)) nil (26049 22285 688003 487000) 0 nil])
([nil nil ((999 . 1105) ("
    BoardParam,
    ConfigStorageParam,
    FakeDeviceParam,
    LocaleParam,
    label_or_query_argument,
" . 999) (t 26049 11061 698873 362000)) nil (26049 22285 688003 196000) 0 nil])
([nil nil ((999 . 1107) (#("BoardParam, ConfigStorageParam, FakeDeviceParam,
                     LocaleParam, label_or_query_argument" 0 106 (fontified nil)) . 999) (t 26049 11068 462891 735000)) nil (26049 22285 688002 939000) 0 nil])
([nil nil ((999 . 1105) ("
    BoardParam,
    ConfigStorageParam,
    FakeDeviceParam,
    LocaleParam,
    label_or_query_argument,
" . 999) (t 26049 11068 678892 323000)) nil (26049 22285 688002 733000) 0 nil])
([nil nil ((999 . 1107) ("BoardParam, ConfigStorageParam, FakeDeviceParam,
                     LocaleParam, label_or_query_argument" . 999) (t 26049 11072 298902 174000)) nil (26049 22285 688002 520000) 0 nil])
([nil nil ((999 . 1107) (#("BoardParam, ConfigStorageParam, FakeDeviceParam,
                     LocaleParam, label_or_query_argument" 0 106 (fontified nil)) . 999) (t 26049 11103 90986 416000) (999 . 1105) ("
    BoardParam,
    ConfigStorageParam,
    FakeDeviceParam,
    LocaleParam,
    label_or_query_argument,
" . 999) (t 26049 11072 518902 773000)) nil (26049 22285 688002 119000) 0 nil])
([nil nil ((16913 . 16926) (t 26049 11103 302986 998000)) nil (26049 22285 688001 808000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -16922) (undo-tree-id233 . -4) 16926) nil (26049 22285 688001 532000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -16918) (undo-tree-id232 . -4) 16922) nil (26049 22285 688001 91000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -16914) (undo-tree-id231 . -4) 16918) nil (26049 22285 688000 384000) 0 nil])
([nil nil ((16914 . 16935)) nil (26049 22287 900029 904000) 0 nil])
([nil nil ((16935 . 16938)) ((#("ce(" 0 2 (face font-lock-function-name-face fontified t) 2 3 (fontified t)) . 16935)) (26049 22288 320085 217000) 0 nil])
([nil nil ((16938 . 16949)) nil (26049 22468 16603 851000) 0 nil] [nil nil ((#("def distinct_uf2_device(" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 23 (face font-lock-function-name-face fontified t) 23 24 (fontified t)) . 16914)) ((16914 . 16938)) (26049 22286 565303 676000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -16948) (undo-tree-id303 . -1) 16949) nil (26049 22468 16603 480000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -16912) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (#("
" 0 1 (fontified t)) . -16913) (undo-tree-id230 . -1) 16914) ((16912 . 16914)) (26049 22285 687996 985000) 0 nil])
([nil nil ((16948 . 16953)) nil (26049 22468 16602 890000) 0 nil])
nil
([nil nil ((16953 . 16958)) nil (26049 22468 16602 574000) 0 nil])
([nil nil ((16958 . 16962)) nil (26049 22468 16602 191000) 0 nil])
([nil nil ((#("pass" 0 4 (face font-lock-keyword-face fontified t)) . 16958)) nil (26049 22468 16601 952000) 0 nil])
([nil nil ((16958 . 16967)) nil (26049 22468 16601 633000) 0 nil])
([nil nil ((16964 . 16983) (#("Not" 0 3 (fontified t)) . -16964) (undo-tree-id302 . -3) 16967) nil (26049 22468 16601 176000) 0 nil])
([nil nil ((16953 . 16958)) nil (26049 22468 16600 553000) 0 nil])
([nil nil ((nil rear-nonsticky nil 17149 . 17150) (nil fontified nil 17149 . 17150) (nil fontified nil 17148 . 17149) (nil fontified nil 17147 . 17148) (nil fontified nil 16965 . 17147) (nil fontified nil 16964 . 16965) (nil fontified nil 16963 . 16964) (nil fontified nil 16962 . 16963) (nil fontified nil 16958 . 16962) (16958 . 17150)) nil (26049 22468 16600 35000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -16958) 16954) nil (26049 22468 16599 211000) 0 nil])
([nil nil ((#("Finds the distinct device matching the given query." 0 51 (face font-lock-doc-face fontified t)) . 16961)) nil (26049 22468 16598 788000) 0 nil])
([nil nil ((16961 . 16982)) nil (26049 22468 16598 205000) 0 nil])
([nil nil ((#("I" 0 1 (face font-lock-doc-face fontified t)) . -16980) (undo-tree-id300 . -1) (#("f" 0 1 (face font-lock-doc-face fontified t)) . -16981) (undo-tree-id301 . -1) 16982) nil (26049 22468 16597 784000) 0 nil])
([nil nil ((16980 . 16988)) nil (26049 22468 16596 894000) 0 nil])
([nil nil ((16988 . 16990)) nil (26049 22468 16596 688000) 0 nil])
([nil nil ((#("If no devices match the query, or if more than one device matches the query,
    then we exit the process with an error." 0 120 (face font-lock-doc-face fontified t)) . 16996) (undo-tree-id299 . -120) 17116) nil (26049 22468 16596 225000) 0 nil])
([nil nil ((16993 . 16997) (#("    " 0 4 (face font-lock-doc-face fontified nil)) . 16992) (undo-tree-id297 . -4) (undo-tree-id298 . -4) (16996 . 16997)) nil (26049 22468 16595 658000) 0 nil])
([nil nil ((#("
" 0 1 (face font-lock-doc-face fontified t)) . -16992) (undo-tree-id292 . -1) (#(" " 0 1 (face font-lock-doc-face fontified t)) . -16993) (undo-tree-id293 . -1) (#(" " 0 1 (face font-lock-doc-face fontified t)) . -16994) (undo-tree-id294 . -1) (#(" " 0 1 (face font-lock-doc-face fontified t)) . -16995) (undo-tree-id295 . -1) (#(" " 0 1 (face font-lock-doc-face fontified t)) . -16996) (undo-tree-id296 . -1) 16997) nil (26049 22468 16594 459000) 0 nil])
([nil nil ((16992 . 16996)) nil (26049 22468 16592 871000) 0 nil])
([nil nil ((16996 . 17017)) nil (26049 22468 16592 513000) 0 nil])
([nil nil ((17017 . 17038)) nil (26049 22468 16592 159000) 0 nil])
([nil nil ((#("e" 0 1 (face font-lock-doc-face fontified t)) . -17037) (undo-tree-id291 . -1) 17038) nil (26049 22468 16591 755000) 0 nil])
([nil nil ((17037 . 17038)) nil (26049 22468 16591 36000) 0 nil])
([nil nil ((775 . 776)) nil (26049 22468 16590 822000) 0 nil])
([nil nil ((776 . 781)) nil (26049 22468 16590 589000) 0 nil])
([nil nil ((781 . 788)) nil (26049 22468 16590 338000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -785) (undo-tree-id288 . -1) (#("i" 0 1 (fontified t)) . -786) (undo-tree-id289 . -1) (#("m" 0 1 (fontified t)) . -787) (undo-tree-id290 . -1) 788) nil (26049 22468 16589 959000) 0 nil])
([nil nil ((785 . 786)) nil (26049 22468 16588 803000) 0 nil])
([nil nil ((#("from ..hw." 0 4 (face font-lock-keyword-face fontified t) 4 10 (fontified t)) . 776)) nil (26049 22468 16588 186000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -775) (undo-tree-id287 . -1) 776) nil (26049 22468 16587 695000) 0 nil])
([nil nil ((17038 . 17039)) nil (26049 22468 16586 730000) 0 nil])
([nil nil ((#(" " 0 1 (face font-lock-doc-face fontified t)) . -17037) (undo-tree-id285 . -1) (#("b" 0 1 (face font-lock-doc-face fontified t)) . -17038) (undo-tree-id286 . -1) 17039) nil (26049 22468 16586 297000) 0 nil])
([nil nil ((#("non" 0 3 (face font-lock-doc-face fontified t)) . 17034)) nil (26049 22468 16585 200000) 0 nil])
([nil nil ((17034 . 17053)) nil (26049 22468 16584 925000) 0 nil])
([nil nil ((17053 . 17062)) nil (26049 22468 16584 358000) 0 nil])
([nil nil ((17062 . 17069)) nil (26049 22468 16583 866000) 0 nil])
([nil nil ((#("u" 0 1 (face font-lock-doc-face fontified t)) . -17067) (undo-tree-id283 . -1) (#("t" 0 1 (face font-lock-doc-face fontified t)) . -17068) (undo-tree-id284 . -1) 17069) nil (26049 22468 16583 527000) 0 nil])
([nil nil ((17067 . 17088)) nil (26049 22468 16480 912000) 0 nil])
([nil nil ((17088 . 17096)) nil (26049 22468 16480 692000) 0 nil])
([nil nil ((17100 . 17106) (#(" " 0 1 (face font-lock-doc-face fontified nil)) . 17100) (17070 . 17074) (#(" " 0 1 (face font-lock-doc-face fontified nil)) . -17070) (nil face nil 17069 . 17070) (17069 . 17070) (#(" " 0 1 (face font-lock-doc-face fontified nil)) . -17097) (17097 . 17098) (#("
" 0 1 (face font-lock-doc-face fontified nil)) . 17097) (17096 . 17097) (#("    " 0 4 (face font-lock-doc-face fontified t)) . 17097) 17096) nil (26049 22468 16480 175000) 0 nil])
([nil nil ((#("    raise NotImplementedError" 0 4 (fontified t) 4 9 (face font-lock-keyword-face fontified t) 9 10 (fontified t) 10 29 (face font-lock-type-face fontified t)) . 17110) (undo-tree-id282 . -29)) nil (26049 22468 16479 590000) 0 nil])
([nil nil ((17110 . 17114)) nil (26049 22468 16479 20000) 0 nil])
([nil nil ((17114 . 17128)) nil (26049 22468 16478 681000) 0 nil])
([nil nil ((17124 . 17133) (#("Uf2D" 0 4 (fontified t)) . -17124) (undo-tree-id281 . -4) 17128) nil (26049 22468 16478 277000) 0 nil])
([nil nil ((17133 . 17139)) nil (26049 22468 16477 637000) 0 nil])
([nil nil ((17139 . 17144)) nil (26049 22468 16477 327000) 0 nil])
([nil nil ((17144 . 17146)) nil (26049 22468 16476 944000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -17144) (undo-tree-id279 . -1) (#("f" 0 1 (face font-lock-keyword-face fontified t)) . -17145) (undo-tree-id280 . -1) 17146) nil (26049 22468 16476 497000) 0 nil])
([nil nil ((17144 . 17152)) nil (26049 22468 16475 662000) 0 nil])
([nil nil ((17152 . 17158)) nil (26049 22468 16475 321000) 0 nil])
([nil nil ((17158 . 17167)) nil (26049 22468 16475 126000) 0 nil])
([nil nil ((17167 . 17181)) nil (26049 22468 16474 817000) 0 nil])
([nil nil ((17181 . 17194)) nil (26049 22468 16474 442000) 0 nil])
([nil nil ((17194 . 17207)) nil (26049 22468 16473 937000) 0 nil])
([nil nil ((17207 . 17216)) nil (26049 22468 16473 653000) 0 nil])
([nil nil ((17216 . 17222)) nil (26049 22468 16473 411000) 0 nil])
([nil nil ((#("{" 0 1 (fontified t)) . -17221) (undo-tree-id277 . -1) (undo-tree-id278 . -1) 17222) nil (26049 22468 16473 125000) 0 nil])
([nil nil ((17221 . 17224)) nil (26049 22468 16472 515000) 0 nil])
([nil nil ((17224 . 17227)) nil (26049 22468 16472 332000) 0 nil])
([nil nil ((17227 . 17240)) nil (26049 22468 16472 46000) 0 nil])
([nil nil ((#("print(\":thumbs_down: [red]0[/red] matching devices found.\")
            print(devices)
            exit(1)" 0 5 (face font-lock-builtin-face fontified t) 5 6 (fontified t) 6 58 (face font-lock-string-face fontified t) 58 72 (fontified t) 72 77 (face font-lock-builtin-face fontified t) 77 99 (fontified t) 99 103 (face font-lock-constant-face fontified t) 103 106 (fontified t)) . 16531) (undo-tree-id266 . -106) (undo-tree-id267 . -86) (undo-tree-id268 . -86) (undo-tree-id269 . -86) (undo-tree-id270 . -86) (undo-tree-id271 . -86) (undo-tree-id272 . -14) (undo-tree-id273 . -8) (undo-tree-id274 . -87) (undo-tree-id275 . -106) (undo-tree-id276 . -106) 16637) nil (26049 22468 16471 657000) 0 nil])
([nil nil ((nil rear-nonsticky nil 16636 . 16637) (nil fontified nil 16634 . 16637) (nil fontified nil 16630 . 16634) (nil fontified nil 16608 . 16630) (nil fontified nil 16603 . 16608) (nil fontified nil 16589 . 16603) (nil fontified nil 16537 . 16589) (nil fontified nil 16536 . 16537) (nil fontified nil 16531 . 16536) (16531 . 16637)) nil (26049 22468 16468 738000) 0 nil])
([nil nil ((17227 . 17240)) nil (26049 22468 16467 941000) 0 nil])
([nil nil ((nil rear-nonsticky nil 17345 . 17346) (nil fontified nil 17343 . 17346) (nil fontified nil 17339 . 17343) (nil fontified nil 17317 . 17339) (nil fontified nil 17312 . 17317) (nil fontified nil 17298 . 17312) (nil fontified nil 17246 . 17298) (nil fontified nil 17245 . 17246) (nil fontified nil 17240 . 17245) (17240 . 17346)) nil (26049 22468 16467 541000) 0 nil])
([nil nil ((17346 . 17359)) nil (26049 22468 16466 768000) 0 nil])
([nil nil ((nil rear-nonsticky nil 17624 . 17625) (nil fontified nil 17622 . 17625) (nil fontified nil 17618 . 17622) (nil fontified nil 17606 . 17618) (nil fontified nil 17592 . 17606) (nil fontified nil 17587 . 17592) (nil fontified nil 17582 . 17587) (nil fontified nil 17541 . 17582) (nil fontified nil 17510 . 17541) (nil fontified nil 17503 . 17510) (nil fontified nil 17497 . 17503) (nil fontified nil 17478 . 17497) (nil fontified nil 17444 . 17478) (nil fontified nil 17426 . 17444) (nil fontified nil 17421 . 17426) (nil fontified nil 17390 . 17421) (nil fontified nil 17387 . 17390) (nil fontified nil 17386 . 17387) (nil fontified nil 17385 . 17386) (nil fontified nil 17384 . 17385) (nil fontified nil 17379 . 17384) (nil fontified nil 17363 . 17379) (nil fontified nil 17359 . 17363) (17359 . 17625)) nil (26049 22468 16465 967000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -17355) (undo-tree-id259 . -4) (undo-tree-id260 . -4) (undo-tree-id261 . -4) (undo-tree-id262 . -4) (undo-tree-id263 . -4) (undo-tree-id264 . -4) (undo-tree-id265 . -4) 17347) nil (26049 22468 16464 287000) 0 nil])
([nil nil ((#("                devices_table(matching_devices)," 0 39 (fontified t) 39 44 (fontified t) 44 48 (fontified t)) . 17539) (undo-tree-id256 . -19) (undo-tree-id257 . -48) (undo-tree-id258 . -48)) nil (26049 22468 16462 179000) 0 nil])
([nil nil ((17539 . 17555)) nil (26049 22468 16461 326000) 0 nil])
([nil nil ((17555 . 17563)) nil (26049 22468 16460 996000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . -17562) (undo-tree-id254 . -1) (undo-tree-id255 . -1) 17563) nil (26049 22468 16460 639000) 0 nil])
([nil nil ((#("matching" 0 8 (fontified t)) . 17387) (undo-tree-id253 . -8)) nil (26049 22468 16459 830000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . -17387) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) 17388) nil (26049 22468 16459 415000) 0 nil])
([nil nil ((#("count" 0 5 (face nil fontified t)) . 17491) (undo-tree-id249 . -5)) nil (26049 22468 16458 278000) 0 nil])
([nil nil ((17491 . 17503)) nil (26049 22468 16457 790000) 0 nil])
([nil nil ((#("{" 0 1 (face nil fontified t)) . -17494) (undo-tree-id247 . -1) (undo-tree-id248 . -1) 17495) nil (26049 22468 16457 543000) 0 nil])
([nil nil ((17494 . 17495)) nil (26049 22468 16456 754000) 0 nil])
([nil nil ((#("}" 0 1 (face nil fontified t)) . -17502) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) 17503) nil (26049 22468 16456 218000) 0 nil])
([nil nil ((17502 . 17503)) nil (26049 22468 16454 377000) 0 nil])
([nil nil ((#("            count = len(devices)" 0 12 (fontified t) 12 17 (face font-lock-variable-name-face fontified t) 17 18 (fontified t) 18 19 (face font-lock-operator-face fontified t) 19 20 (fontified t) 20 23 (face font-lock-builtin-face fontified t) 23 32 (fontified t)) . 17363) (undo-tree-id240 . -24) (undo-tree-id241 . -24) (undo-tree-id242 . -32) (undo-tree-id243 . -32)) nil (26049 22468 16453 779000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -17362) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) 17363) nil (26049 22468 16640 13000) 0 nil])
([nil nil ((17501 . 17502)) nil (26049 22472 626493 531000) 0 nil] [nil nil ((17501 . 17508)) ((#(" {devic" 0 1 (face font-lock-string-face fontified t) 1 7 (face nil fontified t)) . 17501) (undo-tree-id304 . -7)) (26049 22468 16442 73000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . 17563) (#("            " 0 12 (fontified nil)) . 17563) (undo-tree-id305 . -12) (undo-tree-id306 . -12) (undo-tree-id307 . -12) (17575 . 17576)) nil (26049 22472 626491 126000) 0 nil])
nil
([nil nil ((999 . 1105) (#("
    BoardParam,
    ConfigStorageParam,
    FakeDeviceParam,
    LocaleParam,
    label_or_query_argument,
" 0 108 (fontified t)) . 999) 17575 (t 26049 22472 630519 176000)) nil (26049 22484 245349 945000) 0 nil])
([nil nil ((#("{" 0 1 (fontified t)) . -17170) (undo-tree-id311 . -1) (undo-tree-id312 . -1) 17171 (t 26049 22473 538148 973000)) nil (26049 22484 245349 84000) 0 nil])
([nil nil ((17170 . 17174)) nil (26049 22484 245347 938000) 0 nil])
([nil nil ((#("}" 0 1 (fontified t)) . -17180) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) 17181) nil (26049 22484 245346 957000) 0 nil])
([nil nil ((17180 . 17181)) nil (26049 22484 245336 126000) 0 nil])
([nil nil ((999 . 17533) (#("BoardParam, ConfigStorageParam, FakeDeviceParam,
                     LocaleParam, label_or_query_argument)
from .shared_state import SharedState

# Use `rich` for tracebacks and logging.
traceback.install(show_locals=True)
logging.basicConfig(
    level=\"NOTSET\",
    format=\"%(message)s\",
    datefmt=\"[%X]\",
    handlers=[
        RichHandler(rich_tracebacks=True, markup=True, omit_repeated_times=False)
    ],
)
logger = logging.getLogger(__name__)


def _render_device(self: Device) -> Table:
    table = Table(\"Property\", \"Value\")
    table.add_row(\"Vendor\", self.vendor)
    table.add_row(\"Model\", self.model)
    table.add_row(\"Serial\", self.serial)
    table.add_row(\"Partition Path\", str(self.partition_path))
    table.add_row(\"Serial Path\", str(self.serial_path))
    table.add_row(\"Mountpoint\", str(self.get_mountpoint()))
    return table


setattr(Device, \"__rich__\", _render_device)


def get_query(device_labels: dict[str, DeviceLabel], arg: str) -> Query:
    \"\"\"Extract query from a string specifying either a device label or a query.

    Raises ValueError if the string matched neither.\"\"\"
    for k, v in device_labels.items():
        if arg == k:
            return v.query
    return Query.parse(arg)


pass_shared_state = click.make_pass_decorator(SharedState, ensure=True)
\"\"\"Decorator for passing SharedState to a function.\"\"\"

# These can be removed in python 3.12
#
# Type variables for return value and function parameters.
R = TypeVar(\"R\")
P = ParamSpec(\"P\")


def pass_config_storage(
    f: Callable[Concatenate[ConfigStorage, P], R]
) -> Callable[P, R]:
    \"\"\"Decorator for passing ConfigStorage to a function.\"\"\"

    @pass_shared_state
    @wraps(f)
    def inner(state: SharedState, /, *args: P.args, **kwargs: P.kwargs) -> R:
        return f(state.config_storage, *args, **kwargs)

    return inner


def pass_read_only_config(f: Callable[Concatenate[Config, P], R]) -> Callable[P, R]:
    \"\"\"Decorator for supplying a function with a read-only snapshot of our current Config.\"\"\"

    @pass_config_storage
    @wraps(f)
    def inner(config_storage: ConfigStorage, /, *args: P.args, **kwargs: P.kwargs) -> R:
        with config_storage.open() as config:
            return f(config, *args, **kwargs)

    return inner


@click.version_option(VERSION, \"--version\", \"-v\")
@click.group(
    context_settings=dict(
        help_option_names=[\"-h\", \"--help\"], auto_envvar_prefix=\"CIRCUITPYTHON_TOOL\"
    ),
    epilog=f\"Version: {VERSION}\",
)
@click.option(
    \"--config\",
    \"-c\",
    \"config_path\",
    type=ConfigStorageParam(),
    default=ConfigStorage(),
    expose_value=False,
    show_envvar=True,
    # Force evaluation of this paramter early so that later parameters can
    # assume the config has already been found.
    is_eager=True,
    help=\"Path to configuration TOML file for device labels and source trees.\",
)
@click.option(
    \"--log-level\",
    \"-l\",
    type=click.Choice([\"DEBUG\", \"INFO\", \"WARNING\", \"ERROR\"]),
    default=\"INFO\",
    show_envvar=True,
    help=\"Only display logs at or above ths level.\",
)
@click.option(
    \"--fake-device-config\",
    \"-f\",
    type=FakeDeviceParam(),
    expose_value=False,
    show_envvar=True,
    # Force evaluation of this paramter early so that later parameters can
    # assume the config has already been found.
    is_eager=True,
    help=\"Path to TOML configuration file for fake devices. For use in tests and demos.\",
)
def main(log_level: str) -> None:
    \"\"\"Tool for interfacing with CircuitPython devices.\"\"\"
    root_logger = logging.getLogger()
    root_logger.setLevel(log_level)


@main.command()
@label_or_query_argument(\"query\", default=Query.any())
@click.option(
    \"-s\",
    \"--save\",
    \"fake_device_save_path\",
    type=click.Path(dir_okay=False, path_type=Path),
    help=\"If set, save devices to a TOML file for later recall using the --fake-devices flag.\",
)
@pass_read_only_config
@pass_shared_state
def devices(
    state: SharedState, config: Config, query: Query, fake_device_save_path: Path | None
) -> None:
    \"\"\"List all connected CircuitPython devices.

    If QUERY is specified, only devices matching that query are listed.\"\"\"
    devices = query.matching_devices(state.all_devices())
    if devices:
        print(\"Connected CircuitPython devices:\", devices_table(devices))
    else:
        print(\":person_shrugging: [blue]No[/] connected CircuitPython devices found.\")

    if fake_device_save_path:
        logging.info(f\"Saving device list to {str(fake_device_save_path)}\")
        fake_device_save_path.write_text(fake_device.to_toml(devices))


@main.group()
def label() -> None:
    \"\"\"Manage device labels.\"\"\"
    pass


@label.command(\"list\")
@pass_read_only_config
def label_list(config: Config) -> None:
    \"\"\"List all device labels.\"\"\"
    labels = config.device_labels
    if not labels:
        print(\":person_shrugging: [blue]No[/] existing labels found.\")
        return
    table = Table(\"Label\", \"Query\")
    for name, label in config.device_labels.items():
        table.add_row(name, label.query.as_str())
    print(table)


@label.command(\"add\")
@click.argument(\"key\", required=True, shell_complete=completion.device_label)
@label_or_query_argument(\"query\")
@click.option(
    \"--force\",
    \"-f\",
    is_flag=True,
    help=\"Add the new label even if a label with the same name already exists.\"
    \"The new QUERY value will override the previous stored value.\",
)
@pass_config_storage
def label_add(
    config_storage: ConfigStorage, key: str, query: Query, force: bool
) -> None:
    \"\"\"Add a new device label.

    Creates a new device label with the name KEY, referencing the given QUERY.
    \"\"\"
    with config_storage.open() as config:
        labels = config.device_labels
        old_label = labels.get(key)
        if old_label:
            if force:
                logger.info(f\"Label [blue]{key}[/] already exists. Proceeding anyway.\")
            else:
                print(
                    f\":thumbs_down: Label [red]{key}[/] already exists: \",
                    old_label.query.as_str(),
                )
                exit(1)

        label = DeviceLabel(query)
        labels[key] = label
    print(
        f\":thumbs_up: Label [blue]{key}[/] added [green]successfully[/]: {label.query.as_str()}\"
    )


@label.command(\"remove\")
@click.confirmation_option(
    \"--yes\", \"-y\", prompt=\"Are you sure you want to delete this label?\"
)
@click.argument(\"label_name\", shell_complete=completion.device_label)
@click.option(
    \"--force\",
    \"-f\",
    is_flag=True,
    help=\"Return success even if there was no matching label to remove.\",
)
@pass_config_storage
def label_remove(config_storage: ConfigStorage, label_name: str, force: bool) -> None:
    \"\"\"Delete a device label.\"\"\"
    with config_storage.open() as config:
        label = config.device_labels.get(label_name)
        if label:
            logger.debug(f\"Found label [blue]{label_name}[/]: {label}\")
            del config.device_labels[label_name]
        elif force:
            logger.info(f\"Label [blue]{label_name}[/] not found. Proceeding anyway.\")
        else:
            print(f\":thumbs_down: Label [red]{label_name}[/] does not exist.\")
            exit(1)
    print(f\":thumbs_up: Label [blue]{label_name}[/] [green]successfully[/] deleted.\")


def get_source_dir(source_dir: Path | None) -> Path:
    source_dir = source_dir or fs.guess_source_dir(Path.cwd())
    if source_dir is None:
        print(
            \":thumbs_down: [red]Failed[/red] to guess source directory. \"
            \"Either change the current directory, \"
            \"or explicitly specify the directory using [blue]--dir[/].\"
        )
        exit(1)
    return source_dir


@main.command
@click.option(
    \"--dir\",
    \"-d\",
    \"source_dir\",
    type=click.Path(exists=True, file_okay=False, path_type=Path),
    required=False,
    help=\"Path containing source code to upload. \"
    \"If not specified, the source directory is guessed by searching the current directory and \"
    \"its descendants for user code (e.g. code.py).\",
)
@label_or_query_argument(\"query\", required=True)
def upload(source_dir: Path | None, query: Query) -> None:
    \"\"\"Upload code to device.\"\"\"
    source_dir = get_source_dir(source_dir)
    print(f\"Source directory: {source_dir}\")
    device = distinct_device(query)
    mountpoint = device.mount_if_needed()
    print(\"Uploading to device: \", device)
    fs.upload([source_dir], mountpoint)
    print(\":thumbs_up: Upload [green]succeeded.\")


@main.command
@click.option(
    \"--dir\",
    \"-d\",
    \"source_dir\",
    type=click.Path(exists=True, file_okay=False, path_type=Path),
    required=False,
    help=\"Path containing source code to upload. \"
    \"If not specified, the source directory is guessed by searching the current directory and \"
    \"its descendants for user code (e.g. code.py).\",
)
@label_or_query_argument(\"query\")
def watch(source_dir: Path | None, query: Query) -> None:
    \"\"\"Continuously upload code to device in response to source file changes.

    The contents of the source tree TREE_NAME will be copied onto the device
    with the label LABEL_NAME.

    This command will always perform at least one upload. Then this command
    waits for filesystem events from all paths and descendant paths of the
    source tree. Currently this command will only properly track file
    modifications. Creation of new files and folders requires you to rerun this
    command in order to monitor them.
    \"\"\"
    source_dir = get_source_dir(source_dir)
    print(f\"Source directory: {source_dir}\")
    device = distinct_device(query)
    print(\"Target device: \")
    print(device)
    # Always do at least one upload at the start.
    source_dirs = [source_dir]
    fs.upload(source_dirs, device.mount_if_needed())

    # TODO(dhrosa): Expose delay as a flag.
    events = time_batched(fs.watch_all(source_dirs), delay=lambda: asyncio.sleep(0.5))

    async def watch_loop() -> None:
        while True:
            with get_console().status(
                \"[yellow]Waiting[/yellow] for file modification.\"
            ):
                modified_paths = await anext(events)
                logger.info(f\"Modified paths: {[str(p) for p in modified_paths]}\")
            with get_console().status(\"Uploading to device.\"):
                fs.upload(source_dirs, device.mount_if_needed())

    try:
        asyncio.run(watch_loop())
    except KeyboardInterrupt:
        print(\"Watch [magenta]cancelled[/magenta] by keyboard interrupt.\")


@main.command
@label_or_query_argument(\"query\")
def connect(query: Query) -> None:
    \"\"\"Connect to a device's serial terminal.\"\"\"
    device = distinct_device(query)
    logger.info(\"Launching minicom for \")
    logger.info(device)
    assert device.serial_path is not None
    execlp(\"minicom\", \"minicom\", \"-D\", str(device.serial_path))


@main.group
def uf2() -> None:
    \"\"\"Search and download CircuitPython UF2 binaries.\"\"\"
    pass


@uf2.command
def versions() -> None:
    \"\"\"List available CircuitPython boards.\"\"\"
    table = Table()
    table.add_column(\"Id\")
    table.add_column(\"Downloads\", justify=\"right\")
    table.add_column(\"Stable Version\")
    table.add_column(\"Unstable Version\")
    # Sort boards by decreasing popularity, then alphabetically.
    for board in sorted(Board.all(), key=lambda b: (-b.download_count, b.id)):
        table.add_row(
            board.id,
            str(board.download_count),
            board.stable_version.label if board.stable_version else \"\",
            board.unstable_version.label if board.unstable_version else \"\",
        )
    with get_console().pager():
        print(table)


@uf2.command
@click.argument(\"board\", type=BoardParam(), required=True)
@click.option(
    \"--locale\",
    default=\"en_US\",
    type=LocaleParam(),
    help=\"Locale for CircuitPython install.\",
)
def url(board: Board, locale: str) -> None:
    \"\"\"Print download URL for CircuitPython image.\"\"\"
    print(board.download_url(board.most_recent_version, locale))


@uf2.command
@click.argument(\"board\", type=BoardParam(), required=True)
@click.argument(
    \"destination\", type=click.Path(path_type=Path), required=False, default=Path.cwd()
)
@click.option(
    \"--locale\",
    default=\"en_US\",
    type=LocaleParam(),
    help=\"Locale for CircuitPython install.\",
)
def download(board: Board, locale: str, destination: Path) -> None:
    \"\"\"Download CircuitPython image for the requested board.

    If DESTINATION is not provided, the file is downloaded to the current directory.
    If DESTINATION is a directory, the filename is automatically generated.
    \"\"\"
    url = board.download_url(board.most_recent_version, locale)
    if destination.is_dir():
        destination /= url.split(\"/\")[-1]
    print(f\"Source: {url}\")
    print(f\"Destination: {destination}\")
    response = urlopen(url)
    with progress.wrap_file(
        response,
        total=int(response.headers[\"Content-Length\"]),
        description=\"Downloading\",
    ) as f:
        destination.write_bytes(f.read())


@uf2.command
@label_or_query_argument(\"query\")
def enter(query: Query) -> None:
    \"\"\"Restart selected device into UF2 bootloader.\"\"\"
    device = distinct_device(query)
    print(device)
    device.uf2_enter()
    # TODO(dhrosa): Wait for bootloader device to come online before exiting.


@uf2.command(\"devices\")
def uf2_devices() -> None:
    print(Uf2Device.all())


@main.command
@label_or_query_argument(\"query\")
def mount(query: Query) -> None:
    \"\"\"Mounts the specified device if needed, and prints the mountpoint.\"\"\"
    device = distinct_device(query)
    print(device)
    mountpoint = device.get_mountpoint()
    if mountpoint:
        print(f\"Device already mounted at {mountpoint}.\")
        return
    mountpoint = device.mount_if_needed()
    print(f\"Device mounted at {mountpoint}\")


@main.command
@label_or_query_argument(\"query\")
def unmount(query: Query) -> None:
    \"\"\"Unmounts the specified device if needed.\"\"\"
    device = distinct_device(query)
    print(device)
    mountpoint = device.get_mountpoint()
    if not mountpoint:
        print(\"Device already not mounted.\")
        return
    print(f\"Device is currently mounted at {mountpoint}\")
    device.unmount_if_needed()
    print(\"Device unmounted.\")


def devices_table(devices: Iterable[Device]) -> Table:
    \"\"\"Render devices into a table.\"\"\"
    table = Table()
    for column_name in (
        \"Vendor\",
        \"Model\",
        \"Serial\",
        \"Partition Path\",
        \"Serial Path\",
        \"Mountpoint\",
    ):
        # Make sure full paths are rendered even if terminal is too small.
        table.add_column(column_name, overflow=\"fold\")

    for device in sorted(devices, key=lambda d: d.key):
        table.add_row(
            device.vendor,
            device.model,
            device.serial,
            str(device.partition_path),
            str(device.serial_path),
            str(device.get_mountpoint()),
        )
    return table


def distinct_device(query: Query) -> Device:
    \"\"\"Finds the distinct device matching the given query.

    If no devices match the query, or if more than one device matches the query,
    then we exit the process with an error.
    \"\"\"
    state = click.get_current_context().ensure_object(SharedState)
    devices = state.all_devices()
    matching_devices = [d for d in devices if query.matches(d)]
    match matching_devices:
        case [device]:
            return device
        case []:
            print(\":thumbs_down: [red]0[/red] matching devices found.\")
            print(devices)
            exit(1)
        case _:
            count = len(matching_devices)
            print(
                \":thumbs_down: Ambiguous filter. \",
                f\"[red]{count}[/red] matching devices found:\",
                devices_table(matching_devices),
            )
            exit(1)

def distinct_uf2_device() -> Uf2Device:
    \"\"\"Returns connected UF2 device.

    If there are no connected devices, or there are multiple devices, we exit
    the process with an error.

    \"\"\"
    devices = Uf2Device.all()
    match devices:
        case set(device):
            return device
        case set():
            print(\":thumbs_down: [red]0[/red] matching devices found.\")
            print(devices)
            exit(1)
        case _:
            print(
                \":thumbs_down: Ambiguous filter. \",
                f\"[red]{len(devices)}[/red] matching devices found: \",
                devices" 108 112 (face font-lock-keyword-face) 127 133 (face font-lock-keyword-face) 147 149 (face font-lock-comment-delimiter-face) 149 188 (face font-lock-comment-face) 217 218 (face font-lock-operator-face) 218 222 (face font-lock-constant-face) 254 255 (face font-lock-operator-face) 255 263 (face font-lock-string-face) 269 275 (face font-lock-builtin-face) 275 276 (face font-lock-operator-face) 276 289 (face font-lock-string-face) 302 303 (face font-lock-operator-face) 303 309 (face font-lock-string-face) 323 324 (face font-lock-operator-face) 361 362 (face font-lock-operator-face) 362 366 (face font-lock-constant-face) 374 375 (face font-lock-operator-face) 375 379 (face font-lock-constant-face) 400 401 (face font-lock-operator-face) 401 406 (face font-lock-constant-face) 417 423 (face font-lock-variable-name-face) 424 425 (face font-lock-operator-face) 444 452 (face font-lock-builtin-face) 456 459 (face font-lock-keyword-face) 460 474 (face font-lock-function-name-face) 475 479 (face font-lock-keyword-face) 489 490 (face font-lock-operator-face) 490 491 (face font-lock-operator-face) 503 508 (face font-lock-variable-name-face) 509 510 (face font-lock-operator-face) 517 527 (face font-lock-string-face) 529 536 (face font-lock-string-face) 556 564 (face font-lock-string-face) 566 570 (face font-lock-keyword-face) 597 604 (face font-lock-string-face) 606 610 (face font-lock-keyword-face) 636 644 (face font-lock-string-face) 646 650 (face font-lock-keyword-face) 677 693 (face font-lock-string-face) 695 698 (face font-lock-builtin-face) 699 703 (face font-lock-keyword-face) 739 752 (face font-lock-string-face) 754 757 (face font-lock-builtin-face) 758 762 (face font-lock-keyword-face) 795 807 (face font-lock-string-face) 809 812 (face font-lock-builtin-face) 813 817 (face font-lock-keyword-face) 841 847 (face font-lock-keyword-face) 856 863 (face font-lock-builtin-face) 872 882 (face font-lock-string-face) 902 905 (face font-lock-keyword-face) 906 915 (face font-lock-function-name-face) 931 935 (face font-lock-builtin-face) 936 939 (face font-lock-builtin-face) 960 963 (face font-lock-builtin-face) 965 966 (face font-lock-operator-face) 966 967 (face font-lock-operator-face) 979 981 (face font-lock-doc-face) 981 982 (syntax-table (15) face font-lock-doc-face) 982 1108 (face font-lock-doc-face) 1108 1109 (syntax-table (15) face font-lock-doc-face) 1109 1111 (face font-lock-doc-face) 1116 1119 (face font-lock-keyword-face) 1125 1127 (face font-lock-keyword-face) 1159 1161 (face font-lock-keyword-face) 1166 1168 (face font-lock-operator-face) 1184 1190 (face font-lock-keyword-face) 1203 1209 (face font-lock-keyword-face) 1229 1246 (face font-lock-variable-name-face) 1247 1248 (face font-lock-operator-face) 1294 1295 (face font-lock-operator-face) 1295 1299 (face font-lock-constant-face) 1301 1303 (face font-lock-doc-face) 1303 1304 (syntax-table (15) face font-lock-doc-face) 1304 1306 (face font-lock-doc-face) 1306 1352 (face font-lock-doc-face) 1352 1353 (syntax-table (15) face font-lock-doc-face) 1353 1355 (face font-lock-doc-face) 1357 1359 (face font-lock-comment-delimiter-face) 1359 1395 (face font-lock-comment-face) 1395 1396 (face font-lock-comment-delimiter-face) 1396 1397 (face font-lock-comment-face) 1397 1399 (face font-lock-comment-delimiter-face) 1399 1456 (face font-lock-comment-face) 1456 1457 (face font-lock-variable-name-face) 1458 1459 (face font-lock-operator-face) 1468 1471 (face font-lock-string-face) 1473 1474 (face font-lock-variable-name-face) 1475 1476 (face font-lock-operator-face) 1487 1490 (face font-lock-string-face) 1494 1497 (face font-lock-keyword-face) 1498 1517 (face font-lock-function-name-face) 1571 1572 (face font-lock-operator-face) 1572 1573 (face font-lock-operator-face) 1594 1596 (face font-lock-doc-face) 1596 1597 (syntax-table (15) face font-lock-doc-face) 1597 1647 (face font-lock-doc-face) 1647 1648 (syntax-table (15) face font-lock-doc-face) 1648 1650 (face font-lock-doc-face) 1656 1674 (face font-lock-type-face) 1679 1685 (face font-lock-type-face) 1693 1696 (face font-lock-keyword-face) 1697 1702 (face font-lock-function-name-face) 1723 1724 (face font-lock-operator-face) 1726 1727 (face font-lock-operator-face) 1741 1743 (face font-lock-operator-face) 1761 1762 (face font-lock-operator-face) 1762 1763 (face font-lock-operator-face) 1775 1781 (face font-lock-keyword-face) 1806 1807 (face font-lock-operator-face) 1813 1815 (face font-lock-operator-face) 1828 1834 (face font-lock-keyword-face) 1843 1846 (face font-lock-keyword-face) 1847 1868 (face font-lock-function-name-face) 1909 1910 (face font-lock-operator-face) 1910 1911 (face font-lock-operator-face) 1932 1934 (face font-lock-doc-face) 1934 1935 (syntax-table (15) face font-lock-doc-face) 1935 2018 (face font-lock-doc-face) 2018 2019 (syntax-table (15) face font-lock-doc-face) 2019 2021 (face font-lock-doc-face) 2027 2047 (face font-lock-type-face) 2052 2058 (face font-lock-type-face) 2066 2069 (face font-lock-keyword-face) 2070 2075 (face font-lock-function-name-face) 2107 2108 (face font-lock-operator-face) 2110 2111 (face font-lock-operator-face) 2125 2127 (face font-lock-operator-face) 2145 2146 (face font-lock-operator-face) 2146 2147 (face font-lock-operator-face) 2159 2163 (face font-lock-keyword-face) 2179 2183 (face font-lock-builtin-face) 2186 2188 (face font-lock-keyword-face) 2209 2215 (face font-lock-keyword-face) 2226 2227 (face font-lock-operator-face) 2233 2235 (face font-lock-operator-face) 2248 2254 (face font-lock-keyword-face) 2263 2284 (face font-lock-type-face) 2294 2305 (face font-lock-string-face) 2307 2311 (face font-lock-string-face) 2313 2325 (face font-lock-type-face) 2347 2348 (face font-lock-operator-face) 2348 2352 (face font-lock-builtin-face) 2379 2380 (face font-lock-operator-face) 2381 2385 (face font-lock-string-face) 2387 2395 (face font-lock-string-face) 2416 2417 (face font-lock-operator-face) 2417 2437 (face font-lock-string-face) 2455 2456 (face font-lock-operator-face) 2457 2467 (face font-lock-string-face) 2467 2476 (face nil) 2476 2477 (face font-lock-string-face) 2481 2494 (face font-lock-type-face) 2500 2510 (face font-lock-string-face) 2516 2520 (face font-lock-string-face) 2526 2539 (face font-lock-string-face) 2545 2549 (face font-lock-builtin-face) 2549 2550 (face font-lock-operator-face) 2583 2584 (face font-lock-operator-face) 2617 2618 (face font-lock-operator-face) 2618 2623 (face font-lock-constant-face) 2640 2641 (face font-lock-operator-face) 2641 2645 (face font-lock-constant-face) 2651 2653 (face font-lock-comment-delimiter-face) 2653 2722 (face font-lock-comment-face) 2726 2728 (face font-lock-comment-delimiter-face) 2728 2770 (face font-lock-comment-face) 2782 2783 (face font-lock-operator-face) 2783 2787 (face font-lock-constant-face) 2793 2797 (face font-lock-builtin-face) 2797 2798 (face font-lock-operator-face) 2798 2867 (face font-lock-string-face) 2871 2884 (face font-lock-type-face) 2890 2903 (face font-lock-string-face) 2909 2913 (face font-lock-string-face) 2919 2923 (face font-lock-builtin-face) 2923 2924 (face font-lock-operator-face) 2938 2945 (face font-lock-string-face) 2947 2953 (face font-lock-string-face) 2955 2964 (face font-lock-string-face) 2966 2973 (face font-lock-string-face) 2988 2989 (face font-lock-operator-face) 2989 2995 (face font-lock-string-face) 3012 3013 (face font-lock-operator-face) 3013 3017 (face font-lock-constant-face) 3023 3027 (face font-lock-builtin-face) 3027 3028 (face font-lock-operator-face) 3028 3070 (face font-lock-string-face) 3074 3087 (face font-lock-type-face) 3093 3115 (face font-lock-string-face) 3121 3125 (face font-lock-string-face) 3131 3135 (face font-lock-builtin-face) 3135 3136 (face font-lock-operator-face) 3171 3172 (face font-lock-operator-face) 3172 3177 (face font-lock-constant-face) 3194 3195 (face font-lock-operator-face) 3195 3199 (face font-lock-constant-face) 3205 3207 (face font-lock-comment-delimiter-face) 3207 3276 (face font-lock-comment-face) 3280 3282 (face font-lock-comment-delimiter-face) 3282 3324 (face font-lock-comment-face) 3336 3337 (face font-lock-operator-face) 3337 3341 (face font-lock-constant-face) 3347 3351 (face font-lock-builtin-face) 3351 3352 (face font-lock-operator-face) 3352 3431 (face font-lock-string-face) 3435 3438 (face font-lock-keyword-face) 3439 3443 (face font-lock-function-name-face) 3455 3458 (face font-lock-builtin-face) 3460 3461 (face font-lock-operator-face) 3461 3462 (face font-lock-operator-face) 3463 3467 (face font-lock-constant-face) 3473 3475 (face font-lock-doc-face) 3475 3476 (syntax-table (15) face font-lock-doc-face) 3476 3524 (face font-lock-doc-face) 3524 3525 (syntax-table (15) face font-lock-doc-face) 3525 3527 (face font-lock-doc-face) 3532 3543 (face font-lock-variable-name-face) 3544 3545 (face font-lock-operator-face) 3604 3617 (face font-lock-type-face) 3620 3644 (face font-lock-type-face) 3645 3652 (face font-lock-string-face) 3661 3662 (face font-lock-operator-face) 3668 3671 (face font-lock-builtin-face) 3675 3688 (face font-lock-type-face) 3694 3698 (face font-lock-string-face) 3704 3712 (face font-lock-string-face) 3718 3741 (face font-lock-string-face) 3747 3751 (face font-lock-builtin-face) 3751 3752 (face font-lock-operator-face) 3771 3772 (face font-lock-operator-face) 3772 3777 (face font-lock-constant-face) 3788 3789 (face font-lock-operator-face) 3800 3804 (face font-lock-builtin-face) 3804 3805 (face font-lock-operator-face) 3805 3890 (face font-lock-string-face) 3894 3916 (face font-lock-type-face) 3917 3935 (face font-lock-type-face) 3936 3939 (face font-lock-keyword-face) 3940 3947 (face font-lock-function-name-face) 4031 4032 (face font-lock-operator-face) 4033 4037 (face font-lock-constant-face) 4040 4041 (face font-lock-operator-face) 4041 4042 (face font-lock-operator-face) 4043 4047 (face font-lock-constant-face) 4053 4055 (face font-lock-doc-face) 4055 4056 (syntax-table (15) face font-lock-doc-face) 4056 4170 (face font-lock-doc-face) 4170 4171 (syntax-table (15) face font-lock-doc-face) 4171 4173 (face font-lock-doc-face) 4178 4185 (face font-lock-variable-name-face) 4186 4187 (face font-lock-operator-face) 4236 4238 (face font-lock-keyword-face) 4256 4261 (face font-lock-builtin-face) 4262 4296 (face font-lock-string-face) 4326 4330 (face font-lock-keyword-face) 4340 4345 (face font-lock-builtin-face) 4346 4417 (face font-lock-string-face) 4424 4426 (face font-lock-keyword-face) 4472 4495 (face font-lock-string-face) 4495 4496 (face nil) 4496 4499 (face font-lock-builtin-face) 4499 4523 (face nil) 4523 4524 (face font-lock-string-face) 4599 4610 (face font-lock-type-face) 4613 4616 (face font-lock-keyword-face) 4617 4622 (face font-lock-function-name-face) 4625 4626 (face font-lock-operator-face) 4626 4627 (face font-lock-operator-face) 4628 4632 (face font-lock-constant-face) 4638 4640 (face font-lock-doc-face) 4640 4641 (syntax-table (15) face font-lock-doc-face) 4641 4662 (face font-lock-doc-face) 4662 4663 (syntax-table (15) face font-lock-doc-face) 4663 4665 (face font-lock-doc-face) 4670 4674 (face font-lock-keyword-face) 4677 4691 (face font-lock-type-face) 4692 4698 (face font-lock-string-face) 4700 4722 (face font-lock-type-face) 4723 4726 (face font-lock-keyword-face) 4727 4737 (face font-lock-function-name-face) 4754 4755 (face font-lock-operator-face) 4755 4756 (face font-lock-operator-face) 4757 4761 (face font-lock-constant-face) 4767 4769 (face font-lock-doc-face) 4769 4770 (syntax-table (15) face font-lock-doc-face) 4770 4793 (face font-lock-doc-face) 4793 4794 (syntax-table (15) face font-lock-doc-face) 4794 4796 (face font-lock-doc-face) 4801 4807 (face font-lock-variable-name-face) 4808 4809 (face font-lock-operator-face) 4835 4837 (face font-lock-keyword-face) 4838 4841 (face font-lock-keyword-face) 4858 4863 (face font-lock-builtin-face) 4864 4919 (face font-lock-string-face) 4929 4935 (face font-lock-keyword-face) 4940 4945 (face font-lock-variable-name-face) 4946 4947 (face font-lock-operator-face) 4954 4961 (face font-lock-string-face) 4963 4970 (face font-lock-string-face) 4976 4979 (face font-lock-keyword-face) 4992 4994 (face font-lock-keyword-face) 5079 5084 (face font-lock-builtin-face) 5094 5108 (face font-lock-type-face) 5109 5114 (face font-lock-string-face) 5116 5131 (face font-lock-type-face) 5132 5137 (face font-lock-string-face) 5147 5148 (face font-lock-operator-face) 5148 5152 (face font-lock-constant-face) 5168 5169 (face font-lock-operator-face) 5194 5218 (face font-lock-type-face) 5219 5226 (face font-lock-string-face) 5228 5241 (face font-lock-type-face) 5247 5256 (face font-lock-string-face) 5262 5266 (face font-lock-string-face) 5279 5280 (face font-lock-operator-face) 5280 5284 (face font-lock-constant-face) 5290 5294 (face font-lock-builtin-face) 5294 5295 (face font-lock-operator-face) 5295 5365 (face font-lock-string-face) 5370 5432 (face font-lock-string-face) 5436 5456 (face font-lock-type-face) 5457 5460 (face font-lock-keyword-face) 5461 5470 (face font-lock-function-name-face) 5512 5515 (face font-lock-builtin-face) 5538 5542 (face font-lock-builtin-face) 5545 5546 (face font-lock-operator-face) 5546 5547 (face font-lock-operator-face) 5548 5552 (face font-lock-constant-face) 5558 5560 (face font-lock-doc-face) 5560 5561 (syntax-table (15) face font-lock-doc-face) 5561 5669 (face font-lock-doc-face) 5669 5670 (syntax-table (15) face font-lock-doc-face) 5670 5672 (face font-lock-doc-face) 5677 5681 (face font-lock-keyword-face) 5697 5701 (face font-lock-builtin-face) 5704 5706 (face font-lock-keyword-face) 5723 5729 (face font-lock-variable-name-face) 5730 5731 (face font-lock-operator-face) 5761 5770 (face font-lock-variable-name-face) 5771 5772 (face font-lock-operator-face) 5797 5799 (face font-lock-keyword-face) 5823 5825 (face font-lock-keyword-face) 5862 5875 (face font-lock-string-face) 5875 5880 (face nil) 5880 5919 (face font-lock-string-face) 5933 5937 (face font-lock-keyword-face) 5955 5960 (face font-lock-builtin-face) 5983 6009 (face font-lock-string-face) 6009 6014 (face nil) 6014 6035 (face font-lock-string-face) 6117 6121 (face font-lock-constant-face) 6134 6139 (face font-lock-variable-name-face) 6140 6141 (face font-lock-operator-face) 6169 6175 (face font-lock-variable-name-face) 6181 6182 (face font-lock-operator-face) 6193 6198 (face font-lock-builtin-face) 6209 6234 (face font-lock-string-face) 6234 6239 (face nil) 6239 6273 (face font-lock-string-face) 6273 6295 (face nil) 6295 6296 (face font-lock-string-face) 6305 6319 (face font-lock-type-face) 6320 6328 (face font-lock-string-face) 6330 6356 (face font-lock-type-face) 6362 6369 (face font-lock-string-face) 6371 6375 (face font-lock-string-face) 6383 6384 (face font-lock-operator-face) 6384 6429 (face font-lock-string-face) 6432 6447 (face font-lock-type-face) 6448 6460 (face font-lock-string-face) 6476 6477 (face font-lock-operator-face) 6502 6515 (face font-lock-type-face) 6521 6530 (face font-lock-string-face) 6536 6540 (face font-lock-string-face) 6553 6554 (face font-lock-operator-face) 6554 6558 (face font-lock-constant-face) 6564 6568 (face font-lock-builtin-face) 6568 6569 (face font-lock-operator-face) 6569 6632 (face font-lock-string-face) 6636 6656 (face font-lock-type-face) 6657 6660 (face font-lock-keyword-face) 6661 6673 (face font-lock-function-name-face) 6717 6720 (face font-lock-builtin-face) 6729 6733 (face font-lock-builtin-face) 6735 6736 (face font-lock-operator-face) 6736 6737 (face font-lock-operator-face) 6738 6742 (face font-lock-constant-face) 6748 6750 (face font-lock-doc-face) 6750 6751 (syntax-table (15) face font-lock-doc-face) 6751 6773 (face font-lock-doc-face) 6773 6774 (syntax-table (15) face font-lock-doc-face) 6774 6776 (face font-lock-doc-face) 6781 6785 (face font-lock-keyword-face) 6801 6805 (face font-lock-builtin-face) 6808 6810 (face font-lock-keyword-face) 6827 6832 (face font-lock-variable-name-face) 6833 6834 (face font-lock-operator-face) 6880 6882 (face font-lock-keyword-face) 6916 6935 (face font-lock-string-face) 6935 6947 (face nil) 6947 6952 (face font-lock-string-face) 6952 6959 (face nil) 6959 6960 (face font-lock-string-face) 6974 6977 (face font-lock-keyword-face) 7019 7023 (face font-lock-keyword-face) 7056 7069 (face font-lock-string-face) 7069 7081 (face nil) 7081 7115 (face font-lock-string-face) 7125 7129 (face font-lock-keyword-face) 7143 7148 (face font-lock-builtin-face) 7150 7176 (face font-lock-string-face) 7176 7188 (face nil) 7188 7208 (face font-lock-string-face) 7222 7226 (face font-lock-constant-face) 7234 7239 (face font-lock-builtin-face) 7241 7266 (face font-lock-string-face) 7266 7278 (face nil) 7278 7314 (face font-lock-string-face) 7318 7321 (face font-lock-keyword-face) 7322 7336 (face font-lock-function-name-face) 7354 7355 (face font-lock-operator-face) 7356 7360 (face font-lock-constant-face) 7362 7363 (face font-lock-operator-face) 7363 7364 (face font-lock-operator-face) 7375 7385 (face font-lock-variable-name-face) 7386 7387 (face font-lock-operator-face) 7399 7401 (face font-lock-keyword-face) 7438 7440 (face font-lock-keyword-face) 7452 7454 (face font-lock-keyword-face) 7455 7459 (face font-lock-constant-face) 7469 7474 (face font-lock-builtin-face) 7488 7549 (face font-lock-string-face) 7562 7601 (face font-lock-string-face) 7614 7673 (face font-lock-string-face) 7692 7696 (face font-lock-constant-face) 7704 7710 (face font-lock-keyword-face) 7724 7737 (face font-lock-type-face) 7738 7751 (face font-lock-type-face) 7757 7764 (face font-lock-string-face) 7770 7774 (face font-lock-string-face) 7780 7792 (face font-lock-string-face) 7798 7802 (face font-lock-builtin-face) 7802 7803 (face font-lock-operator-face) 7820 7821 (face font-lock-operator-face) 7821 7825 (face font-lock-constant-face) 7836 7837 (face font-lock-operator-face) 7837 7842 (face font-lock-constant-face) 7853 7854 (face font-lock-operator-face) 7873 7874 (face font-lock-operator-face) 7874 7879 (face font-lock-constant-face) 7885 7889 (face font-lock-builtin-face) 7889 7890 (face font-lock-operator-face) 7890 7931 (face font-lock-string-face) 7936 8027 (face font-lock-string-face) 8032 8079 (face font-lock-string-face) 8083 8107 (face font-lock-type-face) 8108 8115 (face font-lock-string-face) 8125 8126 (face font-lock-operator-face) 8126 8130 (face font-lock-constant-face) 8132 8135 (face font-lock-keyword-face) 8136 8142 (face font-lock-function-name-face) 8160 8161 (face font-lock-operator-face) 8162 8166 (face font-lock-constant-face) 8182 8183 (face font-lock-operator-face) 8183 8184 (face font-lock-operator-face) 8185 8189 (face font-lock-constant-face) 8195 8197 (face font-lock-doc-face) 8197 8198 (syntax-table (15) face font-lock-doc-face) 8198 8220 (face font-lock-doc-face) 8220 8221 (syntax-table (15) face font-lock-doc-face) 8221 8223 (face font-lock-doc-face) 8228 8238 (face font-lock-variable-name-face) 8239 8240 (face font-lock-operator-face) 8272 8277 (face font-lock-builtin-face) 8279 8298 (face font-lock-string-face) 8298 8310 (face nil) 8310 8311 (face font-lock-string-face) 8317 8323 (face font-lock-variable-name-face) 8324 8325 (face font-lock-operator-face) 8353 8363 (face font-lock-variable-name-face) 8364 8365 (face font-lock-operator-face) 8395 8400 (face font-lock-builtin-face) 8401 8424 (face font-lock-string-face) 8478 8483 (face font-lock-builtin-face) 8484 8522 (face font-lock-string-face) 8526 8539 (face font-lock-type-face) 8540 8553 (face font-lock-type-face) 8559 8566 (face font-lock-string-face) 8572 8576 (face font-lock-string-face) 8582 8594 (face font-lock-string-face) 8600 8604 (face font-lock-builtin-face) 8604 8605 (face font-lock-operator-face) 8622 8623 (face font-lock-operator-face) 8623 8627 (face font-lock-constant-face) 8638 8639 (face font-lock-operator-face) 8639 8644 (face font-lock-constant-face) 8655 8656 (face font-lock-operator-face) 8675 8676 (face font-lock-operator-face) 8676 8681 (face font-lock-constant-face) 8687 8691 (face font-lock-builtin-face) 8691 8692 (face font-lock-operator-face) 8692 8733 (face font-lock-string-face) 8738 8829 (face font-lock-string-face) 8834 8881 (face font-lock-string-face) 8885 8909 (face font-lock-type-face) 8910 8917 (face font-lock-string-face) 8919 8922 (face font-lock-keyword-face) 8923 8928 (face font-lock-function-name-face) 8946 8947 (face font-lock-operator-face) 8948 8952 (face font-lock-constant-face) 8968 8969 (face font-lock-operator-face) 8969 8970 (face font-lock-operator-face) 8971 8975 (face font-lock-constant-face) 8981 8983 (face font-lock-doc-face) 8983 8984 (syntax-table (15) face font-lock-doc-face) 8984 9508 (face font-lock-doc-face) 9508 9509 (syntax-table (15) face font-lock-doc-face) 9509 9511 (face font-lock-doc-face) 9516 9526 (face font-lock-variable-name-face) 9527 9528 (face font-lock-operator-face) 9560 9565 (face font-lock-builtin-face) 9567 9586 (face font-lock-string-face) 9586 9598 (face nil) 9598 9599 (face font-lock-string-face) 9605 9611 (face font-lock-variable-name-face) 9612 9613 (face font-lock-operator-face) 9641 9646 (face font-lock-builtin-face) 9647 9664 (face font-lock-string-face) 9670 9675 (face font-lock-builtin-face) 9688 9690 (face font-lock-comment-delimiter-face) 9690 9734 (face font-lock-comment-face) 9738 9749 (face font-lock-variable-name-face) 9750 9751 (face font-lock-operator-face) 9823 9825 (face font-lock-comment-delimiter-face) 9825 9863 (face font-lock-comment-face) 9867 9873 (face font-lock-variable-name-face) 9874 9875 (face font-lock-operator-face) 9921 9922 (face font-lock-operator-face) 9922 9928 (face font-lock-keyword-face) 9955 9964 (face font-lock-keyword-face) 9965 9975 (face font-lock-function-name-face) 9978 9979 (face font-lock-operator-face) 9979 9980 (face font-lock-operator-face) 9981 9985 (face font-lock-constant-face) 9995 10000 (face font-lock-keyword-face) 10001 10005 (face font-lock-constant-face) 10019 10023 (face font-lock-keyword-face) 10062 10111 (face font-lock-string-face) 10143 10157 (face font-lock-variable-name-face) 10158 10159 (face font-lock-operator-face) 10160 10165 (face font-lock-keyword-face) 10209 10226 (face font-lock-string-face) 10226 10228 (face nil) 10228 10231 (face font-lock-builtin-face) 10231 10235 (face nil) 10235 10238 (face font-lock-keyword-face) 10238 10241 (face nil) 10241 10243 (face font-lock-keyword-face) 10243 10260 (face nil) 10260 10261 (face font-lock-string-face) 10275 10279 (face font-lock-keyword-face) 10301 10323 (face font-lock-string-face) 10396 10399 (face font-lock-keyword-face) 10439 10445 (face font-lock-keyword-face) 10446 10463 (face font-lock-type-face) 10473 10478 (face font-lock-builtin-face) 10479 10538 (face font-lock-string-face) 10542 10555 (face font-lock-type-face) 10556 10580 (face font-lock-type-face) 10581 10588 (face font-lock-string-face) 10590 10593 (face font-lock-keyword-face) 10594 10601 (face font-lock-function-name-face) 10616 10617 (face font-lock-operator-face) 10617 10618 (face font-lock-operator-face) 10619 10623 (face font-lock-constant-face) 10629 10631 (face font-lock-doc-face) 10631 10632 (syntax-table (15) face font-lock-doc-face) 10632 10670 (face font-lock-doc-face) 10670 10671 (syntax-table (15) face font-lock-doc-face) 10671 10673 (face font-lock-doc-face) 10678 10684 (face font-lock-variable-name-face) 10685 10686 (face font-lock-operator-face) 10726 10750 (face font-lock-string-face) 10780 10786 (face font-lock-keyword-face) 10806 10808 (face font-lock-keyword-face) 10809 10812 (face font-lock-keyword-face) 10813 10817 (face font-lock-constant-face) 10829 10838 (face font-lock-string-face) 10840 10849 (face font-lock-string-face) 10851 10855 (face font-lock-string-face) 10857 10860 (face font-lock-builtin-face) 10884 10895 (face font-lock-type-face) 10896 10899 (face font-lock-keyword-face) 10900 10903 (face font-lock-function-name-face) 10906 10907 (face font-lock-operator-face) 10907 10908 (face font-lock-operator-face) 10909 10913 (face font-lock-constant-face) 10919 10921 (face font-lock-doc-face) 10921 10922 (syntax-table (15) face font-lock-doc-face) 10922 10969 (face font-lock-doc-face) 10969 10970 (syntax-table (15) face font-lock-doc-face) 10970 10972 (face font-lock-doc-face) 10977 10981 (face font-lock-keyword-face) 10984 10996 (face font-lock-type-face) 10997 11000 (face font-lock-keyword-face) 11001 11009 (face font-lock-function-name-face) 11012 11013 (face font-lock-operator-face) 11013 11014 (face font-lock-operator-face) 11015 11019 (face font-lock-constant-face) 11025 11027 (face font-lock-doc-face) 11027 11028 (syntax-table (15) face font-lock-doc-face) 11028 11064 (face font-lock-doc-face) 11064 11065 (syntax-table (15) face font-lock-doc-face) 11065 11067 (face font-lock-doc-face) 11072 11077 (face font-lock-variable-name-face) 11078 11079 (face font-lock-operator-face) 11109 11113 (face font-lock-string-face) 11136 11147 (face font-lock-string-face) 11156 11157 (face font-lock-operator-face) 11157 11164 (face font-lock-string-face) 11187 11203 (face font-lock-string-face) 11226 11244 (face font-lock-string-face) 11250 11252 (face font-lock-comment-delimiter-face) 11252 11311 (face font-lock-comment-face) 11315 11318 (face font-lock-keyword-face) 11325 11327 (face font-lock-keyword-face) 11328 11334 (face font-lock-builtin-face) 11341 11344 (face font-lock-builtin-face) 11351 11352 (face font-lock-operator-face) 11352 11358 (face font-lock-keyword-face) 11363 11364 (face font-lock-operator-face) 11384 11386 (face font-lock-builtin-face) 11431 11433 (face font-lock-builtin-face) 11447 11450 (face font-lock-builtin-face) 11513 11515 (face font-lock-keyword-face) 11537 11541 (face font-lock-keyword-face) 11542 11544 (face font-lock-string-face) 11587 11589 (face font-lock-keyword-face) 11613 11617 (face font-lock-keyword-face) 11618 11620 (face font-lock-string-face) 11636 11640 (face font-lock-keyword-face) 11672 11677 (face font-lock-builtin-face) 11687 11699 (face font-lock-type-face) 11700 11715 (face font-lock-type-face) 11716 11723 (face font-lock-string-face) 11725 11729 (face font-lock-builtin-face) 11729 11730 (face font-lock-operator-face) 11752 11753 (face font-lock-operator-face) 11753 11757 (face font-lock-constant-face) 11759 11772 (face font-lock-type-face) 11778 11788 (face font-lock-string-face) 11801 11802 (face font-lock-operator-face) 11802 11809 (face font-lock-string-face) 11815 11819 (face font-lock-builtin-face) 11819 11820 (face font-lock-operator-face) 11839 11843 (face font-lock-builtin-face) 11843 11844 (face font-lock-operator-face) 11844 11879 (face font-lock-string-face) 11883 11886 (face font-lock-keyword-face) 11887 11890 (face font-lock-function-name-face) 11913 11916 (face font-lock-builtin-face) 11918 11919 (face font-lock-operator-face) 11919 11920 (face font-lock-operator-face) 11921 11925 (face font-lock-constant-face) 11931 11933 (face font-lock-doc-face) 11933 11934 (syntax-table (15) face font-lock-doc-face) 11934 11977 (face font-lock-doc-face) 11977 11978 (syntax-table (15) face font-lock-doc-face) 11978 11980 (face font-lock-doc-face) 11985 11990 (face font-lock-builtin-face) 12048 12060 (face font-lock-type-face) 12061 12076 (face font-lock-type-face) 12077 12084 (face font-lock-string-face) 12086 12090 (face font-lock-builtin-face) 12090 12091 (face font-lock-operator-face) 12113 12114 (face font-lock-operator-face) 12114 12118 (face font-lock-constant-face) 12120 12135 (face font-lock-type-face) 12141 12154 (face font-lock-string-face) 12156 12160 (face font-lock-builtin-face) 12160 12161 (face font-lock-operator-face) 12181 12182 (face font-lock-operator-face) 12197 12198 (face font-lock-operator-face) 12198 12203 (face font-lock-constant-face) 12212 12213 (face font-lock-operator-face) 12226 12239 (face font-lock-type-face) 12245 12255 (face font-lock-string-face) 12268 12269 (face font-lock-operator-face) 12269 12276 (face font-lock-string-face) 12282 12286 (face font-lock-builtin-face) 12286 12287 (face font-lock-operator-face) 12306 12310 (face font-lock-builtin-face) 12310 12311 (face font-lock-operator-face) 12311 12346 (face font-lock-string-face) 12350 12353 (face font-lock-keyword-face) 12354 12362 (face font-lock-function-name-face) 12385 12388 (face font-lock-builtin-face) 12409 12410 (face font-lock-operator-face) 12410 12411 (face font-lock-operator-face) 12412 12416 (face font-lock-constant-face) 12422 12424 (face font-lock-doc-face) 12424 12425 (syntax-table (15) face font-lock-doc-face) 12425 12645 (face font-lock-doc-face) 12645 12646 (syntax-table (15) face font-lock-doc-face) 12646 12648 (face font-lock-doc-face) 12653 12656 (face font-lock-variable-name-face) 12657 12658 (face font-lock-operator-face) 12717 12719 (face font-lock-keyword-face) 12750 12761 (face font-lock-variable-name-face) 12762 12764 (face font-lock-operator-face) 12775 12778 (face font-lock-string-face) 12780 12781 (face font-lock-operator-face) 12788 12793 (face font-lock-builtin-face) 12795 12804 (face font-lock-string-face) 12804 12809 (face nil) 12809 12810 (face font-lock-string-face) 12816 12821 (face font-lock-builtin-face) 12823 12837 (face font-lock-string-face) 12837 12850 (face nil) 12850 12851 (face font-lock-string-face) 12857 12865 (face font-lock-variable-name-face) 12866 12867 (face font-lock-operator-face) 12885 12889 (face font-lock-keyword-face) 12941 12942 (face font-lock-operator-face) 12942 12945 (face font-lock-builtin-face) 12963 12979 (face font-lock-string-face) 13002 13003 (face font-lock-operator-face) 13003 13016 (face font-lock-string-face) 13024 13026 (face font-lock-keyword-face) 13074 13086 (face font-lock-type-face) 13087 13111 (face font-lock-type-face) 13112 13119 (face font-lock-string-face) 13121 13124 (face font-lock-keyword-face) 13125 13130 (face font-lock-function-name-face) 13145 13146 (face font-lock-operator-face) 13146 13147 (face font-lock-operator-face) 13148 13152 (face font-lock-constant-face) 13158 13160 (face font-lock-doc-face) 13160 13161 (syntax-table (15) face font-lock-doc-face) 13161 13205 (face font-lock-doc-face) 13205 13206 (syntax-table (15) face font-lock-doc-face) 13206 13208 (face font-lock-doc-face) 13213 13219 (face font-lock-variable-name-face) 13220 13221 (face font-lock-operator-face) 13249 13254 (face font-lock-builtin-face) 13290 13292 (face font-lock-comment-delimiter-face) 13292 13364 (face font-lock-comment-face) 13366 13370 (face font-lock-type-face) 13370 13378 (face font-lock-type-face) 13379 13388 (face font-lock-string-face) 13390 13393 (face font-lock-keyword-face) 13394 13398 (face font-lock-function-name-face) 13398 13405 (face font-lock-function-name-face) 13408 13409 (face font-lock-operator-face) 13409 13410 (face font-lock-operator-face) 13411 13415 (face font-lock-constant-face) 13421 13426 (face font-lock-builtin-face) 13437 13440 (face font-lock-builtin-face) 13446 13459 (face font-lock-type-face) 13460 13484 (face font-lock-type-face) 13485 13492 (face font-lock-string-face) 13494 13497 (face font-lock-keyword-face) 13498 13503 (face font-lock-function-name-face) 13518 13519 (face font-lock-operator-face) 13519 13520 (face font-lock-operator-face) 13521 13525 (face font-lock-constant-face) 13531 13532 (face font-lock-doc-face) 13532 13533 (face font-lock-doc-face) 13533 13534 (syntax-table (15) face font-lock-doc-face) 13534 13599 (face font-lock-doc-face) 13599 13600 (syntax-table (15) face font-lock-doc-face) 13600 13601 (face font-lock-doc-face) 13601 13602 (face font-lock-doc-face) 13607 13613 (face font-lock-variable-name-face) 13614 13615 (face font-lock-operator-face) 13643 13648 (face font-lock-builtin-face) 13661 13671 (face font-lock-variable-name-face) 13672 13673 (face font-lock-operator-face) 13702 13704 (face font-lock-keyword-face) 13725 13730 (face font-lock-builtin-face) 13732 13759 (face font-lock-string-face) 13759 13771 (face nil) 13771 13773 (face font-lock-string-face) 13783 13789 (face font-lock-keyword-face) 13794 13804 (face font-lock-variable-name-face) 13805 13806 (face font-lock-operator-face) 13836 13841 (face font-lock-builtin-face) 13843 13862 (face font-lock-string-face) 13862 13874 (face nil) 13874 13875 (face font-lock-string-face) 13879 13892 (face font-lock-type-face) 13893 13917 (face font-lock-type-face) 13918 13925 (face font-lock-string-face) 13927 13930 (face font-lock-keyword-face) 13931 13938 (face font-lock-function-name-face) 13953 13954 (face font-lock-operator-face) 13954 13955 (face font-lock-operator-face) 13956 13960 (face font-lock-constant-face) 13966 13967 (face font-lock-doc-face) 13967 13968 (face font-lock-doc-face) 13968 13969 (syntax-table (15) face font-lock-doc-face) 13969 14009 (face font-lock-doc-face) 14009 14010 (syntax-table (15) face font-lock-doc-face) 14010 14011 (face font-lock-doc-face) 14011 14012 (face font-lock-doc-face) 14017 14023 (face font-lock-variable-name-face) 14024 14025 (face font-lock-operator-face) 14053 14058 (face font-lock-builtin-face) 14071 14081 (face font-lock-variable-name-face) 14082 14083 (face font-lock-operator-face) 14112 14114 (face font-lock-keyword-face) 14115 14118 (face font-lock-keyword-face) 14139 14144 (face font-lock-builtin-face) 14145 14174 (face font-lock-string-face) 14184 14190 (face font-lock-keyword-face) 14195 14200 (face font-lock-builtin-face) 14202 14234 (face font-lock-string-face) 14234 14246 (face nil) 14246 14247 (face font-lock-string-face) 14284 14289 (face font-lock-builtin-face) 14290 14309 (face font-lock-string-face) 14313 14316 (face font-lock-keyword-face) 14317 14330 (face font-lock-function-name-face) 14358 14359 (face font-lock-operator-face) 14359 14360 (face font-lock-operator-face) 14372 14373 (face font-lock-doc-face) 14373 14374 (face font-lock-doc-face) 14374 14375 (syntax-table (15) face font-lock-doc-face) 14375 14403 (face font-lock-doc-face) 14403 14404 (syntax-table (15) face font-lock-doc-face) 14404 14405 (face font-lock-doc-face) 14405 14406 (face font-lock-doc-face) 14411 14416 (face font-lock-variable-name-face) 14417 14418 (face font-lock-operator-face) 14431 14434 (face font-lock-keyword-face) 14447 14449 (face font-lock-keyword-face) 14460 14468 (face font-lock-string-face) 14478 14485 (face font-lock-string-face) 14495 14503 (face font-lock-string-face) 14513 14529 (face font-lock-string-face) 14539 14552 (face font-lock-string-face) 14562 14574 (face font-lock-string-face) 14591 14593 (face font-lock-comment-delimiter-face) 14593 14658 (face font-lock-comment-face) 14704 14705 (face font-lock-operator-face) 14705 14711 (face font-lock-string-face) 14718 14721 (face font-lock-keyword-face) 14729 14731 (face font-lock-keyword-face) 14732 14738 (face font-lock-builtin-face) 14751 14752 (face font-lock-operator-face) 14752 14758 (face font-lock-keyword-face) 14885 14888 (face font-lock-builtin-face) 14925 14928 (face font-lock-builtin-face) 14962 14965 (face font-lock-builtin-face) 15006 15012 (face font-lock-keyword-face) 15021 15024 (face font-lock-keyword-face) 15025 15040 (face font-lock-function-name-face) 15055 15056 (face font-lock-operator-face) 15056 15057 (face font-lock-operator-face) 15070 15071 (face font-lock-doc-face) 15071 15072 (face font-lock-doc-face) 15072 15073 (syntax-table (15) face font-lock-doc-face) 15073 15125 (face font-lock-doc-face) 15125 15251 (face font-lock-doc-face) 15251 15255 (face font-lock-doc-face) 15255 15256 (syntax-table (15) face font-lock-doc-face) 15256 15257 (face font-lock-doc-face) 15257 15258 (face font-lock-doc-face) 15263 15268 (face font-lock-variable-name-face) 15269 15270 (face font-lock-operator-face) 15330 15337 (face font-lock-variable-name-face) 15338 15339 (face font-lock-operator-face) 15364 15380 (face font-lock-variable-name-face) 15381 15382 (face font-lock-operator-face) 15386 15389 (face font-lock-keyword-face) 15392 15394 (face font-lock-keyword-face) 15403 15405 (face font-lock-keyword-face) 15428 15433 (face font-lock-keyword-face) 15460 15464 (face font-lock-keyword-face) 15487 15493 (face font-lock-keyword-face) 15509 15513 (face font-lock-keyword-face) 15530 15535 (face font-lock-builtin-face) 15536 15588 (face font-lock-string-face) 15602 15607 (face font-lock-builtin-face) 15629 15633 (face font-lock-constant-face) 15635 15636 (rear-nonsticky t) 15645 15649 (face font-lock-keyword-face) 15665 15670 (face font-lock-variable-name-face) 15671 15672 (face font-lock-operator-face) 15673 15676 (face font-lock-builtin-face) 15707 15712 (face font-lock-builtin-face) 15730 15764 (face font-lock-string-face) 15783 15789 (face font-lock-string-face) 15789 15796 (face nil) 15796 15827 (face font-lock-string-face) 15904 15908 (face font-lock-constant-face) 15913 15916 (face font-lock-keyword-face) 15917 15934 (face font-lock-function-name-face) 15934 15936 (face font-lock-function-name-face) 15939 15940 (face font-lock-operator-face) 15940 15941 (face font-lock-operator-face) 15957 15958 (face font-lock-doc-face) 15958 15959 (face font-lock-doc-face) 15959 15960 (syntax-table (15) face font-lock-doc-face) 15960 15990 (face font-lock-doc-face) 15990 15991 (face font-lock-doc-face) 15991 16068 (face font-lock-doc-face) 16068 16069 (face font-lock-doc-face) 16069 16073 (face font-lock-doc-face fontified t) 16073 16105 (face font-lock-doc-face fontified t) 16105 16106 (face font-lock-doc-face fontified t syntax-table (15)) 16106 16107 (face font-lock-doc-face fontified t) 16107 16108 (face font-lock-doc-face fontified t rear-nonsticky t) 16108 16109 (fontified t) 16109 16113 (fontified t) 16113 16120 (face font-lock-variable-name-face fontified t) 16120 16121 (fontified t) 16121 16122 (face font-lock-operator-face fontified t) 16122 16123 (fontified t) 16123 16133 (fontified t) 16133 16136 (face font-lock-builtin-face fontified t) 16136 16139 (fontified t) 16139 16143 (fontified t) 16143 16148 (face font-lock-keyword-face fontified t) 16148 16158 (fontified t) 16158 16166 (fontified t) 16166 16170 (face font-lock-keyword-face fontified t) 16170 16171 (fontified t) 16171 16174 (face font-lock-builtin-face fontified t) 16174 16184 (fontified t) 16184 16196 (fontified t) 16196 16202 (face font-lock-keyword-face fontified t) 16202 16210 (fontified t) 16210 16218 (fontified t) 16218 16222 (face font-lock-keyword-face fontified t) 16222 16223 (fontified t) 16223 16226 (face font-lock-builtin-face fontified t) 16226 16230 (fontified t) 16230 16242 (fontified t) 16242 16247 (face font-lock-builtin-face fontified t) 16247 16248 (fontified t) 16248 16300 (face font-lock-string-face fontified t) 16300 16314 (fontified t) 16314 16319 (face font-lock-builtin-face fontified t) 16319 16329 (fontified t) 16329 16341 (fontified t) 16341 16345 (face font-lock-constant-face fontified t) 16345 16347 (fontified t) 16347 16348 (fontified t rear-nonsticky t) 16348 16349 (fontified t) 16349 16357 (fontified t) 16357 16361 (face font-lock-keyword-face fontified t) 16361 16364 (fontified t) 16364 16365 (fontified t) 16365 16377 (fontified t) 16377 16382 (face font-lock-builtin-face fontified t) 16382 16400 (fontified t) 16400 16434 (face font-lock-string-face fontified t) 16434 16436 (fontified t) 16436 16453 (fontified t) 16453 16459 (face font-lock-string-face fontified t) 16459 16460 (face nil fontified t) 16460 16463 (face font-lock-builtin-face fontified t) 16463 16464 (face nil fontified t) 16464 16472 (face nil fontified t) 16472 16473 (face nil fontified t) 16473 16474 (face font-lock-string-face fontified t) 16474 16475 (face font-lock-string-face fontified t) 16475 16504 (face font-lock-string-face fontified t) 16504 16505 (face font-lock-string-face fontified t) 16505 16507 (fontified t) 16507 16530 (fontified t)) . 999) (undo-tree-id313 . -14368) (undo-tree-id314 . -14769) (undo-tree-id315 . -14769) (undo-tree-id316 . -15912) (undo-tree-id317 . -13443) (undo-tree-id318 . -12910) (undo-tree-id319 . -13398) (undo-tree-id320 . -13425) (undo-tree-id321 . -15066) (undo-tree-id322 . -15258) (undo-tree-id323 . -15957) (undo-tree-id324 . -15991) (undo-tree-id325 . -16109) (undo-tree-id326 . -15530) (undo-tree-id327 . -16242) (undo-tree-id328 . -15645) (undo-tree-id329 . -16069) (undo-tree-id330 . -16182) (undo-tree-id331 . -16357) (undo-tree-id332 . -16181) (undo-tree-id333 . -16171) (undo-tree-id334 . -16181) (undo-tree-id335 . -16158) (undo-tree-id336 . -16182) (undo-tree-id337 . -16182) (undo-tree-id338 . -16242) (undo-tree-id339 . -16242) (undo-tree-id340 . -16377) (undo-tree-id341 . -16377) (undo-tree-id342 . -16377) (undo-tree-id343 . -16377) (undo-tree-id344 . -16377) (undo-tree-id345 . -16377) (undo-tree-id346 . -16182) 17181 (t 26049 22484 254271 519000)) nil (26049 22549 986983 701000) 0 nil])
([nil nil ((17177 . 17178) (t 26049 22485 373915 799000)) nil (26049 22549 986965 374000) 0 nil])
([nil nil ((17184 . 17185)) nil (26049 22549 986960 827000) 0 nil])
([nil nil ((999 . 1105) (#("
    BoardParam,
    ConfigStorageParam,
    FakeDeviceParam,
    LocaleParam,
    label_or_query_argument,
" 0 108 (fontified t)) . 999) 17185 (t 26049 22550 16220 211000)) nil (26049 22769 873702 524000) 0 nil])
([nil nil ((17183 . 17184) (t 26049 22550 920191 554000)) nil (26049 22769 873701 565000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -17183) (undo-tree-id478 . -1) 17184) nil (26049 22769 873700 957000) 0 nil])
([nil nil ((17149 . 17151)) nil (26049 22769 873670 435000) 0 nil])
([nil nil ((#("k" 0 1 (fontified t)) . -17150) (undo-tree-id477 . -1) 17151) nil (26049 22769 873670 12000) 0 nil])
([nil nil ((17150 . 17153)) nil (26049 22769 873669 70000) 0 nil])
([nil nil ((17160 . 17161)) nil (26049 22769 873668 674000) 0 nil])
([nil nil ((17149 . 17153)) nil (26049 22769 873668 395000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . -17152) (undo-tree-id476 . -1) 17153) nil (26049 22769 873668 42000) 0 nil])
([nil nil ((17152 . 17158)) nil (26049 22769 873667 315000) 0 nil])
([nil nil ((#("L" 0 1 (fontified t)) . -17155) (undo-tree-id473 . -1) (#("=" 0 1 (face font-lock-operator-face fontified t)) . -17156) (undo-tree-id474 . -1) (#(" " 0 1 (fontified t)) . -17157) (undo-tree-id475 . -1) 17158) nil (26049 22769 873666 895000) 0 nil])
([nil nil ((17155 . 17158)) nil (26049 22769 873665 614000) 0 nil])
([nil nil ((17185 . 17186)) nil (26049 22769 873665 9000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -17185) (undo-tree-id472 . -1) 17186) nil (26049 22769 873664 454000) 0 nil])
([nil nil ((#("set({device}):" 0 3 (face font-lock-builtin-face fontified t) 3 13 (fontified t) 13 14 (fontified t)) . 17185)) nil (26049 22769 873663 627000) 0 nil])
([nil nil ((17185 . 17187)) nil (26049 22769 873663 178000) 0 nil])
([nil nil ((#("device" 0 6 (fontified t)) . 17207) (undo-tree-id470 . -6) (undo-tree-id471 . -6)) nil (26049 22769 873662 706000) 0 nil])
([nil nil ((17207 . 17217)) nil (26049 22769 873661 709000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t)) . -17216) (undo-tree-id468 . -1) (undo-tree-id469 . -1) 17217) nil (26049 22769 873661 173000) 0 nil])
([nil nil ((17216 . 17220)) nil (26049 22769 873660 321000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -17234) (undo-tree-id427 . -1) (undo-tree-id428 . -1) (undo-tree-id429 . -1) (undo-tree-id430 . -1) (undo-tree-id431 . -1) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (undo-tree-id436 . -1) (#("e" 0 1 (fontified t)) . -17235) (undo-tree-id437 . -1) (undo-tree-id438 . -1) (undo-tree-id439 . -1) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (undo-tree-id442 . -1) (undo-tree-id443 . -1) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (#("t" 0 1 (face font-lock-builtin-face fontified t)) . -17236) (undo-tree-id446 . -1) (undo-tree-id447 . -1) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (#("(" 0 1 (fontified t)) . -17237) (undo-tree-id454 . -1) (undo-tree-id455 . -1) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (undo-tree-id459 . -1) (undo-tree-id460 . -1) (#(")" 0 1 (fontified t)) . -17238) (undo-tree-id461 . -1) (undo-tree-id462 . -1) (undo-tree-id463 . -1) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (#(":" 0 1 (fontified t)) . -17239) (undo-tree-id466 . -1) (undo-tree-id467 . -1) 17240) nil (26049 22769 873658 902000) 0 nil])
([nil nil ((17234 . 17235)) nil (26049 22769 873648 700000) 0 nil])
([nil nil ((#("matching" 0 8 (face font-lock-string-face fontified t)) . 17282) (undo-tree-id426 . -8)) nil (26049 22769 873648 131000) 0 nil])
([nil nil ((17282 . 17285)) nil (26049 22769 873647 291000) 0 nil])
([nil nil ((#("f" 0 1 (face font-lock-string-face fontified t)) . -17283) (undo-tree-id420 . -1) (undo-tree-id421 . -1) (undo-tree-id422 . -1) (undo-tree-id423 . -1) (#("2" 0 1 (face font-lock-string-face fontified t)) . -17284) (undo-tree-id424 . -1) (undo-tree-id425 . -1) 17285) nil (26049 22769 873646 851000) 0 nil])
([nil nil ((17283 . 17296)) nil (26049 22769 873644 757000) 0 nil])
([nil nil ((#("            print(devices)" 0 12 (fontified t) 12 17 (face font-lock-builtin-face fontified t) 17 26 (fontified t)) . 17314) (undo-tree-id418 . -26) (undo-tree-id419 . -26)) nil (26049 22769 873644 481000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -17313) (undo-tree-id414 . -1) (undo-tree-id415 . -1) (undo-tree-id416 . -1) (undo-tree-id417 . -1) 17314) nil (26049 22769 873643 250000) 0 nil])
([nil nil ((#("Ambiguous" 0 9 (face font-lock-string-face fontified t)) . 17400) (undo-tree-id413 . -9)) nil (26049 22769 873641 667000) 0 nil])
([nil nil ((#(" filter" 0 7 (face font-lock-string-face fontified t)) . 17400) (undo-tree-id411 . -1) (undo-tree-id412 . -7)) nil (26049 22769 873640 349000) 0 nil])
([nil nil ((#(" " 0 1 (face font-lock-string-face fontified t)) . -17399) (undo-tree-id404 . -1) (undo-tree-id405 . -1) (undo-tree-id406 . -1) (undo-tree-id407 . -1) (undo-tree-id408 . -1) (#("." 0 1 (face font-lock-string-face fontified t)) . -17400) (undo-tree-id409 . -1) (undo-tree-id410 . -1) 17401) nil (26049 22769 873639 533000) 0 nil])
([nil nil ((#(" " 0 1 (face font-lock-string-face fontified t)) . -17399) (undo-tree-id402 . -1) (undo-tree-id403 . -1) 17400) nil (26049 22769 873637 246000) 0 nil])
([nil nil ((#("                f" 0 17 (fontified t)) . -17402) (undo-tree-id400 . -17) (undo-tree-id401 . -17) 17419) nil (26049 22769 873636 471000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -17400) (undo-tree-id391 . -1) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (undo-tree-id394 . -1) (undo-tree-id395 . -1) (#("
" 0 1 (fontified t)) . -17401) (undo-tree-id396 . -1) (undo-tree-id397 . -1) (undo-tree-id398 . -1) (undo-tree-id399 . -1) 17402) nil (26049 22769 873635 235000) 0 nil])
([nil nil ((17400 . 17401)) nil (26049 22769 873632 165000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -17400) (undo-tree-id389 . -1) (undo-tree-id390 . -1) 17401) nil (26049 22769 873631 791000) 0 nil])
([nil nil ((#("\"" 0 1 (face font-lock-string-face fontified t)) . -17399) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (undo-tree-id383 . -1) (undo-tree-id384 . -1) (undo-tree-id385 . -1) (#("\"" 0 1 (face font-lock-string-face fontified t)) . -17400) (undo-tree-id386 . -1) (undo-tree-id387 . -1) (undo-tree-id388 . -1) 17401) nil (26049 22769 873630 539000) 0 nil])
([nil nil ((17399 . 17400)) nil (26049 22769 873626 865000) 0 nil])
([nil nil ((#("red" 0 3 (face font-lock-string-face fontified t)) . 17421) (undo-tree-id373 . -3) (undo-tree-id374 . -3)) nil (26049 22769 873626 302000) 0 nil])
([nil nil ((#("matching devices found: \"," 0 24 (face font-lock-string-face fontified t) 24 25 (face font-lock-string-face fontified t) 25 26 (fontified t)) . 17423) (undo-tree-id369 . -1) (undo-tree-id370 . -2) (undo-tree-id371 . -1) (undo-tree-id372 . -26)) nil (26049 22769 873625 158000) 0 nil])
([nil nil ((17423 . 17425)) nil (26049 22769 873623 258000) 0 nil])
([nil nil ((#("f" 0 1 (face font-lock-string-face fontified t)) . -17424) (undo-tree-id367 . -1) (undo-tree-id368 . -1) 17425) nil (26049 22769 873622 978000) 0 nil])
([nil nil ((17424 . 17431)) nil (26049 22769 873621 971000) 0 nil])
([nil nil ((#("d" 0 1 (face font-lock-string-face fontified t)) . -17427) (undo-tree-id347 . -1) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (#("e" 0 1 (face font-lock-string-face fontified t)) . -17428) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (#("v" 0 1 (face font-lock-string-face fontified t)) . -17429) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (#("i" 0 1 (face font-lock-string-face fontified t)) . -17430) (undo-tree-id365 . -1) (undo-tree-id366 . -1) 17431) nil (26049 22769 873621 102000) 0 nil])
([nil nil ((17427 . 17448)) nil (26049 22769 873457 71000) 0 nil])
([nil nil ((17448 . 17453)) nil (26049 22769 873456 659000) 0 nil])
([nil nil ((17400 . 17419)) nil (26049 22769 873456 51000) 0 nil])
([nil nil ((17419 . 17436)) nil (26049 22769 873455 501000) 0 nil])
([nil nil ((17436 . 17437)) nil (26049 22769 873454 847000) 0 nil])
([nil nil ((17436 . 17437)) nil (26049 22769 873450 655000) 0 nil])
([nil nil ((17491 . 17492) (t 26049 22769 883057 330000)) nil (26049 22775 333607 480000) 0 nil])
([nil nil ((#("." 0 1 (face font-lock-string-face fontified t)) . -17489) (undo-tree-id479 . -1) (undo-tree-id480 . -1) (undo-tree-id481 . -1) (undo-tree-id482 . -1) (undo-tree-id483 . -1) (undo-tree-id484 . -1) (#("\"" 0 1 (face font-lock-string-face fontified t)) . -17490) (undo-tree-id485 . -1) (undo-tree-id486 . -1) (undo-tree-id487 . -1) (undo-tree-id488 . -1) (undo-tree-id489 . -1) (#("," 0 1 (fontified t)) . -17491) (undo-tree-id490 . -1) (undo-tree-id491 . -1) 17492) nil (26049 22775 333605 944000) 0 nil])
([nil nil ((17489 . 17493)) nil (26049 22775 333588 967000) 0 nil])
([nil nil ((17235 . 17236) (t 26049 22775 366828 282000)) nil (26049 22785 631353 684000) 0 nil])
([nil nil ((999 . 1107) ("BoardParam, ConfigStorageParam, FakeDeviceParam,
                     LocaleParam, label_or_query_argument" . 999) 17236 (t 26049 22785 662480 700000)) nil (26049 22794 753462 857000) 0 nil])
([nil nil ((#("len" 0 3 (face font-lock-builtin-face fontified t)) . 17447) (undo-tree-id502 . -3) (t 26049 22786 730450 538000)) nil (26049 22794 753462 110000) 0 nil])
([nil nil ((#("(devices" 0 8 (face nil fontified t)) . 17447) (undo-tree-id494 . -3) (undo-tree-id495 . -3) (undo-tree-id496 . -3) (undo-tree-id497 . -3) (undo-tree-id498 . -3) (undo-tree-id499 . -3) (undo-tree-id500 . -1) (undo-tree-id501 . -8)) nil (26049 22794 753461 96000) 0 nil])
([nil nil ((17447 . 17452)) nil (26049 22794 753456 498000) 0 nil])
([nil nil ((#(")" 0 1 (face nil fontified t)) . -17452) (undo-tree-id492 . -1) (undo-tree-id493 . -1) 17453) nil (26049 22794 753453 560000) 0 nil])
([nil nil ((17220 . 17222) (t 26049 22795 874235 402000)) nil (26049 22805 215594 986000) 0 nil])
([nil nil ((#("]" 0 1 (fontified t)) . -17220) (undo-tree-id519 . -1) (undo-tree-id520 . -1) (undo-tree-id521 . -1) (undo-tree-id522 . -1) (#("d" 0 1 (fontified t)) . -17221) (undo-tree-id523 . -1) (undo-tree-id524 . -1) 17222) nil (26049 22805 215594 324000) 0 nil])
([nil nil ((17220 . 17222)) nil (26049 22805 215591 933000) 0 nil])
([nil nil ((#("x" 0 1 (fontified t)) . -17219) (undo-tree-id503 . -1) (undo-tree-id504 . -1) (undo-tree-id505 . -1) (undo-tree-id506 . -1) (undo-tree-id507 . -1) (undo-tree-id508 . -1) (undo-tree-id509 . -1) (undo-tree-id510 . -1) (undo-tree-id511 . -1) (undo-tree-id512 . -1) (#("d" 0 1 (fontified t)) . -17220) (undo-tree-id513 . -1) (undo-tree-id514 . -1) (undo-tree-id515 . -1) (undo-tree-id516 . -1) (#("e" 0 1 (fontified t)) . -17221) (undo-tree-id517 . -1) (undo-tree-id518 . -1) 17222) nil (26049 22805 215590 817000) 0 nil])
([nil nil ((17219 . 17226)) nil (26049 22805 215573 745000) 0 nil])
([nil nil ((999 . 1107) (#("BoardParam, ConfigStorageParam, FakeDeviceParam,
                     LocaleParam, label_or_query_argument" 0 106 (fontified nil)) . 999) (t 26049 22820 194006 524000) (999 . 1105) ("
    BoardParam,
    ConfigStorageParam,
    FakeDeviceParam,
    LocaleParam,
    label_or_query_argument,
" . 999) 17228 (t 26049 22806 358078 709000)) nil (26049 23035 751470 505000) 0 nil])
([nil nil ((14446 . 14450) (#("    " 0 4 (fontified nil)) . 14445) (undo-tree-id595 . -4) (14444 . 14450) (t 26049 22820 418006 570000)) nil (26049 23483 600765 313000) 0 nil] [nil nil ((15314 . 15318) (t 26049 22820 418006 570000)) ((#("    " 0 4 (fontified t)) . 15314) (undo-tree-id525 . -4)) (26049 23035 751322 47000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -14446) (undo-tree-id594 . -4) 14450) nil (26049 23483 600764 830000) 0 nil])
nil
([nil nil ((14446 . 14463)) nil (26049 23483 600764 378000) 0 nil])
([nil nil ((#("i" 0 1 (face font-lock-string-face fontified t)) . -14460) (undo-tree-id591 . -1) (#("f" 0 1 (face font-lock-string-face fontified t)) . -14461) (undo-tree-id592 . -1) (#("2" 0 1 (face font-lock-string-face fontified t)) . -14462) (undo-tree-id593 . -1) 14463) nil (26049 23483 600764 188000) 0 nil])
([nil nil ((14460 . 14464)) nil (26049 23483 600763 393000) 0 nil])
([nil nil ((#("u" 0 1 (face font-lock-string-face fontified t)) . -14460) (undo-tree-id587 . -1) (#("f" 0 1 (face font-lock-string-face fontified t)) . -14461) (undo-tree-id588 . -1) (#("2" 0 1 (face font-lock-string-face fontified t)) . -14462) (undo-tree-id589 . -1) (#(" " 0 1 (face font-lock-string-face fontified t)) . -14463) (undo-tree-id590 . -1) 14464) nil (26049 23483 600763 43000) 0 nil])
([nil nil ((14460 . 14467)) nil (26049 23483 600762 144000) 0 nil])
([nil nil ((14467 . 14468)) nil (26049 23483 600762 3000) 0 nil])
([nil nil ((14468 . 14480)) nil (26049 23483 600761 804000) 0 nil])
([nil nil ((14480 . 14492)) nil (26049 23483 600761 619000) 0 nil])
([nil nil ((14492 . 14497)) nil (26049 23483 600761 403000) 0 nil])
([nil nil ((14445 . 14450)) nil (26049 23483 600761 273000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -14446) (undo-tree-id586 . -4) 14450) nil (26049 23483 600761 70000) 0 nil])
([nil nil ((14417 . 14422)) nil (26049 23483 600760 767000) 0 nil])
([nil nil ((14422 . 14423)) nil (26049 23483 600760 641000) 0 nil])
([nil nil ((#("\"" 0 1 (face font-lock-doc-face fontified t)) . -14422) (undo-tree-id585 . -1) 14423) nil (26049 23483 600760 489000) 0 nil])
([nil nil ((14422 . 14443)) nil (26049 23483 600760 88000) 0 nil])
([nil nil ((14443 . 14451)) nil (26049 23483 600759 861000) 0 nil])
([nil nil ((#("t" 0 1 (face font-lock-doc-face fontified t)) . -14450) (undo-tree-id584 . -1) 14451) nil (26049 23483 600759 537000) 0 nil])
([nil nil ((14450 . 14458)) nil (26049 23483 600759 180000) 0 nil])
([nil nil ((#("devices waiting in" 0 18 (face font-lock-doc-face fontified t)) . 14440)) nil (26049 23483 600759 39000) 0 nil])
([nil nil ((14440 . 14449)) nil (26049 23483 600758 918000) 0 nil])
([nil nil ((#("connected" 0 9 (face font-lock-doc-face fontified t)) . 14440)) nil (26049 23483 600758 708000) 0 nil])
([nil nil ((14440 . 14442)) nil (26049 23483 600758 585000) 0 nil])
([nil nil ((14442 . 14452)) nil (26049 23483 600758 476000) 0 nil])
([nil nil ((#("i" 0 1 (face font-lock-doc-face fontified t)) . -14448) (undo-tree-id580 . -1) (#("n" 0 1 (face font-lock-doc-face fontified t)) . -14449) (undo-tree-id581 . -1) (#(" " 0 1 (face font-lock-doc-face fontified t)) . -14450) (undo-tree-id582 . -1) (#("U" 0 1 (face font-lock-doc-face fontified t)) . -14451) (undo-tree-id583 . -1) 14452) nil (26049 23483 600758 154000) 0 nil])
([nil nil ((14448 . 14469)) nil (26049 23483 600756 606000) 0 nil])
([nil nil ((14469 . 14480)) nil (26049 23483 600756 427000) 0 nil])
([nil nil ((#("UF" 0 2 (face font-lock-doc-face fontified t)) . 14460)) nil (26049 23483 600756 204000) 0 nil])
([nil nil ((14460 . 14463)) nil (26049 23483 600755 836000) 0 nil])
([nil nil ((#("@" 0 1 (face font-lock-doc-face fontified t)) . -14463) (undo-tree-id579 . -1) 14464) nil (26049 23483 600755 576000) 0 nil])
([nil nil ((14480 . 14483)) nil (26049 23483 600755 192000) 0 nil])
([nil nil ((14559 . 14564)) nil (26049 23483 600755 77000) 0 nil])
([nil nil ((14564 . 14585)) nil (26049 23483 600754 968000) 0 nil])
([nil nil ((14585 . 14588)) nil (26049 23483 600754 840000) 0 nil])
([nil nil ((#("3" 0 1 (face font-lock-doc-face fontified t)) . -14585) (undo-tree-id576 . -1) (#(" " 0 1 (face font-lock-doc-face fontified t)) . -14586) (undo-tree-id577 . -1) (#("b" 0 1 (face font-lock-doc-face fontified t)) . -14587) (undo-tree-id578 . -1) 14588) nil (26049 23483 600754 620000) 0 nil])
([nil nil ((14585 . 14606)) nil (26049 23483 600753 834000) 0 nil])
([nil nil ((14606 . 14609)) nil (26049 23483 600753 716000) 0 nil])
([nil nil ((14609 . 14614)) nil (26049 23483 600753 599000) 0 nil])
([nil nil ((#("s" 0 1 (face font-lock-doc-face fontified t)) . -14604) (undo-tree-id575 . -1) 14605) nil (26049 23483 600753 452000) 0 nil])
([nil nil ((14613 . 14629)) nil (26049 23483 600753 63000) 0 nil])
([nil nil ((14622 . 14637) (#("distinc" 0 7 (fontified t)) . -14622) (undo-tree-id574 . -7) 14629) nil (26049 23483 600752 903000) 0 nil])
([nil nil ((14622 . 14630) (#("distinct_device" 0 15 (fontified t)) . -14622) (undo-tree-id573 . -15) 14637) nil (26049 23483 600752 532000) 0 nil])
([nil nil ((14622 . 14641) (#("distinct" 0 8 (fontified t)) . -14622) (undo-tree-id572 . -8) 14630) nil (26049 23483 600752 92000) 0 nil])
([nil nil ((14641 . 14643)) nil (26049 23483 600751 689000) 0 nil])
([nil nil ((14643 . 14648)) nil (26049 23483 600751 566000) 0 nil])
([nil nil ((14648 . 14661)) nil (26049 23483 600751 318000) 0 nil])
([nil nil ((14661 . 14666)) nil (26049 23483 600751 165000) 0 nil])
([nil nil ((14666 . 14673)) nil (26049 23483 600750 861000) 0 nil])
([nil nil ((#("    device." 0 11 (fontified t)) . 14662)) nil (26049 23483 600750 653000) 0 nil])
([nil nil ((14662 . 14666)) nil (26049 23483 600750 73000) 0 nil])
([nil nil ((775 . 776)) nil (26049 23483 600749 861000) 0 nil])
([nil nil ((776 . 794)) nil (26049 23483 600749 745000) 0 nil])
([nil nil ((794 . 795)) nil (26049 23483 600749 617000) 0 nil])
([nil nil ((#("partition" 0 9 (fontified t)) . 786)) nil (26049 23483 600749 324000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -785) (undo-tree-id571 . -1) 786) nil (26049 23483 600749 114000) 0 nil])
([nil nil ((785 . 786)) nil (26049 23483 600748 658000) 0 nil])
([nil nil ((#("from ..hw " 0 4 (face font-lock-keyword-face fontified t) 4 10 (fontified t)) . 776)) nil (26049 23483 600748 220000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -775) (undo-tree-id570 . -1) 776) nil (26049 23483 600747 870000) 0 nil])
([nil nil ((775 . 786)) nil (26049 23483 600747 565000) 0 nil])
([nil nil ((14677 . 14679)) nil (26049 23483 600747 424000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . -14678) (undo-tree-id569 . -1) 14679) nil (26049 23483 600747 86000) 0 nil])
([nil nil ((14678 . 14692)) nil (26049 23483 600746 680000) 0 nil])
([nil nil ((14687 . 14693) (#("mount" 0 5 (fontified t)) . -14687) (undo-tree-id568 . -5) 14692) nil (26049 23483 600746 260000) 0 nil])
([nil nil ((14687 . 14697) (#("Mounts" 0 6 (fontified t)) . -14687) (undo-tree-id567 . -6) 14693) nil (26049 23483 600745 723000) 0 nil])
([nil nil ((14687 . 14694) (#("mountpoint" 0 10 (fontified t)) . -14687) (undo-tree-id566 . -10) 14697) nil (26049 23483 600745 188000) 0 nil])
([nil nil ((14687 . 14702) (#("mounted" 0 7 (fontified t)) . -14687) (undo-tree-id565 . -7) 14694) nil (26049 23483 600744 607000) 0 nil])
([nil nil ((14702 . 14703)) nil (26049 23483 600743 920000) 0 nil])
([nil nil ((#("9" 0 1 (fontified t)) . -14702) (undo-tree-id564 . -1) 14703) nil (26049 23483 600743 604000) 0 nil])
([nil nil ((14702 . 14723)) nil (26049 23483 600742 870000) 0 nil])
([nil nil ((14723 . 14725)) nil (26049 23483 600742 435000) 0 nil])
([nil nil ((14677 . 14678)) nil (26049 23483 600741 934000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t)) . -14677) (undo-tree-id563 . -1) 14678) nil (26049 23483 600741 421000) 0 nil])
([nil nil ((14677 . 14690)) nil (26049 23483 600740 781000) 0 nil])
([nil nil ((14738 . 14743)) nil (26049 23483 600740 445000) 0 nil])
([nil nil ((#("print(f\"Device mounted at {mountpoint}\")" 0 5 (face font-lock-builtin-face fontified t) 5 7 (fontified t) 7 26 (face font-lock-string-face fontified t) 26 38 (face nil fontified t) 38 39 (face font-lock-string-face fontified t) 39 40 (fontified t)) . 15141)) nil (26049 23483 600740 39000) 0 nil])
([nil nil ((nil rear-nonsticky nil 15180 . 15181) (nil fontified nil 15180 . 15181) (nil fontified nil 15179 . 15180) (nil fontified nil 15167 . 15179) (nil fontified nil 15148 . 15167) (nil fontified nil 15146 . 15148) (nil fontified nil 15141 . 15146) (15141 . 15181)) nil (26049 23483 600739 736000) 0 nil])
([nil nil ((nil rear-nonsticky nil 14782 . 14783) (nil fontified nil 14782 . 14783) (nil fontified nil 14781 . 14782) (nil fontified nil 14769 . 14781) (nil fontified nil 14750 . 14769) (nil fontified nil 14748 . 14750) (nil fontified nil 14743 . 14748) (14743 . 14783)) nil (26049 23483 600738 896000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -14783) (undo-tree-id562 . -1) 14784) nil (26049 23483 600738 108000) 0 nil])
([nil nil ((14785 . 14789) (#("    " 0 4 (fontified nil)) . 14784) (undo-tree-id561 . -4) (14788 . 14789) (14783 . 14784)) nil (26049 23483 600737 534000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -14785) (undo-tree-id560 . -4) 14789) nil (26049 23483 600736 521000) 0 nil])
([nil nil ((14785 . 14806)) nil (26049 23483 600735 806000) 0 nil])
([nil nil ((14806 . 14808)) nil (26049 23483 600735 477000) 0 nil])
([nil nil ((14808 . 14809)) nil (26049 23483 600735 68000) 0 nil])
([nil nil ((14809 . 14824)) nil (26049 23483 600734 664000) 0 nil])
([nil nil ((14824 . 14835)) nil (26049 23483 600734 409000) 0 nil])
([nil nil ((14835 . 14840)) nil (26049 23483 600734 24000) 0 nil])
([nil nil ((14840 . 14861)) nil (26049 23483 600733 689000) 0 nil])
([nil nil ((14861 . 14882)) nil (26049 23483 600733 311000) 0 nil])
([nil nil ((#("mounted" 0 7 (face font-lock-doc-face fontified t)) . 14851)) nil (26049 23483 600732 914000) 0 nil])
([nil nil ((14851 . 14860)) nil (26049 23483 600732 659000) 0 nil])
([nil nil ((#("." 0 1 (face font-lock-doc-face fontified t)) . -14615) (undo-tree-id559 . -1) 14616) nil (26049 23483 600732 145000) 0 nil])
([nil nil ((14615 . 14632)) nil (26049 23483 600731 708000) 0 nil])
([nil nil ((14632 . 14639)) nil (26049 23483 600731 328000) 0 nil])
([nil nil ((#("o" 0 1 (face font-lock-doc-face fontified t)) . -14637) (undo-tree-id553 . -1) (undo-tree-id554 . -1) (undo-tree-id555 . -1) (undo-tree-id556 . -1) (#("i" 0 1 (face font-lock-doc-face fontified t)) . -14638) (undo-tree-id557 . -1) (undo-tree-id558 . -1) 14639) nil (26049 23483 600730 888000) 0 nil])
([nil nil ((14637 . 14641)) nil (26049 23483 600729 449000) 0 nil])
([nil nil ((14615 . 14620)) nil (26049 23483 600728 983000) 0 nil])
([nil nil ((#("u" 0 1 (face font-lock-doc-face fontified t)) . -14616) (undo-tree-id533 . -1) (undo-tree-id534 . -1) (undo-tree-id535 . -1) (undo-tree-id536 . -1) (undo-tree-id537 . -1) (undo-tree-id538 . -1) (undo-tree-id539 . -1) (undo-tree-id540 . -1) (#("f" 0 1 (face font-lock-doc-face fontified t)) . -14617) (undo-tree-id541 . -1) (undo-tree-id542 . -1) (undo-tree-id543 . -1) (undo-tree-id544 . -1) (undo-tree-id545 . -1) (undo-tree-id546 . -1) (#(" " 0 1 (face font-lock-doc-face fontified t)) . -14618) (undo-tree-id547 . -1) (undo-tree-id548 . -1) (undo-tree-id549 . -1) (undo-tree-id550 . -1) (#("b" 0 1 (face font-lock-doc-face fontified t)) . -14619) (undo-tree-id551 . -1) (undo-tree-id552 . -1) 14620) nil (26049 23483 600728 256000) 0 nil])
([nil nil ((14616 . 14625)) nil (26049 23483 600722 426000) 0 nil])
([nil nil ((#("." 0 1 (face font-lock-doc-face fontified t)) . -14917) (undo-tree-id526 . -1) (undo-tree-id527 . -1) (undo-tree-id528 . -1) (undo-tree-id529 . -1) (#("\"" 0 1 (face font-lock-doc-face fontified t)) . -14918) (undo-tree-id530 . -1) (undo-tree-id531 . -1) (undo-tree-id532 . -1) 14919) nil (26049 23483 600721 696000) 0 nil])
([nil nil ((14917 . 14928)) nil (26049 23483 600713 251000) 0 nil])
([nil nil ((14928 . 14931)) nil (26049 23483 600800 133000) 0 nil])
([nil nil ((14707 . 14712)) nil (26049 23566 285794 113000) 0 nil] [nil nil ((14773 . 14778)) ((#("
    " 0 5 (fontified t)) . 14773) (undo-tree-id596 . -5) (undo-tree-id597 . -1)) (26049 23483 600709 619000) 0 nil])
([nil nil ((14712 . 14727)) nil (26049 23566 285793 756000) 0 nil])
nil
([nil nil ((#("d" 0 1 (fontified t)) . -14725) (undo-tree-id604 . -1) (#("e" 0 1 (fontified t)) . -14726) (undo-tree-id605 . -1) 14727) nil (26049 23566 285793 72000) 0 nil])
([nil nil ((14725 . 14734)) nil (26049 23566 285792 142000) 0 nil])
([nil nil ((#("partition" 0 9 (fontified t)) . 14725)) nil (26049 23566 285791 788000) 0 nil])
([nil nil ((14725 . 14740)) nil (26049 23566 285791 558000) 0 nil])
([nil nil ((14735 . 14745) (#("mount" 0 5 (fontified t)) . -14735) (undo-tree-id603 . -5) 14740) nil (26049 23566 285790 853000) 0 nil])
([nil nil ((14745 . 14748)) nil (26049 23566 285789 985000) 0 nil])
([nil nil ((#("v" 0 1 (fontified t)) . -14747) (undo-tree-id602 . -1) 14748) nil (26049 23566 285789 490000) 0 nil])
([nil nil ((14747 . 14758)) nil (26049 23566 285787 339000) 0 nil])
([nil nil ((14753 . 14762) (#("parti" 0 5 (fontified t)) . -14753) (undo-tree-id601 . -5) 14758) nil (26049 23566 285786 842000) 0 nil])
([nil nil ((14753 . 14767) (#("partition" 0 9 (fontified t)) . -14753) (undo-tree-id600 . -9) 14762) nil (26049 23566 285785 813000) 0 nil])
([nil nil ((14767 . 14768)) nil (26049 23566 285784 492000) 0 nil])
([nil nil ((14768 . 14773)) nil (26049 23566 285784 98000) 0 nil])
([nil nil ((14773 . 14787)) nil (26049 23566 285783 543000) 0 nil])
([nil nil ((14787 . 14796)) nil (26049 23566 285783 214000) 0 nil])
([nil nil ((14796 . 14806)) nil (26049 23566 285782 727000) 0 nil])
([nil nil ((#("A" 0 1 (face font-lock-string-face fontified t)) . -14804) (undo-tree-id598 . -1) (#("l" 0 1 (face font-lock-string-face fontified t)) . -14805) (undo-tree-id599 . -1) 14806) nil (26049 23566 285782 183000) 0 nil])
([nil nil ((14804 . 14825)) nil (26049 23566 285773 628000) 0 nil])
([nil nil ((14825 . 14832)) nil (26049 23566 285773 201000) 0 nil])
([nil nil ((14832 . 14845)) nil (26049 23566 285772 260000) 0 nil])
([nil nil ((14845 . 14854)) nil (26049 23566 285771 450000) 0 nil])
([nil nil ((14854 . 14860)) nil (26049 23566 285768 166000) 0 nil])
([nil nil ((14973 . 14974) 14860 (t 26049 23566 292869 493000)) nil (26049 23859 300070 111000) 0 nil])
([nil nil ((15085 . 15090) (t 26049 23567 452903 69000)) nil (26049 23859 300069 599000) 0 nil])
([nil nil ((nil rear-nonsticky nil 15382 . 15383) (nil fontified nil 15382 . 15383) (nil fontified nil 15363 . 15382) (nil fontified nil 15362 . 15363) (nil fontified nil 15357 . 15362) (nil fontified nil 15320 . 15357) (nil fontified nil 15319 . 15320) (nil fontified nil 15307 . 15319) (nil fontified nil 15275 . 15307) (nil fontified nil 15273 . 15275) (nil fontified nil 15268 . 15273) (nil fontified nil 15263 . 15268) (nil fontified nil 15257 . 15263) (nil fontified nil 15249 . 15257) (nil fontified nil 15247 . 15249) (nil fontified nil 15218 . 15247) (nil fontified nil 15217 . 15218) (nil fontified nil 15212 . 15217) (nil fontified nil 15204 . 15212) (nil fontified nil 15191 . 15204) (nil fontified nil 15188 . 15191) (nil fontified nil 15187 . 15188) (nil fontified nil 15185 . 15187) (nil fontified nil 15156 . 15185) (nil fontified nil 15155 . 15156) (nil fontified nil 15154 . 15155) (nil fontified nil 15144 . 15154) (nil fontified nil 15131 . 15144) (nil fontified nil 15126 . 15131) (nil fontified nil 15098 . 15126) (nil fontified nil 15097 . 15098) (nil fontified nil 15096 . 15097) (nil fontified nil 15090 . 15096) (15090 . 15383)) nil (26049 23859 300069 123000) 0 nil])
([nil nil ((#("device(query)" 0 13 (fontified t)) . 15108) (undo-tree-id659 . -13) (undo-tree-id660 . -13) (undo-tree-id661 . -13)) nil (26049 23859 300066 908000) 0 nil])
([nil nil ((15108 . 15110)) nil (26049 23859 300065 609000) 0 nil])
([nil nil ((15099 . 15118) (#("distinct_uf" 0 11 (fontified t)) . -15099) (undo-tree-id655 . -11) (undo-tree-id656 . -9) (undo-tree-id657 . -9) (undo-tree-id658 . -9) 15110) nil (26049 23859 300065 217000) 0 nil])
([nil nil ((15118 . 15120)) nil (26049 23859 300063 729000) 0 nil])
([nil nil ((#("device" 0 6 (fontified t)) . 15156)) nil (26049 23859 300063 285000) 0 nil])
([nil nil ((15156 . 15165)) nil (26049 23859 300062 794000) 0 nil])
([nil nil ((#("get_mountpoint()" 0 16 (fontified t)) . 15166)) nil (26049 23859 300062 422000) 0 nil])
([nil nil ((15166 . 15181)) nil (26049 23859 300061 901000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t)) . -15177) (undo-tree-id638 . -1) (undo-tree-id639 . -1) (undo-tree-id640 . -1) (undo-tree-id641 . -1) (undo-tree-id642 . -1) (undo-tree-id643 . -1) (#("a" 0 1 (fontified t)) . -15178) (undo-tree-id644 . -1) (undo-tree-id645 . -1) (undo-tree-id646 . -1) (undo-tree-id647 . -1) (undo-tree-id648 . -1) (#("r" 0 1 (fontified t)) . -15179) (undo-tree-id649 . -1) (undo-tree-id650 . -1) (undo-tree-id651 . -1) (undo-tree-id652 . -1) (#("t" 0 1 (fontified t)) . -15180) (undo-tree-id653 . -1) (undo-tree-id654 . -1) 15181) nil (26049 23859 300061 61000) 0 nil])
([nil nil ((15177 . 15198)) nil (26049 23859 300056 409000) 0 nil])
([nil nil ((15198 . 15199)) nil (26049 23859 300055 988000) 0 nil])
([nil nil ((15345 . 15354)) nil (26049 23859 300055 659000) 0 nil])
([nil nil ((#("device" 0 6 (fontified t)) . 15354) (undo-tree-id637 . -6)) nil (26049 23859 300055 369000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t)) . -15373) (undo-tree-id634 . -1) (undo-tree-id635 . -1) (undo-tree-id636 . -1) 15374) nil (26049 23859 300054 581000) 0 nil])
([nil nil ((15373 . 15376)) nil (26049 23859 300053 408000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t)) . -15373) (undo-tree-id622 . -1) (undo-tree-id623 . -1) (undo-tree-id624 . -1) (undo-tree-id625 . -1) (undo-tree-id626 . -1) (undo-tree-id627 . -1) (#("a" 0 1 (fontified t)) . -15374) (undo-tree-id628 . -1) (undo-tree-id629 . -1) (undo-tree-id630 . -1) (undo-tree-id631 . -1) (#("r" 0 1 (fontified t)) . -15375) (undo-tree-id632 . -1) (undo-tree-id633 . -1) 15376) nil (26049 23859 300052 813000) 0 nil])
([nil nil ((15373 . 15385)) nil (26049 23859 300049 93000) 0 nil])
([nil nil ((15380 . 15389) (#("parti" 0 5 (fontified t)) . -15380) (undo-tree-id608 . -5) (undo-tree-id609 . -1) (undo-tree-id610 . -2) (undo-tree-id611 . -3) (undo-tree-id612 . -4) (undo-tree-id613 . -5) (undo-tree-id614 . -5) (undo-tree-id615 . -5) (undo-tree-id616 . -5) (undo-tree-id617 . -5) (undo-tree-id618 . -5) (undo-tree-id619 . -5) (undo-tree-id620 . -5) (undo-tree-id621 . -5) 15385) nil (26049 23859 300048 452000) 0 nil])
([nil nil ((15380 . 15394) (#("partition" 0 9 (fontified t)) . -15380) (undo-tree-id606 . -9) (undo-tree-id607 . -9) 15389) nil (26049 23859 300044 51000) 0 nil])
([nil current ((15394 . 15395)) nil (26049 23859 300034 958000) 0 nil])
nil

(undo-tree-save-format-version . 1)
"a0e020f1fb012b290fcb42b5ee9afd593dbe2819"
[nil nil nil nil (26049 7470 465530 362000) 0 nil]
([nil nil ((#("def _run(command: str) -> str:
    \"\"\"Execute command and return its stdout output.\"\"\"
    # TODO(dhrosa): Debug logs of command executions.
    process = subprocess.run(shlex.split(command), capture_output=True, text=True)
    try:
        process.check_returncode()
    except subprocess.CalledProcessError:
        logger.error(f\"Command:\\n{command}\\nExited with status {process.returncode}\")
        if process.stdout:
            logger.error(f\"stdout:\\n{process.stdout}\")
        if process.stderr:
            logger.error(f\"stderr:\\n{process.stderr}\")
        raise
    return process.stdout
" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 8 (face font-lock-function-name-face fontified t) 8 18 (fontified t) 18 21 (face font-lock-builtin-face fontified t) 21 23 (fontified t) 23 24 (face font-lock-operator-face fontified t) 24 25 (face font-lock-operator-face fontified t) 25 26 (fontified t) 26 29 (face font-lock-builtin-face fontified t) 29 35 (fontified t) 35 37 (face font-lock-doc-face fontified t) 37 38 (face font-lock-doc-face syntax-table (15) fontified t) 38 83 (face font-lock-doc-face fontified t) 83 84 (face font-lock-doc-face syntax-table (15) fontified t) 84 86 (face font-lock-doc-face fontified t) 86 91 (fontified t) 91 93 (face font-lock-comment-delimiter-face fontified t) 93 141 (face font-lock-comment-face fontified t) 141 145 (fontified t) 145 152 (face font-lock-variable-name-face fontified t) 152 153 (fontified t) 153 154 (face font-lock-operator-face fontified t) 154 206 (fontified t) 206 207 (face font-lock-operator-face fontified t) 207 211 (face font-lock-constant-face fontified t) 211 217 (fontified t) 217 218 (face font-lock-operator-face fontified t) 218 222 (face font-lock-constant-face fontified t) 222 228 (fontified t) 228 231 (face font-lock-keyword-face fontified t) 231 272 (fontified t) 272 278 (face font-lock-keyword-face fontified t) 278 332 (fontified t) 332 341 (face font-lock-string-face fontified t) 341 343 (face font-lock-constant-face fontified t) 343 352 (face nil fontified t) 352 354 (face font-lock-constant-face fontified t) 354 373 (face font-lock-string-face fontified t) 373 393 (face nil fontified t) 393 394 (face font-lock-string-face fontified t) 394 404 (fontified t) 404 406 (face font-lock-keyword-face fontified t) 406 449 (fontified t) 449 457 (face font-lock-string-face fontified t) 457 459 (face font-lock-constant-face fontified t) 459 475 (face nil fontified t) 475 476 (face font-lock-string-face fontified t) 476 486 (fontified t) 486 488 (face font-lock-keyword-face fontified t) 488 531 (fontified t) 531 539 (face font-lock-string-face fontified t) 539 541 (face font-lock-constant-face fontified t) 541 557 (face nil fontified t) 557 558 (face font-lock-string-face fontified t) 558 568 (fontified t) 568 573 (face font-lock-keyword-face fontified t) 573 578 (fontified t) 578 584 (face font-lock-keyword-face fontified t) 584 600 (fontified t)) . 4426) (undo-tree-id24 . -8) (undo-tree-id25 . -600) (undo-tree-id26 . -600) (undo-tree-id27 . -600) 5026 (t 26049 2415 325643 508000)) nil (26049 7470 465529 499000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -4424) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (#("
" 0 1 (fontified t)) . -4425) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) 4426) nil (26049 7470 465525 529000) 0 nil])
([nil nil ((#("import shlex
import subprocess" 0 6 (face font-lock-keyword-face fontified t) 6 13 (fontified t) 13 19 (face font-lock-keyword-face fontified t) 19 30 (fontified t)) . 87) (undo-tree-id36 . -30) 117 (t 26049 7470 463359 202000)) nil (26049 7548 383038 15000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -86) (undo-tree-id34 . -1) (undo-tree-id35 . -1) 87) nil (26049 7548 383037 244000) 0 nil])
([nil nil ((215 . 216)) nil (26049 7548 383036 436000) 0 nil])
([nil nil ((216 . 219)) nil (26049 7548 383036 116000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t)) . -218) (undo-tree-id33 . -1) 219) nil (26049 7548 383035 631000) 0 nil])
([nil nil ((218 . 238)) nil (26049 7548 383035 12000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . -723) (undo-tree-id32 . -1) 724) nil (26049 7548 383034 678000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . -1519) (undo-tree-id31 . -1) 1520) nil (26049 7548 383034 142000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . -1104) (undo-tree-id30 . -1) 1105) nil (26049 7548 383032 527000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . -4360) (undo-tree-id28 . -1) (undo-tree-id29 . -1) 4361) nil (26049 7548 383028 918000) 0 nil])
([nil nil ((215 . 216) (t 26049 7548 412527 206000)) nil (26049 7743 714114 859000) 0 nil])
([nil nil ((216 . 224)) nil (26049 7743 714114 497000) 0 nil])
([nil nil ((#("import ." 0 6 (face font-lock-keyword-face fontified t) 6 8 (fontified t)) . 216)) nil (26049 7743 714114 236000) 0 nil])
([nil nil ((216 . 229)) nil (26049 7743 714113 972000) 0 nil])
([nil nil ((229 . 234)) nil (26049 7743 714113 773000) 0 nil])
([nil nil ((585 . 594)) nil (26049 7743 714113 526000) 0 nil])
([nil nil ((594 . 604)) nil (26049 7743 714113 319000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t)) . -602) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (#("s" 0 1 (fontified t)) . -603) (undo-tree-id222 . -1) (undo-tree-id223 . -1) 604) nil (26049 7743 714112 888000) 0 nil])
([nil nil ((602 . 609)) nil (26049 7743 714110 732000) 0 nil])
([nil nil ((#("g" 0 1 (fontified t)) . -606) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (#("e" 0 1 (fontified t)) . -607) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (#("t" 0 1 (fontified t)) . -608) (undo-tree-id216 . -1) (undo-tree-id217 . -1) 609) nil (26049 7743 714110 188000) 0 nil])
([nil nil ((606 . 627)) nil (26049 7743 714105 953000) 0 nil])
([nil nil ((627 . 637)) nil (26049 7743 714105 711000) 0 nil])
([nil nil ((#("        return disk.mountpoint(self.partition_path)" 0 8 (fontified t) 8 14 (face font-lock-keyword-face fontified t) 14 31 (fontified t) 31 35 (face font-lock-keyword-face fontified t) 35 51 (fontified t)) . 586) (undo-tree-id134 . -12) (undo-tree-id135 . -13) (undo-tree-id136 . -14) (undo-tree-id137 . -15) (undo-tree-id138 . -16) (undo-tree-id139 . -16) (undo-tree-id140 . -16) (undo-tree-id141 . -16) (undo-tree-id142 . -16) (undo-tree-id143 . -17) (undo-tree-id144 . -18) (undo-tree-id145 . -19) (undo-tree-id146 . -20) (undo-tree-id147 . -20) (undo-tree-id148 . -20) (undo-tree-id149 . -20) (undo-tree-id150 . -20) (undo-tree-id151 . -20) (undo-tree-id152 . -20) (undo-tree-id153 . -21) (undo-tree-id154 . -22) (undo-tree-id155 . -23) (undo-tree-id156 . -24) (undo-tree-id157 . -25) (undo-tree-id158 . -26) (undo-tree-id159 . -27) (undo-tree-id160 . -28) (undo-tree-id161 . -29) (undo-tree-id162 . -30) (undo-tree-id163 . -31) (undo-tree-id164 . -32) (undo-tree-id165 . -33) (undo-tree-id166 . -34) (undo-tree-id167 . -35) (undo-tree-id168 . -36) (undo-tree-id169 . -37) (undo-tree-id170 . -38) (undo-tree-id171 . -39) (undo-tree-id172 . -40) (undo-tree-id173 . -41) (undo-tree-id174 . -42) (undo-tree-id175 . -43) (undo-tree-id176 . -44) (undo-tree-id177 . -45) (undo-tree-id178 . -8) (undo-tree-id179 . -8) (undo-tree-id180 . -8) (undo-tree-id181 . -8) (undo-tree-id182 . -8) (undo-tree-id183 . -8) (undo-tree-id184 . -8) (undo-tree-id185 . -8) (undo-tree-id186 . -8) (undo-tree-id187 . -8) (undo-tree-id188 . -8) (undo-tree-id189 . -8) (undo-tree-id190 . -8) (undo-tree-id191 . -8) (undo-tree-id192 . -8) (undo-tree-id193 . -8) (undo-tree-id194 . -8) (undo-tree-id195 . -8) (undo-tree-id196 . -8) (undo-tree-id197 . -8) (undo-tree-id198 . -8) (undo-tree-id199 . -46) (undo-tree-id200 . -47) (undo-tree-id201 . -48) (undo-tree-id202 . -49) (undo-tree-id203 . -50) (undo-tree-id204 . -51) (undo-tree-id205 . -51)) nil (26049 7743 714104 392000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -585) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) 586) nil (26049 7743 714079 999000) 0 nil])
([nil nil ((645 . 654)) nil (26049 7743 713989 586000) 0 nil])
([nil nil ((nil rear-nonsticky nil 704 . 705) (nil fontified nil 689 . 705) (nil fontified nil 685 . 689) (nil fontified nil 668 . 685) (nil fontified nil 662 . 668) (nil fontified nil 654 . 662) (654 . 705)) nil (26049 7743 713989 201000) 0 nil])
([nil nil ((#("        " 0 8 (fontified t)) . -654) (undo-tree-id59 . -8) 646) nil (26049 7743 713988 603000) 0 nil])
([nil nil ((#("        command = f\"lsblk {self.partition_path} --output mountpoint --noheadings\"
        out = run(command).strip()
        if not out:
            return None
        return Path(out)" 0 8 (fontified t) 8 15 (fontified t) 15 16 (fontified t) 16 17 (face font-lock-operator-face fontified t) 17 19 (fontified t) 19 26 (face font-lock-string-face fontified t) 26 27 (face nil fontified t) 27 31 (face font-lock-keyword-face fontified t) 31 47 (face nil fontified t) 47 81 (face font-lock-string-face fontified t) 81 82 (fontified t) 82 90 (fontified t) 90 93 (fontified t) 93 94 (fontified t) 94 95 (face font-lock-operator-face fontified t) 95 117 (fontified t) 117 125 (fontified t) 125 127 (face font-lock-keyword-face fontified t) 127 128 (fontified t) 128 131 (face font-lock-keyword-face fontified t) 131 149 (fontified t) 149 155 (face font-lock-keyword-face fontified t) 155 156 (fontified t) 156 160 (face font-lock-constant-face fontified t) 160 169 (fontified t) 169 175 (face font-lock-keyword-face fontified t) 175 185 (fontified t)) . 698) (undo-tree-id51 . -185) (undo-tree-id52 . -99) (undo-tree-id53 . -96) (undo-tree-id54 . -185) (undo-tree-id55 . -185) (undo-tree-id56 . -161) (undo-tree-id57 . -185) (undo-tree-id58 . -185) 883) nil (26049 7743 713987 614000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -697) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) 698) nil (26049 7743 713982 806000) 0 nil])
([nil nil ((195 . 234) (#("device import Device
from . import disk" 0 7 (fontified t) 7 13 (face font-lock-keyword-face fontified t) 13 21 (fontified t) 21 25 (face font-lock-keyword-face fontified t) 25 28 (fontified t) 28 34 (face font-lock-keyword-face fontified t) 34 39 (fontified t)) . 195) 697 (t 26049 7743 739318 742000)) nil (26049 7966 554909 645000) 0 nil])
([nil nil ((737 . 746) (t 26049 7744 615300 458000)) nil (26049 7966 554909 394000) 0 nil])
([nil nil ((746 . 758)) nil (26049 7966 554909 125000) 0 nil])
([nil nil ((753 . 754)) nil (26049 7966 554909 11000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t)) . -753) (undo-tree-id20 . -1) 754) nil (26049 7966 554908 760000) 0 nil])
([nil nil ((#("self." 0 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t)) . 753) (undo-tree-id16 . -5) (undo-tree-id17 . -5) (undo-tree-id18 . -5) (undo-tree-id19 . -5)) nil (26049 7966 554908 208000) 0 nil])
([nil nil ((753 . 762)) nil (26049 7966 554907 280000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -760) (undo-tree-id14 . -1) (#("n" 0 1 (fontified t)) . -761) (undo-tree-id15 . -1) 762) nil (26049 7966 554907 25000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -758) (undo-tree-id12 . -1) (#("o" 0 1 (fontified t)) . -759) (undo-tree-id13 . -1) 760) nil (26049 7966 554906 267000) 0 nil])
([nil nil ((758 . 779)) nil (26049 7966 554905 718000) 0 nil])
([nil nil ((779 . 785)) nil (26049 7966 554905 602000) 0 nil])
([nil nil ((779 . 793) (#("partit" 0 6 (fontified t)) . -779) (undo-tree-id11 . -6) 785) nil (26049 7966 554905 432000) 0 nil])
([nil nil ((793 . 794)) nil (26049 7966 554905 9000) 0 nil])
([nil nil ((737 . 746)) nil (26049 7966 554904 889000) 0 nil])
([nil nil ((746 . 748)) nil (26049 7966 554904 760000) 0 nil])
([nil nil ((748 . 755)) nil (26049 7966 554904 600000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -753) (undo-tree-id9 . -1) (#("r" 0 1 (fontified t)) . -754) (undo-tree-id10 . -1) 755) nil (26049 7966 554904 403000) 0 nil])
([nil nil ((753 . 762)) nil (26049 7966 554903 820000) 0 nil])
([nil nil ((#("        if not self.part" 0 8 (fontified t) 8 10 (face font-lock-keyword-face fontified t) 10 11 (fontified t) 11 14 (face font-lock-keyword-face fontified t) 14 15 (fontified t) 15 19 (face font-lock-keyword-face fontified t) 19 24 (fontified t)) . 738)) nil (26049 7966 554903 566000) 0 nil])
([nil nil ((738 . 746)) nil (26049 7966 554903 406000) 0 nil])
([nil nil ((746 . 765)) nil (26049 7966 554903 232000) 0 nil])
([nil nil ((758 . 772) (#("partiti" 0 7 (fontified t)) . -758) (undo-tree-id8 . -7) 765) nil (26049 7966 554902 937000) 0 nil])
([nil nil ((772 . 773)) nil (26049 7966 554902 245000) 0 nil])
([nil nil ((#("(" 0 1 (fontified t)) . -752) (undo-tree-id7 . -1) 753) nil (26049 7966 554901 917000) 0 nil])
([nil nil ((752 . 753)) nil (26049 7966 554901 396000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t)) . -772) (undo-tree-id6 . -1) 773) nil (26049 7966 554901 0) 0 nil])
([nil nil ((#("        mountpoint = self.get_mountpoint()
        if mountpoint:
            return mountpoint
        partition_path = self.partition_path
        command = f\"udisksctl mount --block-device {partition_path} --options noatime\"
        mount_stdout = run(command)
        logger.info(f\"udisksctl: {mount_stdout}\")
        mountpoint = self.get_mountpoint()
        if mountpoint:
            return mountpoint
        exit(f\"{partition_path} somehow not mounted.\")
" 0 8 (fontified t) 8 18 (face font-lock-variable-name-face fontified t) 18 19 (fontified t) 19 20 (face font-lock-operator-face fontified t) 20 21 (fontified t) 21 25 (face font-lock-keyword-face fontified t) 25 51 (fontified t) 51 53 (face font-lock-keyword-face fontified t) 53 78 (fontified t) 78 84 (face font-lock-keyword-face fontified t) 84 104 (fontified t) 104 118 (face font-lock-variable-name-face fontified t) 118 119 (fontified t) 119 120 (face font-lock-operator-face fontified t) 120 121 (fontified t) 121 125 (face font-lock-keyword-face fontified t) 125 149 (fontified t) 149 156 (face font-lock-variable-name-face fontified t) 156 157 (fontified t) 157 158 (face font-lock-operator-face fontified t) 158 160 (fontified t) 160 192 (face font-lock-string-face fontified t) 192 208 (face nil fontified t) 208 227 (face font-lock-string-face fontified t) 227 228 (fontified t) 228 236 (fontified t) 236 248 (face font-lock-variable-name-face fontified t) 248 249 (fontified t) 249 250 (face font-lock-operator-face fontified t) 250 264 (fontified t) 264 285 (fontified t) 285 297 (face font-lock-string-face fontified t) 297 311 (face nil fontified t) 311 312 (face font-lock-string-face fontified t) 312 322 (fontified t) 322 332 (face font-lock-variable-name-face fontified t) 332 333 (fontified t) 333 334 (face font-lock-operator-face fontified t) 334 335 (fontified t) 335 339 (face font-lock-keyword-face fontified t) 339 365 (fontified t) 365 367 (face font-lock-keyword-face fontified t) 367 392 (fontified t) 392 398 (face font-lock-keyword-face fontified t) 398 410 (fontified t) 410 418 (fontified t) 418 422 (face font-lock-constant-face fontified t) 422 424 (fontified t) 424 425 (face font-lock-string-face fontified t) 425 441 (face nil fontified t) 441 463 (face font-lock-string-face fontified t) 463 465 (fontified t)) . 830) (undo-tree-id0 . -251) (undo-tree-id1 . -464) (undo-tree-id2 . -465) (undo-tree-id3 . -8) (undo-tree-id4 . -465) (undo-tree-id5 . -465) 1295) nil (26049 7966 554897 112000) 0 nil])
([nil nil ((871 . 880) (t 26049 7966 555780 575000)) nil (26049 8013 523219 761000) 0 nil])
([nil nil ((880 . 891)) nil (26049 8013 523219 582000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . -887) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (#("s" 0 1 (fontified t)) . -888) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (#("l" 0 1 (fontified t)) . -889) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (#("f" 0 1 (fontified t)) . -890) (undo-tree-id98 . -1) (undo-tree-id99 . -1) 891) nil (26049 8013 523219 228000) 0 nil])
([nil nil ((887 . 896)) nil (26049 8013 523215 475000) 0 nil])
([nil nil ((892 . 906) (#("part" 0 4 (fontified t)) . -892) (undo-tree-id75 . -4) (undo-tree-id76 . -1) (undo-tree-id77 . -2) (undo-tree-id78 . -3) (undo-tree-id79 . -4) 896) nil (26049 8013 523215 265000) 0 nil])
([nil nil ((906 . 915)) nil (26049 8013 523214 240000) 0 nil])
([nil nil ((915 . 916)) nil (26049 8013 523214 110000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . -915) (undo-tree-id73 . -1) (undo-tree-id74 . -1) 916) nil (26049 8013 523213 848000) 0 nil])
([nil nil ((915 . 923)) nil (26049 8013 523213 153000) 0 nil])
([nil nil ((920 . 937) (#("unm" 0 3 (fontified t)) . -920) (undo-tree-id69 . -3) (undo-tree-id70 . -1) (undo-tree-id71 . -2) (undo-tree-id72 . -3) 923) nil (26049 8013 523212 874000) 0 nil])
([nil nil ((937 . 947)) nil (26049 8013 523211 23000) 0 nil])
([nil nil ((943 . 957) (#("part" 0 4 (fontified t)) . -943) (undo-tree-id64 . -4) (undo-tree-id65 . -1) (undo-tree-id66 . -2) (undo-tree-id67 . -3) (undo-tree-id68 . -4) 947) nil (26049 8013 523210 799000) 0 nil])
([nil nil ((957 . 958)) nil (26049 8013 523209 701000) 0 nil])
([nil nil ((#("        if not self.get_mountpoint():
            return
" 0 8 (fontified t) 8 10 (face font-lock-keyword-face fontified t) 10 11 (fontified t) 11 14 (face font-lock-keyword-face fontified t) 14 15 (fontified t) 15 19 (face font-lock-keyword-face fontified t) 19 50 (fontified t) 50 56 (face font-lock-keyword-face fontified t) 56 57 (fontified t)) . 959) (undo-tree-id60 . -57) (undo-tree-id61 . -37) (undo-tree-id62 . -57) (undo-tree-id63 . -57) 1016) nil (26049 8013 523209 444000) 0 nil])
([nil nil ((#("        command = f\"udisksctl unmount --block-device {self.partition_path}\"
        unmount_stdout = run(command)
        logger.info(f\"udisksctl: {unmount_stdout}\")" 0 8 (fontified t) 8 15 (face font-lock-variable-name-face fontified t) 15 16 (fontified t) 16 17 (face font-lock-operator-face fontified t) 17 19 (fontified t) 19 53 (face font-lock-string-face fontified t) 53 54 (face nil fontified t) 54 58 (face font-lock-keyword-face fontified t) 58 74 (face nil fontified t) 74 75 (face font-lock-string-face fontified t) 75 76 (fontified t) 76 84 (fontified t) 84 98 (face font-lock-variable-name-face fontified t) 98 99 (fontified t) 99 100 (face font-lock-operator-face fontified t) 100 114 (fontified t) 114 135 (fontified t) 135 147 (face font-lock-string-face fontified t) 147 163 (face nil fontified t) 163 164 (face font-lock-string-face fontified t) 164 165 (fontified t)) . 959) (undo-tree-id46 . -165) (undo-tree-id47 . -8) (undo-tree-id48 . -8) (undo-tree-id49 . -18) (undo-tree-id50 . -122) (undo-tree-id51 . -122) (undo-tree-id52 . -8) (undo-tree-id53 . -8) (undo-tree-id54 . -18) (undo-tree-id55 . -122) (undo-tree-id56 . -122) (undo-tree-id57 . -114) (undo-tree-id58 . -165) (undo-tree-id59 . -165) 1124) nil (26049 8013 523208 64000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -958) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) 959) nil (26049 8013 523202 154000) 0 nil])
([nil nil ((203 . 204) (t 26049 8013 527274 380000)) nil (26049 8099 419397 610000) 0 nil])
([nil nil ((#("k" 0 1 (fontified t)) . -203) (undo-tree-id102 . -1) (undo-tree-id103 . -1) 204) nil (26049 8099 419397 4000) 0 nil])
([nil nil ((#("disk" 0 4 (fontified t)) . 203) (undo-tree-id100 . -4) (undo-tree-id101 . -4)) nil (26049 8099 419395 620000) 0 nil])
([nil nil ((203 . 212)) nil (26049 8099 419384 654000) 0 nil])
([nil nil ((#("disk" 0 4 (face font-lock-string-face fontified t)) . -453) (t 26049 8099 422519 50000) (457 . 466) (t 26049 8099 422519 50000)) nil (26049 8140 361702 123000) 0 nil])
([nil nil ((#("disk" 0 4 (fontified t)) . -671) (675 . 684)) nil (26049 8140 361701 667000) 0 nil])
([nil nil ((#("disk" 0 4 (fontified t)) . -803) (807 . 816)) nil (26049 8140 361701 241000) 0 nil])
([nil nil ((#("disk" 0 4 (fontified t)) . -935) (939 . 948)) nil (26049 8140 361700 912000) 0 nil])
([nil nil ((#("partition" 0 9 (face font-lock-string-face fontified t)) . 453) (undo-tree-id104 . -9)) nil (26049 8140 361700 329000) 0 nil])
([nil nil ((453 . 457)) nil (26049 8140 361690 136000) 0 nil])
([nil nil ((#("            fd = os.open(self.serial_path, os.O_RDWR)" 0 12 (fontified t) 12 14 (face font-lock-variable-name-face fontified t) 14 15 (fontified t) 15 16 (face font-lock-operator-face fontified t) 16 20 (fontified t) 20 24 (face font-lock-builtin-face fontified t) 24 25 (fontified t) 25 29 (face font-lock-keyword-face fontified t) 29 53 (fontified t)) . 1260) (undo-tree-id116 . -32) (undo-tree-id117 . -32) (undo-tree-id118 . -32) (undo-tree-id119 . -32) (undo-tree-id120 . -32) (undo-tree-id121 . -32) (undo-tree-id122 . -53) (t 26049 8140 362228 216000)) nil (26049 8215 550336 947000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -1259) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) 1260) nil (26049 8215 550335 477000) 0 nil])
([nil nil ((1246 . 1255)) nil (26049 8215 550330 687000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1307 . 1308) (nil fontified nil 1284 . 1308) (nil fontified nil 1280 . 1284) (nil fontified nil 1279 . 1280) (nil fontified nil 1275 . 1279) (nil fontified nil 1271 . 1275) (nil fontified nil 1270 . 1271) (nil fontified nil 1269 . 1270) (nil fontified nil 1267 . 1269) (nil fontified nil 1255 . 1267) (1255 . 1308)) nil (26049 8215 550330 154000) 0 nil])
([nil nil ((#("            " 0 12 (fontified t)) . -1255) (undo-tree-id105 . -12) 1247) nil (26049 8215 550326 579000) 0 nil])
([nil nil ((#("    def key(d: RealDevice) -> Key:
        return (d.vendor, d.model, d.serial)

" 0 4 (fontified t) 4 7 (face font-lock-keyword-face fontified t) 7 8 (fontified t) 8 11 (face font-lock-function-name-face fontified t) 11 27 (fontified t) 27 28 (face font-lock-operator-face fontified t) 28 29 (face font-lock-operator-face fontified t) 29 43 (fontified t) 43 49 (face font-lock-keyword-face fontified t) 49 80 (fontified t) 80 81 (fontified t)) . 1793) (undo-tree-id150 . -81) 1874 (t 26049 8215 581795 863000)) nil (26049 8326 245403 285000) 0 nil])
([nil nil ((#("key" 0 3 (fontified t)) . 2084)) nil (26049 8326 245402 806000) 0 nil])
([nil nil ((#("(" 0 1 (fontified t)) . -2084) (undo-tree-id148 . -1) (undo-tree-id149 . -1) 2085) nil (26049 8326 245402 461000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t)) . -2090) (undo-tree-id147 . -1) 2091) nil (26049 8326 245401 660000) 0 nil])
([nil nil ((2090 . 2101)) nil (26049 8326 245401 87000) 0 nil])
([nil nil ((#("key" 0 3 (fontified t)) . 2490) (undo-tree-id146 . -3)) nil (26049 8326 245400 782000) 0 nil])
([nil nil ((#("(" 0 1 (fontified t)) . -2490) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) 2491) nil (26049 8326 245400 292000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t)) . -2496) (undo-tree-id137 . -1) (undo-tree-id138 . -1) 2497) nil (26049 8326 245398 356000) 0 nil])
([nil nil ((2496 . 2497)) nil (26049 8326 245397 770000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -2496) (undo-tree-id135 . -1) (undo-tree-id136 . -1) 2497) nil (26049 8326 245397 507000) 0 nil])
([nil nil ((2496 . 2501)) nil (26049 8326 245396 457000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . -2500) (undo-tree-id133 . -1) (undo-tree-id134 . -1) 2501) nil (26049 8326 245396 107000) 0 nil])
([nil nil ((2500 . 2501)) nil (26049 8326 245395 457000) 0 nil])
([nil nil ((#("y" 0 1 (fontified t)) . -2500) (undo-tree-id131 . -1) (undo-tree-id132 . -1) 2501) nil (26049 8326 245395 181000) 0 nil])
([nil nil ((2500 . 2507)) nil (26049 8326 245394 397000) 0 nil])
([nil nil ((#("key" 0 3 (fontified t)) . 2912) (undo-tree-id130 . -3)) nil (26049 8326 245393 979000) 0 nil])
([nil nil ((#("(" 0 1 (fontified t)) . -2912) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) 2913) nil (26049 8326 245393 434000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t)) . -2918) (undo-tree-id125 . -1) (undo-tree-id126 . -1) 2919) nil (26049 8326 245391 808000) 0 nil])
([nil nil ((2918 . 2923)) nil (26049 8326 245390 872000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . -2922) (undo-tree-id123 . -1) (undo-tree-id124 . -1) 2923) nil (26049 8326 245390 265000) 0 nil])
([nil nil ((2922 . 2929)) nil (26049 8326 245380 215000) 0 nil])
([nil nil ((#("sort_key()" 0 10 (fontified t)) . -2905) (2915 . 2918) (#("sort_key()" 0 10 (fontified t)) . -2490) (2500 . 2503) (#("sort_key()" 0 10 (fontified t)) . -2091) (t 26049 8326 249367 292000) (2101 . 2104) (t 26049 8326 249367 292000)) nil (26049 8375 132179 774000) 0 nil])
([nil nil ((#("tuple[str, str, str]" 0 5 (face font-lock-builtin-face fontified t) 5 6 (fontified t) 6 9 (face font-lock-builtin-face fontified t) 9 11 (fontified t) 11 14 (face font-lock-builtin-face fontified t) 14 16 (fontified t) 16 19 (face font-lock-builtin-face fontified t) 19 20 (fontified t)) . 1731) (undo-tree-id198 . -20) (undo-tree-id199 . -16) (undo-tree-id200 . -11) (undo-tree-id201 . -6) (undo-tree-id202 . -20) (t 26049 8375 137245 453000)) nil (26049 8526 809443 697000) 0 nil])
([nil nil ((#("K" 0 1 (face font-lock-variable-name-face fontified t)) . -1750) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (#("e" 0 1 (face font-lock-variable-name-face fontified t)) . -1751) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (#("y" 0 1 (face font-lock-variable-name-face fontified t)) . -1752) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) 1753) nil (26049 8526 809442 237000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1769 . 1770) (nil fontified nil 1769 . 1770) (nil fontified nil 1766 . 1769) (nil fontified nil 1764 . 1766) (nil fontified nil 1761 . 1764) (nil fontified nil 1759 . 1761) (nil fontified nil 1756 . 1759) (nil fontified nil 1755 . 1756) (nil fontified nil 1750 . 1755) (1750 . 1770)) nil (26049 8526 809437 929000) 0 nil])
([nil nil ((#("    Key: TypeAlias = " 0 4 (fontified t) 4 7 (face font-lock-variable-name-face fontified t) 7 14 (fontified t) 14 19 (fontified t) 19 20 (face font-lock-operator-face fontified t) 20 21 (fontified t)) . 1710) (undo-tree-id165 . -4) (undo-tree-id166 . -4) (undo-tree-id167 . -4) (undo-tree-id168 . -21) (undo-tree-id169 . -21) (undo-tree-id170 . -21) (undo-tree-id171 . -21) (undo-tree-id172 . -21) (undo-tree-id173 . -21) (undo-tree-id174 . -21) (undo-tree-id175 . -21) (undo-tree-id176 . -21)) nil (26049 8526 809437 83000) 0 nil])
([nil nil ((#("
" 0 1 (face font-lock-comment-face fontified t)) . -1709) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) 1710) nil (26049 8526 809432 293000) 0 nil])
([nil nil ((#("from typing import TypeAlias" 0 4 (face font-lock-keyword-face fontified t) 4 12 (fontified t) 12 18 (face font-lock-keyword-face fontified t) 18 28 (fontified t)) . 159) (undo-tree-id212 . -23) (undo-tree-id213 . -23) (undo-tree-id214 . -23) (undo-tree-id215 . -23) (undo-tree-id216 . -23) (undo-tree-id217 . -28) (t 26049 8526 813082 618000)) nil (26049 8532 324643 41000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -158) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) 159) nil (26049 8532 324639 609000) 0 nil])
([nil nil ((1534 . 1546) (#("            " 0 12 (fontified nil)) . 1533) (undo-tree-id337 . -12) (1532 . 1546) (t 26049 8532 329082 57000)) nil (26049 8584 730396 645000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1542) (undo-tree-id336 . -4) 1546) nil (26049 8584 730395 836000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1538) (undo-tree-id335 . -4) 1542) nil (26049 8584 730395 185000) 0 nil])
([nil nil ((1538 . 1545)) nil (26049 8584 730394 654000) 0 nil])
([nil nil ((1533 . 1546)) nil (26049 8584 730394 286000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1542) (undo-tree-id334 . -4) 1546) nil (26049 8584 730393 930000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1538) (undo-tree-id333 . -4) 1542) nil (26049 8584 730393 167000) 0 nil])
([nil nil ((1538 . 1551)) nil (26049 8584 730392 397000) 0 nil])
([nil nil ((1563 . 1584)) nil (26049 8584 730391 875000) 0 nil])
([nil nil ((1584 . 1586)) nil (26049 8584 730391 173000) 0 nil])
([nil nil ((1586 . 1587)) nil (26049 8584 730390 854000) 0 nil])
([nil nil ((#("def all_devices() -> set[RealDevice]:" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 15 (face font-lock-function-name-face fontified t) 15 18 (fontified t) 18 19 (face font-lock-operator-face fontified t) 19 20 (face font-lock-operator-face fontified t) 20 21 (fontified t) 21 24 (face font-lock-builtin-face fontified t) 24 28 (fontified t) 28 37 (fontified t)) . 1590) (undo-tree-id324 . -11) (undo-tree-id325 . -37) (undo-tree-id326 . -37) (undo-tree-id327 . -37) (undo-tree-id328 . -37) (undo-tree-id329 . -37) (undo-tree-id330 . -37) (undo-tree-id331 . -35) (undo-tree-id332 . -37)) nil (26049 8584 730390 15000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -1587) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (#("
" 0 1 (fontified t)) . -1588) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (#("
" 0 1 (fontified t)) . -1589) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (undo-tree-id323 . -1) 1590) nil (26049 8584 730230 685000) 0 nil])
([nil nil ((3119 . 3123) (3114 . 3118) (3061 . 3065) (3047 . 3051) (2975 . 2979) (2919 . 2923) (2890 . 2894) (2851 . 2855) (2794 . 2798) (2748 . 2752) (2716 . 2720) (2632 . 2636) (2627 . 2631) (2596 . 2600) (2591 . 2595) (2520 . 2524) (2468 . 2472) (2443 . 2447) (2428 . 2432) (2368 . 2372) (2312 . 2316) (2277 . 2281) (2260 . 2264) (2207 . 2211) (2162 . 2166) (2118 . 2122) (2113 . 2117) (2055 . 2059) (2041 . 2045) (1983 . 1987) (1933 . 1937) (1881 . 1885) (1848 . 1852) (1774 . 1778) (1769 . 1773) (1708 . 1712) (1644 . 1648) (1639 . 1643) (1588 . 1592) 2967) nil (26049 8584 730193 654000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . 3094) (#("    " 0 4 (fontified t)) . 2611) (#("    " 0 4 (fontified t)) . 2579) (#("    " 0 4 (fontified t)) . 2105) (#("    " 0 4 (fontified t)) . 1765) (#("    " 0 4 (fontified t)) . 1639) 2748) nil (26049 8584 730189 453000) 0 nil])
([nil nil ((1573 . 1585) (#("'RealDevice'" 0 12 (face font-lock-string-face fontified t)) . 1573) 2748 (t 26049 8584 761093 33000)) nil (26049 9563 902254 616000) 0 nil])
([nil nil ((#("

def usb_device_properties(path: Path) -> dict[str, str] | None:
    \"\"\"
    Extract device properties from udevadm.

    Returns None if the device is not a USB device.
    \"\"\"
    properties = {}
    for line in udevadm_info(path).splitlines():
        key, value = line.split(\"=\", maxsplit=1)
        properties[key] = value
    if properties.get(\"ID_BUS\", None) != \"usb\":
        return None
    return properties


def udevadm_info(path: Path) -> str:
    \"\"\"Uses `udevadm info` command to lookup device properties.

    Output consists of KEY=VALUE lines.

    Separated out for patching in unit tests.
    \"\"\"
    return run(f\"udevadm info --query=property --name {path}\")
" 0 1 (fontified t) 1 2 (fontified t) 2 5 (face font-lock-keyword-face fontified t) 5 6 (fontified t) 6 8 (face font-lock-function-name-face fontified t) 8 27 (face font-lock-function-name-face fontified t) 27 40 (fontified t) 40 41 (face font-lock-operator-face fontified t) 41 42 (face font-lock-operator-face fontified t) 42 43 (fontified t) 43 47 (face font-lock-builtin-face fontified t) 47 48 (fontified t) 48 51 (face font-lock-builtin-face fontified t) 51 53 (fontified t) 53 56 (face font-lock-builtin-face fontified t) 56 58 (fontified t) 58 59 (face font-lock-operator-face fontified t) 59 60 (fontified t) 60 64 (face font-lock-constant-face fontified t) 64 66 (fontified t) 66 70 (fontified t) 70 72 (face font-lock-doc-face fontified t) 72 73 (face font-lock-doc-face fontified t syntax-table (15)) 73 74 (face font-lock-doc-face fontified t) 74 87 (face font-lock-doc-face fontified t) 87 88 (face font-lock-doc-face fontified t) 88 113 (face font-lock-doc-face fontified t) 113 118 (face font-lock-doc-face fontified t) 118 171 (face font-lock-doc-face fontified t) 171 175 (face font-lock-doc-face fontified t) 175 176 (face font-lock-doc-face fontified t syntax-table (15)) 176 178 (face font-lock-doc-face fontified t) 178 179 (fontified t) 179 183 (fontified t) 183 193 (face font-lock-variable-name-face fontified t) 193 194 (fontified t) 194 195 (face font-lock-operator-face fontified t) 195 196 (fontified t) 196 199 (fontified t) 199 203 (fontified t) 203 206 (face font-lock-keyword-face fontified t) 206 212 (fontified t) 212 213 (face font-lock-keyword-face fontified t) 213 214 (face font-lock-keyword-face fontified t) 214 248 (fontified t) 248 253 (fontified t) 253 256 (fontified t) 256 259 (face font-lock-variable-name-face fontified t) 259 261 (fontified t) 261 266 (face font-lock-variable-name-face fontified t) 266 267 (fontified t) 267 268 (face font-lock-operator-face fontified t) 268 280 (fontified t) 280 283 (face font-lock-string-face fontified t) 283 293 (fontified t) 293 294 (face font-lock-operator-face fontified t) 294 297 (fontified t) 297 305 (fontified t) 305 315 (face font-lock-variable-name-face fontified t) 315 321 (fontified t) 321 322 (face font-lock-operator-face fontified t) 322 329 (fontified t) 329 333 (fontified t) 333 335 (face font-lock-keyword-face fontified t) 335 350 (fontified t) 350 351 (fontified t) 351 359 (face font-lock-string-face fontified t) 359 361 (fontified t) 361 365 (face font-lock-constant-face fontified t) 365 367 (fontified t) 367 369 (face font-lock-operator-face fontified t) 369 370 (fontified t) 370 375 (face font-lock-string-face fontified t) 375 377 (fontified t) 377 385 (fontified t) 385 391 (face font-lock-keyword-face fontified t) 391 392 (fontified t) 392 396 (face font-lock-constant-face fontified t) 396 401 (fontified t) 401 407 (face font-lock-keyword-face fontified t) 407 421 (fontified t) 421 424 (face font-lock-keyword-face fontified t) 424 425 (fontified t) 425 437 (face font-lock-function-name-face fontified t) 437 450 (fontified t) 450 451 (face font-lock-operator-face fontified t) 451 452 (face font-lock-operator-face fontified t) 452 453 (fontified t) 453 456 (face font-lock-builtin-face fontified t) 456 462 (fontified t) 462 464 (face font-lock-doc-face fontified t) 464 465 (face font-lock-doc-face fontified t syntax-table (15)) 465 563 (face font-lock-doc-face fontified t) 563 614 (face font-lock-doc-face fontified t) 614 615 (face font-lock-doc-face fontified t syntax-table (15)) 615 617 (face font-lock-doc-face fontified t) 617 618 (fontified t) 618 622 (fontified t) 622 628 (face font-lock-keyword-face fontified t) 628 634 (fontified t) 634 672 (face font-lock-string-face fontified t) 672 678 (face nil fontified t) 678 679 (face font-lock-string-face fontified t) 679 681 (fontified t)) . 3132) (undo-tree-id343 . -681) (t 26049 8585 737093 507000)) nil (26049 9563 902254 206000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -3131) (undo-tree-id341 . -1) (undo-tree-id342 . -1) 3132) nil (26049 9563 902253 596000) 0 nil])
([nil nil ((233 . 234)) nil (26049 9563 902252 562000) 0 nil])
([nil nil ((234 . 242)) nil (26049 9563 902252 455000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -241) (undo-tree-id340 . -1) 242) nil (26049 9563 902252 214000) 0 nil])
([nil nil ((241 . 244)) nil (26049 9563 902251 539000) 0 nil])
([nil nil ((#("from .udev" 0 4 (face font-lock-keyword-face fontified t) 4 10 (fontified t)) . 234)) nil (26049 9563 902251 404000) 0 nil])
([nil nil ((234 . 242)) nil (26049 9563 902251 288000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t)) . -241) (undo-tree-id339 . -1) 242) nil (26049 9563 902251 115000) 0 nil])
([nil nil ((#("import " 0 6 (face font-lock-keyword-face fontified t) 6 7 (fontified t)) . 234)) nil (26049 9563 902249 867000) 0 nil])
([nil nil ((234 . 239)) nil (26049 9563 902249 632000) 0 nil])
([nil nil ((#("from " 0 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t)) . 234)) nil (26049 9563 902249 443000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -233) (undo-tree-id338 . -1) 234) nil (26049 9563 902249 136000) 0 nil])
([nil nil ((183 . 189)) nil (26049 9563 902240 561000) 0 nil])
([nil nil ((2226 . 2231)) nil (26049 9563 902240 260000) 0 nil])
([nil nil ((2814 . 2819)) nil (26049 9563 902239 834000) 0 nil])
([nil nil ((3147 . 3148) 2819) nil (26049 9563 902236 209000) 0 nil])
([nil nil ((#("from .shell import run" 0 4 (face font-lock-keyword-face fontified t) 4 12 (fontified t) 12 18 (face font-lock-keyword-face fontified t) 18 22 (fontified t)) . 217) (undo-tree-id353 . -22) (undo-tree-id354 . -22) (undo-tree-id355 . -22) (undo-tree-id356 . -22) (undo-tree-id357 . -22) (undo-tree-id358 . -22) (t 26049 9563 906280 690000)) nil (26049 9569 925172 239000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -216) (undo-tree-id344 . -1) (undo-tree-id345 . -1) (undo-tree-id346 . -1) (undo-tree-id347 . -1) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (undo-tree-id352 . -1) 217) nil (26049 9569 925167 671000) 0 nil])
([nil nil ((#("SERIAL_DIR = Path(\"/dev/serial/by-id\")" 0 10 (face font-lock-variable-name-face fontified t) 10 11 (fontified t) 11 12 (face font-lock-operator-face fontified t) 12 18 (fontified t) 18 37 (face font-lock-string-face fontified t) 37 38 (fontified t)) . 256) (undo-tree-id359 . -38) (t 26049 9569 954248 206000)) nil (26049 9767 411418 642000) 0 nil])
([nil nil ((nil rear-nonsticky nil 293 . 294) (nil fontified nil 293 . 294) (nil fontified nil 274 . 293) (nil fontified nil 268 . 274) (nil fontified nil 267 . 268) (nil fontified nil 266 . 267) (nil fontified nil 256 . 266) (256 . 294)) nil (26049 9767 411406 797000) 0 nil])
([nil nil ((#("udev" 0 4 (fontified t)) . 185) (undo-tree-id389 . -4) (t 26049 9767 417483 586000)) nil (26049 9955 443739 110000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -183) (undo-tree-id385 . -1) (undo-tree-id386 . -1) (#(" " 0 1 (fontified t)) . -184) (undo-tree-id387 . -1) (undo-tree-id388 . -1) 185) nil (26049 9955 443738 385000) 0 nil])
([nil nil ((183 . 184)) nil (26049 9955 443737 80000) 0 nil])
([nil nil ((184 . 188)) nil (26049 9955 443736 627000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -186) (undo-tree-id383 . -1) (#(" " 0 1 (fontified t)) . -187) (undo-tree-id384 . -1) 188) nil (26049 9955 443736 54000) 0 nil])
([nil nil ((186 . 202)) nil (26049 9955 443734 852000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . -197) (undo-tree-id378 . -1) (#("p" 0 1 (fontified t)) . -198) (undo-tree-id379 . -1) (#("o" 0 1 (fontified t)) . -199) (undo-tree-id380 . -1) (#("r" 0 1 (fontified t)) . -200) (undo-tree-id381 . -1) (#("t" 0 1 (fontified t)) . -201) (undo-tree-id382 . -1) 202) nil (26049 9955 443734 170000) 0 nil])
([nil nil ((197 . 205)) nil (26049 9955 443731 549000) 0 nil])
([nil nil ((202 . 223) (#("usb" 0 3 (fontified t)) . -202) (undo-tree-id377 . -3) 205) nil (26049 9955 443730 827000) 0 nil])
([nil nil ((#("udev" 0 4 (fontified t)) . 2237) (undo-tree-id376 . -4)) nil (26049 9955 443729 888000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -2237) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (undo-tree-id375 . -1) 2238) nil (26049 9955 443728 722000) 0 nil])
([nil nil ((#("udev" 0 4 (fontified t)) . 2820) (undo-tree-id368 . -4)) nil (26049 9955 443725 922000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -2820) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (undo-tree-id367 . -1) 2821) nil (26049 9955 443721 786000) 0 nil])
([nil nil ((190 . 250) (#("udev import usb_device_properties
from .device import Device" 0 5 (fontified t) 5 11 (face font-lock-keyword-face fontified t) 11 12 (fontified t) 12 33 (fontified t) 33 34 (fontified t) 34 38 (face font-lock-keyword-face fontified t) 38 47 (fontified t) 47 53 (face font-lock-keyword-face fontified t) 53 60 (fontified t)) . 190) (undo-tree-id410 . -60) (undo-tree-id411 . -33) (t 26049 9955 449171 965000)) nil (26049 11092 559991 374000) 0 nil])
([nil nil ((#("PARTITION_DIR = Path(\"/dev/disk/by-id\")
\"\"\"Contains all partition devices on the system.\"\"\"
" 0 13 (face font-lock-variable-name-face fontified t) 13 14 (fontified t) 14 15 (face font-lock-operator-face fontified t) 15 21 (fontified t) 21 31 (face font-lock-string-face fontified t) 31 38 (face font-lock-string-face fontified t) 38 40 (fontified t) 40 42 (face font-lock-doc-face fontified t) 42 43 (face font-lock-doc-face fontified t syntax-table (15)) 43 88 (face font-lock-doc-face fontified t) 88 89 (face font-lock-doc-face fontified t syntax-table (15)) 89 91 (face font-lock-doc-face fontified t) 91 92 (fontified t)) . 414) (undo-tree-id406 . -91) (undo-tree-id407 . -92) (undo-tree-id408 . -92) (undo-tree-id409 . -92) 506 (t 26049 9956 325171 247000)) nil (26049 11092 559990 407000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -412) (undo-tree-id390 . -1) (undo-tree-id391 . -1) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (undo-tree-id394 . -1) (undo-tree-id395 . -1) (undo-tree-id396 . -1) (undo-tree-id397 . -1) (#("
" 0 1 (fontified t)) . -413) (undo-tree-id398 . -1) (undo-tree-id399 . -1) (undo-tree-id400 . -1) (undo-tree-id401 . -1) (undo-tree-id402 . -1) (undo-tree-id403 . -1) (undo-tree-id404 . -1) (undo-tree-id405 . -1) 414) nil (26049 11092 560039 384000) 0 nil])
([nil nil ((250 . 251)) nil (26049 11102 157674 436000) 0 nil] [nil nil ((2093 . 2103)) ((#("partition." 0 10 (fontified t)) . 2093) (undo-tree-id412 . -10) (undo-tree-id413 . -10)) (26049 11092 559975 23000) 0 nil])
([nil nil ((251 . 272)) nil (26049 11102 157674 187000) 0 nil])
nil
([nil nil ((272 . 283)) nil (26049 11102 157673 919000) 0 nil])
([nil nil ((#("Partition" 0 9 (fontified t)) . 274) (undo-tree-id414 . -1) (undo-tree-id415 . -2) (undo-tree-id416 . -3) (undo-tree-id417 . -4) (undo-tree-id418 . -5) (undo-tree-id419 . -6) (undo-tree-id420 . -7) (undo-tree-id421 . -8) (undo-tree-id422 . -9) (undo-tree-id423 . -9)) nil (26049 11102 157673 300000) 0 nil])
([nil current ((274 . 287)) nil (26049 11102 157660 422000) 0 nil])
nil

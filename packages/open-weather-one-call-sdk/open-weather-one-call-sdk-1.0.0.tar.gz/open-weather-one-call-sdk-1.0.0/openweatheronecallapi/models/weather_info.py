# -*- coding: utf-8 -*-

"""
openweatheronecallapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from openweatheronecallapi.api_helper import APIHelper
from openweatheronecallapi.models.alert import Alert
from openweatheronecallapi.models.current import Current
from openweatheronecallapi.models.daily import Daily
from openweatheronecallapi.models.hourly import Hourly
from openweatheronecallapi.models.minutely import Minutely


class WeatherInfo(object):

    """Implementation of the 'WeatherInfo' model.

    Successful response

    Attributes:
        lat (float): Latitude of the location, decimal (âˆ’90; 90)
        lon (float): Longitude of the location, decimal (-180; 180)
        timezone (str): Timezone name for the requested location
        timezone_offset (float): Shift in seconds from UTC
        current (Current): Current weather data API response
        minutely (Minutely): Minute weather measurements
        hourly (Hourly): Minute weather measurements
        daily (List[Daily]): List of National weather alert messagess
        alerts (List[Alert]): List of National weather alert messagess

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "lat": 'lat',
        "lon": 'lon',
        "timezone": 'timezone',
        "timezone_offset": 'timezone_offset',
        "current": 'current',
        "minutely": 'minutely',
        "hourly": 'hourly',
        "daily": 'daily',
        "alerts": 'alerts'
    }

    _optionals = [
        'lat',
        'lon',
        'timezone',
        'timezone_offset',
        'current',
        'minutely',
        'hourly',
        'daily',
        'alerts',
    ]

    def __init__(self,
                 lat=APIHelper.SKIP,
                 lon=APIHelper.SKIP,
                 timezone=APIHelper.SKIP,
                 timezone_offset=APIHelper.SKIP,
                 current=APIHelper.SKIP,
                 minutely=APIHelper.SKIP,
                 hourly=APIHelper.SKIP,
                 daily=APIHelper.SKIP,
                 alerts=APIHelper.SKIP):
        """Constructor for the WeatherInfo class"""

        # Initialize members of the class
        if lat is not APIHelper.SKIP:
            self.lat = lat 
        if lon is not APIHelper.SKIP:
            self.lon = lon 
        if timezone is not APIHelper.SKIP:
            self.timezone = timezone 
        if timezone_offset is not APIHelper.SKIP:
            self.timezone_offset = timezone_offset 
        if current is not APIHelper.SKIP:
            self.current = current 
        if minutely is not APIHelper.SKIP:
            self.minutely = minutely 
        if hourly is not APIHelper.SKIP:
            self.hourly = hourly 
        if daily is not APIHelper.SKIP:
            self.daily = daily 
        if alerts is not APIHelper.SKIP:
            self.alerts = alerts 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        lat = dictionary.get("lat") if dictionary.get("lat") else APIHelper.SKIP
        lon = dictionary.get("lon") if dictionary.get("lon") else APIHelper.SKIP
        timezone = dictionary.get("timezone") if dictionary.get("timezone") else APIHelper.SKIP
        timezone_offset = dictionary.get("timezone_offset") if dictionary.get("timezone_offset") else APIHelper.SKIP
        current = Current.from_dictionary(dictionary.get('current')) if 'current' in dictionary.keys() else APIHelper.SKIP
        minutely = Minutely.from_dictionary(dictionary.get('minutely')) if 'minutely' in dictionary.keys() else APIHelper.SKIP
        hourly = Hourly.from_dictionary(dictionary.get('hourly')) if 'hourly' in dictionary.keys() else APIHelper.SKIP
        daily = None
        if dictionary.get('daily') is not None:
            daily = [Daily.from_dictionary(x) for x in dictionary.get('daily')]
        else:
            daily = APIHelper.SKIP
        alerts = None
        if dictionary.get('alerts') is not None:
            alerts = [Alert.from_dictionary(x) for x in dictionary.get('alerts')]
        else:
            alerts = APIHelper.SKIP
        # Return an object of this model
        return cls(lat,
                   lon,
                   timezone,
                   timezone_offset,
                   current,
                   minutely,
                   hourly,
                   daily,
                   alerts)

# -*- coding: utf-8 -*-

"""
openweatheronecallapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from openweatheronecallapi.api_helper import APIHelper


class Temp(object):

    """Implementation of the 'Temp' model.

    Units â€“ default: kelvin, metric: Celsius, imperial: Fahrenheit. How to
    change units used

    Attributes:
        morn (float): Morning temperature.
        day (float): Day temperature.
        eve (float): Evening temperature.
        night (float): Night temperature.
        min (float): Min daily temperature.
        max (float): Max daily temperature.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "morn": 'morn',
        "day": 'day',
        "eve": 'eve',
        "night": 'night',
        "min": 'min',
        "max": 'max'
    }

    _optionals = [
        'morn',
        'day',
        'eve',
        'night',
        'min',
        'max',
    ]

    def __init__(self,
                 morn=APIHelper.SKIP,
                 day=APIHelper.SKIP,
                 eve=APIHelper.SKIP,
                 night=APIHelper.SKIP,
                 min=APIHelper.SKIP,
                 max=APIHelper.SKIP):
        """Constructor for the Temp class"""

        # Initialize members of the class
        if morn is not APIHelper.SKIP:
            self.morn = morn 
        if day is not APIHelper.SKIP:
            self.day = day 
        if eve is not APIHelper.SKIP:
            self.eve = eve 
        if night is not APIHelper.SKIP:
            self.night = night 
        if min is not APIHelper.SKIP:
            self.min = min 
        if max is not APIHelper.SKIP:
            self.max = max 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        morn = dictionary.get("morn") if dictionary.get("morn") else APIHelper.SKIP
        day = dictionary.get("day") if dictionary.get("day") else APIHelper.SKIP
        eve = dictionary.get("eve") if dictionary.get("eve") else APIHelper.SKIP
        night = dictionary.get("night") if dictionary.get("night") else APIHelper.SKIP
        min = dictionary.get("min") if dictionary.get("min") else APIHelper.SKIP
        max = dictionary.get("max") if dictionary.get("max") else APIHelper.SKIP
        # Return an object of this model
        return cls(morn,
                   day,
                   eve,
                   night,
                   min,
                   max)

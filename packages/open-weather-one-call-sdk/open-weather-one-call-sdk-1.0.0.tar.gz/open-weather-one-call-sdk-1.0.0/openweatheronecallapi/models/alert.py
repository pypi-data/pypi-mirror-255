# -*- coding: utf-8 -*-

"""
openweatheronecallapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from openweatheronecallapi.api_helper import APIHelper


class Alert(object):

    """Implementation of the 'Alert' model.

    National weather alerts data from major national weather warning systems

    Attributes:
        sender_name (str): Name of the alert source. Please read here the full
            list of alert sources
        event (str): Alert event name
        start (float): Date and time of the start of the alert, Unix, UTC
        end (float): Date and time of the end of the alert, Unix, UTC
        description (str): Description of the alert
        tags (List[str]): Type of severe weather

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "sender_name": 'sender_name',
        "event": 'event',
        "start": 'start',
        "end": 'end',
        "description": 'description',
        "tags": 'tags'
    }

    _optionals = [
        'sender_name',
        'event',
        'start',
        'end',
        'description',
        'tags',
    ]

    def __init__(self,
                 sender_name=APIHelper.SKIP,
                 event=APIHelper.SKIP,
                 start=APIHelper.SKIP,
                 end=APIHelper.SKIP,
                 description=APIHelper.SKIP,
                 tags=APIHelper.SKIP):
        """Constructor for the Alert class"""

        # Initialize members of the class
        if sender_name is not APIHelper.SKIP:
            self.sender_name = sender_name 
        if event is not APIHelper.SKIP:
            self.event = event 
        if start is not APIHelper.SKIP:
            self.start = start 
        if end is not APIHelper.SKIP:
            self.end = end 
        if description is not APIHelper.SKIP:
            self.description = description 
        if tags is not APIHelper.SKIP:
            self.tags = tags 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        sender_name = dictionary.get("sender_name") if dictionary.get("sender_name") else APIHelper.SKIP
        event = dictionary.get("event") if dictionary.get("event") else APIHelper.SKIP
        start = dictionary.get("start") if dictionary.get("start") else APIHelper.SKIP
        end = dictionary.get("end") if dictionary.get("end") else APIHelper.SKIP
        description = dictionary.get("description") if dictionary.get("description") else APIHelper.SKIP
        tags = dictionary.get("tags") if dictionary.get("tags") else APIHelper.SKIP
        # Return an object of this model
        return cls(sender_name,
                   event,
                   start,
                   end,
                   description,
                   tags)

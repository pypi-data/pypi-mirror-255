# -*- coding: utf-8 -*-

"""
openweatheronecallapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from openweatheronecallapi.api_helper import APIHelper
from openweatheronecallapi.models.hourly_rain import HourlyRain
from openweatheronecallapi.models.hourly_snow import HourlySnow
from openweatheronecallapi.models.hourly_weather import HourlyWeather


class Hourly(object):

    """Implementation of the 'Hourly' model.

    Minute weather measurements

    Attributes:
        dt (float): Time of the forecasted data, unix, UTC
        temp (float): Temperature. Units – default: kelvin, metric: Celsius,
            imperial: Fahrenheit. How to change units used
        feels_like (float): Tempreature - This accounts for the human
            perception of weather. Units – default: kelvin, metric: Celsius,
            imperial: Fahrenheit.
        pressure (float): Atmospheric pressure on the sea level, hPa
        humidity (float): Humidity, %
        dew_point (float): Atmospheric temperature (varying according to
            pressure and humidity) below which water droplets begin to
            condense and dew can form. Units – default: kelvin, metric:
            Celsius, imperial: Fahrenheit.
        uvi (float): UV index
        clouds (float): Cloudiness %
        visibility (float): Average visibility, metres. The maximum value of
            the visibility is 10 km
        wind_speed (float): Wind speed. Units – default: metre/sec, metric:
            metre/sec, imperial: miles/hour.How to change units used
        wind_gust (float): (where available) Wind gust. Units – default:
            metre/sec, metric: metre/sec, imperial: miles/hour. How to change
            units used
        wind_deg (float): Wind direction, degrees (meteorological)
        pop (float): Probability of precipitation. The values of the parameter
            vary between 0 and 1, where 0 is equal to 0%, 1 is equal to 100%
        rain (HourlyRain): Minute weather measurements
        snow (HourlySnow): Minute weather measurements
        weather (List[HourlyWeather]): current weather details

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "dt": 'dt',
        "temp": 'temp',
        "feels_like": 'feels_like',
        "pressure": 'pressure',
        "humidity": 'humidity',
        "dew_point": 'dew_point',
        "uvi": 'uvi',
        "clouds": 'clouds',
        "visibility": 'visibility',
        "wind_speed": 'wind_speed',
        "wind_gust": 'wind_gust',
        "wind_deg": 'wind_deg',
        "pop": 'pop',
        "rain": 'rain',
        "snow": 'snow',
        "weather": 'weather'
    }

    _optionals = [
        'dt',
        'temp',
        'feels_like',
        'pressure',
        'humidity',
        'dew_point',
        'uvi',
        'clouds',
        'visibility',
        'wind_speed',
        'wind_gust',
        'wind_deg',
        'pop',
        'rain',
        'snow',
        'weather',
    ]

    def __init__(self,
                 dt=APIHelper.SKIP,
                 temp=APIHelper.SKIP,
                 feels_like=APIHelper.SKIP,
                 pressure=APIHelper.SKIP,
                 humidity=APIHelper.SKIP,
                 dew_point=APIHelper.SKIP,
                 uvi=APIHelper.SKIP,
                 clouds=APIHelper.SKIP,
                 visibility=APIHelper.SKIP,
                 wind_speed=APIHelper.SKIP,
                 wind_gust=APIHelper.SKIP,
                 wind_deg=APIHelper.SKIP,
                 pop=APIHelper.SKIP,
                 rain=APIHelper.SKIP,
                 snow=APIHelper.SKIP,
                 weather=APIHelper.SKIP):
        """Constructor for the Hourly class"""

        # Initialize members of the class
        if dt is not APIHelper.SKIP:
            self.dt = dt 
        if temp is not APIHelper.SKIP:
            self.temp = temp 
        if feels_like is not APIHelper.SKIP:
            self.feels_like = feels_like 
        if pressure is not APIHelper.SKIP:
            self.pressure = pressure 
        if humidity is not APIHelper.SKIP:
            self.humidity = humidity 
        if dew_point is not APIHelper.SKIP:
            self.dew_point = dew_point 
        if uvi is not APIHelper.SKIP:
            self.uvi = uvi 
        if clouds is not APIHelper.SKIP:
            self.clouds = clouds 
        if visibility is not APIHelper.SKIP:
            self.visibility = visibility 
        if wind_speed is not APIHelper.SKIP:
            self.wind_speed = wind_speed 
        if wind_gust is not APIHelper.SKIP:
            self.wind_gust = wind_gust 
        if wind_deg is not APIHelper.SKIP:
            self.wind_deg = wind_deg 
        if pop is not APIHelper.SKIP:
            self.pop = pop 
        if rain is not APIHelper.SKIP:
            self.rain = rain 
        if snow is not APIHelper.SKIP:
            self.snow = snow 
        if weather is not APIHelper.SKIP:
            self.weather = weather 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        dt = dictionary.get("dt") if dictionary.get("dt") else APIHelper.SKIP
        temp = dictionary.get("temp") if dictionary.get("temp") else APIHelper.SKIP
        feels_like = dictionary.get("feels_like") if dictionary.get("feels_like") else APIHelper.SKIP
        pressure = dictionary.get("pressure") if dictionary.get("pressure") else APIHelper.SKIP
        humidity = dictionary.get("humidity") if dictionary.get("humidity") else APIHelper.SKIP
        dew_point = dictionary.get("dew_point") if dictionary.get("dew_point") else APIHelper.SKIP
        uvi = dictionary.get("uvi") if dictionary.get("uvi") else APIHelper.SKIP
        clouds = dictionary.get("clouds") if dictionary.get("clouds") else APIHelper.SKIP
        visibility = dictionary.get("visibility") if dictionary.get("visibility") else APIHelper.SKIP
        wind_speed = dictionary.get("wind_speed") if dictionary.get("wind_speed") else APIHelper.SKIP
        wind_gust = dictionary.get("wind_gust") if dictionary.get("wind_gust") else APIHelper.SKIP
        wind_deg = dictionary.get("wind_deg") if dictionary.get("wind_deg") else APIHelper.SKIP
        pop = dictionary.get("pop") if dictionary.get("pop") else APIHelper.SKIP
        rain = HourlyRain.from_dictionary(dictionary.get('rain')) if 'rain' in dictionary.keys() else APIHelper.SKIP
        snow = HourlySnow.from_dictionary(dictionary.get('snow')) if 'snow' in dictionary.keys() else APIHelper.SKIP
        weather = None
        if dictionary.get('weather') is not None:
            weather = [HourlyWeather.from_dictionary(x) for x in dictionary.get('weather')]
        else:
            weather = APIHelper.SKIP
        # Return an object of this model
        return cls(dt,
                   temp,
                   feels_like,
                   pressure,
                   humidity,
                   dew_point,
                   uvi,
                   clouds,
                   visibility,
                   wind_speed,
                   wind_gust,
                   wind_deg,
                   pop,
                   rain,
                   snow,
                   weather)

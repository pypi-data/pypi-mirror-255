# -*- coding: utf-8 -*-

"""
openweatheronecallapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from openweatheronecallapi.api_helper import APIHelper
from openweatheronecallapi.configuration import Server
from openweatheronecallapi.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from openweatheronecallapi.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from openweatheronecallapi.models.weather_info import WeatherInfo
from openweatheronecallapi.exceptions.api_exception import APIException


class Current(BaseController):

    """A Controller to access Endpoints in the openweatheronecallapi API."""
    def __init__(self, config):
        super(Current, self).__init__(config)

    def current_weather_data(self,
                             lat,
                             lon,
                             exclude=None,
                             units=None,
                             lang=None):
        """Does a GET request to /onecall.

        Get the current weather info

        Args:
            lat (float): Latitude, decimal (-90; 90). If you need the geocoder
                to automatic convert city names and zip-codes to geo
                coordinates and the other way around, please use our Geocoding
                API
            lon (float): Longitude, decimal (-180; 180). If you need the
                geocoder to automatic convert city names and zip-codes to geo
                coordinates and the other way around, please use our Geocoding
                API
            exclude (str, optional): By using this parameter you can exclude
                some parts of the weather data from the API response. It
                should be a comma-delimited list (without spaces).
            units (UnitsEnum, optional): Units of measurement. standard,
                metric and imperial units are available. If you do not use the
                units parameter, standard units will be applied by default.
            lang (LangEnum, optional): You can use the lang parameter to get
                the output in your language.

        Returns:
            WeatherInfo: Response from the API. Successful response

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/onecall')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('lat')
                         .value(lat))
            .query_param(Parameter()
                         .key('lon')
                         .value(lon))
            .query_param(Parameter()
                         .key('exclude')
                         .value(exclude))
            .query_param(Parameter()
                         .key('units')
                         .value(units))
            .query_param(Parameter()
                         .key('lang')
                         .value(lang))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(WeatherInfo.from_dictionary)
            .local_error('404', 'Not found response', APIException)
        ).execute()

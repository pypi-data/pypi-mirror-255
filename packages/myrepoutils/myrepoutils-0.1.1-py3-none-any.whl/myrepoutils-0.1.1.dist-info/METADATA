Metadata-Version: 2.1
Name: myrepoutils
Version: 0.1.1
Summary: 
Author: mazzasaverio
Author-email: saverio3107@gmail.com
Requires-Python: >=3.11,<4.0
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Description-Content-Type: text/markdown

1. **Initialize Poetry**: Navigate to your project directory (`/home/sam/github/myrepoutils`) and initialize Poetry if you haven't already. This creates a `pyproject.toml` file, which is crucial for Poetry to manage your package and its dependencies.

   ```bash
   cd /home/sam/github/myrepoutils
   poetry init
   ```

2. **Configure `pyproject.toml`**: Ensure your `pyproject.toml` includes details about your package such as name, version, description, authors, and dependencies. Here's an example snippet:

   ```toml
   [tool.poetry]
   name = "myrepoutils"
   version = "0.1.0"
   description = ""
   authors = ["Your Name <you@example.com>"]

   [tool.poetry.dependencies]
   python = "^3.11"

   [tool.poetry.dev-dependencies]
   pytest = "^6.2.4"
   ```

3. **Push Changes and Tag**:
   According to SemVer, the version number format is `MAJOR.MINOR.PATCH`, with:

   - `MAJOR` version when you make incompatible API changes,
   - `MINOR` version when you add functionality in a backward-compatible manner, and
   - `PATCH` version when you make backward-compatible bug fixes [0][4].

Based on the changes you've made since the last release, decide whether the next version will increment the major, minor, or patch number. If you are adding new features without breaking backward compatibility, it's a minor update. If you're fixing bugs without adding new features or breaking anything, it's a patch update. If the changes are not backward compatible, it's a major update [0][3][4].


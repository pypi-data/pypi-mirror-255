[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.sdist]
exclude = [
  "/.github",
  "/tests",
  "/tools",
]

[project]
name = "amsdal_integrations"
dynamic = ["version"]
description = 'AMSDAL Integrations - tools that allow integration to various ORM libraries to collect and send data to the AMSDAL application'
readme = "README.md"
requires-python = ">=3.7"
license = {file = "LICENSE.txt"}
keywords = []
authors = []
classifiers = [
  "Development Status :: 4 - Beta",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.7",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
]
dependencies = [
  "httpx>=0.25.2",
]

[project.urls]
Documentation = "https://pypi.org/project/amsdal_integrations/#readme"
Issues = "https://github.com/amsdal/amsdal_integrations/issues"
Source = "https://github.com/amsdal/amsdal_integrations"

[tool.hatch.version]
path = "src/amsdal_integrations/__about__.py"

[tool.hatch.envs.default]
path = "../.venv/amsdal_integrations"
dependencies = [
  "coverage[toml]>=6.5",
  "pytest",
  "pytest-mock==3.12.0",
]

[tool.hatch.envs.default.scripts]
test = "pytest {args:tests}"
test-cov = "coverage run -m pytest {args:tests}"
cov-report = [
  "- coverage combine",
  "coverage report",
]
cov = [
  "test-cov",
  "cov-report",
]

[[tool.hatch.envs.all.matrix]]
python = ["3.7", "3.8", "3.9", "3.10", "3.11"]

[tool.hatch.envs.lint]
template = "lint"
dependencies = [
  "black>=23.1.0",
  "mypy>=1.0.0",
  "ruff>=0.0.243",
]

[tool.hatch.envs.lint.scripts]
typing = "mypy --install-types --non-interactive {args:src/amsdal_integrations tests}"
style = [
  "ruff {args:.}",
  "black --check --diff {args:.}",
]
fmt = [
  "black {args:.}",
  "ruff --fix {args:.}",
  "style",
]
all = [
  "style",
  "typing",
]

[tool.black]
target-version = ["py310"]
line-length = 120
skip-string-normalization = true

[tool.mypy]
plugins = []
follow_imports = "silent"
warn_redundant_casts = true
warn_unused_ignores = false
disallow_any_generics = true
check_untyped_defs = true
no_implicit_reexport = true

# for strict mypy: (this is the tricky one :-))
disallow_untyped_defs = true

[tool.ruff.flake8-quotes]
docstring-quotes = "double"
inline-quotes = "single"
multiline-quotes = "double"

[tool.ruff]
target-version = "py310"
line-length = 120
select = [
    "A",
    "ARG",
    "B",
    "C",
    "DTZ",
    "E",
    "EM",
    "F",
    "FBT",
    "I",
    "ICN",
    "ISC",
    "N",
    "PLC",
    "PLE",
    "PLR",
    "PLW",
    "Q",
    "RUF",
    "S",
    "T",
    "TID",
    "UP",
    "W",
    "YTT",
]
ignore = [
    # Allow non-abstract empty methods in abstract base classes
    "B027",
    # Allow boolean positional values in function calls, like `dict.get(... True)`
    "FBT003",
    # Ignore checks for possible passwords
    "S105", "S106", "S107",
    # Ignore complexity
    "C901", "PLR0911", "PLR0912", "PLR0913", "PLR0915",
]
unfixable = [
    # Don't touch unused imports
    "F401",
]

[tool.ruff.isort]
force-single-line = true
order-by-type = true
known-first-party = ["amsdal_integrations"]

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"tests/**/*" = ["PLR2004", "S101", "TID252"]

[tool.coverage.run]
source_pkgs = ["amsdal_integrations", "tests"]
branch = true
parallel = true
omit = [
  "src/amsdal_integrations/__about__.py",
]

[tool.coverage.paths]
amsdal_integrations = ["src/amsdal_integrations", "*/amsdal-integrations/src/amsdal_integrations"]
tests = ["tests", "*/amsdal-integrations/tests"]

[tool.coverage.report]
exclude_lines = [
  "no cov",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
]

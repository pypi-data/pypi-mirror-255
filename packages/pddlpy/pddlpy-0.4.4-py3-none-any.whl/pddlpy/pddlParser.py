# Generated from pddl.g4 by ANTLR 4.13.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,115,1031,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,1,0,1,0,3,0,153,8,0,1,1,1,1,1,1,1,1,
        3,1,159,8,1,1,1,3,1,162,8,1,1,1,3,1,165,8,1,1,1,3,1,168,8,1,1,1,
        3,1,171,8,1,1,1,3,1,174,8,1,1,1,3,1,177,8,1,1,1,5,1,180,8,1,10,1,
        12,1,183,9,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,191,8,1,1,1,3,1,194,8,1,
        1,1,3,1,197,8,1,1,1,3,1,200,8,1,1,1,3,1,203,8,1,1,1,3,1,206,8,1,
        1,1,3,1,209,8,1,1,1,5,1,212,8,1,10,1,12,1,215,9,1,1,1,1,1,3,1,219,
        8,1,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,4,3,229,8,3,11,3,12,3,230,1,
        3,1,3,1,4,1,4,1,4,1,4,1,5,1,5,1,5,4,5,242,8,5,11,5,12,5,243,1,5,
        1,5,1,6,1,6,1,6,1,6,1,6,1,7,5,7,254,8,7,10,7,12,7,257,9,7,1,7,4,
        7,260,8,7,11,7,12,7,261,1,7,5,7,265,8,7,10,7,12,7,268,9,7,3,7,270,
        8,7,1,8,4,8,273,8,8,11,8,12,8,274,1,8,1,8,1,8,1,9,1,9,1,9,4,9,283,
        8,9,11,9,12,9,284,1,9,1,9,1,9,3,9,290,8,9,1,10,1,10,1,11,1,11,1,
        11,1,11,1,11,1,12,4,12,300,8,12,11,12,12,12,301,1,12,1,12,3,12,306,
        8,12,5,12,308,8,12,10,12,12,12,311,9,12,1,13,1,13,1,13,1,13,1,13,
        1,14,1,14,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,4,17,
        330,8,17,11,17,12,17,331,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,19,
        1,19,1,20,5,20,344,8,20,10,20,12,20,347,9,20,1,20,4,20,350,8,20,
        11,20,12,20,351,1,20,5,20,355,8,20,10,20,12,20,358,9,20,3,20,360,
        8,20,1,21,4,21,363,8,21,11,21,12,21,364,1,21,1,21,1,21,1,22,1,22,
        1,22,1,22,1,22,1,23,1,23,1,23,3,23,378,8,23,1,24,1,24,1,24,1,24,
        1,24,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,26,1,26,1,26,1,26,3,26,
        396,8,26,3,26,398,8,26,1,26,1,26,1,26,1,26,3,26,404,8,26,3,26,406,
        8,26,1,27,1,27,1,28,1,28,1,28,1,28,5,28,414,8,28,10,28,12,28,417,
        9,28,1,28,1,28,1,28,1,28,5,28,423,8,28,10,28,12,28,426,9,28,1,28,
        1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,
        1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,
        1,28,1,28,3,28,457,8,28,1,29,1,29,1,29,1,29,1,29,1,29,1,30,1,30,
        1,30,5,30,468,8,30,10,30,12,30,471,9,30,1,30,1,30,1,31,1,31,3,31,
        477,8,31,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,33,
        1,33,1,33,1,33,1,33,1,33,3,33,495,8,33,1,33,1,33,1,33,1,33,3,33,
        501,8,33,1,34,1,34,1,34,1,34,5,34,507,8,34,10,34,12,34,510,9,34,
        1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,3,34,521,8,34,1,35,
        1,35,1,35,1,35,3,35,527,8,35,1,35,1,35,1,35,3,35,532,8,35,1,36,1,
        36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,3,36,546,8,
        36,1,37,1,37,1,38,1,38,1,39,1,39,1,39,1,39,1,39,1,39,1,40,1,40,1,
        40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,3,40,571,8,
        40,1,41,1,41,1,42,1,42,1,42,5,42,578,8,42,10,42,12,42,581,9,42,1,
        42,1,42,1,42,3,42,586,8,42,1,43,1,43,1,43,5,43,591,8,43,10,43,12,
        43,594,9,43,1,43,1,43,3,43,598,8,43,1,44,1,44,1,44,1,44,1,44,1,44,
        1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,3,44,615,8,44,1,45,
        1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,3,45,629,
        8,45,1,46,1,46,1,46,5,46,634,8,46,10,46,12,46,637,9,46,1,46,1,46,
        3,46,641,8,46,1,47,1,47,1,48,1,48,1,49,1,49,1,50,1,50,1,50,4,50,
        652,8,50,11,50,12,50,653,1,50,1,50,1,50,1,50,1,50,3,50,661,8,50,
        1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,3,51,
        675,8,51,1,52,1,52,1,53,1,53,3,53,681,8,53,1,54,1,54,1,54,5,54,686,
        8,54,10,54,12,54,689,9,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,
        1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,
        1,54,3,54,713,8,54,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,
        1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,3,55,733,8,55,1,56,
        1,56,1,56,1,56,1,56,1,56,1,57,1,57,1,57,1,57,1,57,1,57,1,57,3,57,
        748,8,57,1,57,1,57,1,57,1,57,3,57,754,8,57,1,58,1,58,1,59,1,59,1,
        59,1,59,1,59,3,59,763,8,59,1,59,3,59,766,8,59,1,59,3,59,769,8,59,
        1,59,1,59,1,59,3,59,774,8,59,1,59,3,59,777,8,59,1,59,1,59,1,59,1,
        59,1,59,1,59,3,59,785,8,59,1,59,1,59,3,59,789,8,59,1,59,3,59,792,
        8,59,1,59,1,59,1,59,3,59,797,8,59,1,59,3,59,800,8,59,1,59,1,59,3,
        59,804,8,59,1,60,1,60,1,60,1,60,1,60,1,61,1,61,1,61,1,61,1,61,1,
        62,1,62,1,62,1,62,1,62,1,63,1,63,1,63,5,63,824,8,63,10,63,12,63,
        827,9,63,1,63,1,63,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,
        1,64,1,64,1,64,1,64,3,64,844,8,64,1,65,1,65,1,65,1,65,1,65,1,65,
        3,65,852,8,65,1,66,1,66,1,66,5,66,857,8,66,10,66,12,66,860,9,66,
        1,66,1,66,1,67,1,67,1,67,1,67,1,67,1,68,1,68,1,68,1,68,1,68,1,69,
        1,69,1,69,5,69,877,8,69,10,69,12,69,880,9,69,1,69,1,69,1,69,1,69,
        1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,3,69,894,8,69,1,69,1,69,
        1,69,1,69,3,69,900,8,69,1,70,1,70,1,70,1,70,1,70,1,70,1,71,1,71,
        1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,4,72,920,8,72,
        11,72,12,72,921,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,
        1,72,5,72,935,8,72,10,72,12,72,938,9,72,1,72,1,72,1,72,1,72,1,72,
        1,72,1,72,1,72,1,72,3,72,949,8,72,1,73,1,73,1,73,5,73,954,8,73,10,
        73,12,73,957,9,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,
        73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,
        73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,
        73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,
        73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,
        73,1,73,1,73,1,73,1,73,1,73,1,73,3,73,1027,8,73,1,74,1,74,1,74,0,
        0,75,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,
        44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,
        88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,
        124,126,128,130,132,134,136,138,140,142,144,146,148,0,9,1,0,31,32,
        2,0,6,6,36,38,1,0,39,43,1,0,44,48,1,0,41,43,1,0,47,48,1,0,56,57,
        2,0,36,36,38,38,2,0,29,30,70,70,1086,0,152,1,0,0,0,2,218,1,0,0,0,
        4,220,1,0,0,0,6,225,1,0,0,0,8,234,1,0,0,0,10,238,1,0,0,0,12,247,
        1,0,0,0,14,269,1,0,0,0,16,272,1,0,0,0,18,289,1,0,0,0,20,291,1,0,
        0,0,22,293,1,0,0,0,24,309,1,0,0,0,26,312,1,0,0,0,28,317,1,0,0,0,
        30,319,1,0,0,0,32,321,1,0,0,0,34,326,1,0,0,0,36,335,1,0,0,0,38,340,
        1,0,0,0,40,359,1,0,0,0,42,362,1,0,0,0,44,369,1,0,0,0,46,377,1,0,
        0,0,48,379,1,0,0,0,50,389,1,0,0,0,52,397,1,0,0,0,54,407,1,0,0,0,
        56,456,1,0,0,0,58,458,1,0,0,0,60,464,1,0,0,0,62,476,1,0,0,0,64,478,
        1,0,0,0,66,488,1,0,0,0,68,520,1,0,0,0,70,531,1,0,0,0,72,545,1,0,
        0,0,74,547,1,0,0,0,76,549,1,0,0,0,78,551,1,0,0,0,80,570,1,0,0,0,
        82,572,1,0,0,0,84,585,1,0,0,0,86,597,1,0,0,0,88,614,1,0,0,0,90,628,
        1,0,0,0,92,640,1,0,0,0,94,642,1,0,0,0,96,644,1,0,0,0,98,646,1,0,
        0,0,100,660,1,0,0,0,102,674,1,0,0,0,104,676,1,0,0,0,106,680,1,0,
        0,0,108,712,1,0,0,0,110,732,1,0,0,0,112,734,1,0,0,0,114,753,1,0,
        0,0,116,755,1,0,0,0,118,803,1,0,0,0,120,805,1,0,0,0,122,810,1,0,
        0,0,124,815,1,0,0,0,126,820,1,0,0,0,128,843,1,0,0,0,130,851,1,0,
        0,0,132,853,1,0,0,0,134,863,1,0,0,0,136,868,1,0,0,0,138,899,1,0,
        0,0,140,901,1,0,0,0,142,907,1,0,0,0,144,948,1,0,0,0,146,1026,1,0,
        0,0,148,1028,1,0,0,0,150,153,3,2,1,0,151,153,3,118,59,0,152,150,
        1,0,0,0,152,151,1,0,0,0,153,1,1,0,0,0,154,155,5,1,0,0,155,156,5,
        2,0,0,156,158,3,4,2,0,157,159,3,10,5,0,158,157,1,0,0,0,158,159,1,
        0,0,0,159,161,1,0,0,0,160,162,3,6,3,0,161,160,1,0,0,0,161,162,1,
        0,0,0,162,164,1,0,0,0,163,165,3,12,6,0,164,163,1,0,0,0,164,165,1,
        0,0,0,165,167,1,0,0,0,166,168,3,32,16,0,167,166,1,0,0,0,167,168,
        1,0,0,0,168,170,1,0,0,0,169,171,3,34,17,0,170,169,1,0,0,0,170,171,
        1,0,0,0,171,173,1,0,0,0,172,174,3,22,11,0,173,172,1,0,0,0,173,174,
        1,0,0,0,174,176,1,0,0,0,175,177,3,44,22,0,176,175,1,0,0,0,176,177,
        1,0,0,0,177,181,1,0,0,0,178,180,3,46,23,0,179,178,1,0,0,0,180,183,
        1,0,0,0,181,179,1,0,0,0,181,182,1,0,0,0,182,184,1,0,0,0,183,181,
        1,0,0,0,184,185,5,3,0,0,185,219,1,0,0,0,186,187,5,1,0,0,187,188,
        5,2,0,0,188,190,3,4,2,0,189,191,3,6,3,0,190,189,1,0,0,0,190,191,
        1,0,0,0,191,193,1,0,0,0,192,194,3,10,5,0,193,192,1,0,0,0,193,194,
        1,0,0,0,194,196,1,0,0,0,195,197,3,12,6,0,196,195,1,0,0,0,196,197,
        1,0,0,0,197,199,1,0,0,0,198,200,3,32,16,0,199,198,1,0,0,0,199,200,
        1,0,0,0,200,202,1,0,0,0,201,203,3,34,17,0,202,201,1,0,0,0,202,203,
        1,0,0,0,203,205,1,0,0,0,204,206,3,22,11,0,205,204,1,0,0,0,205,206,
        1,0,0,0,206,208,1,0,0,0,207,209,3,44,22,0,208,207,1,0,0,0,208,209,
        1,0,0,0,209,213,1,0,0,0,210,212,3,46,23,0,211,210,1,0,0,0,212,215,
        1,0,0,0,213,211,1,0,0,0,213,214,1,0,0,0,214,216,1,0,0,0,215,213,
        1,0,0,0,216,217,5,3,0,0,217,219,1,0,0,0,218,154,1,0,0,0,218,186,
        1,0,0,0,219,3,1,0,0,0,220,221,5,1,0,0,221,222,5,4,0,0,222,223,3,
        148,74,0,223,224,5,3,0,0,224,5,1,0,0,0,225,226,5,1,0,0,226,228,5,
        5,0,0,227,229,3,8,4,0,228,227,1,0,0,0,229,230,1,0,0,0,230,228,1,
        0,0,0,230,231,1,0,0,0,231,232,1,0,0,0,232,233,5,3,0,0,233,7,1,0,
        0,0,234,235,3,148,74,0,235,236,5,6,0,0,236,237,5,71,0,0,237,9,1,
        0,0,0,238,239,5,1,0,0,239,241,5,7,0,0,240,242,5,69,0,0,241,240,1,
        0,0,0,242,243,1,0,0,0,243,241,1,0,0,0,243,244,1,0,0,0,244,245,1,
        0,0,0,245,246,5,3,0,0,246,11,1,0,0,0,247,248,5,1,0,0,248,249,5,8,
        0,0,249,250,3,14,7,0,250,251,5,3,0,0,251,13,1,0,0,0,252,254,3,148,
        74,0,253,252,1,0,0,0,254,257,1,0,0,0,255,253,1,0,0,0,255,256,1,0,
        0,0,256,270,1,0,0,0,257,255,1,0,0,0,258,260,3,16,8,0,259,258,1,0,
        0,0,260,261,1,0,0,0,261,259,1,0,0,0,261,262,1,0,0,0,262,266,1,0,
        0,0,263,265,3,148,74,0,264,263,1,0,0,0,265,268,1,0,0,0,266,264,1,
        0,0,0,266,267,1,0,0,0,267,270,1,0,0,0,268,266,1,0,0,0,269,255,1,
        0,0,0,269,259,1,0,0,0,270,15,1,0,0,0,271,273,3,148,74,0,272,271,
        1,0,0,0,273,274,1,0,0,0,274,272,1,0,0,0,274,275,1,0,0,0,275,276,
        1,0,0,0,276,277,5,6,0,0,277,278,3,18,9,0,278,17,1,0,0,0,279,280,
        5,1,0,0,280,282,5,9,0,0,281,283,3,20,10,0,282,281,1,0,0,0,283,284,
        1,0,0,0,284,282,1,0,0,0,284,285,1,0,0,0,285,286,1,0,0,0,286,287,
        5,3,0,0,287,290,1,0,0,0,288,290,3,20,10,0,289,279,1,0,0,0,289,288,
        1,0,0,0,290,19,1,0,0,0,291,292,3,148,74,0,292,21,1,0,0,0,293,294,
        5,1,0,0,294,295,5,10,0,0,295,296,3,24,12,0,296,297,5,3,0,0,297,23,
        1,0,0,0,298,300,3,26,13,0,299,298,1,0,0,0,300,301,1,0,0,0,301,299,
        1,0,0,0,301,302,1,0,0,0,302,305,1,0,0,0,303,304,5,6,0,0,304,306,
        3,30,15,0,305,303,1,0,0,0,305,306,1,0,0,0,306,308,1,0,0,0,307,299,
        1,0,0,0,308,311,1,0,0,0,309,307,1,0,0,0,309,310,1,0,0,0,310,25,1,
        0,0,0,311,309,1,0,0,0,312,313,5,1,0,0,313,314,3,28,14,0,314,315,
        3,40,20,0,315,316,5,3,0,0,316,27,1,0,0,0,317,318,3,148,74,0,318,
        29,1,0,0,0,319,320,5,11,0,0,320,31,1,0,0,0,321,322,5,1,0,0,322,323,
        5,12,0,0,323,324,3,14,7,0,324,325,5,3,0,0,325,33,1,0,0,0,326,327,
        5,1,0,0,327,329,5,13,0,0,328,330,3,36,18,0,329,328,1,0,0,0,330,331,
        1,0,0,0,331,329,1,0,0,0,331,332,1,0,0,0,332,333,1,0,0,0,333,334,
        5,3,0,0,334,35,1,0,0,0,335,336,5,1,0,0,336,337,3,38,19,0,337,338,
        3,40,20,0,338,339,5,3,0,0,339,37,1,0,0,0,340,341,3,148,74,0,341,
        39,1,0,0,0,342,344,5,72,0,0,343,342,1,0,0,0,344,347,1,0,0,0,345,
        343,1,0,0,0,345,346,1,0,0,0,346,360,1,0,0,0,347,345,1,0,0,0,348,
        350,3,42,21,0,349,348,1,0,0,0,350,351,1,0,0,0,351,349,1,0,0,0,351,
        352,1,0,0,0,352,356,1,0,0,0,353,355,5,72,0,0,354,353,1,0,0,0,355,
        358,1,0,0,0,356,354,1,0,0,0,356,357,1,0,0,0,357,360,1,0,0,0,358,
        356,1,0,0,0,359,345,1,0,0,0,359,349,1,0,0,0,360,41,1,0,0,0,361,363,
        5,72,0,0,362,361,1,0,0,0,363,364,1,0,0,0,364,362,1,0,0,0,364,365,
        1,0,0,0,365,366,1,0,0,0,366,367,5,6,0,0,367,368,3,18,9,0,368,43,
        1,0,0,0,369,370,5,1,0,0,370,371,5,14,0,0,371,372,3,146,73,0,372,
        373,5,3,0,0,373,45,1,0,0,0,374,378,3,48,24,0,375,378,3,64,32,0,376,
        378,3,78,39,0,377,374,1,0,0,0,377,375,1,0,0,0,377,376,1,0,0,0,378,
        47,1,0,0,0,379,380,5,1,0,0,380,381,5,15,0,0,381,382,3,50,25,0,382,
        383,5,16,0,0,383,384,5,1,0,0,384,385,3,40,20,0,385,386,5,3,0,0,386,
        387,3,52,26,0,387,388,5,3,0,0,388,49,1,0,0,0,389,390,3,148,74,0,
        390,51,1,0,0,0,391,395,5,17,0,0,392,393,5,1,0,0,393,396,5,3,0,0,
        394,396,3,54,27,0,395,392,1,0,0,0,395,394,1,0,0,0,396,398,1,0,0,
        0,397,391,1,0,0,0,397,398,1,0,0,0,398,405,1,0,0,0,399,403,5,18,0,
        0,400,401,5,1,0,0,401,404,5,3,0,0,402,404,3,86,43,0,403,400,1,0,
        0,0,403,402,1,0,0,0,404,406,1,0,0,0,405,399,1,0,0,0,405,406,1,0,
        0,0,406,53,1,0,0,0,407,408,3,56,28,0,408,55,1,0,0,0,409,457,3,60,
        30,0,410,411,5,1,0,0,411,415,5,19,0,0,412,414,3,56,28,0,413,412,
        1,0,0,0,414,417,1,0,0,0,415,413,1,0,0,0,415,416,1,0,0,0,416,418,
        1,0,0,0,417,415,1,0,0,0,418,457,5,3,0,0,419,420,5,1,0,0,420,424,
        5,20,0,0,421,423,3,56,28,0,422,421,1,0,0,0,423,426,1,0,0,0,424,422,
        1,0,0,0,424,425,1,0,0,0,425,427,1,0,0,0,426,424,1,0,0,0,427,457,
        5,3,0,0,428,429,5,1,0,0,429,430,5,21,0,0,430,431,3,56,28,0,431,432,
        5,3,0,0,432,457,1,0,0,0,433,434,5,1,0,0,434,435,5,22,0,0,435,436,
        3,56,28,0,436,437,3,56,28,0,437,438,5,3,0,0,438,457,1,0,0,0,439,
        440,5,1,0,0,440,441,5,23,0,0,441,442,5,1,0,0,442,443,3,40,20,0,443,
        444,5,3,0,0,444,445,3,56,28,0,445,446,5,3,0,0,446,457,1,0,0,0,447,
        448,5,1,0,0,448,449,5,24,0,0,449,450,5,1,0,0,450,451,3,40,20,0,451,
        452,5,3,0,0,452,453,3,56,28,0,453,454,5,3,0,0,454,457,1,0,0,0,455,
        457,3,58,29,0,456,409,1,0,0,0,456,410,1,0,0,0,456,419,1,0,0,0,456,
        428,1,0,0,0,456,433,1,0,0,0,456,439,1,0,0,0,456,447,1,0,0,0,456,
        455,1,0,0,0,457,57,1,0,0,0,458,459,5,1,0,0,459,460,3,96,48,0,460,
        461,3,80,40,0,461,462,3,80,40,0,462,463,5,3,0,0,463,59,1,0,0,0,464,
        465,5,1,0,0,465,469,3,38,19,0,466,468,3,62,31,0,467,466,1,0,0,0,
        468,471,1,0,0,0,469,467,1,0,0,0,469,470,1,0,0,0,470,472,1,0,0,0,
        471,469,1,0,0,0,472,473,5,3,0,0,473,61,1,0,0,0,474,477,3,148,74,
        0,475,477,5,72,0,0,476,474,1,0,0,0,476,475,1,0,0,0,477,63,1,0,0,
        0,478,479,5,1,0,0,479,480,5,25,0,0,480,481,3,50,25,0,481,482,5,16,
        0,0,482,483,5,1,0,0,483,484,3,40,20,0,484,485,5,3,0,0,485,486,3,
        66,33,0,486,487,5,3,0,0,487,65,1,0,0,0,488,489,5,26,0,0,489,490,
        3,100,50,0,490,494,5,27,0,0,491,492,5,1,0,0,492,495,5,3,0,0,493,
        495,3,68,34,0,494,491,1,0,0,0,494,493,1,0,0,0,495,496,1,0,0,0,496,
        500,5,18,0,0,497,498,5,1,0,0,498,501,5,3,0,0,499,501,3,108,54,0,
        500,497,1,0,0,0,500,499,1,0,0,0,501,67,1,0,0,0,502,521,3,70,35,0,
        503,504,5,1,0,0,504,508,5,19,0,0,505,507,3,68,34,0,506,505,1,0,0,
        0,507,510,1,0,0,0,508,506,1,0,0,0,508,509,1,0,0,0,509,511,1,0,0,
        0,510,508,1,0,0,0,511,521,5,3,0,0,512,513,5,1,0,0,513,514,5,24,0,
        0,514,515,5,1,0,0,515,516,3,40,20,0,516,517,5,3,0,0,517,518,3,68,
        34,0,518,519,5,3,0,0,519,521,1,0,0,0,520,502,1,0,0,0,520,503,1,0,
        0,0,520,512,1,0,0,0,521,69,1,0,0,0,522,532,3,72,36,0,523,524,5,1,
        0,0,524,526,5,28,0,0,525,527,3,148,74,0,526,525,1,0,0,0,526,527,
        1,0,0,0,527,528,1,0,0,0,528,529,3,72,36,0,529,530,5,3,0,0,530,532,
        1,0,0,0,531,522,1,0,0,0,531,523,1,0,0,0,532,71,1,0,0,0,533,534,5,
        1,0,0,534,535,5,29,0,0,535,536,3,74,37,0,536,537,3,56,28,0,537,538,
        5,3,0,0,538,546,1,0,0,0,539,540,5,1,0,0,540,541,5,30,0,0,541,542,
        3,76,38,0,542,543,3,56,28,0,543,544,5,3,0,0,544,546,1,0,0,0,545,
        533,1,0,0,0,545,539,1,0,0,0,546,73,1,0,0,0,547,548,7,0,0,0,548,75,
        1,0,0,0,549,550,5,33,0,0,550,77,1,0,0,0,551,552,5,1,0,0,552,553,
        5,34,0,0,553,554,3,40,20,0,554,555,3,56,28,0,555,556,5,3,0,0,556,
        79,1,0,0,0,557,571,5,73,0,0,558,559,5,1,0,0,559,560,3,94,47,0,560,
        561,3,80,40,0,561,562,3,82,41,0,562,563,5,3,0,0,563,571,1,0,0,0,
        564,565,5,1,0,0,565,566,5,6,0,0,566,567,3,80,40,0,567,568,5,3,0,
        0,568,571,1,0,0,0,569,571,3,84,42,0,570,557,1,0,0,0,570,558,1,0,
        0,0,570,564,1,0,0,0,570,569,1,0,0,0,571,81,1,0,0,0,572,573,3,80,
        40,0,573,83,1,0,0,0,574,575,5,1,0,0,575,579,3,28,14,0,576,578,3,
        62,31,0,577,576,1,0,0,0,578,581,1,0,0,0,579,577,1,0,0,0,579,580,
        1,0,0,0,580,582,1,0,0,0,581,579,1,0,0,0,582,583,5,3,0,0,583,586,
        1,0,0,0,584,586,3,28,14,0,585,574,1,0,0,0,585,584,1,0,0,0,586,85,
        1,0,0,0,587,588,5,1,0,0,588,592,5,19,0,0,589,591,3,88,44,0,590,589,
        1,0,0,0,591,594,1,0,0,0,592,590,1,0,0,0,592,593,1,0,0,0,593,595,
        1,0,0,0,594,592,1,0,0,0,595,598,5,3,0,0,596,598,3,88,44,0,597,587,
        1,0,0,0,597,596,1,0,0,0,598,87,1,0,0,0,599,600,5,1,0,0,600,601,5,
        24,0,0,601,602,5,1,0,0,602,603,3,40,20,0,603,604,5,3,0,0,604,605,
        3,86,43,0,605,606,5,3,0,0,606,615,1,0,0,0,607,608,5,1,0,0,608,609,
        5,35,0,0,609,610,3,56,28,0,610,611,3,92,46,0,611,612,5,3,0,0,612,
        615,1,0,0,0,613,615,3,90,45,0,614,599,1,0,0,0,614,607,1,0,0,0,614,
        613,1,0,0,0,615,89,1,0,0,0,616,617,5,1,0,0,617,618,3,98,49,0,618,
        619,3,84,42,0,619,620,3,80,40,0,620,621,5,3,0,0,621,629,1,0,0,0,
        622,623,5,1,0,0,623,624,5,21,0,0,624,625,3,60,30,0,625,626,5,3,0,
        0,626,629,1,0,0,0,627,629,3,60,30,0,628,616,1,0,0,0,628,622,1,0,
        0,0,628,627,1,0,0,0,629,91,1,0,0,0,630,631,5,1,0,0,631,635,5,19,
        0,0,632,634,3,90,45,0,633,632,1,0,0,0,634,637,1,0,0,0,635,633,1,
        0,0,0,635,636,1,0,0,0,636,638,1,0,0,0,637,635,1,0,0,0,638,641,5,
        3,0,0,639,641,3,90,45,0,640,630,1,0,0,0,640,639,1,0,0,0,641,93,1,
        0,0,0,642,643,7,1,0,0,643,95,1,0,0,0,644,645,7,2,0,0,645,97,1,0,
        0,0,646,647,7,3,0,0,647,99,1,0,0,0,648,649,5,1,0,0,649,651,5,19,
        0,0,650,652,3,102,51,0,651,650,1,0,0,0,652,653,1,0,0,0,653,651,1,
        0,0,0,653,654,1,0,0,0,654,655,1,0,0,0,655,656,5,3,0,0,656,661,1,
        0,0,0,657,658,5,1,0,0,658,661,5,3,0,0,659,661,3,102,51,0,660,648,
        1,0,0,0,660,657,1,0,0,0,660,659,1,0,0,0,661,101,1,0,0,0,662,663,
        5,1,0,0,663,664,3,104,52,0,664,665,5,49,0,0,665,666,3,106,53,0,666,
        667,5,3,0,0,667,675,1,0,0,0,668,669,5,1,0,0,669,670,5,29,0,0,670,
        671,3,74,37,0,671,672,3,102,51,0,672,673,5,3,0,0,673,675,1,0,0,0,
        674,662,1,0,0,0,674,668,1,0,0,0,675,103,1,0,0,0,676,677,7,4,0,0,
        677,105,1,0,0,0,678,681,5,73,0,0,679,681,3,80,40,0,680,678,1,0,0,
        0,680,679,1,0,0,0,681,107,1,0,0,0,682,683,5,1,0,0,683,687,5,19,0,
        0,684,686,3,108,54,0,685,684,1,0,0,0,686,689,1,0,0,0,687,685,1,0,
        0,0,687,688,1,0,0,0,688,690,1,0,0,0,689,687,1,0,0,0,690,713,5,3,
        0,0,691,713,3,110,55,0,692,693,5,1,0,0,693,694,5,24,0,0,694,695,
        5,1,0,0,695,696,3,40,20,0,696,697,5,3,0,0,697,698,3,108,54,0,698,
        699,5,3,0,0,699,713,1,0,0,0,700,701,5,1,0,0,701,702,5,35,0,0,702,
        703,3,68,34,0,703,704,3,110,55,0,704,705,5,3,0,0,705,713,1,0,0,0,
        706,707,5,1,0,0,707,708,3,98,49,0,708,709,3,84,42,0,709,710,3,114,
        57,0,710,711,5,3,0,0,711,713,1,0,0,0,712,682,1,0,0,0,712,691,1,0,
        0,0,712,692,1,0,0,0,712,700,1,0,0,0,712,706,1,0,0,0,713,109,1,0,
        0,0,714,715,5,1,0,0,715,716,5,29,0,0,716,717,3,74,37,0,717,718,3,
        88,44,0,718,719,5,3,0,0,719,733,1,0,0,0,720,721,5,1,0,0,721,722,
        5,29,0,0,722,723,3,74,37,0,723,724,3,112,56,0,724,725,5,3,0,0,725,
        733,1,0,0,0,726,727,5,1,0,0,727,728,3,116,58,0,728,729,3,84,42,0,
        729,730,3,80,40,0,730,731,5,3,0,0,731,733,1,0,0,0,732,714,1,0,0,
        0,732,720,1,0,0,0,732,726,1,0,0,0,733,111,1,0,0,0,734,735,5,1,0,
        0,735,736,3,98,49,0,736,737,3,84,42,0,737,738,3,114,57,0,738,739,
        5,3,0,0,739,113,1,0,0,0,740,747,5,1,0,0,741,742,3,94,47,0,742,743,
        3,114,57,0,743,744,3,114,57,0,744,748,1,0,0,0,745,746,5,6,0,0,746,
        748,3,114,57,0,747,741,1,0,0,0,747,745,1,0,0,0,748,749,1,0,0,0,749,
        750,5,3,0,0,750,754,1,0,0,0,751,754,5,49,0,0,752,754,3,80,40,0,753,
        740,1,0,0,0,753,751,1,0,0,0,753,752,1,0,0,0,754,115,1,0,0,0,755,
        756,7,5,0,0,756,117,1,0,0,0,757,758,5,1,0,0,758,759,5,2,0,0,759,
        760,3,120,60,0,760,762,3,122,61,0,761,763,3,10,5,0,762,761,1,0,0,
        0,762,763,1,0,0,0,763,765,1,0,0,0,764,766,3,6,3,0,765,764,1,0,0,
        0,765,766,1,0,0,0,766,768,1,0,0,0,767,769,3,124,62,0,768,767,1,0,
        0,0,768,769,1,0,0,0,769,770,1,0,0,0,770,771,3,126,63,0,771,773,3,
        134,67,0,772,774,3,136,68,0,773,772,1,0,0,0,773,774,1,0,0,0,774,
        776,1,0,0,0,775,777,3,140,70,0,776,775,1,0,0,0,776,777,1,0,0,0,777,
        778,1,0,0,0,778,779,5,3,0,0,779,804,1,0,0,0,780,781,5,1,0,0,781,
        782,5,2,0,0,782,784,3,120,60,0,783,785,3,6,3,0,784,783,1,0,0,0,784,
        785,1,0,0,0,785,786,1,0,0,0,786,788,3,122,61,0,787,789,3,10,5,0,
        788,787,1,0,0,0,788,789,1,0,0,0,789,791,1,0,0,0,790,792,3,124,62,
        0,791,790,1,0,0,0,791,792,1,0,0,0,792,793,1,0,0,0,793,794,3,126,
        63,0,794,796,3,134,67,0,795,797,3,136,68,0,796,795,1,0,0,0,796,797,
        1,0,0,0,797,799,1,0,0,0,798,800,3,140,70,0,799,798,1,0,0,0,799,800,
        1,0,0,0,800,801,1,0,0,0,801,802,5,3,0,0,802,804,1,0,0,0,803,757,
        1,0,0,0,803,780,1,0,0,0,804,119,1,0,0,0,805,806,5,1,0,0,806,807,
        5,50,0,0,807,808,3,148,74,0,808,809,5,3,0,0,809,121,1,0,0,0,810,
        811,5,1,0,0,811,812,5,51,0,0,812,813,3,148,74,0,813,814,5,3,0,0,
        814,123,1,0,0,0,815,816,5,1,0,0,816,817,5,52,0,0,817,818,3,14,7,
        0,818,819,5,3,0,0,819,125,1,0,0,0,820,821,5,1,0,0,821,825,5,53,0,
        0,822,824,3,128,64,0,823,822,1,0,0,0,824,827,1,0,0,0,825,823,1,0,
        0,0,825,826,1,0,0,0,826,828,1,0,0,0,827,825,1,0,0,0,828,829,5,3,
        0,0,829,127,1,0,0,0,830,844,3,130,65,0,831,832,5,1,0,0,832,833,5,
        41,0,0,833,834,3,84,42,0,834,835,5,73,0,0,835,836,5,3,0,0,836,844,
        1,0,0,0,837,838,5,1,0,0,838,839,5,29,0,0,839,840,5,73,0,0,840,841,
        3,130,65,0,841,842,5,3,0,0,842,844,1,0,0,0,843,830,1,0,0,0,843,831,
        1,0,0,0,843,837,1,0,0,0,844,129,1,0,0,0,845,852,3,132,66,0,846,847,
        5,1,0,0,847,848,5,21,0,0,848,849,3,132,66,0,849,850,5,3,0,0,850,
        852,1,0,0,0,851,845,1,0,0,0,851,846,1,0,0,0,852,131,1,0,0,0,853,
        854,5,1,0,0,854,858,3,38,19,0,855,857,3,148,74,0,856,855,1,0,0,0,
        857,860,1,0,0,0,858,856,1,0,0,0,858,859,1,0,0,0,859,861,1,0,0,0,
        860,858,1,0,0,0,861,862,5,3,0,0,862,133,1,0,0,0,863,864,5,1,0,0,
        864,865,5,54,0,0,865,866,3,56,28,0,866,867,5,3,0,0,867,135,1,0,0,
        0,868,869,5,1,0,0,869,870,5,14,0,0,870,871,3,138,69,0,871,872,5,
        3,0,0,872,137,1,0,0,0,873,874,5,1,0,0,874,878,5,19,0,0,875,877,3,
        138,69,0,876,875,1,0,0,0,877,880,1,0,0,0,878,876,1,0,0,0,878,879,
        1,0,0,0,879,881,1,0,0,0,880,878,1,0,0,0,881,900,5,3,0,0,882,883,
        5,1,0,0,883,884,5,24,0,0,884,885,5,1,0,0,885,886,3,40,20,0,886,887,
        5,3,0,0,887,888,3,138,69,0,888,889,5,3,0,0,889,900,1,0,0,0,890,891,
        5,1,0,0,891,893,5,28,0,0,892,894,3,148,74,0,893,892,1,0,0,0,893,
        894,1,0,0,0,894,895,1,0,0,0,895,896,3,146,73,0,896,897,5,3,0,0,897,
        900,1,0,0,0,898,900,3,146,73,0,899,873,1,0,0,0,899,882,1,0,0,0,899,
        890,1,0,0,0,899,898,1,0,0,0,900,139,1,0,0,0,901,902,5,1,0,0,902,
        903,5,55,0,0,903,904,3,142,71,0,904,905,3,144,72,0,905,906,5,3,0,
        0,906,141,1,0,0,0,907,908,7,6,0,0,908,143,1,0,0,0,909,910,5,1,0,
        0,910,911,3,94,47,0,911,912,3,144,72,0,912,913,3,144,72,0,913,914,
        5,3,0,0,914,949,1,0,0,0,915,916,5,1,0,0,916,917,7,7,0,0,917,919,
        3,144,72,0,918,920,3,144,72,0,919,918,1,0,0,0,920,921,1,0,0,0,921,
        919,1,0,0,0,921,922,1,0,0,0,922,923,1,0,0,0,923,924,5,3,0,0,924,
        949,1,0,0,0,925,926,5,1,0,0,926,927,5,6,0,0,927,928,3,144,72,0,928,
        929,5,3,0,0,929,949,1,0,0,0,930,949,5,73,0,0,931,932,5,1,0,0,932,
        936,3,28,14,0,933,935,3,148,74,0,934,933,1,0,0,0,935,938,1,0,0,0,
        936,934,1,0,0,0,936,937,1,0,0,0,937,939,1,0,0,0,938,936,1,0,0,0,
        939,940,5,3,0,0,940,949,1,0,0,0,941,949,3,28,14,0,942,949,5,58,0,
        0,943,944,5,1,0,0,944,945,5,59,0,0,945,946,3,148,74,0,946,947,5,
        3,0,0,947,949,1,0,0,0,948,909,1,0,0,0,948,915,1,0,0,0,948,925,1,
        0,0,0,948,930,1,0,0,0,948,931,1,0,0,0,948,941,1,0,0,0,948,942,1,
        0,0,0,948,943,1,0,0,0,949,145,1,0,0,0,950,951,5,1,0,0,951,955,5,
        19,0,0,952,954,3,146,73,0,953,952,1,0,0,0,954,957,1,0,0,0,955,953,
        1,0,0,0,955,956,1,0,0,0,956,958,1,0,0,0,957,955,1,0,0,0,958,1027,
        5,3,0,0,959,960,5,1,0,0,960,961,5,24,0,0,961,962,5,1,0,0,962,963,
        3,40,20,0,963,964,5,3,0,0,964,965,3,146,73,0,965,966,5,3,0,0,966,
        1027,1,0,0,0,967,968,5,1,0,0,968,969,5,29,0,0,969,970,5,32,0,0,970,
        971,3,56,28,0,971,972,5,3,0,0,972,1027,1,0,0,0,973,974,5,1,0,0,974,
        975,5,60,0,0,975,976,3,56,28,0,976,977,5,3,0,0,977,1027,1,0,0,0,
        978,979,5,1,0,0,979,980,5,61,0,0,980,981,3,56,28,0,981,982,5,3,0,
        0,982,1027,1,0,0,0,983,984,5,1,0,0,984,985,5,62,0,0,985,986,5,73,
        0,0,986,987,3,56,28,0,987,988,5,3,0,0,988,1027,1,0,0,0,989,990,5,
        1,0,0,990,991,5,63,0,0,991,992,3,56,28,0,992,993,5,3,0,0,993,1027,
        1,0,0,0,994,995,5,1,0,0,995,996,5,64,0,0,996,997,3,56,28,0,997,998,
        3,56,28,0,998,999,5,3,0,0,999,1027,1,0,0,0,1000,1001,5,1,0,0,1001,
        1002,5,65,0,0,1002,1003,3,56,28,0,1003,1004,3,56,28,0,1004,1005,
        5,3,0,0,1005,1027,1,0,0,0,1006,1007,5,1,0,0,1007,1008,5,66,0,0,1008,
        1009,5,73,0,0,1009,1010,3,56,28,0,1010,1011,3,56,28,0,1011,1012,
        5,3,0,0,1012,1027,1,0,0,0,1013,1014,5,1,0,0,1014,1015,5,67,0,0,1015,
        1016,5,73,0,0,1016,1017,5,73,0,0,1017,1018,3,56,28,0,1018,1019,5,
        3,0,0,1019,1027,1,0,0,0,1020,1021,5,1,0,0,1021,1022,5,68,0,0,1022,
        1023,5,73,0,0,1023,1024,3,56,28,0,1024,1025,5,3,0,0,1025,1027,1,
        0,0,0,1026,950,1,0,0,0,1026,959,1,0,0,0,1026,967,1,0,0,0,1026,973,
        1,0,0,0,1026,978,1,0,0,0,1026,983,1,0,0,0,1026,989,1,0,0,0,1026,
        994,1,0,0,0,1026,1000,1,0,0,0,1026,1006,1,0,0,0,1026,1013,1,0,0,
        0,1026,1020,1,0,0,0,1027,147,1,0,0,0,1028,1029,7,8,0,0,1029,149,
        1,0,0,0,94,152,158,161,164,167,170,173,176,181,190,193,196,199,202,
        205,208,213,218,230,243,255,261,266,269,274,284,289,301,305,309,
        331,345,351,356,359,364,377,395,397,403,405,415,424,456,469,476,
        494,500,508,520,526,531,545,570,579,585,592,597,614,628,635,640,
        653,660,674,680,687,712,732,747,753,762,765,768,773,776,784,788,
        791,796,799,803,825,843,851,858,878,893,899,921,936,948,955,1026
    ]

class pddlParser ( Parser ):

    grammarFileName = "pddl.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'('", "'define'", "')'", "'domain'", 
                     "':context'", "'-'", "':requirements'", "':types'", 
                     "'either'", "':functions'", "'number'", "':constants'", 
                     "':predicates'", "':constraints'", "':action'", "':parameters'", 
                     "':precondition'", "':effect'", "'and'", "'or'", "'not'", 
                     "'imply'", "'exists'", "'forall'", "':durative-action'", 
                     "':duration'", "':condition'", "'preference'", "'at'", 
                     "'over'", "'start'", "'end'", "'all'", "':derived'", 
                     "'when'", "'*'", "'+'", "'/'", "'>'", "'<'", "'='", 
                     "'>='", "'<='", "'assign'", "'scale-up'", "'scale-down'", 
                     "'increase'", "'decrease'", "'?duration'", "'problem'", 
                     "':domain'", "':objects'", "':init'", "':goal'", "':metric'", 
                     "'minimize'", "'maximize'", "'total-time'", "'is-violated'", 
                     "'always'", "'sometime'", "'within'", "'at-most-once'", 
                     "'sometime-after'", "'sometime-before'", "'always-within'", 
                     "'hold-during'", "'hold-after'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "REQUIRE_KEY", "NAME", "URI", "VARIABLE", 
                      "NUMBER", "LINE_COMMENT", "WHITESPACE", "DOMAIN", 
                      "DOMAIN_NAME", "REQUIREMENTS", "TYPES", "EITHER_TYPE", 
                      "CONSTANTS", "FUNCTIONS", "PREDICATES", "ACTION", 
                      "DURATIVE_ACTION", "PROBLEM", "PROBLEM_NAME", "PROBLEM_DOMAIN", 
                      "OBJECTS", "INIT", "FUNC_HEAD", "PRECONDITION", "EFFECT", 
                      "AND_GD", "OR_GD", "NOT_GD", "IMPLY_GD", "EXISTS_GD", 
                      "FORALL_GD", "COMPARISON_GD", "AND_EFFECT", "FORALL_EFFECT", 
                      "WHEN_EFFECT", "ASSIGN_EFFECT", "NOT_EFFECT", "PRED_HEAD", 
                      "GOAL", "BINARY_OP", "UNARY_MINUS", "INIT_EQ", "INIT_AT", 
                      "NOT_PRED_INIT", "PRED_INST", "PROBLEM_CONSTRAINT", 
                      "PROBLEM_METRIC" ]

    RULE_pddlDoc = 0
    RULE_domain = 1
    RULE_domainName = 2
    RULE_contextDef = 3
    RULE_namespaceBinding = 4
    RULE_requireDef = 5
    RULE_typesDef = 6
    RULE_typedNameList = 7
    RULE_singleTypeNameList = 8
    RULE_r_type = 9
    RULE_primType = 10
    RULE_functionsDef = 11
    RULE_functionList = 12
    RULE_atomicFunctionSkeleton = 13
    RULE_functionSymbol = 14
    RULE_functionType = 15
    RULE_constantsDef = 16
    RULE_predicatesDef = 17
    RULE_atomicFormulaSkeleton = 18
    RULE_predicate = 19
    RULE_typedVariableList = 20
    RULE_singleTypeVarList = 21
    RULE_constraints = 22
    RULE_structureDef = 23
    RULE_actionDef = 24
    RULE_actionSymbol = 25
    RULE_actionDefBody = 26
    RULE_precondition = 27
    RULE_goalDesc = 28
    RULE_fComp = 29
    RULE_atomicTermFormula = 30
    RULE_term = 31
    RULE_durativeActionDef = 32
    RULE_daDefBody = 33
    RULE_daGD = 34
    RULE_prefTimedGD = 35
    RULE_timedGD = 36
    RULE_timeSpecifier = 37
    RULE_interval = 38
    RULE_derivedDef = 39
    RULE_fExp = 40
    RULE_fExp2 = 41
    RULE_fHead = 42
    RULE_effect = 43
    RULE_cEffect = 44
    RULE_pEffect = 45
    RULE_condEffect = 46
    RULE_binaryOp = 47
    RULE_binaryComp = 48
    RULE_assignOp = 49
    RULE_durationConstraint = 50
    RULE_simpleDurationConstraint = 51
    RULE_durOp = 52
    RULE_durValue = 53
    RULE_daEffect = 54
    RULE_timedEffect = 55
    RULE_fAssignDA = 56
    RULE_fExpDA = 57
    RULE_assignOpT = 58
    RULE_problem = 59
    RULE_problemDecl = 60
    RULE_problemDomain = 61
    RULE_objectDecl = 62
    RULE_init = 63
    RULE_initEl = 64
    RULE_nameLiteral = 65
    RULE_atomicNameFormula = 66
    RULE_goal = 67
    RULE_probConstraints = 68
    RULE_prefConGD = 69
    RULE_metricSpec = 70
    RULE_optimization = 71
    RULE_metricFExp = 72
    RULE_conGD = 73
    RULE_name = 74

    ruleNames =  [ "pddlDoc", "domain", "domainName", "contextDef", "namespaceBinding", 
                   "requireDef", "typesDef", "typedNameList", "singleTypeNameList", 
                   "r_type", "primType", "functionsDef", "functionList", 
                   "atomicFunctionSkeleton", "functionSymbol", "functionType", 
                   "constantsDef", "predicatesDef", "atomicFormulaSkeleton", 
                   "predicate", "typedVariableList", "singleTypeVarList", 
                   "constraints", "structureDef", "actionDef", "actionSymbol", 
                   "actionDefBody", "precondition", "goalDesc", "fComp", 
                   "atomicTermFormula", "term", "durativeActionDef", "daDefBody", 
                   "daGD", "prefTimedGD", "timedGD", "timeSpecifier", "interval", 
                   "derivedDef", "fExp", "fExp2", "fHead", "effect", "cEffect", 
                   "pEffect", "condEffect", "binaryOp", "binaryComp", "assignOp", 
                   "durationConstraint", "simpleDurationConstraint", "durOp", 
                   "durValue", "daEffect", "timedEffect", "fAssignDA", "fExpDA", 
                   "assignOpT", "problem", "problemDecl", "problemDomain", 
                   "objectDecl", "init", "initEl", "nameLiteral", "atomicNameFormula", 
                   "goal", "probConstraints", "prefConGD", "metricSpec", 
                   "optimization", "metricFExp", "conGD", "name" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    T__28=29
    T__29=30
    T__30=31
    T__31=32
    T__32=33
    T__33=34
    T__34=35
    T__35=36
    T__36=37
    T__37=38
    T__38=39
    T__39=40
    T__40=41
    T__41=42
    T__42=43
    T__43=44
    T__44=45
    T__45=46
    T__46=47
    T__47=48
    T__48=49
    T__49=50
    T__50=51
    T__51=52
    T__52=53
    T__53=54
    T__54=55
    T__55=56
    T__56=57
    T__57=58
    T__58=59
    T__59=60
    T__60=61
    T__61=62
    T__62=63
    T__63=64
    T__64=65
    T__65=66
    T__66=67
    T__67=68
    REQUIRE_KEY=69
    NAME=70
    URI=71
    VARIABLE=72
    NUMBER=73
    LINE_COMMENT=74
    WHITESPACE=75
    DOMAIN=76
    DOMAIN_NAME=77
    REQUIREMENTS=78
    TYPES=79
    EITHER_TYPE=80
    CONSTANTS=81
    FUNCTIONS=82
    PREDICATES=83
    ACTION=84
    DURATIVE_ACTION=85
    PROBLEM=86
    PROBLEM_NAME=87
    PROBLEM_DOMAIN=88
    OBJECTS=89
    INIT=90
    FUNC_HEAD=91
    PRECONDITION=92
    EFFECT=93
    AND_GD=94
    OR_GD=95
    NOT_GD=96
    IMPLY_GD=97
    EXISTS_GD=98
    FORALL_GD=99
    COMPARISON_GD=100
    AND_EFFECT=101
    FORALL_EFFECT=102
    WHEN_EFFECT=103
    ASSIGN_EFFECT=104
    NOT_EFFECT=105
    PRED_HEAD=106
    GOAL=107
    BINARY_OP=108
    UNARY_MINUS=109
    INIT_EQ=110
    INIT_AT=111
    NOT_PRED_INIT=112
    PRED_INST=113
    PROBLEM_CONSTRAINT=114
    PROBLEM_METRIC=115

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class PddlDocContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def domain(self):
            return self.getTypedRuleContext(pddlParser.DomainContext,0)


        def problem(self):
            return self.getTypedRuleContext(pddlParser.ProblemContext,0)


        def getRuleIndex(self):
            return pddlParser.RULE_pddlDoc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPddlDoc" ):
                listener.enterPddlDoc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPddlDoc" ):
                listener.exitPddlDoc(self)




    def pddlDoc(self):

        localctx = pddlParser.PddlDocContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_pddlDoc)
        try:
            self.state = 152
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 150
                self.domain()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 151
                self.problem()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DomainContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def domainName(self):
            return self.getTypedRuleContext(pddlParser.DomainNameContext,0)


        def requireDef(self):
            return self.getTypedRuleContext(pddlParser.RequireDefContext,0)


        def contextDef(self):
            return self.getTypedRuleContext(pddlParser.ContextDefContext,0)


        def typesDef(self):
            return self.getTypedRuleContext(pddlParser.TypesDefContext,0)


        def constantsDef(self):
            return self.getTypedRuleContext(pddlParser.ConstantsDefContext,0)


        def predicatesDef(self):
            return self.getTypedRuleContext(pddlParser.PredicatesDefContext,0)


        def functionsDef(self):
            return self.getTypedRuleContext(pddlParser.FunctionsDefContext,0)


        def constraints(self):
            return self.getTypedRuleContext(pddlParser.ConstraintsContext,0)


        def structureDef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(pddlParser.StructureDefContext)
            else:
                return self.getTypedRuleContext(pddlParser.StructureDefContext,i)


        def getRuleIndex(self):
            return pddlParser.RULE_domain

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDomain" ):
                listener.enterDomain(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDomain" ):
                listener.exitDomain(self)




    def domain(self):

        localctx = pddlParser.DomainContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_domain)
        self._la = 0 # Token type
        try:
            self.state = 218
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,17,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 154
                self.match(pddlParser.T__0)
                self.state = 155
                self.match(pddlParser.T__1)
                self.state = 156
                self.domainName()
                self.state = 158
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1,self._ctx)
                if la_ == 1:
                    self.state = 157
                    self.requireDef()


                self.state = 161
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
                if la_ == 1:
                    self.state = 160
                    self.contextDef()


                self.state = 164
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
                if la_ == 1:
                    self.state = 163
                    self.typesDef()


                self.state = 167
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,4,self._ctx)
                if la_ == 1:
                    self.state = 166
                    self.constantsDef()


                self.state = 170
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
                if la_ == 1:
                    self.state = 169
                    self.predicatesDef()


                self.state = 173
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
                if la_ == 1:
                    self.state = 172
                    self.functionsDef()


                self.state = 176
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
                if la_ == 1:
                    self.state = 175
                    self.constraints()


                self.state = 181
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1:
                    self.state = 178
                    self.structureDef()
                    self.state = 183
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 184
                self.match(pddlParser.T__2)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 186
                self.match(pddlParser.T__0)
                self.state = 187
                self.match(pddlParser.T__1)
                self.state = 188
                self.domainName()
                self.state = 190
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
                if la_ == 1:
                    self.state = 189
                    self.contextDef()


                self.state = 193
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
                if la_ == 1:
                    self.state = 192
                    self.requireDef()


                self.state = 196
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
                if la_ == 1:
                    self.state = 195
                    self.typesDef()


                self.state = 199
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
                if la_ == 1:
                    self.state = 198
                    self.constantsDef()


                self.state = 202
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,13,self._ctx)
                if la_ == 1:
                    self.state = 201
                    self.predicatesDef()


                self.state = 205
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,14,self._ctx)
                if la_ == 1:
                    self.state = 204
                    self.functionsDef()


                self.state = 208
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
                if la_ == 1:
                    self.state = 207
                    self.constraints()


                self.state = 213
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1:
                    self.state = 210
                    self.structureDef()
                    self.state = 215
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 216
                self.match(pddlParser.T__2)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DomainNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(pddlParser.NameContext,0)


        def getRuleIndex(self):
            return pddlParser.RULE_domainName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDomainName" ):
                listener.enterDomainName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDomainName" ):
                listener.exitDomainName(self)




    def domainName(self):

        localctx = pddlParser.DomainNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_domainName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 220
            self.match(pddlParser.T__0)
            self.state = 221
            self.match(pddlParser.T__3)
            self.state = 222
            self.name()
            self.state = 223
            self.match(pddlParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContextDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namespaceBinding(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(pddlParser.NamespaceBindingContext)
            else:
                return self.getTypedRuleContext(pddlParser.NamespaceBindingContext,i)


        def getRuleIndex(self):
            return pddlParser.RULE_contextDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContextDef" ):
                listener.enterContextDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContextDef" ):
                listener.exitContextDef(self)




    def contextDef(self):

        localctx = pddlParser.ContextDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_contextDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 225
            self.match(pddlParser.T__0)
            self.state = 226
            self.match(pddlParser.T__4)
            self.state = 228 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 227
                self.namespaceBinding()
                self.state = 230 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 29)) & ~0x3f) == 0 and ((1 << (_la - 29)) & 2199023255555) != 0)):
                    break

            self.state = 232
            self.match(pddlParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamespaceBindingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(pddlParser.NameContext,0)


        def URI(self):
            return self.getToken(pddlParser.URI, 0)

        def getRuleIndex(self):
            return pddlParser.RULE_namespaceBinding

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamespaceBinding" ):
                listener.enterNamespaceBinding(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamespaceBinding" ):
                listener.exitNamespaceBinding(self)




    def namespaceBinding(self):

        localctx = pddlParser.NamespaceBindingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_namespaceBinding)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 234
            self.name()
            self.state = 235
            self.match(pddlParser.T__5)
            self.state = 236
            self.match(pddlParser.URI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RequireDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REQUIRE_KEY(self, i:int=None):
            if i is None:
                return self.getTokens(pddlParser.REQUIRE_KEY)
            else:
                return self.getToken(pddlParser.REQUIRE_KEY, i)

        def getRuleIndex(self):
            return pddlParser.RULE_requireDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRequireDef" ):
                listener.enterRequireDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRequireDef" ):
                listener.exitRequireDef(self)




    def requireDef(self):

        localctx = pddlParser.RequireDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_requireDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 238
            self.match(pddlParser.T__0)
            self.state = 239
            self.match(pddlParser.T__6)
            self.state = 241 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 240
                self.match(pddlParser.REQUIRE_KEY)
                self.state = 243 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==69):
                    break

            self.state = 245
            self.match(pddlParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypesDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typedNameList(self):
            return self.getTypedRuleContext(pddlParser.TypedNameListContext,0)


        def getRuleIndex(self):
            return pddlParser.RULE_typesDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypesDef" ):
                listener.enterTypesDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypesDef" ):
                listener.exitTypesDef(self)




    def typesDef(self):

        localctx = pddlParser.TypesDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_typesDef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 247
            self.match(pddlParser.T__0)
            self.state = 248
            self.match(pddlParser.T__7)
            self.state = 249
            self.typedNameList()
            self.state = 250
            self.match(pddlParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypedNameListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(pddlParser.NameContext)
            else:
                return self.getTypedRuleContext(pddlParser.NameContext,i)


        def singleTypeNameList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(pddlParser.SingleTypeNameListContext)
            else:
                return self.getTypedRuleContext(pddlParser.SingleTypeNameListContext,i)


        def getRuleIndex(self):
            return pddlParser.RULE_typedNameList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypedNameList" ):
                listener.enterTypedNameList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypedNameList" ):
                listener.exitTypedNameList(self)




    def typedNameList(self):

        localctx = pddlParser.TypedNameListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_typedNameList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 269
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,23,self._ctx)
            if la_ == 1:
                self.state = 255
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 29)) & ~0x3f) == 0 and ((1 << (_la - 29)) & 2199023255555) != 0):
                    self.state = 252
                    self.name()
                    self.state = 257
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 259 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 258
                        self.singleTypeNameList()

                    else:
                        raise NoViableAltException(self)
                    self.state = 261 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,21,self._ctx)

                self.state = 266
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 29)) & ~0x3f) == 0 and ((1 << (_la - 29)) & 2199023255555) != 0):
                    self.state = 263
                    self.name()
                    self.state = 268
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleTypeNameListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.t = None # R_typeContext

        def r_type(self):
            return self.getTypedRuleContext(pddlParser.R_typeContext,0)


        def name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(pddlParser.NameContext)
            else:
                return self.getTypedRuleContext(pddlParser.NameContext,i)


        def getRuleIndex(self):
            return pddlParser.RULE_singleTypeNameList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleTypeNameList" ):
                listener.enterSingleTypeNameList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleTypeNameList" ):
                listener.exitSingleTypeNameList(self)




    def singleTypeNameList(self):

        localctx = pddlParser.SingleTypeNameListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_singleTypeNameList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 272 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 271
                self.name()
                self.state = 274 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 29)) & ~0x3f) == 0 and ((1 << (_la - 29)) & 2199023255555) != 0)):
                    break

            self.state = 276
            self.match(pddlParser.T__5)
            self.state = 277
            localctx.t = self.r_type()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class R_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(pddlParser.PrimTypeContext)
            else:
                return self.getTypedRuleContext(pddlParser.PrimTypeContext,i)


        def getRuleIndex(self):
            return pddlParser.RULE_r_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterR_type" ):
                listener.enterR_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitR_type" ):
                listener.exitR_type(self)




    def r_type(self):

        localctx = pddlParser.R_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_r_type)
        self._la = 0 # Token type
        try:
            self.state = 289
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1]:
                self.enterOuterAlt(localctx, 1)
                self.state = 279
                self.match(pddlParser.T__0)
                self.state = 280
                self.match(pddlParser.T__8)
                self.state = 282 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 281
                    self.primType()
                    self.state = 284 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (((((_la - 29)) & ~0x3f) == 0 and ((1 << (_la - 29)) & 2199023255555) != 0)):
                        break

                self.state = 286
                self.match(pddlParser.T__2)
                pass
            elif token in [29, 30, 70]:
                self.enterOuterAlt(localctx, 2)
                self.state = 288
                self.primType()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(pddlParser.NameContext,0)


        def getRuleIndex(self):
            return pddlParser.RULE_primType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimType" ):
                listener.enterPrimType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimType" ):
                listener.exitPrimType(self)




    def primType(self):

        localctx = pddlParser.PrimTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_primType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 291
            self.name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionsDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionList(self):
            return self.getTypedRuleContext(pddlParser.FunctionListContext,0)


        def getRuleIndex(self):
            return pddlParser.RULE_functionsDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionsDef" ):
                listener.enterFunctionsDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionsDef" ):
                listener.exitFunctionsDef(self)




    def functionsDef(self):

        localctx = pddlParser.FunctionsDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_functionsDef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 293
            self.match(pddlParser.T__0)
            self.state = 294
            self.match(pddlParser.T__9)
            self.state = 295
            self.functionList()
            self.state = 296
            self.match(pddlParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def atomicFunctionSkeleton(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(pddlParser.AtomicFunctionSkeletonContext)
            else:
                return self.getTypedRuleContext(pddlParser.AtomicFunctionSkeletonContext,i)


        def functionType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(pddlParser.FunctionTypeContext)
            else:
                return self.getTypedRuleContext(pddlParser.FunctionTypeContext,i)


        def getRuleIndex(self):
            return pddlParser.RULE_functionList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionList" ):
                listener.enterFunctionList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionList" ):
                listener.exitFunctionList(self)




    def functionList(self):

        localctx = pddlParser.FunctionListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_functionList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 309
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1:
                self.state = 299 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 298
                        self.atomicFunctionSkeleton()

                    else:
                        raise NoViableAltException(self)
                    self.state = 301 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,27,self._ctx)

                self.state = 305
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==6:
                    self.state = 303
                    self.match(pddlParser.T__5)
                    self.state = 304
                    self.functionType()


                self.state = 311
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AtomicFunctionSkeletonContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionSymbol(self):
            return self.getTypedRuleContext(pddlParser.FunctionSymbolContext,0)


        def typedVariableList(self):
            return self.getTypedRuleContext(pddlParser.TypedVariableListContext,0)


        def getRuleIndex(self):
            return pddlParser.RULE_atomicFunctionSkeleton

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtomicFunctionSkeleton" ):
                listener.enterAtomicFunctionSkeleton(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtomicFunctionSkeleton" ):
                listener.exitAtomicFunctionSkeleton(self)




    def atomicFunctionSkeleton(self):

        localctx = pddlParser.AtomicFunctionSkeletonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_atomicFunctionSkeleton)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 312
            self.match(pddlParser.T__0)
            self.state = 313
            self.functionSymbol()
            self.state = 314
            self.typedVariableList()
            self.state = 315
            self.match(pddlParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionSymbolContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(pddlParser.NameContext,0)


        def getRuleIndex(self):
            return pddlParser.RULE_functionSymbol

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionSymbol" ):
                listener.enterFunctionSymbol(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionSymbol" ):
                listener.exitFunctionSymbol(self)




    def functionSymbol(self):

        localctx = pddlParser.FunctionSymbolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_functionSymbol)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 317
            self.name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return pddlParser.RULE_functionType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionType" ):
                listener.enterFunctionType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionType" ):
                listener.exitFunctionType(self)




    def functionType(self):

        localctx = pddlParser.FunctionTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_functionType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 319
            self.match(pddlParser.T__10)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstantsDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typedNameList(self):
            return self.getTypedRuleContext(pddlParser.TypedNameListContext,0)


        def getRuleIndex(self):
            return pddlParser.RULE_constantsDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstantsDef" ):
                listener.enterConstantsDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstantsDef" ):
                listener.exitConstantsDef(self)




    def constantsDef(self):

        localctx = pddlParser.ConstantsDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_constantsDef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 321
            self.match(pddlParser.T__0)
            self.state = 322
            self.match(pddlParser.T__11)
            self.state = 323
            self.typedNameList()
            self.state = 324
            self.match(pddlParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PredicatesDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def atomicFormulaSkeleton(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(pddlParser.AtomicFormulaSkeletonContext)
            else:
                return self.getTypedRuleContext(pddlParser.AtomicFormulaSkeletonContext,i)


        def getRuleIndex(self):
            return pddlParser.RULE_predicatesDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredicatesDef" ):
                listener.enterPredicatesDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredicatesDef" ):
                listener.exitPredicatesDef(self)




    def predicatesDef(self):

        localctx = pddlParser.PredicatesDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_predicatesDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 326
            self.match(pddlParser.T__0)
            self.state = 327
            self.match(pddlParser.T__12)
            self.state = 329 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 328
                self.atomicFormulaSkeleton()
                self.state = 331 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==1):
                    break

            self.state = 333
            self.match(pddlParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AtomicFormulaSkeletonContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def predicate(self):
            return self.getTypedRuleContext(pddlParser.PredicateContext,0)


        def typedVariableList(self):
            return self.getTypedRuleContext(pddlParser.TypedVariableListContext,0)


        def getRuleIndex(self):
            return pddlParser.RULE_atomicFormulaSkeleton

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtomicFormulaSkeleton" ):
                listener.enterAtomicFormulaSkeleton(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtomicFormulaSkeleton" ):
                listener.exitAtomicFormulaSkeleton(self)




    def atomicFormulaSkeleton(self):

        localctx = pddlParser.AtomicFormulaSkeletonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_atomicFormulaSkeleton)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 335
            self.match(pddlParser.T__0)
            self.state = 336
            self.predicate()
            self.state = 337
            self.typedVariableList()
            self.state = 338
            self.match(pddlParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PredicateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(pddlParser.NameContext,0)


        def getRuleIndex(self):
            return pddlParser.RULE_predicate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredicate" ):
                listener.enterPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredicate" ):
                listener.exitPredicate(self)




    def predicate(self):

        localctx = pddlParser.PredicateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_predicate)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 340
            self.name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypedVariableListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VARIABLE(self, i:int=None):
            if i is None:
                return self.getTokens(pddlParser.VARIABLE)
            else:
                return self.getToken(pddlParser.VARIABLE, i)

        def singleTypeVarList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(pddlParser.SingleTypeVarListContext)
            else:
                return self.getTypedRuleContext(pddlParser.SingleTypeVarListContext,i)


        def getRuleIndex(self):
            return pddlParser.RULE_typedVariableList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypedVariableList" ):
                listener.enterTypedVariableList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypedVariableList" ):
                listener.exitTypedVariableList(self)




    def typedVariableList(self):

        localctx = pddlParser.TypedVariableListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_typedVariableList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 359
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,34,self._ctx)
            if la_ == 1:
                self.state = 345
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==72:
                    self.state = 342
                    self.match(pddlParser.VARIABLE)
                    self.state = 347
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 349 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 348
                        self.singleTypeVarList()

                    else:
                        raise NoViableAltException(self)
                    self.state = 351 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,32,self._ctx)

                self.state = 356
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==72:
                    self.state = 353
                    self.match(pddlParser.VARIABLE)
                    self.state = 358
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleTypeVarListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.t = None # R_typeContext

        def r_type(self):
            return self.getTypedRuleContext(pddlParser.R_typeContext,0)


        def VARIABLE(self, i:int=None):
            if i is None:
                return self.getTokens(pddlParser.VARIABLE)
            else:
                return self.getToken(pddlParser.VARIABLE, i)

        def getRuleIndex(self):
            return pddlParser.RULE_singleTypeVarList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleTypeVarList" ):
                listener.enterSingleTypeVarList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleTypeVarList" ):
                listener.exitSingleTypeVarList(self)




    def singleTypeVarList(self):

        localctx = pddlParser.SingleTypeVarListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_singleTypeVarList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 362 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 361
                self.match(pddlParser.VARIABLE)
                self.state = 364 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==72):
                    break

            self.state = 366
            self.match(pddlParser.T__5)
            self.state = 367
            localctx.t = self.r_type()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstraintsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conGD(self):
            return self.getTypedRuleContext(pddlParser.ConGDContext,0)


        def getRuleIndex(self):
            return pddlParser.RULE_constraints

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstraints" ):
                listener.enterConstraints(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstraints" ):
                listener.exitConstraints(self)




    def constraints(self):

        localctx = pddlParser.ConstraintsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_constraints)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 369
            self.match(pddlParser.T__0)
            self.state = 370
            self.match(pddlParser.T__13)
            self.state = 371
            self.conGD()
            self.state = 372
            self.match(pddlParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructureDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def actionDef(self):
            return self.getTypedRuleContext(pddlParser.ActionDefContext,0)


        def durativeActionDef(self):
            return self.getTypedRuleContext(pddlParser.DurativeActionDefContext,0)


        def derivedDef(self):
            return self.getTypedRuleContext(pddlParser.DerivedDefContext,0)


        def getRuleIndex(self):
            return pddlParser.RULE_structureDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructureDef" ):
                listener.enterStructureDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructureDef" ):
                listener.exitStructureDef(self)




    def structureDef(self):

        localctx = pddlParser.StructureDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_structureDef)
        try:
            self.state = 377
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,36,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 374
                self.actionDef()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 375
                self.durativeActionDef()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 376
                self.derivedDef()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ActionDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def actionSymbol(self):
            return self.getTypedRuleContext(pddlParser.ActionSymbolContext,0)


        def typedVariableList(self):
            return self.getTypedRuleContext(pddlParser.TypedVariableListContext,0)


        def actionDefBody(self):
            return self.getTypedRuleContext(pddlParser.ActionDefBodyContext,0)


        def getRuleIndex(self):
            return pddlParser.RULE_actionDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterActionDef" ):
                listener.enterActionDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitActionDef" ):
                listener.exitActionDef(self)




    def actionDef(self):

        localctx = pddlParser.ActionDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_actionDef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 379
            self.match(pddlParser.T__0)
            self.state = 380
            self.match(pddlParser.T__14)
            self.state = 381
            self.actionSymbol()
            self.state = 382
            self.match(pddlParser.T__15)
            self.state = 383
            self.match(pddlParser.T__0)
            self.state = 384
            self.typedVariableList()
            self.state = 385
            self.match(pddlParser.T__2)
            self.state = 386
            self.actionDefBody()
            self.state = 387
            self.match(pddlParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ActionSymbolContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(pddlParser.NameContext,0)


        def getRuleIndex(self):
            return pddlParser.RULE_actionSymbol

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterActionSymbol" ):
                listener.enterActionSymbol(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitActionSymbol" ):
                listener.exitActionSymbol(self)




    def actionSymbol(self):

        localctx = pddlParser.ActionSymbolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_actionSymbol)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 389
            self.name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ActionDefBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def precondition(self):
            return self.getTypedRuleContext(pddlParser.PreconditionContext,0)


        def effect(self):
            return self.getTypedRuleContext(pddlParser.EffectContext,0)


        def getRuleIndex(self):
            return pddlParser.RULE_actionDefBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterActionDefBody" ):
                listener.enterActionDefBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitActionDefBody" ):
                listener.exitActionDefBody(self)




    def actionDefBody(self):

        localctx = pddlParser.ActionDefBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_actionDefBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 397
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==17:
                self.state = 391
                self.match(pddlParser.T__16)
                self.state = 395
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,37,self._ctx)
                if la_ == 1:
                    self.state = 392
                    self.match(pddlParser.T__0)
                    self.state = 393
                    self.match(pddlParser.T__2)
                    pass

                elif la_ == 2:
                    self.state = 394
                    self.precondition()
                    pass




            self.state = 405
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==18:
                self.state = 399
                self.match(pddlParser.T__17)
                self.state = 403
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
                if la_ == 1:
                    self.state = 400
                    self.match(pddlParser.T__0)
                    self.state = 401
                    self.match(pddlParser.T__2)
                    pass

                elif la_ == 2:
                    self.state = 402
                    self.effect()
                    pass




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PreconditionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def goalDesc(self):
            return self.getTypedRuleContext(pddlParser.GoalDescContext,0)


        def getRuleIndex(self):
            return pddlParser.RULE_precondition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrecondition" ):
                listener.enterPrecondition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrecondition" ):
                listener.exitPrecondition(self)




    def precondition(self):

        localctx = pddlParser.PreconditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_precondition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 407
            self.goalDesc()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GoalDescContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def atomicTermFormula(self):
            return self.getTypedRuleContext(pddlParser.AtomicTermFormulaContext,0)


        def goalDesc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(pddlParser.GoalDescContext)
            else:
                return self.getTypedRuleContext(pddlParser.GoalDescContext,i)


        def typedVariableList(self):
            return self.getTypedRuleContext(pddlParser.TypedVariableListContext,0)


        def fComp(self):
            return self.getTypedRuleContext(pddlParser.FCompContext,0)


        def getRuleIndex(self):
            return pddlParser.RULE_goalDesc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGoalDesc" ):
                listener.enterGoalDesc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGoalDesc" ):
                listener.exitGoalDesc(self)




    def goalDesc(self):

        localctx = pddlParser.GoalDescContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_goalDesc)
        self._la = 0 # Token type
        try:
            self.state = 456
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,43,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 409
                self.atomicTermFormula()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 410
                self.match(pddlParser.T__0)
                self.state = 411
                self.match(pddlParser.T__18)
                self.state = 415
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1:
                    self.state = 412
                    self.goalDesc()
                    self.state = 417
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 418
                self.match(pddlParser.T__2)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 419
                self.match(pddlParser.T__0)
                self.state = 420
                self.match(pddlParser.T__19)
                self.state = 424
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1:
                    self.state = 421
                    self.goalDesc()
                    self.state = 426
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 427
                self.match(pddlParser.T__2)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 428
                self.match(pddlParser.T__0)
                self.state = 429
                self.match(pddlParser.T__20)
                self.state = 430
                self.goalDesc()
                self.state = 431
                self.match(pddlParser.T__2)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 433
                self.match(pddlParser.T__0)
                self.state = 434
                self.match(pddlParser.T__21)
                self.state = 435
                self.goalDesc()
                self.state = 436
                self.goalDesc()
                self.state = 437
                self.match(pddlParser.T__2)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 439
                self.match(pddlParser.T__0)
                self.state = 440
                self.match(pddlParser.T__22)
                self.state = 441
                self.match(pddlParser.T__0)
                self.state = 442
                self.typedVariableList()
                self.state = 443
                self.match(pddlParser.T__2)
                self.state = 444
                self.goalDesc()
                self.state = 445
                self.match(pddlParser.T__2)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 447
                self.match(pddlParser.T__0)
                self.state = 448
                self.match(pddlParser.T__23)
                self.state = 449
                self.match(pddlParser.T__0)
                self.state = 450
                self.typedVariableList()
                self.state = 451
                self.match(pddlParser.T__2)
                self.state = 452
                self.goalDesc()
                self.state = 453
                self.match(pddlParser.T__2)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 455
                self.fComp()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FCompContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def binaryComp(self):
            return self.getTypedRuleContext(pddlParser.BinaryCompContext,0)


        def fExp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(pddlParser.FExpContext)
            else:
                return self.getTypedRuleContext(pddlParser.FExpContext,i)


        def getRuleIndex(self):
            return pddlParser.RULE_fComp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFComp" ):
                listener.enterFComp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFComp" ):
                listener.exitFComp(self)




    def fComp(self):

        localctx = pddlParser.FCompContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_fComp)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 458
            self.match(pddlParser.T__0)
            self.state = 459
            self.binaryComp()
            self.state = 460
            self.fExp()
            self.state = 461
            self.fExp()
            self.state = 462
            self.match(pddlParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AtomicTermFormulaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def predicate(self):
            return self.getTypedRuleContext(pddlParser.PredicateContext,0)


        def term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(pddlParser.TermContext)
            else:
                return self.getTypedRuleContext(pddlParser.TermContext,i)


        def getRuleIndex(self):
            return pddlParser.RULE_atomicTermFormula

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtomicTermFormula" ):
                listener.enterAtomicTermFormula(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtomicTermFormula" ):
                listener.exitAtomicTermFormula(self)




    def atomicTermFormula(self):

        localctx = pddlParser.AtomicTermFormulaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_atomicTermFormula)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 464
            self.match(pddlParser.T__0)
            self.state = 465
            self.predicate()
            self.state = 469
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 29)) & ~0x3f) == 0 and ((1 << (_la - 29)) & 10995116277763) != 0):
                self.state = 466
                self.term()
                self.state = 471
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 472
            self.match(pddlParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TermContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(pddlParser.NameContext,0)


        def VARIABLE(self):
            return self.getToken(pddlParser.VARIABLE, 0)

        def getRuleIndex(self):
            return pddlParser.RULE_term

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTerm" ):
                listener.enterTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTerm" ):
                listener.exitTerm(self)




    def term(self):

        localctx = pddlParser.TermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_term)
        try:
            self.state = 476
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [29, 30, 70]:
                self.enterOuterAlt(localctx, 1)
                self.state = 474
                self.name()
                pass
            elif token in [72]:
                self.enterOuterAlt(localctx, 2)
                self.state = 475
                self.match(pddlParser.VARIABLE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DurativeActionDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def actionSymbol(self):
            return self.getTypedRuleContext(pddlParser.ActionSymbolContext,0)


        def typedVariableList(self):
            return self.getTypedRuleContext(pddlParser.TypedVariableListContext,0)


        def daDefBody(self):
            return self.getTypedRuleContext(pddlParser.DaDefBodyContext,0)


        def getRuleIndex(self):
            return pddlParser.RULE_durativeActionDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDurativeActionDef" ):
                listener.enterDurativeActionDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDurativeActionDef" ):
                listener.exitDurativeActionDef(self)




    def durativeActionDef(self):

        localctx = pddlParser.DurativeActionDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_durativeActionDef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 478
            self.match(pddlParser.T__0)
            self.state = 479
            self.match(pddlParser.T__24)
            self.state = 480
            self.actionSymbol()
            self.state = 481
            self.match(pddlParser.T__15)
            self.state = 482
            self.match(pddlParser.T__0)
            self.state = 483
            self.typedVariableList()
            self.state = 484
            self.match(pddlParser.T__2)
            self.state = 485
            self.daDefBody()
            self.state = 486
            self.match(pddlParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DaDefBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def durationConstraint(self):
            return self.getTypedRuleContext(pddlParser.DurationConstraintContext,0)


        def daGD(self):
            return self.getTypedRuleContext(pddlParser.DaGDContext,0)


        def daEffect(self):
            return self.getTypedRuleContext(pddlParser.DaEffectContext,0)


        def getRuleIndex(self):
            return pddlParser.RULE_daDefBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDaDefBody" ):
                listener.enterDaDefBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDaDefBody" ):
                listener.exitDaDefBody(self)




    def daDefBody(self):

        localctx = pddlParser.DaDefBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_daDefBody)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 488
            self.match(pddlParser.T__25)
            self.state = 489
            self.durationConstraint()
            self.state = 490
            self.match(pddlParser.T__26)
            self.state = 494
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,46,self._ctx)
            if la_ == 1:
                self.state = 491
                self.match(pddlParser.T__0)
                self.state = 492
                self.match(pddlParser.T__2)
                pass

            elif la_ == 2:
                self.state = 493
                self.daGD()
                pass


            self.state = 496
            self.match(pddlParser.T__17)
            self.state = 500
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,47,self._ctx)
            if la_ == 1:
                self.state = 497
                self.match(pddlParser.T__0)
                self.state = 498
                self.match(pddlParser.T__2)
                pass

            elif la_ == 2:
                self.state = 499
                self.daEffect()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DaGDContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def prefTimedGD(self):
            return self.getTypedRuleContext(pddlParser.PrefTimedGDContext,0)


        def daGD(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(pddlParser.DaGDContext)
            else:
                return self.getTypedRuleContext(pddlParser.DaGDContext,i)


        def typedVariableList(self):
            return self.getTypedRuleContext(pddlParser.TypedVariableListContext,0)


        def getRuleIndex(self):
            return pddlParser.RULE_daGD

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDaGD" ):
                listener.enterDaGD(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDaGD" ):
                listener.exitDaGD(self)




    def daGD(self):

        localctx = pddlParser.DaGDContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_daGD)
        self._la = 0 # Token type
        try:
            self.state = 520
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,49,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 502
                self.prefTimedGD()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 503
                self.match(pddlParser.T__0)
                self.state = 504
                self.match(pddlParser.T__18)
                self.state = 508
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1:
                    self.state = 505
                    self.daGD()
                    self.state = 510
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 511
                self.match(pddlParser.T__2)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 512
                self.match(pddlParser.T__0)
                self.state = 513
                self.match(pddlParser.T__23)
                self.state = 514
                self.match(pddlParser.T__0)
                self.state = 515
                self.typedVariableList()
                self.state = 516
                self.match(pddlParser.T__2)
                self.state = 517
                self.daGD()
                self.state = 518
                self.match(pddlParser.T__2)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrefTimedGDContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def timedGD(self):
            return self.getTypedRuleContext(pddlParser.TimedGDContext,0)


        def name(self):
            return self.getTypedRuleContext(pddlParser.NameContext,0)


        def getRuleIndex(self):
            return pddlParser.RULE_prefTimedGD

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrefTimedGD" ):
                listener.enterPrefTimedGD(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrefTimedGD" ):
                listener.exitPrefTimedGD(self)




    def prefTimedGD(self):

        localctx = pddlParser.PrefTimedGDContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_prefTimedGD)
        self._la = 0 # Token type
        try:
            self.state = 531
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 522
                self.timedGD()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 523
                self.match(pddlParser.T__0)
                self.state = 524
                self.match(pddlParser.T__27)
                self.state = 526
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 29)) & ~0x3f) == 0 and ((1 << (_la - 29)) & 2199023255555) != 0):
                    self.state = 525
                    self.name()


                self.state = 528
                self.timedGD()
                self.state = 529
                self.match(pddlParser.T__2)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TimedGDContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def timeSpecifier(self):
            return self.getTypedRuleContext(pddlParser.TimeSpecifierContext,0)


        def goalDesc(self):
            return self.getTypedRuleContext(pddlParser.GoalDescContext,0)


        def interval(self):
            return self.getTypedRuleContext(pddlParser.IntervalContext,0)


        def getRuleIndex(self):
            return pddlParser.RULE_timedGD

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTimedGD" ):
                listener.enterTimedGD(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTimedGD" ):
                listener.exitTimedGD(self)




    def timedGD(self):

        localctx = pddlParser.TimedGDContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_timedGD)
        try:
            self.state = 545
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,52,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 533
                self.match(pddlParser.T__0)
                self.state = 534
                self.match(pddlParser.T__28)
                self.state = 535
                self.timeSpecifier()
                self.state = 536
                self.goalDesc()
                self.state = 537
                self.match(pddlParser.T__2)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 539
                self.match(pddlParser.T__0)
                self.state = 540
                self.match(pddlParser.T__29)
                self.state = 541
                self.interval()
                self.state = 542
                self.goalDesc()
                self.state = 543
                self.match(pddlParser.T__2)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TimeSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return pddlParser.RULE_timeSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTimeSpecifier" ):
                listener.enterTimeSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTimeSpecifier" ):
                listener.exitTimeSpecifier(self)




    def timeSpecifier(self):

        localctx = pddlParser.TimeSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_timeSpecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 547
            _la = self._input.LA(1)
            if not(_la==31 or _la==32):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntervalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return pddlParser.RULE_interval

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterval" ):
                listener.enterInterval(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterval" ):
                listener.exitInterval(self)




    def interval(self):

        localctx = pddlParser.IntervalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_interval)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 549
            self.match(pddlParser.T__32)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DerivedDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typedVariableList(self):
            return self.getTypedRuleContext(pddlParser.TypedVariableListContext,0)


        def goalDesc(self):
            return self.getTypedRuleContext(pddlParser.GoalDescContext,0)


        def getRuleIndex(self):
            return pddlParser.RULE_derivedDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDerivedDef" ):
                listener.enterDerivedDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDerivedDef" ):
                listener.exitDerivedDef(self)




    def derivedDef(self):

        localctx = pddlParser.DerivedDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_derivedDef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 551
            self.match(pddlParser.T__0)
            self.state = 552
            self.match(pddlParser.T__33)
            self.state = 553
            self.typedVariableList()
            self.state = 554
            self.goalDesc()
            self.state = 555
            self.match(pddlParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FExpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(pddlParser.NUMBER, 0)

        def binaryOp(self):
            return self.getTypedRuleContext(pddlParser.BinaryOpContext,0)


        def fExp(self):
            return self.getTypedRuleContext(pddlParser.FExpContext,0)


        def fExp2(self):
            return self.getTypedRuleContext(pddlParser.FExp2Context,0)


        def fHead(self):
            return self.getTypedRuleContext(pddlParser.FHeadContext,0)


        def getRuleIndex(self):
            return pddlParser.RULE_fExp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFExp" ):
                listener.enterFExp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFExp" ):
                listener.exitFExp(self)




    def fExp(self):

        localctx = pddlParser.FExpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_fExp)
        try:
            self.state = 570
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,53,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 557
                self.match(pddlParser.NUMBER)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 558
                self.match(pddlParser.T__0)
                self.state = 559
                self.binaryOp()
                self.state = 560
                self.fExp()
                self.state = 561
                self.fExp2()
                self.state = 562
                self.match(pddlParser.T__2)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 564
                self.match(pddlParser.T__0)
                self.state = 565
                self.match(pddlParser.T__5)
                self.state = 566
                self.fExp()
                self.state = 567
                self.match(pddlParser.T__2)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 569
                self.fHead()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FExp2Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fExp(self):
            return self.getTypedRuleContext(pddlParser.FExpContext,0)


        def getRuleIndex(self):
            return pddlParser.RULE_fExp2

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFExp2" ):
                listener.enterFExp2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFExp2" ):
                listener.exitFExp2(self)




    def fExp2(self):

        localctx = pddlParser.FExp2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_fExp2)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 572
            self.fExp()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FHeadContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionSymbol(self):
            return self.getTypedRuleContext(pddlParser.FunctionSymbolContext,0)


        def term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(pddlParser.TermContext)
            else:
                return self.getTypedRuleContext(pddlParser.TermContext,i)


        def getRuleIndex(self):
            return pddlParser.RULE_fHead

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFHead" ):
                listener.enterFHead(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFHead" ):
                listener.exitFHead(self)




    def fHead(self):

        localctx = pddlParser.FHeadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_fHead)
        self._la = 0 # Token type
        try:
            self.state = 585
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1]:
                self.enterOuterAlt(localctx, 1)
                self.state = 574
                self.match(pddlParser.T__0)
                self.state = 575
                self.functionSymbol()
                self.state = 579
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 29)) & ~0x3f) == 0 and ((1 << (_la - 29)) & 10995116277763) != 0):
                    self.state = 576
                    self.term()
                    self.state = 581
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 582
                self.match(pddlParser.T__2)
                pass
            elif token in [29, 30, 70]:
                self.enterOuterAlt(localctx, 2)
                self.state = 584
                self.functionSymbol()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EffectContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def cEffect(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(pddlParser.CEffectContext)
            else:
                return self.getTypedRuleContext(pddlParser.CEffectContext,i)


        def getRuleIndex(self):
            return pddlParser.RULE_effect

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEffect" ):
                listener.enterEffect(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEffect" ):
                listener.exitEffect(self)




    def effect(self):

        localctx = pddlParser.EffectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_effect)
        self._la = 0 # Token type
        try:
            self.state = 597
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 587
                self.match(pddlParser.T__0)
                self.state = 588
                self.match(pddlParser.T__18)
                self.state = 592
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1:
                    self.state = 589
                    self.cEffect()
                    self.state = 594
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 595
                self.match(pddlParser.T__2)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 596
                self.cEffect()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CEffectContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typedVariableList(self):
            return self.getTypedRuleContext(pddlParser.TypedVariableListContext,0)


        def effect(self):
            return self.getTypedRuleContext(pddlParser.EffectContext,0)


        def goalDesc(self):
            return self.getTypedRuleContext(pddlParser.GoalDescContext,0)


        def condEffect(self):
            return self.getTypedRuleContext(pddlParser.CondEffectContext,0)


        def pEffect(self):
            return self.getTypedRuleContext(pddlParser.PEffectContext,0)


        def getRuleIndex(self):
            return pddlParser.RULE_cEffect

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCEffect" ):
                listener.enterCEffect(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCEffect" ):
                listener.exitCEffect(self)




    def cEffect(self):

        localctx = pddlParser.CEffectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_cEffect)
        try:
            self.state = 614
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,58,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 599
                self.match(pddlParser.T__0)
                self.state = 600
                self.match(pddlParser.T__23)
                self.state = 601
                self.match(pddlParser.T__0)
                self.state = 602
                self.typedVariableList()
                self.state = 603
                self.match(pddlParser.T__2)
                self.state = 604
                self.effect()
                self.state = 605
                self.match(pddlParser.T__2)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 607
                self.match(pddlParser.T__0)
                self.state = 608
                self.match(pddlParser.T__34)
                self.state = 609
                self.goalDesc()
                self.state = 610
                self.condEffect()
                self.state = 611
                self.match(pddlParser.T__2)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 613
                self.pEffect()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PEffectContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignOp(self):
            return self.getTypedRuleContext(pddlParser.AssignOpContext,0)


        def fHead(self):
            return self.getTypedRuleContext(pddlParser.FHeadContext,0)


        def fExp(self):
            return self.getTypedRuleContext(pddlParser.FExpContext,0)


        def atomicTermFormula(self):
            return self.getTypedRuleContext(pddlParser.AtomicTermFormulaContext,0)


        def getRuleIndex(self):
            return pddlParser.RULE_pEffect

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPEffect" ):
                listener.enterPEffect(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPEffect" ):
                listener.exitPEffect(self)




    def pEffect(self):

        localctx = pddlParser.PEffectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_pEffect)
        try:
            self.state = 628
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 616
                self.match(pddlParser.T__0)
                self.state = 617
                self.assignOp()
                self.state = 618
                self.fHead()
                self.state = 619
                self.fExp()
                self.state = 620
                self.match(pddlParser.T__2)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 622
                self.match(pddlParser.T__0)
                self.state = 623
                self.match(pddlParser.T__20)
                self.state = 624
                self.atomicTermFormula()
                self.state = 625
                self.match(pddlParser.T__2)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 627
                self.atomicTermFormula()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CondEffectContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pEffect(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(pddlParser.PEffectContext)
            else:
                return self.getTypedRuleContext(pddlParser.PEffectContext,i)


        def getRuleIndex(self):
            return pddlParser.RULE_condEffect

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCondEffect" ):
                listener.enterCondEffect(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCondEffect" ):
                listener.exitCondEffect(self)




    def condEffect(self):

        localctx = pddlParser.CondEffectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_condEffect)
        self._la = 0 # Token type
        try:
            self.state = 640
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,61,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 630
                self.match(pddlParser.T__0)
                self.state = 631
                self.match(pddlParser.T__18)
                self.state = 635
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1:
                    self.state = 632
                    self.pEffect()
                    self.state = 637
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 638
                self.match(pddlParser.T__2)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 639
                self.pEffect()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BinaryOpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return pddlParser.RULE_binaryOp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinaryOp" ):
                listener.enterBinaryOp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinaryOp" ):
                listener.exitBinaryOp(self)




    def binaryOp(self):

        localctx = pddlParser.BinaryOpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_binaryOp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 642
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 481036337216) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BinaryCompContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return pddlParser.RULE_binaryComp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinaryComp" ):
                listener.enterBinaryComp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinaryComp" ):
                listener.exitBinaryComp(self)




    def binaryComp(self):

        localctx = pddlParser.BinaryCompContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_binaryComp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 644
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 17042430230528) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignOpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return pddlParser.RULE_assignOp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignOp" ):
                listener.enterAssignOp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignOp" ):
                listener.exitAssignOp(self)




    def assignOp(self):

        localctx = pddlParser.AssignOpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_assignOp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 646
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 545357767376896) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DurationConstraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleDurationConstraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(pddlParser.SimpleDurationConstraintContext)
            else:
                return self.getTypedRuleContext(pddlParser.SimpleDurationConstraintContext,i)


        def getRuleIndex(self):
            return pddlParser.RULE_durationConstraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDurationConstraint" ):
                listener.enterDurationConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDurationConstraint" ):
                listener.exitDurationConstraint(self)




    def durationConstraint(self):

        localctx = pddlParser.DurationConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_durationConstraint)
        self._la = 0 # Token type
        try:
            self.state = 660
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,63,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 648
                self.match(pddlParser.T__0)
                self.state = 649
                self.match(pddlParser.T__18)
                self.state = 651 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 650
                    self.simpleDurationConstraint()
                    self.state = 653 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==1):
                        break

                self.state = 655
                self.match(pddlParser.T__2)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 657
                self.match(pddlParser.T__0)
                self.state = 658
                self.match(pddlParser.T__2)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 659
                self.simpleDurationConstraint()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleDurationConstraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def durOp(self):
            return self.getTypedRuleContext(pddlParser.DurOpContext,0)


        def durValue(self):
            return self.getTypedRuleContext(pddlParser.DurValueContext,0)


        def timeSpecifier(self):
            return self.getTypedRuleContext(pddlParser.TimeSpecifierContext,0)


        def simpleDurationConstraint(self):
            return self.getTypedRuleContext(pddlParser.SimpleDurationConstraintContext,0)


        def getRuleIndex(self):
            return pddlParser.RULE_simpleDurationConstraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleDurationConstraint" ):
                listener.enterSimpleDurationConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleDurationConstraint" ):
                listener.exitSimpleDurationConstraint(self)




    def simpleDurationConstraint(self):

        localctx = pddlParser.SimpleDurationConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_simpleDurationConstraint)
        try:
            self.state = 674
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,64,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 662
                self.match(pddlParser.T__0)
                self.state = 663
                self.durOp()
                self.state = 664
                self.match(pddlParser.T__48)
                self.state = 665
                self.durValue()
                self.state = 666
                self.match(pddlParser.T__2)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 668
                self.match(pddlParser.T__0)
                self.state = 669
                self.match(pddlParser.T__28)
                self.state = 670
                self.timeSpecifier()
                self.state = 671
                self.simpleDurationConstraint()
                self.state = 672
                self.match(pddlParser.T__2)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DurOpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return pddlParser.RULE_durOp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDurOp" ):
                listener.enterDurOp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDurOp" ):
                listener.exitDurOp(self)




    def durOp(self):

        localctx = pddlParser.DurOpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_durOp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 676
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 15393162788864) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DurValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(pddlParser.NUMBER, 0)

        def fExp(self):
            return self.getTypedRuleContext(pddlParser.FExpContext,0)


        def getRuleIndex(self):
            return pddlParser.RULE_durValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDurValue" ):
                listener.enterDurValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDurValue" ):
                listener.exitDurValue(self)




    def durValue(self):

        localctx = pddlParser.DurValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_durValue)
        try:
            self.state = 680
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,65,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 678
                self.match(pddlParser.NUMBER)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 679
                self.fExp()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DaEffectContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def daEffect(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(pddlParser.DaEffectContext)
            else:
                return self.getTypedRuleContext(pddlParser.DaEffectContext,i)


        def timedEffect(self):
            return self.getTypedRuleContext(pddlParser.TimedEffectContext,0)


        def typedVariableList(self):
            return self.getTypedRuleContext(pddlParser.TypedVariableListContext,0)


        def daGD(self):
            return self.getTypedRuleContext(pddlParser.DaGDContext,0)


        def assignOp(self):
            return self.getTypedRuleContext(pddlParser.AssignOpContext,0)


        def fHead(self):
            return self.getTypedRuleContext(pddlParser.FHeadContext,0)


        def fExpDA(self):
            return self.getTypedRuleContext(pddlParser.FExpDAContext,0)


        def getRuleIndex(self):
            return pddlParser.RULE_daEffect

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDaEffect" ):
                listener.enterDaEffect(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDaEffect" ):
                listener.exitDaEffect(self)




    def daEffect(self):

        localctx = pddlParser.DaEffectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_daEffect)
        self._la = 0 # Token type
        try:
            self.state = 712
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,67,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 682
                self.match(pddlParser.T__0)
                self.state = 683
                self.match(pddlParser.T__18)
                self.state = 687
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1:
                    self.state = 684
                    self.daEffect()
                    self.state = 689
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 690
                self.match(pddlParser.T__2)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 691
                self.timedEffect()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 692
                self.match(pddlParser.T__0)
                self.state = 693
                self.match(pddlParser.T__23)
                self.state = 694
                self.match(pddlParser.T__0)
                self.state = 695
                self.typedVariableList()
                self.state = 696
                self.match(pddlParser.T__2)
                self.state = 697
                self.daEffect()
                self.state = 698
                self.match(pddlParser.T__2)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 700
                self.match(pddlParser.T__0)
                self.state = 701
                self.match(pddlParser.T__34)
                self.state = 702
                self.daGD()
                self.state = 703
                self.timedEffect()
                self.state = 704
                self.match(pddlParser.T__2)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 706
                self.match(pddlParser.T__0)
                self.state = 707
                self.assignOp()
                self.state = 708
                self.fHead()
                self.state = 709
                self.fExpDA()
                self.state = 710
                self.match(pddlParser.T__2)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TimedEffectContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def timeSpecifier(self):
            return self.getTypedRuleContext(pddlParser.TimeSpecifierContext,0)


        def cEffect(self):
            return self.getTypedRuleContext(pddlParser.CEffectContext,0)


        def fAssignDA(self):
            return self.getTypedRuleContext(pddlParser.FAssignDAContext,0)


        def assignOpT(self):
            return self.getTypedRuleContext(pddlParser.AssignOpTContext,0)


        def fHead(self):
            return self.getTypedRuleContext(pddlParser.FHeadContext,0)


        def fExp(self):
            return self.getTypedRuleContext(pddlParser.FExpContext,0)


        def getRuleIndex(self):
            return pddlParser.RULE_timedEffect

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTimedEffect" ):
                listener.enterTimedEffect(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTimedEffect" ):
                listener.exitTimedEffect(self)




    def timedEffect(self):

        localctx = pddlParser.TimedEffectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_timedEffect)
        try:
            self.state = 732
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,68,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 714
                self.match(pddlParser.T__0)
                self.state = 715
                self.match(pddlParser.T__28)
                self.state = 716
                self.timeSpecifier()
                self.state = 717
                self.cEffect()
                self.state = 718
                self.match(pddlParser.T__2)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 720
                self.match(pddlParser.T__0)
                self.state = 721
                self.match(pddlParser.T__28)
                self.state = 722
                self.timeSpecifier()
                self.state = 723
                self.fAssignDA()
                self.state = 724
                self.match(pddlParser.T__2)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 726
                self.match(pddlParser.T__0)
                self.state = 727
                self.assignOpT()
                self.state = 728
                self.fHead()
                self.state = 729
                self.fExp()
                self.state = 730
                self.match(pddlParser.T__2)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FAssignDAContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignOp(self):
            return self.getTypedRuleContext(pddlParser.AssignOpContext,0)


        def fHead(self):
            return self.getTypedRuleContext(pddlParser.FHeadContext,0)


        def fExpDA(self):
            return self.getTypedRuleContext(pddlParser.FExpDAContext,0)


        def getRuleIndex(self):
            return pddlParser.RULE_fAssignDA

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFAssignDA" ):
                listener.enterFAssignDA(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFAssignDA" ):
                listener.exitFAssignDA(self)




    def fAssignDA(self):

        localctx = pddlParser.FAssignDAContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_fAssignDA)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 734
            self.match(pddlParser.T__0)
            self.state = 735
            self.assignOp()
            self.state = 736
            self.fHead()
            self.state = 737
            self.fExpDA()
            self.state = 738
            self.match(pddlParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FExpDAContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def binaryOp(self):
            return self.getTypedRuleContext(pddlParser.BinaryOpContext,0)


        def fExpDA(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(pddlParser.FExpDAContext)
            else:
                return self.getTypedRuleContext(pddlParser.FExpDAContext,i)


        def fExp(self):
            return self.getTypedRuleContext(pddlParser.FExpContext,0)


        def getRuleIndex(self):
            return pddlParser.RULE_fExpDA

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFExpDA" ):
                listener.enterFExpDA(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFExpDA" ):
                listener.exitFExpDA(self)




    def fExpDA(self):

        localctx = pddlParser.FExpDAContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_fExpDA)
        try:
            self.state = 753
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 740
                self.match(pddlParser.T__0)
                self.state = 747
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,69,self._ctx)
                if la_ == 1:
                    self.state = 741
                    self.binaryOp()
                    self.state = 742
                    self.fExpDA()
                    self.state = 743
                    self.fExpDA()
                    pass

                elif la_ == 2:
                    self.state = 745
                    self.match(pddlParser.T__5)
                    self.state = 746
                    self.fExpDA()
                    pass


                self.state = 749
                self.match(pddlParser.T__2)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 751
                self.match(pddlParser.T__48)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 752
                self.fExp()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignOpTContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return pddlParser.RULE_assignOpT

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignOpT" ):
                listener.enterAssignOpT(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignOpT" ):
                listener.exitAssignOpT(self)




    def assignOpT(self):

        localctx = pddlParser.AssignOpTContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_assignOpT)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 755
            _la = self._input.LA(1)
            if not(_la==47 or _la==48):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProblemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def problemDecl(self):
            return self.getTypedRuleContext(pddlParser.ProblemDeclContext,0)


        def problemDomain(self):
            return self.getTypedRuleContext(pddlParser.ProblemDomainContext,0)


        def init(self):
            return self.getTypedRuleContext(pddlParser.InitContext,0)


        def goal(self):
            return self.getTypedRuleContext(pddlParser.GoalContext,0)


        def requireDef(self):
            return self.getTypedRuleContext(pddlParser.RequireDefContext,0)


        def contextDef(self):
            return self.getTypedRuleContext(pddlParser.ContextDefContext,0)


        def objectDecl(self):
            return self.getTypedRuleContext(pddlParser.ObjectDeclContext,0)


        def probConstraints(self):
            return self.getTypedRuleContext(pddlParser.ProbConstraintsContext,0)


        def metricSpec(self):
            return self.getTypedRuleContext(pddlParser.MetricSpecContext,0)


        def getRuleIndex(self):
            return pddlParser.RULE_problem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProblem" ):
                listener.enterProblem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProblem" ):
                listener.exitProblem(self)




    def problem(self):

        localctx = pddlParser.ProblemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_problem)
        self._la = 0 # Token type
        try:
            self.state = 803
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,81,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 757
                self.match(pddlParser.T__0)
                self.state = 758
                self.match(pddlParser.T__1)
                self.state = 759
                self.problemDecl()
                self.state = 760
                self.problemDomain()
                self.state = 762
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,71,self._ctx)
                if la_ == 1:
                    self.state = 761
                    self.requireDef()


                self.state = 765
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,72,self._ctx)
                if la_ == 1:
                    self.state = 764
                    self.contextDef()


                self.state = 768
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,73,self._ctx)
                if la_ == 1:
                    self.state = 767
                    self.objectDecl()


                self.state = 770
                self.init()
                self.state = 771
                self.goal()
                self.state = 773
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,74,self._ctx)
                if la_ == 1:
                    self.state = 772
                    self.probConstraints()


                self.state = 776
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1:
                    self.state = 775
                    self.metricSpec()


                self.state = 778
                self.match(pddlParser.T__2)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 780
                self.match(pddlParser.T__0)
                self.state = 781
                self.match(pddlParser.T__1)
                self.state = 782
                self.problemDecl()
                self.state = 784
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,76,self._ctx)
                if la_ == 1:
                    self.state = 783
                    self.contextDef()


                self.state = 786
                self.problemDomain()
                self.state = 788
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,77,self._ctx)
                if la_ == 1:
                    self.state = 787
                    self.requireDef()


                self.state = 791
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,78,self._ctx)
                if la_ == 1:
                    self.state = 790
                    self.objectDecl()


                self.state = 793
                self.init()
                self.state = 794
                self.goal()
                self.state = 796
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,79,self._ctx)
                if la_ == 1:
                    self.state = 795
                    self.probConstraints()


                self.state = 799
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1:
                    self.state = 798
                    self.metricSpec()


                self.state = 801
                self.match(pddlParser.T__2)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProblemDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(pddlParser.NameContext,0)


        def getRuleIndex(self):
            return pddlParser.RULE_problemDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProblemDecl" ):
                listener.enterProblemDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProblemDecl" ):
                listener.exitProblemDecl(self)




    def problemDecl(self):

        localctx = pddlParser.ProblemDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_problemDecl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 805
            self.match(pddlParser.T__0)
            self.state = 806
            self.match(pddlParser.T__49)
            self.state = 807
            self.name()
            self.state = 808
            self.match(pddlParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProblemDomainContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(pddlParser.NameContext,0)


        def getRuleIndex(self):
            return pddlParser.RULE_problemDomain

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProblemDomain" ):
                listener.enterProblemDomain(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProblemDomain" ):
                listener.exitProblemDomain(self)




    def problemDomain(self):

        localctx = pddlParser.ProblemDomainContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_problemDomain)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 810
            self.match(pddlParser.T__0)
            self.state = 811
            self.match(pddlParser.T__50)
            self.state = 812
            self.name()
            self.state = 813
            self.match(pddlParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ObjectDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typedNameList(self):
            return self.getTypedRuleContext(pddlParser.TypedNameListContext,0)


        def getRuleIndex(self):
            return pddlParser.RULE_objectDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObjectDecl" ):
                listener.enterObjectDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObjectDecl" ):
                listener.exitObjectDecl(self)




    def objectDecl(self):

        localctx = pddlParser.ObjectDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_objectDecl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 815
            self.match(pddlParser.T__0)
            self.state = 816
            self.match(pddlParser.T__51)
            self.state = 817
            self.typedNameList()
            self.state = 818
            self.match(pddlParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def initEl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(pddlParser.InitElContext)
            else:
                return self.getTypedRuleContext(pddlParser.InitElContext,i)


        def getRuleIndex(self):
            return pddlParser.RULE_init

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInit" ):
                listener.enterInit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInit" ):
                listener.exitInit(self)




    def init(self):

        localctx = pddlParser.InitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_init)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 820
            self.match(pddlParser.T__0)
            self.state = 821
            self.match(pddlParser.T__52)
            self.state = 825
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1:
                self.state = 822
                self.initEl()
                self.state = 827
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 828
            self.match(pddlParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitElContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nameLiteral(self):
            return self.getTypedRuleContext(pddlParser.NameLiteralContext,0)


        def fHead(self):
            return self.getTypedRuleContext(pddlParser.FHeadContext,0)


        def NUMBER(self):
            return self.getToken(pddlParser.NUMBER, 0)

        def getRuleIndex(self):
            return pddlParser.RULE_initEl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitEl" ):
                listener.enterInitEl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitEl" ):
                listener.exitInitEl(self)




    def initEl(self):

        localctx = pddlParser.InitElContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_initEl)
        try:
            self.state = 843
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,83,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 830
                self.nameLiteral()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 831
                self.match(pddlParser.T__0)
                self.state = 832
                self.match(pddlParser.T__40)
                self.state = 833
                self.fHead()
                self.state = 834
                self.match(pddlParser.NUMBER)
                self.state = 835
                self.match(pddlParser.T__2)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 837
                self.match(pddlParser.T__0)
                self.state = 838
                self.match(pddlParser.T__28)
                self.state = 839
                self.match(pddlParser.NUMBER)
                self.state = 840
                self.nameLiteral()
                self.state = 841
                self.match(pddlParser.T__2)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NameLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def atomicNameFormula(self):
            return self.getTypedRuleContext(pddlParser.AtomicNameFormulaContext,0)


        def getRuleIndex(self):
            return pddlParser.RULE_nameLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNameLiteral" ):
                listener.enterNameLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNameLiteral" ):
                listener.exitNameLiteral(self)




    def nameLiteral(self):

        localctx = pddlParser.NameLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_nameLiteral)
        try:
            self.state = 851
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,84,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 845
                self.atomicNameFormula()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 846
                self.match(pddlParser.T__0)
                self.state = 847
                self.match(pddlParser.T__20)
                self.state = 848
                self.atomicNameFormula()
                self.state = 849
                self.match(pddlParser.T__2)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AtomicNameFormulaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def predicate(self):
            return self.getTypedRuleContext(pddlParser.PredicateContext,0)


        def name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(pddlParser.NameContext)
            else:
                return self.getTypedRuleContext(pddlParser.NameContext,i)


        def getRuleIndex(self):
            return pddlParser.RULE_atomicNameFormula

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtomicNameFormula" ):
                listener.enterAtomicNameFormula(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtomicNameFormula" ):
                listener.exitAtomicNameFormula(self)




    def atomicNameFormula(self):

        localctx = pddlParser.AtomicNameFormulaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_atomicNameFormula)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 853
            self.match(pddlParser.T__0)
            self.state = 854
            self.predicate()
            self.state = 858
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 29)) & ~0x3f) == 0 and ((1 << (_la - 29)) & 2199023255555) != 0):
                self.state = 855
                self.name()
                self.state = 860
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 861
            self.match(pddlParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GoalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def goalDesc(self):
            return self.getTypedRuleContext(pddlParser.GoalDescContext,0)


        def getRuleIndex(self):
            return pddlParser.RULE_goal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGoal" ):
                listener.enterGoal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGoal" ):
                listener.exitGoal(self)




    def goal(self):

        localctx = pddlParser.GoalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_goal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 863
            self.match(pddlParser.T__0)
            self.state = 864
            self.match(pddlParser.T__53)
            self.state = 865
            self.goalDesc()
            self.state = 866
            self.match(pddlParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProbConstraintsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def prefConGD(self):
            return self.getTypedRuleContext(pddlParser.PrefConGDContext,0)


        def getRuleIndex(self):
            return pddlParser.RULE_probConstraints

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProbConstraints" ):
                listener.enterProbConstraints(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProbConstraints" ):
                listener.exitProbConstraints(self)




    def probConstraints(self):

        localctx = pddlParser.ProbConstraintsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_probConstraints)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 868
            self.match(pddlParser.T__0)
            self.state = 869
            self.match(pddlParser.T__13)
            self.state = 870
            self.prefConGD()
            self.state = 871
            self.match(pddlParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrefConGDContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def prefConGD(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(pddlParser.PrefConGDContext)
            else:
                return self.getTypedRuleContext(pddlParser.PrefConGDContext,i)


        def typedVariableList(self):
            return self.getTypedRuleContext(pddlParser.TypedVariableListContext,0)


        def conGD(self):
            return self.getTypedRuleContext(pddlParser.ConGDContext,0)


        def name(self):
            return self.getTypedRuleContext(pddlParser.NameContext,0)


        def getRuleIndex(self):
            return pddlParser.RULE_prefConGD

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrefConGD" ):
                listener.enterPrefConGD(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrefConGD" ):
                listener.exitPrefConGD(self)




    def prefConGD(self):

        localctx = pddlParser.PrefConGDContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_prefConGD)
        self._la = 0 # Token type
        try:
            self.state = 899
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,88,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 873
                self.match(pddlParser.T__0)
                self.state = 874
                self.match(pddlParser.T__18)
                self.state = 878
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1:
                    self.state = 875
                    self.prefConGD()
                    self.state = 880
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 881
                self.match(pddlParser.T__2)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 882
                self.match(pddlParser.T__0)
                self.state = 883
                self.match(pddlParser.T__23)
                self.state = 884
                self.match(pddlParser.T__0)
                self.state = 885
                self.typedVariableList()
                self.state = 886
                self.match(pddlParser.T__2)
                self.state = 887
                self.prefConGD()
                self.state = 888
                self.match(pddlParser.T__2)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 890
                self.match(pddlParser.T__0)
                self.state = 891
                self.match(pddlParser.T__27)
                self.state = 893
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 29)) & ~0x3f) == 0 and ((1 << (_la - 29)) & 2199023255555) != 0):
                    self.state = 892
                    self.name()


                self.state = 895
                self.conGD()
                self.state = 896
                self.match(pddlParser.T__2)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 898
                self.conGD()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MetricSpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def optimization(self):
            return self.getTypedRuleContext(pddlParser.OptimizationContext,0)


        def metricFExp(self):
            return self.getTypedRuleContext(pddlParser.MetricFExpContext,0)


        def getRuleIndex(self):
            return pddlParser.RULE_metricSpec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMetricSpec" ):
                listener.enterMetricSpec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMetricSpec" ):
                listener.exitMetricSpec(self)




    def metricSpec(self):

        localctx = pddlParser.MetricSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_metricSpec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 901
            self.match(pddlParser.T__0)
            self.state = 902
            self.match(pddlParser.T__54)
            self.state = 903
            self.optimization()
            self.state = 904
            self.metricFExp()
            self.state = 905
            self.match(pddlParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptimizationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return pddlParser.RULE_optimization

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptimization" ):
                listener.enterOptimization(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptimization" ):
                listener.exitOptimization(self)




    def optimization(self):

        localctx = pddlParser.OptimizationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_optimization)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 907
            _la = self._input.LA(1)
            if not(_la==56 or _la==57):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MetricFExpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def binaryOp(self):
            return self.getTypedRuleContext(pddlParser.BinaryOpContext,0)


        def metricFExp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(pddlParser.MetricFExpContext)
            else:
                return self.getTypedRuleContext(pddlParser.MetricFExpContext,i)


        def NUMBER(self):
            return self.getToken(pddlParser.NUMBER, 0)

        def functionSymbol(self):
            return self.getTypedRuleContext(pddlParser.FunctionSymbolContext,0)


        def name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(pddlParser.NameContext)
            else:
                return self.getTypedRuleContext(pddlParser.NameContext,i)


        def getRuleIndex(self):
            return pddlParser.RULE_metricFExp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMetricFExp" ):
                listener.enterMetricFExp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMetricFExp" ):
                listener.exitMetricFExp(self)




    def metricFExp(self):

        localctx = pddlParser.MetricFExpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_metricFExp)
        self._la = 0 # Token type
        try:
            self.state = 948
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,91,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 909
                self.match(pddlParser.T__0)
                self.state = 910
                self.binaryOp()
                self.state = 911
                self.metricFExp()
                self.state = 912
                self.metricFExp()
                self.state = 913
                self.match(pddlParser.T__2)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 915
                self.match(pddlParser.T__0)
                self.state = 916
                _la = self._input.LA(1)
                if not(_la==36 or _la==38):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 917
                self.metricFExp()
                self.state = 919 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 918
                    self.metricFExp()
                    self.state = 921 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 288230377762324482) != 0) or _la==70 or _la==73):
                        break

                self.state = 923
                self.match(pddlParser.T__2)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 925
                self.match(pddlParser.T__0)
                self.state = 926
                self.match(pddlParser.T__5)
                self.state = 927
                self.metricFExp()
                self.state = 928
                self.match(pddlParser.T__2)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 930
                self.match(pddlParser.NUMBER)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 931
                self.match(pddlParser.T__0)
                self.state = 932
                self.functionSymbol()
                self.state = 936
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 29)) & ~0x3f) == 0 and ((1 << (_la - 29)) & 2199023255555) != 0):
                    self.state = 933
                    self.name()
                    self.state = 938
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 939
                self.match(pddlParser.T__2)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 941
                self.functionSymbol()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 942
                self.match(pddlParser.T__57)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 943
                self.match(pddlParser.T__0)
                self.state = 944
                self.match(pddlParser.T__58)
                self.state = 945
                self.name()
                self.state = 946
                self.match(pddlParser.T__2)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConGDContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conGD(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(pddlParser.ConGDContext)
            else:
                return self.getTypedRuleContext(pddlParser.ConGDContext,i)


        def typedVariableList(self):
            return self.getTypedRuleContext(pddlParser.TypedVariableListContext,0)


        def goalDesc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(pddlParser.GoalDescContext)
            else:
                return self.getTypedRuleContext(pddlParser.GoalDescContext,i)


        def NUMBER(self, i:int=None):
            if i is None:
                return self.getTokens(pddlParser.NUMBER)
            else:
                return self.getToken(pddlParser.NUMBER, i)

        def getRuleIndex(self):
            return pddlParser.RULE_conGD

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConGD" ):
                listener.enterConGD(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConGD" ):
                listener.exitConGD(self)




    def conGD(self):

        localctx = pddlParser.ConGDContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_conGD)
        self._la = 0 # Token type
        try:
            self.state = 1026
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,93,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 950
                self.match(pddlParser.T__0)
                self.state = 951
                self.match(pddlParser.T__18)
                self.state = 955
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1:
                    self.state = 952
                    self.conGD()
                    self.state = 957
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 958
                self.match(pddlParser.T__2)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 959
                self.match(pddlParser.T__0)
                self.state = 960
                self.match(pddlParser.T__23)
                self.state = 961
                self.match(pddlParser.T__0)
                self.state = 962
                self.typedVariableList()
                self.state = 963
                self.match(pddlParser.T__2)
                self.state = 964
                self.conGD()
                self.state = 965
                self.match(pddlParser.T__2)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 967
                self.match(pddlParser.T__0)
                self.state = 968
                self.match(pddlParser.T__28)
                self.state = 969
                self.match(pddlParser.T__31)
                self.state = 970
                self.goalDesc()
                self.state = 971
                self.match(pddlParser.T__2)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 973
                self.match(pddlParser.T__0)
                self.state = 974
                self.match(pddlParser.T__59)
                self.state = 975
                self.goalDesc()
                self.state = 976
                self.match(pddlParser.T__2)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 978
                self.match(pddlParser.T__0)
                self.state = 979
                self.match(pddlParser.T__60)
                self.state = 980
                self.goalDesc()
                self.state = 981
                self.match(pddlParser.T__2)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 983
                self.match(pddlParser.T__0)
                self.state = 984
                self.match(pddlParser.T__61)
                self.state = 985
                self.match(pddlParser.NUMBER)
                self.state = 986
                self.goalDesc()
                self.state = 987
                self.match(pddlParser.T__2)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 989
                self.match(pddlParser.T__0)
                self.state = 990
                self.match(pddlParser.T__62)
                self.state = 991
                self.goalDesc()
                self.state = 992
                self.match(pddlParser.T__2)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 994
                self.match(pddlParser.T__0)
                self.state = 995
                self.match(pddlParser.T__63)
                self.state = 996
                self.goalDesc()
                self.state = 997
                self.goalDesc()
                self.state = 998
                self.match(pddlParser.T__2)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1000
                self.match(pddlParser.T__0)
                self.state = 1001
                self.match(pddlParser.T__64)
                self.state = 1002
                self.goalDesc()
                self.state = 1003
                self.goalDesc()
                self.state = 1004
                self.match(pddlParser.T__2)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1006
                self.match(pddlParser.T__0)
                self.state = 1007
                self.match(pddlParser.T__65)
                self.state = 1008
                self.match(pddlParser.NUMBER)
                self.state = 1009
                self.goalDesc()
                self.state = 1010
                self.goalDesc()
                self.state = 1011
                self.match(pddlParser.T__2)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1013
                self.match(pddlParser.T__0)
                self.state = 1014
                self.match(pddlParser.T__66)
                self.state = 1015
                self.match(pddlParser.NUMBER)
                self.state = 1016
                self.match(pddlParser.NUMBER)
                self.state = 1017
                self.goalDesc()
                self.state = 1018
                self.match(pddlParser.T__2)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1020
                self.match(pddlParser.T__0)
                self.state = 1021
                self.match(pddlParser.T__67)
                self.state = 1022
                self.match(pddlParser.NUMBER)
                self.state = 1023
                self.goalDesc()
                self.state = 1024
                self.match(pddlParser.T__2)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(pddlParser.NAME, 0)

        def getRuleIndex(self):
            return pddlParser.RULE_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterName" ):
                listener.enterName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitName" ):
                listener.exitName(self)




    def name(self):

        localctx = pddlParser.NameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1028
            _la = self._input.LA(1)
            if not(((((_la - 29)) & ~0x3f) == 0 and ((1 << (_la - 29)) & 2199023255555) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx






# coding: utf-8

"""
    

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401

from typing import Optional

from pydantic import BaseModel, Field, StrictStr, validator


class UpdateWorkflowTaskRequest(BaseModel):
    """
    UpdateWorkflowTaskRequest
    """

    workflow_run_id: StrictStr = Field(...)
    action_name: StrictStr = Field(...)
    action_type: StrictStr = Field(...)
    status: StrictStr = Field(...)
    log_location: StrictStr = Field(...)
    error_msg: Optional[StrictStr] = None
    __properties = [
        "workflow_run_id",
        "action_name",
        "action_type",
        "status",
        "log_location",
        "error_msg",
    ]

    @validator("status")
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in (
            "RUN_STATUS_UNKNOWN",
            "RUN_STATUS_CREATED",
            "RUN_STATUS_PENDING",
            "RUN_STATUS_ACTIVE",
            "RUN_STATUS_ERROR",
            "RUN_STATUS_LOST",
            "RUN_STATUS_COMPLETED",
            "RUN_STATUS_CANCELLING",
            "RUN_STATUS_CANCELLED",
        ):
            raise ValueError(
                "must be one of enum values ('RUN_STATUS_UNKNOWN', 'RUN_STATUS_CREATED', 'RUN_STATUS_PENDING', 'RUN_STATUS_ACTIVE', 'RUN_STATUS_ERROR', 'RUN_STATUS_LOST', 'RUN_STATUS_COMPLETED', 'RUN_STATUS_CANCELLING', 'RUN_STATUS_CANCELLED')"
            )
        return value

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> UpdateWorkflowTaskRequest:
        """Create an instance of UpdateWorkflowTaskRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> UpdateWorkflowTaskRequest:
        """Create an instance of UpdateWorkflowTaskRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return UpdateWorkflowTaskRequest.parse_obj(obj)

        _obj = UpdateWorkflowTaskRequest.parse_obj(
            {
                "workflow_run_id": obj.get("workflow_run_id"),
                "action_name": obj.get("action_name"),
                "action_type": obj.get("action_type"),
                "status": obj.get("status"),
                "log_location": obj.get("log_location"),
                "error_msg": obj.get("error_msg"),
            }
        )
        return _obj

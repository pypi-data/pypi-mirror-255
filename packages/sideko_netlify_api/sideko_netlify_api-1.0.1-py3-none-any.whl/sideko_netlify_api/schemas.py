"""Generated by Sideko (sideko.dev)"""
import io
import typing
import enum
from pydantic import (
    BaseModel as _PydanticBaseModel,
    Field as _PydanticField,
    ConfigDict as _PydanticConfigDict,
)

ModelFiles = typing.List[
    typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]
]


class BinaryResponse:
    content: bytes
    headers: dict[str, str]

    def __init__(self, content: bytes, headers: dict[str, str]) -> None:
        self.content = content
        self.headers = headers


class GetAccountsAccountIdEnvContextNameEnum(str, enum.Enum):
    ALL = "all"
    DEV = "dev"
    BRANCH_DEPLOY = "branch-deploy"
    DEPLOY_PREVIEW = "deploy-preview"
    PRODUCTION = "production"

    def __str__(self) -> str:
        return self.value


class GetAccountsAccountIdEnvScopeEnum(str, enum.Enum):
    BUILDS = "builds"
    FUNCTIONS = "functions"
    RUNTIME = "runtime"
    POST_PROCESSING = "post-processing"

    def __str__(self) -> str:
        return self.value


class EnvVarScopesItemEnum(str, enum.Enum):
    BUILDS = "builds"
    FUNCTIONS = "functions"
    RUNTIME = "runtime"
    POST_PROCESSING = "post-processing"

    def __str__(self) -> str:
        return self.value


class EnvVarValueContextEnum(str, enum.Enum):
    ALL = "all"
    DEV = "dev"
    BRANCH_DEPLOY = "branch-deploy"
    DEPLOY_PREVIEW = "deploy-preview"
    PRODUCTION = "production"
    BRANCH = "branch"

    def __str__(self) -> str:
        return self.value


class GetApiV1SitesSiteIdEnvContextNameEnum(str, enum.Enum):
    ALL = "all"
    DEV = "dev"
    BRANCH_DEPLOY = "branch-deploy"
    DEPLOY_PREVIEW = "deploy-preview"
    PRODUCTION = "production"

    def __str__(self) -> str:
        return self.value


class GetApiV1SitesSiteIdEnvScopeEnum(str, enum.Enum):
    BUILDS = "builds"
    FUNCTIONS = "functions"
    RUNTIME = "runtime"
    POST_PROCESSING = "post_processing"

    def __str__(self) -> str:
        return self.value


class GetSitesFilterEnum(str, enum.Enum):
    ALL = "all"
    OWNER = "owner"
    GUEST = "guest"

    def __str__(self) -> str:
        return self.value


class GetSitesSiteIdDeploysStateEnum(str, enum.Enum):
    NEW = "new"
    PENDING_REVIEW = "pending_review"
    ACCEPTED = "accepted"
    REJECTED = "rejected"
    ENQUEUED = "enqueued"
    BUILDING = "building"
    UPLOADING = "uploading"
    UPLOADED = "uploaded"
    PREPARING = "preparing"
    PREPARED = "prepared"
    PROCESSING = "processing"
    PROCESSED = "processed"
    READY = "ready"
    ERROR = "error"
    RETRYING = "retrying"

    def __str__(self) -> str:
        return self.value


class PatchAccountsAccountIdEnvKeyBodyContextEnum(str, enum.Enum):
    ALL = "all"
    DEV = "dev"
    BRANCH_DEPLOY = "branch-deploy"
    DEPLOY_PREVIEW = "deploy-preview"
    PRODUCTION = "production"
    BRANCH = "branch"

    def __str__(self) -> str:
        return self.value


class AccountSetupPeriodEnum(str, enum.Enum):
    MONTHLY = "monthly"
    YEARLY = "yearly"

    def __str__(self) -> str:
        return self.value


class PostAccountsAccountIdEnvBodyItemScopesItemEnum(str, enum.Enum):
    BUILDS = "builds"
    FUNCTIONS = "functions"
    RUNTIME = "runtime"
    POST_PROCESSING = "post-processing"

    def __str__(self) -> str:
        return self.value


class PostSitesSiteIdDeploysStateEnum(str, enum.Enum):
    NEW = "new"
    PENDING_REVIEW = "pending_review"
    ACCEPTED = "accepted"
    REJECTED = "rejected"
    ENQUEUED = "enqueued"
    BUILDING = "building"
    UPLOADING = "uploading"
    UPLOADED = "uploaded"
    PREPARING = "preparing"
    PREPARED = "prepared"
    PROCESSING = "processing"
    PROCESSED = "processed"
    READY = "ready"
    ERROR = "error"
    RETRYING = "retrying"

    def __str__(self) -> str:
        return self.value


class FunctionRouteMethodsItemEnum(str, enum.Enum):
    GET = "GET"
    POST = "POST"
    PUT = "PUT"
    PATCH = "PATCH"
    DELETE = "DELETE"
    OPTIONS = "OPTIONS"

    def __str__(self) -> str:
        return self.value


class AccountAddMemberSetupRoleEnum(str, enum.Enum):
    OWNER = "Owner"
    COLLABORATOR = "Collaborator"
    CONTROLLER = "Controller"

    def __str__(self) -> str:
        return self.value


class PutAccountsAccountIdEnvKeyBodyScopesItemEnum(str, enum.Enum):
    BUILDS = "builds"
    FUNCTIONS = "functions"
    RUNTIME = "runtime"
    POST_PROCESSING = "post-processing"

    def __str__(self) -> str:
        return self.value


class AccountUpdateMemberSetupRoleEnum(str, enum.Enum):
    OWNER = "Owner"
    COLLABORATOR = "Collaborator"
    CONTROLLER = "Controller"

    def __str__(self) -> str:
        return self.value


class AccountUpdateMemberSetupSiteAccessEnum(str, enum.Enum):
    ALL = "all"
    NONE = "none"
    SELECTED = "selected"

    def __str__(self) -> str:
        return self.value


class Error(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    code: typing.Optional[int] = _PydanticField(alias="code", default=None)
    message: str = _PydanticField(alias="message")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class AccountUsageCapability(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    included: typing.Optional[int] = _PydanticField(alias="included", default=None)
    used: typing.Optional[int] = _PydanticField(alias="used", default=None)

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class AccountType(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    capabilities: typing.Optional[typing.Dict[str, typing.Any]] = _PydanticField(
        alias="capabilities", default=None
    )
    description: typing.Optional[str] = _PydanticField(
        alias="description", default=None
    )
    id: typing.Optional[str] = _PydanticField(alias="id", default=None)
    monthly_dollar_price: typing.Optional[int] = _PydanticField(
        alias="monthly_dollar_price", default=None
    )
    monthly_seats_addon_dollar_price: typing.Optional[int] = _PydanticField(
        alias="monthly_seats_addon_dollar_price", default=None
    )
    name: typing.Optional[str] = _PydanticField(alias="name", default=None)
    yearly_dollar_price: typing.Optional[int] = _PydanticField(
        alias="yearly_dollar_price", default=None
    )
    yearly_seats_addon_dollar_price: typing.Optional[int] = _PydanticField(
        alias="yearly_seats_addon_dollar_price", default=None
    )

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class AuditLogPayload(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
        extra="allow",
    )
    __pydantic_extra__: typing.Dict[str, typing.Dict[str, typing.Any]]

    action: typing.Optional[str] = _PydanticField(alias="action", default=None)
    actor_email: typing.Optional[str] = _PydanticField(
        alias="actor_email", default=None
    )
    actor_id: typing.Optional[str] = _PydanticField(alias="actor_id", default=None)
    actor_name: typing.Optional[str] = _PydanticField(alias="actor_name", default=None)
    log_type: typing.Optional[str] = _PydanticField(alias="log_type", default=None)
    timestamp: typing.Optional[str] = _PydanticField(alias="timestamp", default=None)

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class EnvVarUser(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    avatar_url: typing.Optional[str] = _PydanticField(alias="avatar_url", default=None)
    email: typing.Optional[str] = _PydanticField(alias="email", default=None)
    full_name: typing.Optional[str] = _PydanticField(alias="full_name", default=None)
    id: typing.Optional[str] = _PydanticField(alias="id", default=None)

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class EnvVarValue(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    context: typing.Optional[EnvVarValueContextEnum] = _PydanticField(
        alias="context", default=None
    )
    context_parameter: typing.Optional[str] = _PydanticField(
        alias="context_parameter", default=None
    )
    id: typing.Optional[str] = _PydanticField(alias="id", default=None)
    value: typing.Optional[str] = _PydanticField(alias="value", default=None)

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PaymentMethodData(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    card_type: typing.Optional[str] = _PydanticField(alias="card_type", default=None)
    email: typing.Optional[str] = _PydanticField(alias="email", default=None)
    last4: typing.Optional[str] = _PydanticField(alias="last4", default=None)

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class Build(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    created_at: typing.Optional[str] = _PydanticField(alias="created_at", default=None)
    deploy_id: typing.Optional[str] = _PydanticField(alias="deploy_id", default=None)
    done: typing.Optional[bool] = _PydanticField(alias="done", default=None)
    error: typing.Optional[str] = _PydanticField(alias="error", default=None)
    id: typing.Optional[str] = _PydanticField(alias="id", default=None)
    sha: typing.Optional[str] = _PydanticField(alias="sha", default=None)

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class DeployKey(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    created_at: typing.Optional[str] = _PydanticField(alias="created_at", default=None)
    id: typing.Optional[str] = _PydanticField(alias="id", default=None)
    public_key: typing.Optional[str] = _PydanticField(alias="public_key", default=None)

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class FunctionSchedule(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    cron: typing.Optional[str] = _PydanticField(alias="cron", default=None)
    name: typing.Optional[str] = _PydanticField(alias="name", default=None)

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class DnsRecord(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    dns_zone_id: typing.Optional[str] = _PydanticField(
        alias="dns_zone_id", default=None
    )
    flag: typing.Optional[int] = _PydanticField(alias="flag", default=None)
    hostname: typing.Optional[str] = _PydanticField(alias="hostname", default=None)
    id: typing.Optional[str] = _PydanticField(alias="id", default=None)
    managed: typing.Optional[bool] = _PydanticField(alias="managed", default=None)
    priority: typing.Optional[int] = _PydanticField(alias="priority", default=None)
    site_id: typing.Optional[str] = _PydanticField(alias="site_id", default=None)
    tag: typing.Optional[str] = _PydanticField(alias="tag", default=None)
    ttl: typing.Optional[int] = _PydanticField(alias="ttl", default=None)
    type: typing.Optional[str] = _PydanticField(alias="type", default=None)
    value: typing.Optional[str] = _PydanticField(alias="value", default=None)

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class Submission(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    body: typing.Optional[str] = _PydanticField(alias="body", default=None)
    company: typing.Optional[str] = _PydanticField(alias="company", default=None)
    created_at: typing.Optional[str] = _PydanticField(alias="created_at", default=None)
    data: typing.Optional[typing.Dict[str, typing.Any]] = _PydanticField(
        alias="data", default=None
    )
    email: typing.Optional[str] = _PydanticField(alias="email", default=None)
    first_name: typing.Optional[str] = _PydanticField(alias="first_name", default=None)
    id: typing.Optional[str] = _PydanticField(alias="id", default=None)
    last_name: typing.Optional[str] = _PydanticField(alias="last_name", default=None)
    name: typing.Optional[str] = _PydanticField(alias="name", default=None)
    number: typing.Optional[int] = _PydanticField(alias="number", default=None)
    site_url: typing.Optional[str] = _PydanticField(alias="site_url", default=None)
    summary: typing.Optional[str] = _PydanticField(alias="summary", default=None)

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class Hook(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    created_at: typing.Optional[str] = _PydanticField(alias="created_at", default=None)
    data: typing.Optional[typing.Dict[str, typing.Any]] = _PydanticField(
        alias="data", default=None
    )
    disabled: typing.Optional[bool] = _PydanticField(alias="disabled", default=None)
    event: typing.Optional[str] = _PydanticField(alias="event", default=None)
    id: typing.Optional[str] = _PydanticField(alias="id", default=None)
    site_id: typing.Optional[str] = _PydanticField(alias="site_id", default=None)
    type: typing.Optional[str] = _PydanticField(alias="type", default=None)
    updated_at: typing.Optional[str] = _PydanticField(alias="updated_at", default=None)

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class HookType(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    events: typing.Optional[typing.List[str]] = _PydanticField(
        alias="events", default=None
    )
    fields: typing.Optional[typing.List[typing.Dict[str, typing.Any]]] = _PydanticField(
        alias="fields", default=None
    )
    name: typing.Optional[str] = _PydanticField(alias="name", default=None)

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class Ticket(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    authorized: typing.Optional[bool] = _PydanticField(alias="authorized", default=None)
    client_id: typing.Optional[str] = _PydanticField(alias="client_id", default=None)
    created_at: typing.Optional[str] = _PydanticField(alias="created_at", default=None)
    id: typing.Optional[str] = _PydanticField(alias="id", default=None)

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class Service(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    created_at: typing.Optional[str] = _PydanticField(alias="created_at", default=None)
    description: typing.Optional[str] = _PydanticField(
        alias="description", default=None
    )
    environments: typing.Optional[typing.List[str]] = _PydanticField(
        alias="environments", default=None
    )
    events: typing.Optional[typing.List[typing.Dict[str, typing.Any]]] = _PydanticField(
        alias="events", default=None
    )
    icon: typing.Optional[str] = _PydanticField(alias="icon", default=None)
    id: typing.Optional[str] = _PydanticField(alias="id", default=None)
    long_description: typing.Optional[str] = _PydanticField(
        alias="long_description", default=None
    )
    manifest_url: typing.Optional[str] = _PydanticField(
        alias="manifest_url", default=None
    )
    name: typing.Optional[str] = _PydanticField(alias="name", default=None)
    service_path: typing.Optional[str] = _PydanticField(
        alias="service_path", default=None
    )
    slug: typing.Optional[str] = _PydanticField(alias="slug", default=None)
    tags: typing.Optional[typing.List[str]] = _PydanticField(alias="tags", default=None)
    updated_at: typing.Optional[str] = _PydanticField(alias="updated_at", default=None)

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class RepoInfoEnv(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
        extra="allow",
    )
    __pydantic_extra__: typing.Dict[str, str]

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class SiteDefaultHooksData(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    access_token: typing.Optional[str] = _PydanticField(
        alias="access_token", default=None
    )

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class SiteProcessingSettingsHtml(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    pretty_urls: typing.Optional[bool] = _PydanticField(
        alias="pretty_urls", default=None
    )

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class Asset(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    content_type: typing.Optional[str] = _PydanticField(
        alias="content_type", default=None
    )
    created_at: typing.Optional[str] = _PydanticField(alias="created_at", default=None)
    creator_id: typing.Optional[str] = _PydanticField(alias="creator_id", default=None)
    id: typing.Optional[str] = _PydanticField(alias="id", default=None)
    key: typing.Optional[str] = _PydanticField(alias="key", default=None)
    name: typing.Optional[str] = _PydanticField(alias="name", default=None)
    site_id: typing.Optional[str] = _PydanticField(alias="site_id", default=None)
    size: typing.Optional[int] = _PydanticField(alias="size", default=None)
    state: typing.Optional[str] = _PydanticField(alias="state", default=None)
    updated_at: typing.Optional[str] = _PydanticField(alias="updated_at", default=None)
    url: typing.Optional[str] = _PydanticField(alias="url", default=None)
    visibility: typing.Optional[str] = _PydanticField(alias="visibility", default=None)

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class AssetPublicSignature(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    url: typing.Optional[str] = _PydanticField(alias="url", default=None)

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class BuildHook(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    branch: typing.Optional[str] = _PydanticField(alias="branch", default=None)
    created_at: typing.Optional[str] = _PydanticField(alias="created_at", default=None)
    id: typing.Optional[str] = _PydanticField(alias="id", default=None)
    site_id: typing.Optional[str] = _PydanticField(alias="site_id", default=None)
    title: typing.Optional[str] = _PydanticField(alias="title", default=None)
    url: typing.Optional[str] = _PydanticField(alias="url", default=None)

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class DeployedBranch(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    deploy_id: typing.Optional[str] = _PydanticField(alias="deploy_id", default=None)
    id: typing.Optional[str] = _PydanticField(alias="id", default=None)
    name: typing.Optional[str] = _PydanticField(alias="name", default=None)
    slug: typing.Optional[str] = _PydanticField(alias="slug", default=None)
    ssl_url: typing.Optional[str] = _PydanticField(alias="ssl_url", default=None)
    url: typing.Optional[str] = _PydanticField(alias="url", default=None)

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class File(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = _PydanticField(alias="id", default=None)
    mime_type: typing.Optional[str] = _PydanticField(alias="mime_type", default=None)
    path: typing.Optional[str] = _PydanticField(alias="path", default=None)
    sha: typing.Optional[str] = _PydanticField(alias="sha", default=None)
    size: typing.Optional[int] = _PydanticField(alias="size", default=None)

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class Form(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    created_at: typing.Optional[str] = _PydanticField(alias="created_at", default=None)
    fields: typing.Optional[typing.List[typing.Dict[str, typing.Any]]] = _PydanticField(
        alias="fields", default=None
    )
    id: typing.Optional[str] = _PydanticField(alias="id", default=None)
    name: typing.Optional[str] = _PydanticField(alias="name", default=None)
    paths: typing.Optional[typing.List[str]] = _PydanticField(
        alias="paths", default=None
    )
    site_id: typing.Optional[str] = _PydanticField(alias="site_id", default=None)
    submission_count: typing.Optional[int] = _PydanticField(
        alias="submission_count", default=None
    )

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class SiteFunction(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    branch: typing.Optional[str] = _PydanticField(alias="branch", default=None)
    created_at: typing.Optional[str] = _PydanticField(alias="created_at", default=None)
    functions: typing.Optional[
        typing.List[typing.Dict[str, typing.Any]]
    ] = _PydanticField(alias="functions", default=None)
    id: typing.Optional[str] = _PydanticField(alias="id", default=None)
    log_type: typing.Optional[str] = _PydanticField(alias="log_type", default=None)
    provider: typing.Optional[str] = _PydanticField(alias="provider", default=None)

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class ServiceInstance(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    auth_url: typing.Optional[str] = _PydanticField(alias="auth_url", default=None)
    config: typing.Optional[typing.Dict[str, typing.Any]] = _PydanticField(
        alias="config", default=None
    )
    created_at: typing.Optional[str] = _PydanticField(alias="created_at", default=None)
    env: typing.Optional[typing.Dict[str, typing.Any]] = _PydanticField(
        alias="env", default=None
    )
    external_attributes: typing.Optional[typing.Dict[str, typing.Any]] = _PydanticField(
        alias="external_attributes", default=None
    )
    id: typing.Optional[str] = _PydanticField(alias="id", default=None)
    service_name: typing.Optional[str] = _PydanticField(
        alias="service_name", default=None
    )
    service_path: typing.Optional[str] = _PydanticField(
        alias="service_path", default=None
    )
    service_slug: typing.Optional[str] = _PydanticField(
        alias="service_slug", default=None
    )
    snippets: typing.Optional[
        typing.List[typing.Dict[str, typing.Any]]
    ] = _PydanticField(alias="snippets", default=None)
    updated_at: typing.Optional[str] = _PydanticField(alias="updated_at", default=None)
    url: typing.Optional[str] = _PydanticField(alias="url", default=None)

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class Snippet(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    general: typing.Optional[str] = _PydanticField(alias="general", default=None)
    general_position: typing.Optional[str] = _PydanticField(
        alias="general_position", default=None
    )
    goal: typing.Optional[str] = _PydanticField(alias="goal", default=None)
    goal_position: typing.Optional[str] = _PydanticField(
        alias="goal_position", default=None
    )
    id: typing.Optional[int] = _PydanticField(alias="id", default=None)
    site_id: typing.Optional[str] = _PydanticField(alias="site_id", default=None)
    title: typing.Optional[str] = _PydanticField(alias="title", default=None)

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class SniCertificate(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    created_at: typing.Optional[str] = _PydanticField(alias="created_at", default=None)
    domains: typing.Optional[typing.List[str]] = _PydanticField(
        alias="domains", default=None
    )
    expires_at: typing.Optional[str] = _PydanticField(alias="expires_at", default=None)
    state: typing.Optional[str] = _PydanticField(alias="state", default=None)
    updated_at: typing.Optional[str] = _PydanticField(alias="updated_at", default=None)

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class SplitTest(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    active: typing.Optional[bool] = _PydanticField(alias="active", default=None)
    branches: typing.Optional[
        typing.List[typing.Dict[str, typing.Any]]
    ] = _PydanticField(alias="branches", default=None)
    created_at: typing.Optional[str] = _PydanticField(alias="created_at", default=None)
    id: typing.Optional[str] = _PydanticField(alias="id", default=None)
    name: typing.Optional[str] = _PydanticField(alias="name", default=None)
    path: typing.Optional[str] = _PydanticField(alias="path", default=None)
    site_id: typing.Optional[str] = _PydanticField(alias="site_id", default=None)
    unpublished_at: typing.Optional[str] = _PydanticField(
        alias="unpublished_at", default=None
    )
    updated_at: typing.Optional[str] = _PydanticField(alias="updated_at", default=None)

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class UserOnboardingProgress(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    slides: typing.Optional[str] = _PydanticField(alias="slides", default=None)

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class BuildStatusMinutes(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    current: typing.Optional[int] = _PydanticField(alias="current", default=None)
    current_average_sec: typing.Optional[int] = _PydanticField(
        alias="current_average_sec", default=None
    )
    included_minutes: typing.Optional[str] = _PydanticField(
        alias="included_minutes", default=None
    )
    included_minutes_with_packs: typing.Optional[str] = _PydanticField(
        alias="included_minutes_with_packs", default=None
    )
    last_updated_at: typing.Optional[str] = _PydanticField(
        alias="last_updated_at", default=None
    )
    period_end_date: typing.Optional[str] = _PydanticField(
        alias="period_end_date", default=None
    )
    period_start_date: typing.Optional[str] = _PydanticField(
        alias="period_start_date", default=None
    )
    previous: typing.Optional[int] = _PydanticField(alias="previous", default=None)

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class Member(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    avatar: typing.Optional[str] = _PydanticField(alias="avatar", default=None)
    email: typing.Optional[str] = _PydanticField(alias="email", default=None)
    full_name: typing.Optional[str] = _PydanticField(alias="full_name", default=None)
    id: typing.Optional[str] = _PydanticField(alias="id", default=None)
    role: typing.Optional[str] = _PydanticField(alias="role", default=None)

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PatchAccountsAccountIdEnvKeyBody(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    context: typing.Optional[
        PatchAccountsAccountIdEnvKeyBodyContextEnum
    ] = _PydanticField(alias="context", default=None)
    context_parameter: typing.Optional[str] = _PydanticField(
        alias="context_parameter", default=None
    )
    value: typing.Optional[str] = _PydanticField(alias="value", default=None)

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class AccountSetup(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    extra_seats_block: typing.Optional[int] = _PydanticField(
        alias="extra_seats_block", default=None
    )
    name: str = _PydanticField(alias="name")
    payment_method_id: typing.Optional[str] = _PydanticField(
        alias="payment_method_id", default=None
    )
    period: typing.Optional[AccountSetupPeriodEnum] = _PydanticField(
        alias="period", default=None
    )
    type_id: str = _PydanticField(alias="type_id")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PostAccountsAccountIdEnvBodyItem(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    is_secret: typing.Optional[bool] = _PydanticField(alias="is_secret", default=None)
    key: typing.Optional[str] = _PydanticField(alias="key", default=None)
    scopes: typing.Optional[
        typing.List[PostAccountsAccountIdEnvBodyItemScopesItemEnum]
    ] = _PydanticField(alias="scopes", default=None)
    values: typing.Optional[typing.List[EnvVarValue]] = _PydanticField(
        alias="values", default=None
    )

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class DnsZoneSetup(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    account_slug: typing.Optional[str] = _PydanticField(
        alias="account_slug", default=None
    )
    name: typing.Optional[str] = _PydanticField(alias="name", default=None)
    site_id: typing.Optional[str] = _PydanticField(alias="site_id", default=None)

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class DnsRecordCreate(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    flag: typing.Optional[int] = _PydanticField(alias="flag", default=None)
    hostname: typing.Optional[str] = _PydanticField(alias="hostname", default=None)
    port: typing.Optional[int] = _PydanticField(alias="port", default=None)
    priority: typing.Optional[int] = _PydanticField(alias="priority", default=None)
    tag: typing.Optional[str] = _PydanticField(alias="tag", default=None)
    ttl: typing.Optional[int] = _PydanticField(alias="ttl", default=None)
    type: typing.Optional[str] = _PydanticField(alias="type", default=None)
    value: typing.Optional[str] = _PydanticField(alias="value", default=None)
    weight: typing.Optional[int] = _PydanticField(alias="weight", default=None)

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class AccessToken(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    access_token: typing.Optional[str] = _PydanticField(
        alias="access_token", default=None
    )
    created_at: typing.Optional[str] = _PydanticField(alias="created_at", default=None)
    id: typing.Optional[str] = _PydanticField(alias="id", default=None)
    user_email: typing.Optional[str] = _PydanticField(alias="user_email", default=None)
    user_id: typing.Optional[str] = _PydanticField(alias="user_id", default=None)

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class Purge(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    cache_tags: typing.Optional[typing.List[str]] = _PydanticField(
        alias="cache_tags", default=None
    )
    site_id: typing.Optional[str] = _PydanticField(alias="site_id", default=None)
    site_slug: typing.Optional[str] = _PydanticField(alias="site_slug", default=None)

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class AssetFormFields(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
        extra="allow",
    )
    __pydantic_extra__: typing.Dict[str, str]

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class BuildHookSetup(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    branch: typing.Optional[str] = _PydanticField(alias="branch", default=None)
    title: typing.Optional[str] = _PydanticField(alias="title", default=None)

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class BuildSetup(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    clear_cache: typing.Optional[bool] = _PydanticField(
        alias="clear_cache", default=None
    )
    image: typing.Optional[str] = _PydanticField(alias="image", default=None)

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class FunctionRoute(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    expression: typing.Optional[str] = _PydanticField(alias="expression", default=None)
    literal: typing.Optional[str] = _PydanticField(alias="literal", default=None)
    methods: typing.Optional[
        typing.List[FunctionRouteMethodsItemEnum]
    ] = _PydanticField(alias="methods", default=None)
    pattern: typing.Optional[str] = _PydanticField(alias="pattern", default=None)
    prefer_static: typing.Optional[bool] = _PydanticField(
        alias="prefer_static", default=None
    )

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class SplitTestSetup(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    branch_tests: typing.Optional[typing.Dict[str, typing.Any]] = _PydanticField(
        alias="branch_tests", default=None
    )

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class AccountAddMemberSetup(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    email: typing.Optional[str] = _PydanticField(alias="email", default=None)
    role: typing.Optional[AccountAddMemberSetupRoleEnum] = _PydanticField(
        alias="role", default=None
    )

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class AccountUpdateSetup(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    billing_details: typing.Optional[str] = _PydanticField(
        alias="billing_details", default=None
    )
    billing_email: typing.Optional[str] = _PydanticField(
        alias="billing_email", default=None
    )
    billing_name: typing.Optional[str] = _PydanticField(
        alias="billing_name", default=None
    )
    extra_seats_block: typing.Optional[int] = _PydanticField(
        alias="extra_seats_block", default=None
    )
    name: typing.Optional[str] = _PydanticField(alias="name", default=None)
    slug: typing.Optional[str] = _PydanticField(alias="slug", default=None)
    type_id: typing.Optional[str] = _PydanticField(alias="type_id", default=None)

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PutAccountsAccountIdEnvKeyBody(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    is_secret: typing.Optional[bool] = _PydanticField(alias="is_secret", default=None)
    key: typing.Optional[str] = _PydanticField(alias="key", default=None)
    scopes: typing.Optional[
        typing.List[PutAccountsAccountIdEnvKeyBodyScopesItemEnum]
    ] = _PydanticField(alias="scopes", default=None)
    values: typing.Optional[typing.List[EnvVarValue]] = _PydanticField(
        alias="values", default=None
    )

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class Function(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = _PydanticField(alias="id", default=None)
    name: typing.Optional[str] = _PydanticField(alias="name", default=None)
    sha: typing.Optional[str] = _PydanticField(alias="sha", default=None)

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class AccountUpdateMemberSetup(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    role: typing.Optional[AccountUpdateMemberSetupRoleEnum] = _PydanticField(
        alias="role", default=None
    )
    site_access: typing.Optional[
        AccountUpdateMemberSetupSiteAccessEnum
    ] = _PydanticField(alias="site_access", default=None)
    site_ids: typing.Optional[typing.List[str]] = _PydanticField(
        alias="site_ids", default=None
    )

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class AccountMembershipCapabilities(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    collaborators: typing.Optional[AccountUsageCapability] = _PydanticField(
        alias="collaborators", default=None
    )
    sites: typing.Optional[AccountUsageCapability] = _PydanticField(
        alias="sites", default=None
    )

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class AuditLog(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    account_id: typing.Optional[str] = _PydanticField(alias="account_id", default=None)
    id: typing.Optional[str] = _PydanticField(alias="id", default=None)
    payload: typing.Optional[AuditLogPayload] = _PydanticField(
        alias="payload", default=None
    )

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class EnvVar(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    is_secret: typing.Optional[bool] = _PydanticField(alias="is_secret", default=None)
    key: typing.Optional[str] = _PydanticField(alias="key", default=None)
    scopes: typing.Optional[typing.List[EnvVarScopesItemEnum]] = _PydanticField(
        alias="scopes", default=None
    )
    updated_at: typing.Optional[str] = _PydanticField(alias="updated_at", default=None)
    updated_by: typing.Optional[EnvVarUser] = _PydanticField(
        alias="updated_by", default=None
    )
    values: typing.Optional[typing.List[EnvVarValue]] = _PydanticField(
        alias="values", default=None
    )

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PaymentMethod(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    created_at: typing.Optional[str] = _PydanticField(alias="created_at", default=None)
    data: typing.Optional[PaymentMethodData] = _PydanticField(
        alias="data", default=None
    )
    id: typing.Optional[str] = _PydanticField(alias="id", default=None)
    method_name: typing.Optional[str] = _PydanticField(
        alias="method_name", default=None
    )
    state: typing.Optional[str] = _PydanticField(alias="state", default=None)
    type: typing.Optional[str] = _PydanticField(alias="type", default=None)
    updated_at: typing.Optional[str] = _PydanticField(alias="updated_at", default=None)

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class Deploy(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    admin_url: typing.Optional[str] = _PydanticField(alias="admin_url", default=None)
    branch: typing.Optional[str] = _PydanticField(alias="branch", default=None)
    build_id: typing.Optional[str] = _PydanticField(alias="build_id", default=None)
    commit_ref: typing.Optional[str] = _PydanticField(alias="commit_ref", default=None)
    commit_url: typing.Optional[str] = _PydanticField(alias="commit_url", default=None)
    context: typing.Optional[str] = _PydanticField(alias="context", default=None)
    created_at: typing.Optional[str] = _PydanticField(alias="created_at", default=None)
    deploy_ssl_url: typing.Optional[str] = _PydanticField(
        alias="deploy_ssl_url", default=None
    )
    deploy_url: typing.Optional[str] = _PydanticField(alias="deploy_url", default=None)
    draft: typing.Optional[bool] = _PydanticField(alias="draft", default=None)
    error_message: typing.Optional[str] = _PydanticField(
        alias="error_message", default=None
    )
    framework: typing.Optional[str] = _PydanticField(alias="framework", default=None)
    function_schedules: typing.Optional[typing.List[FunctionSchedule]] = _PydanticField(
        alias="function_schedules", default=None
    )
    id: typing.Optional[str] = _PydanticField(alias="id", default=None)
    locked: typing.Optional[bool] = _PydanticField(alias="locked", default=None)
    name: typing.Optional[str] = _PydanticField(alias="name", default=None)
    published_at: typing.Optional[str] = _PydanticField(
        alias="published_at", default=None
    )
    required: typing.Optional[typing.List[str]] = _PydanticField(
        alias="required", default=None
    )
    required_functions: typing.Optional[typing.List[str]] = _PydanticField(
        alias="required_functions", default=None
    )
    review_id: typing.Optional[float] = _PydanticField(alias="review_id", default=None)
    review_url: typing.Optional[str] = _PydanticField(alias="review_url", default=None)
    screenshot_url: typing.Optional[str] = _PydanticField(
        alias="screenshot_url", default=None
    )
    site_id: typing.Optional[str] = _PydanticField(alias="site_id", default=None)
    skipped: typing.Optional[bool] = _PydanticField(alias="skipped", default=None)
    ssl_url: typing.Optional[str] = _PydanticField(alias="ssl_url", default=None)
    state: typing.Optional[str] = _PydanticField(alias="state", default=None)
    title: typing.Optional[str] = _PydanticField(alias="title", default=None)
    updated_at: typing.Optional[str] = _PydanticField(alias="updated_at", default=None)
    url: typing.Optional[str] = _PydanticField(alias="url", default=None)
    user_id: typing.Optional[str] = _PydanticField(alias="user_id", default=None)

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class DnsZone(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    account_id: typing.Optional[str] = _PydanticField(alias="account_id", default=None)
    account_name: typing.Optional[str] = _PydanticField(
        alias="account_name", default=None
    )
    account_slug: typing.Optional[str] = _PydanticField(
        alias="account_slug", default=None
    )
    created_at: typing.Optional[str] = _PydanticField(alias="created_at", default=None)
    dedicated: typing.Optional[bool] = _PydanticField(alias="dedicated", default=None)
    dns_servers: typing.Optional[typing.List[str]] = _PydanticField(
        alias="dns_servers", default=None
    )
    domain: typing.Optional[str] = _PydanticField(alias="domain", default=None)
    errors: typing.Optional[typing.List[str]] = _PydanticField(
        alias="errors", default=None
    )
    id: typing.Optional[str] = _PydanticField(alias="id", default=None)
    ipv6_enabled: typing.Optional[bool] = _PydanticField(
        alias="ipv6_enabled", default=None
    )
    name: typing.Optional[str] = _PydanticField(alias="name", default=None)
    records: typing.Optional[typing.List[DnsRecord]] = _PydanticField(
        alias="records", default=None
    )
    site_id: typing.Optional[str] = _PydanticField(alias="site_id", default=None)
    supported_record_types: typing.Optional[typing.List[str]] = _PydanticField(
        alias="supported_record_types", default=None
    )
    updated_at: typing.Optional[str] = _PydanticField(alias="updated_at", default=None)
    user_id: typing.Optional[str] = _PydanticField(alias="user_id", default=None)

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class RepoInfo(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    allowed_branches: typing.Optional[typing.List[str]] = _PydanticField(
        alias="allowed_branches", default=None
    )
    cmd: typing.Optional[str] = _PydanticField(alias="cmd", default=None)
    deploy_key_id: typing.Optional[str] = _PydanticField(
        alias="deploy_key_id", default=None
    )
    dir: typing.Optional[str] = _PydanticField(alias="dir", default=None)
    env: typing.Optional[RepoInfoEnv] = _PydanticField(alias="env", default=None)
    functions_dir: typing.Optional[str] = _PydanticField(
        alias="functions_dir", default=None
    )
    id: typing.Optional[int] = _PydanticField(alias="id", default=None)
    installation_id: typing.Optional[int] = _PydanticField(
        alias="installation_id", default=None
    )
    private_logs: typing.Optional[bool] = _PydanticField(
        alias="private_logs", default=None
    )
    provider: typing.Optional[str] = _PydanticField(alias="provider", default=None)
    public_repo: typing.Optional[bool] = _PydanticField(
        alias="public_repo", default=None
    )
    repo_branch: typing.Optional[str] = _PydanticField(
        alias="repo_branch", default=None
    )
    repo_path: typing.Optional[str] = _PydanticField(alias="repo_path", default=None)
    repo_url: typing.Optional[str] = _PydanticField(alias="repo_url", default=None)
    stop_builds: typing.Optional[bool] = _PydanticField(
        alias="stop_builds", default=None
    )

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class SiteProcessingSettings(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    html: typing.Optional[SiteProcessingSettingsHtml] = _PydanticField(
        alias="html", default=None
    )

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class User(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    affiliate_id: typing.Optional[str] = _PydanticField(
        alias="affiliate_id", default=None
    )
    avatar_url: typing.Optional[str] = _PydanticField(alias="avatar_url", default=None)
    created_at: typing.Optional[str] = _PydanticField(alias="created_at", default=None)
    email: typing.Optional[str] = _PydanticField(alias="email", default=None)
    full_name: typing.Optional[str] = _PydanticField(alias="full_name", default=None)
    id: typing.Optional[str] = _PydanticField(alias="id", default=None)
    last_login: typing.Optional[str] = _PydanticField(alias="last_login", default=None)
    login_providers: typing.Optional[typing.List[str]] = _PydanticField(
        alias="login_providers", default=None
    )
    onboarding_progress: typing.Optional[UserOnboardingProgress] = _PydanticField(
        alias="onboarding_progress", default=None
    )
    site_count: typing.Optional[int] = _PydanticField(alias="site_count", default=None)
    uid: typing.Optional[str] = _PydanticField(alias="uid", default=None)

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class BuildStatus(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    active: typing.Optional[int] = _PydanticField(alias="active", default=None)
    build_count: typing.Optional[int] = _PydanticField(
        alias="build_count", default=None
    )
    enqueued: typing.Optional[int] = _PydanticField(alias="enqueued", default=None)
    minutes: typing.Optional[BuildStatusMinutes] = _PydanticField(
        alias="minutes", default=None
    )
    pending_concurrency: typing.Optional[int] = _PydanticField(
        alias="pending_concurrency", default=None
    )

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class AssetForm(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    fields: typing.Optional[AssetFormFields] = _PydanticField(
        alias="fields", default=None
    )
    url: typing.Optional[str] = _PydanticField(alias="url", default=None)

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class FunctionConfig(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    build_data: typing.Optional[typing.Dict[str, typing.Any]] = _PydanticField(
        alias="build_data", default=None
    )
    display_name: typing.Optional[str] = _PydanticField(
        alias="display_name", default=None
    )
    generator: typing.Optional[str] = _PydanticField(alias="generator", default=None)
    priority: typing.Optional[int] = _PydanticField(alias="priority", default=None)
    routes: typing.Optional[typing.List[FunctionRoute]] = _PydanticField(
        alias="routes", default=None
    )

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class AccountMembership(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    billing_details: typing.Optional[str] = _PydanticField(
        alias="billing_details", default=None
    )
    billing_email: typing.Optional[str] = _PydanticField(
        alias="billing_email", default=None
    )
    billing_name: typing.Optional[str] = _PydanticField(
        alias="billing_name", default=None
    )
    billing_period: typing.Optional[str] = _PydanticField(
        alias="billing_period", default=None
    )
    capabilities: typing.Optional[AccountMembershipCapabilities] = _PydanticField(
        alias="capabilities", default=None
    )
    created_at: typing.Optional[str] = _PydanticField(alias="created_at", default=None)
    id: typing.Optional[str] = _PydanticField(alias="id", default=None)
    name: typing.Optional[str] = _PydanticField(alias="name", default=None)
    owner_ids: typing.Optional[typing.List[str]] = _PydanticField(
        alias="owner_ids", default=None
    )
    payment_method_id: typing.Optional[str] = _PydanticField(
        alias="payment_method_id", default=None
    )
    roles_allowed: typing.Optional[typing.List[str]] = _PydanticField(
        alias="roles_allowed", default=None
    )
    slug: typing.Optional[str] = _PydanticField(alias="slug", default=None)
    type: typing.Optional[str] = _PydanticField(alias="type", default=None)
    type_id: typing.Optional[str] = _PydanticField(alias="type_id", default=None)
    type_name: typing.Optional[str] = _PydanticField(alias="type_name", default=None)
    updated_at: typing.Optional[str] = _PydanticField(alias="updated_at", default=None)

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class Site(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    account_name: typing.Optional[str] = _PydanticField(
        alias="account_name", default=None
    )
    account_slug: typing.Optional[str] = _PydanticField(
        alias="account_slug", default=None
    )
    admin_url: typing.Optional[str] = _PydanticField(alias="admin_url", default=None)
    branch_deploy_custom_domain: typing.Optional[str] = _PydanticField(
        alias="branch_deploy_custom_domain", default=None
    )
    build_image: typing.Optional[str] = _PydanticField(
        alias="build_image", default=None
    )
    build_settings: typing.Optional[RepoInfo] = _PydanticField(
        alias="build_settings", default=None
    )
    capabilities: typing.Optional[typing.Dict[str, typing.Any]] = _PydanticField(
        alias="capabilities", default=None
    )
    created_at: typing.Optional[str] = _PydanticField(alias="created_at", default=None)
    custom_domain: typing.Optional[str] = _PydanticField(
        alias="custom_domain", default=None
    )
    default_hooks_data: typing.Optional[SiteDefaultHooksData] = _PydanticField(
        alias="default_hooks_data", default=None
    )
    deploy_hook: typing.Optional[str] = _PydanticField(
        alias="deploy_hook", default=None
    )
    deploy_preview_custom_domain: typing.Optional[str] = _PydanticField(
        alias="deploy_preview_custom_domain", default=None
    )
    deploy_url: typing.Optional[str] = _PydanticField(alias="deploy_url", default=None)
    domain_aliases: typing.Optional[typing.List[str]] = _PydanticField(
        alias="domain_aliases", default=None
    )
    force_ssl: typing.Optional[bool] = _PydanticField(alias="force_ssl", default=None)
    functions_region: typing.Optional[str] = _PydanticField(
        alias="functions_region", default=None
    )
    git_provider: typing.Optional[str] = _PydanticField(
        alias="git_provider", default=None
    )
    id: typing.Optional[str] = _PydanticField(alias="id", default=None)
    id_domain: typing.Optional[str] = _PydanticField(alias="id_domain", default=None)
    managed_dns: typing.Optional[bool] = _PydanticField(
        alias="managed_dns", default=None
    )
    name: typing.Optional[str] = _PydanticField(alias="name", default=None)
    notification_email: typing.Optional[str] = _PydanticField(
        alias="notification_email", default=None
    )
    password: typing.Optional[str] = _PydanticField(alias="password", default=None)
    plan: typing.Optional[str] = _PydanticField(alias="plan", default=None)
    prerender: typing.Optional[str] = _PydanticField(alias="prerender", default=None)
    processing_settings: typing.Optional[SiteProcessingSettings] = _PydanticField(
        alias="processing_settings", default=None
    )
    published_deploy: typing.Optional[Deploy] = _PydanticField(
        alias="published_deploy", default=None
    )
    screenshot_url: typing.Optional[str] = _PydanticField(
        alias="screenshot_url", default=None
    )
    session_id: typing.Optional[str] = _PydanticField(alias="session_id", default=None)
    ssl: typing.Optional[bool] = _PydanticField(alias="ssl", default=None)
    ssl_url: typing.Optional[str] = _PydanticField(alias="ssl_url", default=None)
    state: typing.Optional[str] = _PydanticField(alias="state", default=None)
    updated_at: typing.Optional[str] = _PydanticField(alias="updated_at", default=None)
    url: typing.Optional[str] = _PydanticField(alias="url", default=None)
    user_id: typing.Optional[str] = _PydanticField(alias="user_id", default=None)

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class AssetSignature(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    asset: typing.Optional[Asset] = _PydanticField(alias="asset", default=None)
    form: typing.Optional[AssetForm] = _PydanticField(alias="form", default=None)

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class DeployFilesFunctionsConfig(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
        extra="allow",
    )
    __pydantic_extra__: typing.Dict[str, FunctionConfig]

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class DeployFiles(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    async_field: typing.Optional[bool] = _PydanticField(alias="async", default=None)
    branch: typing.Optional[str] = _PydanticField(alias="branch", default=None)
    draft: typing.Optional[bool] = _PydanticField(alias="draft", default=None)
    files: typing.Optional[typing.Dict[str, typing.Any]] = _PydanticField(
        alias="files", default=None
    )
    framework: typing.Optional[str] = _PydanticField(alias="framework", default=None)
    framework_version: typing.Optional[str] = _PydanticField(
        alias="framework_version", default=None
    )
    function_schedules: typing.Optional[typing.List[FunctionSchedule]] = _PydanticField(
        alias="function_schedules", default=None
    )
    functions: typing.Optional[typing.Dict[str, typing.Any]] = _PydanticField(
        alias="functions", default=None
    )
    functions_config: typing.Optional[DeployFilesFunctionsConfig] = _PydanticField(
        alias="functions_config", default=None
    )

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)

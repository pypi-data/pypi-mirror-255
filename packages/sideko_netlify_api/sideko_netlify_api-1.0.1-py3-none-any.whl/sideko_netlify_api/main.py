"""Generated by Sideko (sideko.dev)"""
import typing

import httpx
from urllib.parse import quote_plus

from sideko_netlify_api.schemas import *
import sideko_netlify_api.auth as sdk_auth
import sideko_netlify_api.errors as sdk_errors
import sideko_netlify_api.response as sdk_response


T = typing.TypeVar("T")


class Client:
    def __init__(
        self,
        *,
        netlify_auth: typing.Optional[str] = None,
        base_url: typing.Optional[str] = None,
    ):
        url = base_url or "https://api.netlify.com/api/v1"
        self.base_url = url
        self.session = httpx.Client()

        # register auth providers
        self._auth: typing.Dict[str, sdk_auth.AuthProvider] = {}
        self._auth["netlifyAuth"] = sdk_auth.AuthBearer(val=netlify_auth)

    def _to_json_encodable(self, target: typing.Any) -> typing.Any:
        if isinstance(target, list):
            return [self._to_json_encodable(el) for el in target]

        dump_method = getattr(target, "model_api_dump", None)
        if callable(dump_method):
            return target.model_api_dump()

        return target

    def _format_param(
        self,
        value: typing.Union[str, int, typing.List[typing.Union[str, int]], dict],
        explode: bool,
    ) -> typing.List[typing.Union[str, int]]:
        if isinstance(value, (list, dict)) and not explode:
            return quote_plus(",".join(map(str, value)))
        else:
            return value

    def _add_auth(self, auth_names: typing.List[str], **req_kwargs) -> typing.Dict:
        for auth_name in auth_names:
            provider = self._auth.get(auth_name, None)
            if provider is not None:
                req_kwargs = provider.add_auth(req_kwargs)

        return req_kwargs

    def cancel_account(self, *, account_id: str) -> typing.Any:
        """ """
        _endpoint = f"/accounts/{account_id}"
        _url = f"{self.base_url}{_endpoint}"

        _params = {}  # type: dict[str, typing.Any]
        _authed_kwargs = self._add_auth(
            [
                "netlifyAuth",
            ],
            params=_params,
        )
        _raw_response = self.session.delete(_url, **_authed_kwargs)

        _casters = [
            sdk_response.ResponseCaster(
                status_code=204, expected_type=typing.Any, is_error=False
            ),
            sdk_response.ResponseCaster(
                status_code="default", expected_type=Error, is_error=True
            ),
        ]

        _matching_casters = [
            c for c in _casters if c.match_code(_raw_response.status_code)
        ]
        if len(_matching_casters) == 0:
            raise sdk_errors.UnexpectedStatusCodeException(
                response=_raw_response,
                expected_codes=[c.status_code_str for c in _casters],
            )
        _caster = _matching_casters[0]
        _response_data = _caster.cast_response(_raw_response)

        if _caster.is_error:
            raise sdk_errors.RequestException(
                response=_raw_response, data=_response_data
            )

        return _response_data

    def delete_env_var(
        self, *, account_id: str, key: str, site_id: typing.Optional[str] = None
    ) -> typing.Any:
        """
        Deletes an environment variable. To use this endpoint, your site must no longer be using the <a href="https://docs.netlify.com/environment-variables/classic-experience/">classic environment variables experience</a>.  Migrate now with the Netlify UI.
        """
        _endpoint = f"/accounts/{account_id}/env/{key}"
        _url = f"{self.base_url}{_endpoint}"

        _params = {}  # type: dict[str, typing.Any]
        if site_id is not None:
            _params["site_id"] = site_id
        _authed_kwargs = self._add_auth(
            [
                "netlifyAuth",
            ],
            params=_params,
        )
        _raw_response = self.session.delete(_url, **_authed_kwargs)

        _casters = [
            sdk_response.ResponseCaster(
                status_code=204, expected_type=typing.Any, is_error=False
            ),
            sdk_response.ResponseCaster(
                status_code="default", expected_type=Error, is_error=True
            ),
        ]

        _matching_casters = [
            c for c in _casters if c.match_code(_raw_response.status_code)
        ]
        if len(_matching_casters) == 0:
            raise sdk_errors.UnexpectedStatusCodeException(
                response=_raw_response,
                expected_codes=[c.status_code_str for c in _casters],
            )
        _caster = _matching_casters[0]
        _response_data = _caster.cast_response(_raw_response)

        if _caster.is_error:
            raise sdk_errors.RequestException(
                response=_raw_response, data=_response_data
            )

        return _response_data

    def delete_env_var_value(
        self,
        *,
        account_id: str,
        key: str,
        id: str,
        site_id: typing.Optional[str] = None,
    ) -> typing.Any:
        """
        Deletes a specific environment variable value. To use this endpoint, your site must no longer be using the <a href="https://docs.netlify.com/environment-variables/classic-experience/">classic environment variables experience</a>.  Migrate now with the Netlify UI.
        """
        _endpoint = f"/accounts/{account_id}/env/{key}/value/{id}"
        _url = f"{self.base_url}{_endpoint}"

        _params = {}  # type: dict[str, typing.Any]
        if site_id is not None:
            _params["site_id"] = site_id
        _authed_kwargs = self._add_auth(
            [
                "netlifyAuth",
            ],
            params=_params,
        )
        _raw_response = self.session.delete(_url, **_authed_kwargs)

        _casters = [
            sdk_response.ResponseCaster(
                status_code=204, expected_type=typing.Any, is_error=False
            ),
            sdk_response.ResponseCaster(
                status_code="default", expected_type=Error, is_error=True
            ),
        ]

        _matching_casters = [
            c for c in _casters if c.match_code(_raw_response.status_code)
        ]
        if len(_matching_casters) == 0:
            raise sdk_errors.UnexpectedStatusCodeException(
                response=_raw_response,
                expected_codes=[c.status_code_str for c in _casters],
            )
        _caster = _matching_casters[0]
        _response_data = _caster.cast_response(_raw_response)

        if _caster.is_error:
            raise sdk_errors.RequestException(
                response=_raw_response, data=_response_data
            )

        return _response_data

    def delete_deploy_key(self, *, key_id: str) -> typing.Any:
        """ """
        _endpoint = f"/deploy_keys/{key_id}"
        _url = f"{self.base_url}{_endpoint}"

        _params = {}  # type: dict[str, typing.Any]
        _authed_kwargs = self._add_auth(
            [
                "netlifyAuth",
            ],
            params=_params,
        )
        _raw_response = self.session.delete(_url, **_authed_kwargs)

        _casters = [
            sdk_response.ResponseCaster(
                status_code=204, expected_type=typing.Any, is_error=False
            ),
            sdk_response.ResponseCaster(
                status_code="default", expected_type=Error, is_error=True
            ),
        ]

        _matching_casters = [
            c for c in _casters if c.match_code(_raw_response.status_code)
        ]
        if len(_matching_casters) == 0:
            raise sdk_errors.UnexpectedStatusCodeException(
                response=_raw_response,
                expected_codes=[c.status_code_str for c in _casters],
            )
        _caster = _matching_casters[0]
        _response_data = _caster.cast_response(_raw_response)

        if _caster.is_error:
            raise sdk_errors.RequestException(
                response=_raw_response, data=_response_data
            )

        return _response_data

    def delete_deploy(self, *, deploy_id: str) -> typing.Any:
        """ """
        _endpoint = f"/deploys/{deploy_id}"
        _url = f"{self.base_url}{_endpoint}"

        _params = {}  # type: dict[str, typing.Any]
        _authed_kwargs = self._add_auth(
            [
                "netlifyAuth",
            ],
            params=_params,
        )
        _raw_response = self.session.delete(_url, **_authed_kwargs)

        _casters = [
            sdk_response.ResponseCaster(
                status_code=204, expected_type=typing.Any, is_error=False
            ),
            sdk_response.ResponseCaster(
                status_code="default", expected_type=Error, is_error=True
            ),
        ]

        _matching_casters = [
            c for c in _casters if c.match_code(_raw_response.status_code)
        ]
        if len(_matching_casters) == 0:
            raise sdk_errors.UnexpectedStatusCodeException(
                response=_raw_response,
                expected_codes=[c.status_code_str for c in _casters],
            )
        _caster = _matching_casters[0]
        _response_data = _caster.cast_response(_raw_response)

        if _caster.is_error:
            raise sdk_errors.RequestException(
                response=_raw_response, data=_response_data
            )

        return _response_data

    def delete_dns_zone(self, *, zone_id: str) -> typing.Any:
        """ """
        _endpoint = f"/dns_zones/{zone_id}"
        _url = f"{self.base_url}{_endpoint}"

        _params = {}  # type: dict[str, typing.Any]
        _authed_kwargs = self._add_auth(
            [
                "netlifyAuth",
            ],
            params=_params,
        )
        _raw_response = self.session.delete(_url, **_authed_kwargs)

        _casters = [
            sdk_response.ResponseCaster(
                status_code=204, expected_type=typing.Any, is_error=False
            ),
            sdk_response.ResponseCaster(
                status_code="default", expected_type=Error, is_error=True
            ),
        ]

        _matching_casters = [
            c for c in _casters if c.match_code(_raw_response.status_code)
        ]
        if len(_matching_casters) == 0:
            raise sdk_errors.UnexpectedStatusCodeException(
                response=_raw_response,
                expected_codes=[c.status_code_str for c in _casters],
            )
        _caster = _matching_casters[0]
        _response_data = _caster.cast_response(_raw_response)

        if _caster.is_error:
            raise sdk_errors.RequestException(
                response=_raw_response, data=_response_data
            )

        return _response_data

    def delete_dns_record(self, *, zone_id: str, dns_record_id: str) -> typing.Any:
        """ """
        _endpoint = f"/dns_zones/{zone_id}/dns_records/{dns_record_id}"
        _url = f"{self.base_url}{_endpoint}"

        _params = {}  # type: dict[str, typing.Any]
        _authed_kwargs = self._add_auth(
            [
                "netlifyAuth",
            ],
            params=_params,
        )
        _raw_response = self.session.delete(_url, **_authed_kwargs)

        _casters = [
            sdk_response.ResponseCaster(
                status_code=204, expected_type=typing.Any, is_error=False
            ),
            sdk_response.ResponseCaster(
                status_code="default", expected_type=Error, is_error=True
            ),
        ]

        _matching_casters = [
            c for c in _casters if c.match_code(_raw_response.status_code)
        ]
        if len(_matching_casters) == 0:
            raise sdk_errors.UnexpectedStatusCodeException(
                response=_raw_response,
                expected_codes=[c.status_code_str for c in _casters],
            )
        _caster = _matching_casters[0]
        _response_data = _caster.cast_response(_raw_response)

        if _caster.is_error:
            raise sdk_errors.RequestException(
                response=_raw_response, data=_response_data
            )

        return _response_data

    def delete_hook(self, *, hook_id: str) -> typing.Any:
        """ """
        _endpoint = f"/hooks/{hook_id}"
        _url = f"{self.base_url}{_endpoint}"

        _params = {}  # type: dict[str, typing.Any]
        _authed_kwargs = self._add_auth(
            [
                "netlifyAuth",
            ],
            params=_params,
        )
        _raw_response = self.session.delete(_url, **_authed_kwargs)

        _casters = [
            sdk_response.ResponseCaster(
                status_code=204, expected_type=typing.Any, is_error=False
            ),
        ]

        _matching_casters = [
            c for c in _casters if c.match_code(_raw_response.status_code)
        ]
        if len(_matching_casters) == 0:
            raise sdk_errors.UnexpectedStatusCodeException(
                response=_raw_response,
                expected_codes=[c.status_code_str for c in _casters],
            )
        _caster = _matching_casters[0]
        _response_data = _caster.cast_response(_raw_response)

        if _caster.is_error:
            raise sdk_errors.RequestException(
                response=_raw_response, data=_response_data
            )

        return _response_data

    def delete_site(self, *, site_id: str) -> typing.Any:
        """ """
        _endpoint = f"/sites/{site_id}"
        _url = f"{self.base_url}{_endpoint}"

        _params = {}  # type: dict[str, typing.Any]
        _authed_kwargs = self._add_auth(
            [
                "netlifyAuth",
            ],
            params=_params,
        )
        _raw_response = self.session.delete(_url, **_authed_kwargs)

        _casters = [
            sdk_response.ResponseCaster(
                status_code=204, expected_type=typing.Any, is_error=False
            ),
            sdk_response.ResponseCaster(
                status_code="default", expected_type=Error, is_error=True
            ),
        ]

        _matching_casters = [
            c for c in _casters if c.match_code(_raw_response.status_code)
        ]
        if len(_matching_casters) == 0:
            raise sdk_errors.UnexpectedStatusCodeException(
                response=_raw_response,
                expected_codes=[c.status_code_str for c in _casters],
            )
        _caster = _matching_casters[0]
        _response_data = _caster.cast_response(_raw_response)

        if _caster.is_error:
            raise sdk_errors.RequestException(
                response=_raw_response, data=_response_data
            )

        return _response_data

    def delete_site_asset(self, *, site_id: str, asset_id: str) -> typing.Any:
        """ """
        _endpoint = f"/sites/{site_id}/assets/{asset_id}"
        _url = f"{self.base_url}{_endpoint}"

        _params = {}  # type: dict[str, typing.Any]
        _authed_kwargs = self._add_auth(
            [
                "netlifyAuth",
            ],
            params=_params,
        )
        _raw_response = self.session.delete(_url, **_authed_kwargs)

        _casters = [
            sdk_response.ResponseCaster(
                status_code=204, expected_type=typing.Any, is_error=False
            ),
            sdk_response.ResponseCaster(
                status_code="default", expected_type=Error, is_error=True
            ),
        ]

        _matching_casters = [
            c for c in _casters if c.match_code(_raw_response.status_code)
        ]
        if len(_matching_casters) == 0:
            raise sdk_errors.UnexpectedStatusCodeException(
                response=_raw_response,
                expected_codes=[c.status_code_str for c in _casters],
            )
        _caster = _matching_casters[0]
        _response_data = _caster.cast_response(_raw_response)

        if _caster.is_error:
            raise sdk_errors.RequestException(
                response=_raw_response, data=_response_data
            )

        return _response_data

    def delete_site_build_hook(self, *, site_id: str, id: str) -> typing.Any:
        """ """
        _endpoint = f"/sites/{site_id}/build_hooks/{id}"
        _url = f"{self.base_url}{_endpoint}"

        _params = {}  # type: dict[str, typing.Any]
        _authed_kwargs = self._add_auth(
            [
                "netlifyAuth",
            ],
            params=_params,
        )
        _raw_response = self.session.delete(_url, **_authed_kwargs)

        _casters = [
            sdk_response.ResponseCaster(
                status_code=204, expected_type=typing.Any, is_error=False
            ),
            sdk_response.ResponseCaster(
                status_code="default", expected_type=Error, is_error=True
            ),
        ]

        _matching_casters = [
            c for c in _casters if c.match_code(_raw_response.status_code)
        ]
        if len(_matching_casters) == 0:
            raise sdk_errors.UnexpectedStatusCodeException(
                response=_raw_response,
                expected_codes=[c.status_code_str for c in _casters],
            )
        _caster = _matching_casters[0]
        _response_data = _caster.cast_response(_raw_response)

        if _caster.is_error:
            raise sdk_errors.RequestException(
                response=_raw_response, data=_response_data
            )

        return _response_data

    def delete_site_deploy(self, *, site_id: str, deploy_id: str) -> typing.Any:
        """ """
        _endpoint = f"/sites/{site_id}/deploys/{deploy_id}"
        _url = f"{self.base_url}{_endpoint}"

        _params = {}  # type: dict[str, typing.Any]
        _authed_kwargs = self._add_auth(
            [
                "netlifyAuth",
            ],
            params=_params,
        )
        _raw_response = self.session.delete(_url, **_authed_kwargs)

        _casters = [
            sdk_response.ResponseCaster(
                status_code=204, expected_type=typing.Any, is_error=False
            ),
            sdk_response.ResponseCaster(
                status_code="default", expected_type=Error, is_error=True
            ),
        ]

        _matching_casters = [
            c for c in _casters if c.match_code(_raw_response.status_code)
        ]
        if len(_matching_casters) == 0:
            raise sdk_errors.UnexpectedStatusCodeException(
                response=_raw_response,
                expected_codes=[c.status_code_str for c in _casters],
            )
        _caster = _matching_casters[0]
        _response_data = _caster.cast_response(_raw_response)

        if _caster.is_error:
            raise sdk_errors.RequestException(
                response=_raw_response, data=_response_data
            )

        return _response_data

    def delete_site_form(self, *, site_id: str, form_id: str) -> typing.Any:
        """ """
        _endpoint = f"/sites/{site_id}/forms/{form_id}"
        _url = f"{self.base_url}{_endpoint}"

        _params = {}  # type: dict[str, typing.Any]
        _authed_kwargs = self._add_auth(
            [
                "netlifyAuth",
            ],
            params=_params,
        )
        _raw_response = self.session.delete(_url, **_authed_kwargs)

        _casters = [
            sdk_response.ResponseCaster(
                status_code=204, expected_type=typing.Any, is_error=False
            ),
            sdk_response.ResponseCaster(
                status_code="default", expected_type=Error, is_error=True
            ),
        ]

        _matching_casters = [
            c for c in _casters if c.match_code(_raw_response.status_code)
        ]
        if len(_matching_casters) == 0:
            raise sdk_errors.UnexpectedStatusCodeException(
                response=_raw_response,
                expected_codes=[c.status_code_str for c in _casters],
            )
        _caster = _matching_casters[0]
        _response_data = _caster.cast_response(_raw_response)

        if _caster.is_error:
            raise sdk_errors.RequestException(
                response=_raw_response, data=_response_data
            )

        return _response_data

    def delete_service_instance(
        self, *, site_id: str, addon: str, instance_id: str
    ) -> typing.Any:
        """ """
        _endpoint = f"/sites/{site_id}/services/{addon}/instances/{instance_id}"
        _url = f"{self.base_url}{_endpoint}"

        _params = {}  # type: dict[str, typing.Any]
        _authed_kwargs = self._add_auth(
            [
                "netlifyAuth",
            ],
            params=_params,
        )
        _raw_response = self.session.delete(_url, **_authed_kwargs)

        _casters = [
            sdk_response.ResponseCaster(
                status_code=204, expected_type=typing.Any, is_error=False
            ),
            sdk_response.ResponseCaster(
                status_code="default", expected_type=Error, is_error=True
            ),
        ]

        _matching_casters = [
            c for c in _casters if c.match_code(_raw_response.status_code)
        ]
        if len(_matching_casters) == 0:
            raise sdk_errors.UnexpectedStatusCodeException(
                response=_raw_response,
                expected_codes=[c.status_code_str for c in _casters],
            )
        _caster = _matching_casters[0]
        _response_data = _caster.cast_response(_raw_response)

        if _caster.is_error:
            raise sdk_errors.RequestException(
                response=_raw_response, data=_response_data
            )

        return _response_data

    def delete_site_snippet(self, *, site_id: str, snippet_id: str) -> typing.Any:
        """ """
        _endpoint = f"/sites/{site_id}/snippets/{snippet_id}"
        _url = f"{self.base_url}{_endpoint}"

        _params = {}  # type: dict[str, typing.Any]
        _authed_kwargs = self._add_auth(
            [
                "netlifyAuth",
            ],
            params=_params,
        )
        _raw_response = self.session.delete(_url, **_authed_kwargs)

        _casters = [
            sdk_response.ResponseCaster(
                status_code=204, expected_type=typing.Any, is_error=False
            ),
            sdk_response.ResponseCaster(
                status_code="default", expected_type=Error, is_error=True
            ),
        ]

        _matching_casters = [
            c for c in _casters if c.match_code(_raw_response.status_code)
        ]
        if len(_matching_casters) == 0:
            raise sdk_errors.UnexpectedStatusCodeException(
                response=_raw_response,
                expected_codes=[c.status_code_str for c in _casters],
            )
        _caster = _matching_casters[0]
        _response_data = _caster.cast_response(_raw_response)

        if _caster.is_error:
            raise sdk_errors.RequestException(
                response=_raw_response, data=_response_data
            )

        return _response_data

    def delete_submission(self, *, submission_id: str) -> typing.Any:
        """ """
        _endpoint = f"/submissions/{submission_id}"
        _url = f"{self.base_url}{_endpoint}"

        _params = {}  # type: dict[str, typing.Any]
        _authed_kwargs = self._add_auth(
            [
                "netlifyAuth",
            ],
            params=_params,
        )
        _raw_response = self.session.delete(_url, **_authed_kwargs)

        _casters = [
            sdk_response.ResponseCaster(
                status_code=204, expected_type=typing.Any, is_error=False
            ),
            sdk_response.ResponseCaster(
                status_code="default", expected_type=Error, is_error=True
            ),
        ]

        _matching_casters = [
            c for c in _casters if c.match_code(_raw_response.status_code)
        ]
        if len(_matching_casters) == 0:
            raise sdk_errors.UnexpectedStatusCodeException(
                response=_raw_response,
                expected_codes=[c.status_code_str for c in _casters],
            )
        _caster = _matching_casters[0]
        _response_data = _caster.cast_response(_raw_response)

        if _caster.is_error:
            raise sdk_errors.RequestException(
                response=_raw_response, data=_response_data
            )

        return _response_data

    def remove_account_member(self, *, account_slug: str, member_id: str) -> typing.Any:
        """ """
        _endpoint = f"/{account_slug}/members/{member_id}"
        _url = f"{self.base_url}{_endpoint}"

        _params = {}  # type: dict[str, typing.Any]
        _authed_kwargs = self._add_auth(
            [
                "netlifyAuth",
            ],
            params=_params,
        )
        _raw_response = self.session.delete(_url, **_authed_kwargs)

        _casters = [
            sdk_response.ResponseCaster(
                status_code=204, expected_type=typing.Any, is_error=False
            ),
            sdk_response.ResponseCaster(
                status_code="default", expected_type=Error, is_error=True
            ),
        ]

        _matching_casters = [
            c for c in _casters if c.match_code(_raw_response.status_code)
        ]
        if len(_matching_casters) == 0:
            raise sdk_errors.UnexpectedStatusCodeException(
                response=_raw_response,
                expected_codes=[c.status_code_str for c in _casters],
            )
        _caster = _matching_casters[0]
        _response_data = _caster.cast_response(_raw_response)

        if _caster.is_error:
            raise sdk_errors.RequestException(
                response=_raw_response, data=_response_data
            )

        return _response_data

    def list_accounts_for_user(self) -> typing.List[AccountMembership]:
        """ """
        _endpoint = f"/accounts"
        _url = f"{self.base_url}{_endpoint}"

        _params = {}  # type: dict[str, typing.Any]
        _authed_kwargs = self._add_auth(
            [
                "netlifyAuth",
            ],
            params=_params,
        )
        _raw_response = self.session.get(_url, **_authed_kwargs)

        _casters = [
            sdk_response.ResponseCaster(
                status_code=200,
                expected_type=typing.List[AccountMembership],
                is_error=False,
            ),
            sdk_response.ResponseCaster(
                status_code="default", expected_type=Error, is_error=True
            ),
        ]

        _matching_casters = [
            c for c in _casters if c.match_code(_raw_response.status_code)
        ]
        if len(_matching_casters) == 0:
            raise sdk_errors.UnexpectedStatusCodeException(
                response=_raw_response,
                expected_codes=[c.status_code_str for c in _casters],
            )
        _caster = _matching_casters[0]
        _response_data = _caster.cast_response(_raw_response)

        if _caster.is_error:
            raise sdk_errors.RequestException(
                response=_raw_response, data=_response_data
            )

        return _response_data

    def list_account_types_for_user(self) -> typing.List[AccountType]:
        """ """
        _endpoint = f"/accounts/types"
        _url = f"{self.base_url}{_endpoint}"

        _params = {}  # type: dict[str, typing.Any]
        _authed_kwargs = self._add_auth(
            [
                "netlifyAuth",
            ],
            params=_params,
        )
        _raw_response = self.session.get(_url, **_authed_kwargs)

        _casters = [
            sdk_response.ResponseCaster(
                status_code=200, expected_type=typing.List[AccountType], is_error=False
            ),
            sdk_response.ResponseCaster(
                status_code="default", expected_type=Error, is_error=True
            ),
        ]

        _matching_casters = [
            c for c in _casters if c.match_code(_raw_response.status_code)
        ]
        if len(_matching_casters) == 0:
            raise sdk_errors.UnexpectedStatusCodeException(
                response=_raw_response,
                expected_codes=[c.status_code_str for c in _casters],
            )
        _caster = _matching_casters[0]
        _response_data = _caster.cast_response(_raw_response)

        if _caster.is_error:
            raise sdk_errors.RequestException(
                response=_raw_response, data=_response_data
            )

        return _response_data

    def get_account(self, *, account_id: str) -> typing.List[AccountMembership]:
        """ """
        _endpoint = f"/accounts/{account_id}"
        _url = f"{self.base_url}{_endpoint}"

        _params = {}  # type: dict[str, typing.Any]
        _authed_kwargs = self._add_auth(
            [
                "netlifyAuth",
            ],
            params=_params,
        )
        _raw_response = self.session.get(_url, **_authed_kwargs)

        _casters = [
            sdk_response.ResponseCaster(
                status_code=200,
                expected_type=typing.List[AccountMembership],
                is_error=False,
            ),
            sdk_response.ResponseCaster(
                status_code="default", expected_type=Error, is_error=True
            ),
        ]

        _matching_casters = [
            c for c in _casters if c.match_code(_raw_response.status_code)
        ]
        if len(_matching_casters) == 0:
            raise sdk_errors.UnexpectedStatusCodeException(
                response=_raw_response,
                expected_codes=[c.status_code_str for c in _casters],
            )
        _caster = _matching_casters[0]
        _response_data = _caster.cast_response(_raw_response)

        if _caster.is_error:
            raise sdk_errors.RequestException(
                response=_raw_response, data=_response_data
            )

        return _response_data

    def list_account_audit_events(
        self,
        *,
        account_id: str,
        log_type: typing.Optional[str] = None,
        page: typing.Optional[int] = None,
        per_page: typing.Optional[int] = None,
        query: typing.Optional[str] = None,
    ) -> typing.List[AuditLog]:
        """ """
        _endpoint = f"/accounts/{account_id}/audit"
        _url = f"{self.base_url}{_endpoint}"

        _params = {}  # type: dict[str, typing.Any]
        if log_type is not None:
            _params["log_type"] = log_type
        if page is not None:
            _params["page"] = page
        if per_page is not None:
            _params["per_page"] = per_page
        if query is not None:
            _params["query"] = query
        _authed_kwargs = self._add_auth(
            [
                "netlifyAuth",
            ],
            params=_params,
        )
        _raw_response = self.session.get(_url, **_authed_kwargs)

        _casters = [
            sdk_response.ResponseCaster(
                status_code=200, expected_type=typing.List[AuditLog], is_error=False
            ),
            sdk_response.ResponseCaster(
                status_code="default", expected_type=Error, is_error=True
            ),
        ]

        _matching_casters = [
            c for c in _casters if c.match_code(_raw_response.status_code)
        ]
        if len(_matching_casters) == 0:
            raise sdk_errors.UnexpectedStatusCodeException(
                response=_raw_response,
                expected_codes=[c.status_code_str for c in _casters],
            )
        _caster = _matching_casters[0]
        _response_data = _caster.cast_response(_raw_response)

        if _caster.is_error:
            raise sdk_errors.RequestException(
                response=_raw_response, data=_response_data
            )

        return _response_data

    def get_env_vars(
        self,
        *,
        account_id: str,
        context_name: typing.Optional[GetAccountsAccountIdEnvContextNameEnum] = None,
        scope: typing.Optional[GetAccountsAccountIdEnvScopeEnum] = None,
        site_id: typing.Optional[str] = None,
    ) -> typing.List[EnvVar]:
        """
        Returns all environment variables for an account or site. An account corresponds to a team in the Netlify UI. To use this endpoint, your site must no longer be using the <a href="https://docs.netlify.com/environment-variables/classic-experience/">classic environment variables experience</a>.  Migrate now with the Netlify UI.
        """
        _endpoint = f"/accounts/{account_id}/env"
        _url = f"{self.base_url}{_endpoint}"

        _params = {}  # type: dict[str, typing.Any]
        if context_name is not None:
            _params["context_name"] = context_name
        if scope is not None:
            _params["scope"] = scope
        if site_id is not None:
            _params["site_id"] = site_id
        _authed_kwargs = self._add_auth(
            [
                "netlifyAuth",
            ],
            params=_params,
        )
        _raw_response = self.session.get(_url, **_authed_kwargs)

        _casters = [
            sdk_response.ResponseCaster(
                status_code=200, expected_type=typing.List[EnvVar], is_error=False
            ),
            sdk_response.ResponseCaster(
                status_code="default", expected_type=Error, is_error=True
            ),
        ]

        _matching_casters = [
            c for c in _casters if c.match_code(_raw_response.status_code)
        ]
        if len(_matching_casters) == 0:
            raise sdk_errors.UnexpectedStatusCodeException(
                response=_raw_response,
                expected_codes=[c.status_code_str for c in _casters],
            )
        _caster = _matching_casters[0]
        _response_data = _caster.cast_response(_raw_response)

        if _caster.is_error:
            raise sdk_errors.RequestException(
                response=_raw_response, data=_response_data
            )

        return _response_data

    def get_env_var(
        self, *, account_id: str, key: str, site_id: typing.Optional[str] = None
    ) -> EnvVar:
        """
        Returns an individual environment variable. To use this endpoint, your site must no longer be using the <a href="https://docs.netlify.com/environment-variables/classic-experience/">classic environment variables experience</a>.  Migrate now with the Netlify UI.
        """
        _endpoint = f"/accounts/{account_id}/env/{key}"
        _url = f"{self.base_url}{_endpoint}"

        _params = {}  # type: dict[str, typing.Any]
        if site_id is not None:
            _params["site_id"] = site_id
        _authed_kwargs = self._add_auth(
            [
                "netlifyAuth",
            ],
            params=_params,
        )
        _raw_response = self.session.get(_url, **_authed_kwargs)

        _casters = [
            sdk_response.ResponseCaster(
                status_code=200, expected_type=EnvVar, is_error=False
            ),
            sdk_response.ResponseCaster(
                status_code="default", expected_type=Error, is_error=True
            ),
        ]

        _matching_casters = [
            c for c in _casters if c.match_code(_raw_response.status_code)
        ]
        if len(_matching_casters) == 0:
            raise sdk_errors.UnexpectedStatusCodeException(
                response=_raw_response,
                expected_codes=[c.status_code_str for c in _casters],
            )
        _caster = _matching_casters[0]
        _response_data = _caster.cast_response(_raw_response)

        if _caster.is_error:
            raise sdk_errors.RequestException(
                response=_raw_response, data=_response_data
            )

        return _response_data

    def get_site_env_vars(
        self,
        *,
        site_id: str,
        context_name: typing.Optional[GetApiV1SitesSiteIdEnvContextNameEnum] = None,
        scope: typing.Optional[GetApiV1SitesSiteIdEnvScopeEnum] = None,
    ) -> typing.List[EnvVar]:
        """
        Returns all environment variables for a site. This convenience method behaves the same as `getEnvVars` but doesn't require an `account_id` as input.
        """
        _endpoint = f"/api/v1/sites/{site_id}/env"
        _url = f"{self.base_url}{_endpoint}"

        _params = {}  # type: dict[str, typing.Any]
        if context_name is not None:
            _params["context_name"] = context_name
        if scope is not None:
            _params["scope"] = scope
        _authed_kwargs = self._add_auth(
            [
                "netlifyAuth",
            ],
            params=_params,
        )
        _raw_response = self.session.get(_url, **_authed_kwargs)

        _casters = [
            sdk_response.ResponseCaster(
                status_code=200, expected_type=typing.List[EnvVar], is_error=False
            ),
            sdk_response.ResponseCaster(
                status_code="default", expected_type=Error, is_error=True
            ),
        ]

        _matching_casters = [
            c for c in _casters if c.match_code(_raw_response.status_code)
        ]
        if len(_matching_casters) == 0:
            raise sdk_errors.UnexpectedStatusCodeException(
                response=_raw_response,
                expected_codes=[c.status_code_str for c in _casters],
            )
        _caster = _matching_casters[0]
        _response_data = _caster.cast_response(_raw_response)

        if _caster.is_error:
            raise sdk_errors.RequestException(
                response=_raw_response, data=_response_data
            )

        return _response_data

    def list_payment_methods_for_user(self) -> typing.List[PaymentMethod]:
        """ """
        _endpoint = f"/billing/payment_methods"
        _url = f"{self.base_url}{_endpoint}"

        _params = {}  # type: dict[str, typing.Any]
        _authed_kwargs = self._add_auth(
            [
                "netlifyAuth",
            ],
            params=_params,
        )
        _raw_response = self.session.get(_url, **_authed_kwargs)

        _casters = [
            sdk_response.ResponseCaster(
                status_code=200,
                expected_type=typing.List[PaymentMethod],
                is_error=False,
            ),
            sdk_response.ResponseCaster(
                status_code="default", expected_type=Error, is_error=True
            ),
        ]

        _matching_casters = [
            c for c in _casters if c.match_code(_raw_response.status_code)
        ]
        if len(_matching_casters) == 0:
            raise sdk_errors.UnexpectedStatusCodeException(
                response=_raw_response,
                expected_codes=[c.status_code_str for c in _casters],
            )
        _caster = _matching_casters[0]
        _response_data = _caster.cast_response(_raw_response)

        if _caster.is_error:
            raise sdk_errors.RequestException(
                response=_raw_response, data=_response_data
            )

        return _response_data

    def get_site_build(self, *, build_id: str) -> Build:
        """ """
        _endpoint = f"/builds/{build_id}"
        _url = f"{self.base_url}{_endpoint}"

        _params = {}  # type: dict[str, typing.Any]
        _authed_kwargs = self._add_auth(
            [
                "netlifyAuth",
            ],
            params=_params,
        )
        _raw_response = self.session.get(_url, **_authed_kwargs)

        _casters = [
            sdk_response.ResponseCaster(
                status_code=200, expected_type=Build, is_error=False
            ),
            sdk_response.ResponseCaster(
                status_code="default", expected_type=Error, is_error=True
            ),
        ]

        _matching_casters = [
            c for c in _casters if c.match_code(_raw_response.status_code)
        ]
        if len(_matching_casters) == 0:
            raise sdk_errors.UnexpectedStatusCodeException(
                response=_raw_response,
                expected_codes=[c.status_code_str for c in _casters],
            )
        _caster = _matching_casters[0]
        _response_data = _caster.cast_response(_raw_response)

        if _caster.is_error:
            raise sdk_errors.RequestException(
                response=_raw_response, data=_response_data
            )

        return _response_data

    def list_deploy_keys(self) -> typing.List[DeployKey]:
        """ """
        _endpoint = f"/deploy_keys"
        _url = f"{self.base_url}{_endpoint}"

        _params = {}  # type: dict[str, typing.Any]
        _authed_kwargs = self._add_auth(
            [
                "netlifyAuth",
            ],
            params=_params,
        )
        _raw_response = self.session.get(_url, **_authed_kwargs)

        _casters = [
            sdk_response.ResponseCaster(
                status_code=200, expected_type=typing.List[DeployKey], is_error=False
            ),
            sdk_response.ResponseCaster(
                status_code="default", expected_type=Error, is_error=True
            ),
        ]

        _matching_casters = [
            c for c in _casters if c.match_code(_raw_response.status_code)
        ]
        if len(_matching_casters) == 0:
            raise sdk_errors.UnexpectedStatusCodeException(
                response=_raw_response,
                expected_codes=[c.status_code_str for c in _casters],
            )
        _caster = _matching_casters[0]
        _response_data = _caster.cast_response(_raw_response)

        if _caster.is_error:
            raise sdk_errors.RequestException(
                response=_raw_response, data=_response_data
            )

        return _response_data

    def get_deploy_key(self, *, key_id: str) -> DeployKey:
        """ """
        _endpoint = f"/deploy_keys/{key_id}"
        _url = f"{self.base_url}{_endpoint}"

        _params = {}  # type: dict[str, typing.Any]
        _authed_kwargs = self._add_auth(
            [
                "netlifyAuth",
            ],
            params=_params,
        )
        _raw_response = self.session.get(_url, **_authed_kwargs)

        _casters = [
            sdk_response.ResponseCaster(
                status_code=200, expected_type=DeployKey, is_error=False
            ),
            sdk_response.ResponseCaster(
                status_code="default", expected_type=Error, is_error=True
            ),
        ]

        _matching_casters = [
            c for c in _casters if c.match_code(_raw_response.status_code)
        ]
        if len(_matching_casters) == 0:
            raise sdk_errors.UnexpectedStatusCodeException(
                response=_raw_response,
                expected_codes=[c.status_code_str for c in _casters],
            )
        _caster = _matching_casters[0]
        _response_data = _caster.cast_response(_raw_response)

        if _caster.is_error:
            raise sdk_errors.RequestException(
                response=_raw_response, data=_response_data
            )

        return _response_data

    def get_deploy(self, *, deploy_id: str) -> Deploy:
        """ """
        _endpoint = f"/deploys/{deploy_id}"
        _url = f"{self.base_url}{_endpoint}"

        _params = {}  # type: dict[str, typing.Any]
        _authed_kwargs = self._add_auth(
            [
                "netlifyAuth",
            ],
            params=_params,
        )
        _raw_response = self.session.get(_url, **_authed_kwargs)

        _casters = [
            sdk_response.ResponseCaster(
                status_code=200, expected_type=Deploy, is_error=False
            ),
            sdk_response.ResponseCaster(
                status_code="default", expected_type=Error, is_error=True
            ),
        ]

        _matching_casters = [
            c for c in _casters if c.match_code(_raw_response.status_code)
        ]
        if len(_matching_casters) == 0:
            raise sdk_errors.UnexpectedStatusCodeException(
                response=_raw_response,
                expected_codes=[c.status_code_str for c in _casters],
            )
        _caster = _matching_casters[0]
        _response_data = _caster.cast_response(_raw_response)

        if _caster.is_error:
            raise sdk_errors.RequestException(
                response=_raw_response, data=_response_data
            )

        return _response_data

    def get_dns_zones(
        self, *, account_slug: typing.Optional[str] = None
    ) -> typing.List[DnsZone]:
        """ """
        _endpoint = f"/dns_zones"
        _url = f"{self.base_url}{_endpoint}"

        _params = {}  # type: dict[str, typing.Any]
        if account_slug is not None:
            _params["account_slug"] = account_slug
        _authed_kwargs = self._add_auth(
            [
                "netlifyAuth",
            ],
            params=_params,
        )
        _raw_response = self.session.get(_url, **_authed_kwargs)

        _casters = [
            sdk_response.ResponseCaster(
                status_code=200, expected_type=typing.List[DnsZone], is_error=False
            ),
            sdk_response.ResponseCaster(
                status_code="default", expected_type=Error, is_error=True
            ),
        ]

        _matching_casters = [
            c for c in _casters if c.match_code(_raw_response.status_code)
        ]
        if len(_matching_casters) == 0:
            raise sdk_errors.UnexpectedStatusCodeException(
                response=_raw_response,
                expected_codes=[c.status_code_str for c in _casters],
            )
        _caster = _matching_casters[0]
        _response_data = _caster.cast_response(_raw_response)

        if _caster.is_error:
            raise sdk_errors.RequestException(
                response=_raw_response, data=_response_data
            )

        return _response_data

    def get_dns_zone(self, *, zone_id: str) -> DnsZone:
        """ """
        _endpoint = f"/dns_zones/{zone_id}"
        _url = f"{self.base_url}{_endpoint}"

        _params = {}  # type: dict[str, typing.Any]
        _authed_kwargs = self._add_auth(
            [
                "netlifyAuth",
            ],
            params=_params,
        )
        _raw_response = self.session.get(_url, **_authed_kwargs)

        _casters = [
            sdk_response.ResponseCaster(
                status_code=200, expected_type=DnsZone, is_error=False
            ),
            sdk_response.ResponseCaster(
                status_code="default", expected_type=Error, is_error=True
            ),
        ]

        _matching_casters = [
            c for c in _casters if c.match_code(_raw_response.status_code)
        ]
        if len(_matching_casters) == 0:
            raise sdk_errors.UnexpectedStatusCodeException(
                response=_raw_response,
                expected_codes=[c.status_code_str for c in _casters],
            )
        _caster = _matching_casters[0]
        _response_data = _caster.cast_response(_raw_response)

        if _caster.is_error:
            raise sdk_errors.RequestException(
                response=_raw_response, data=_response_data
            )

        return _response_data

    def get_dns_records(self, *, zone_id: str) -> typing.List[DnsRecord]:
        """ """
        _endpoint = f"/dns_zones/{zone_id}/dns_records"
        _url = f"{self.base_url}{_endpoint}"

        _params = {}  # type: dict[str, typing.Any]
        _authed_kwargs = self._add_auth(
            [
                "netlifyAuth",
            ],
            params=_params,
        )
        _raw_response = self.session.get(_url, **_authed_kwargs)

        _casters = [
            sdk_response.ResponseCaster(
                status_code=200, expected_type=typing.List[DnsRecord], is_error=False
            ),
            sdk_response.ResponseCaster(
                status_code="default", expected_type=Error, is_error=True
            ),
        ]

        _matching_casters = [
            c for c in _casters if c.match_code(_raw_response.status_code)
        ]
        if len(_matching_casters) == 0:
            raise sdk_errors.UnexpectedStatusCodeException(
                response=_raw_response,
                expected_codes=[c.status_code_str for c in _casters],
            )
        _caster = _matching_casters[0]
        _response_data = _caster.cast_response(_raw_response)

        if _caster.is_error:
            raise sdk_errors.RequestException(
                response=_raw_response, data=_response_data
            )

        return _response_data

    def get_individual_dns_record(
        self, *, zone_id: str, dns_record_id: str
    ) -> DnsRecord:
        """ """
        _endpoint = f"/dns_zones/{zone_id}/dns_records/{dns_record_id}"
        _url = f"{self.base_url}{_endpoint}"

        _params = {}  # type: dict[str, typing.Any]
        _authed_kwargs = self._add_auth(
            [
                "netlifyAuth",
            ],
            params=_params,
        )
        _raw_response = self.session.get(_url, **_authed_kwargs)

        _casters = [
            sdk_response.ResponseCaster(
                status_code=200, expected_type=DnsRecord, is_error=False
            ),
            sdk_response.ResponseCaster(
                status_code="default", expected_type=Error, is_error=True
            ),
        ]

        _matching_casters = [
            c for c in _casters if c.match_code(_raw_response.status_code)
        ]
        if len(_matching_casters) == 0:
            raise sdk_errors.UnexpectedStatusCodeException(
                response=_raw_response,
                expected_codes=[c.status_code_str for c in _casters],
            )
        _caster = _matching_casters[0]
        _response_data = _caster.cast_response(_raw_response)

        if _caster.is_error:
            raise sdk_errors.RequestException(
                response=_raw_response, data=_response_data
            )

        return _response_data

    def list_form_submissions(
        self,
        *,
        form_id: str,
        page: typing.Optional[int] = None,
        per_page: typing.Optional[int] = None,
    ) -> typing.List[Submission]:
        """ """
        _endpoint = f"/forms/{form_id}/submissions"
        _url = f"{self.base_url}{_endpoint}"

        _params = {}  # type: dict[str, typing.Any]
        if page is not None:
            _params["page"] = page
        if per_page is not None:
            _params["per_page"] = per_page
        _authed_kwargs = self._add_auth(
            [
                "netlifyAuth",
            ],
            params=_params,
        )
        _raw_response = self.session.get(_url, **_authed_kwargs)

        _casters = [
            sdk_response.ResponseCaster(
                status_code=200, expected_type=typing.List[Submission], is_error=False
            ),
            sdk_response.ResponseCaster(
                status_code="default", expected_type=Error, is_error=True
            ),
        ]

        _matching_casters = [
            c for c in _casters if c.match_code(_raw_response.status_code)
        ]
        if len(_matching_casters) == 0:
            raise sdk_errors.UnexpectedStatusCodeException(
                response=_raw_response,
                expected_codes=[c.status_code_str for c in _casters],
            )
        _caster = _matching_casters[0]
        _response_data = _caster.cast_response(_raw_response)

        if _caster.is_error:
            raise sdk_errors.RequestException(
                response=_raw_response, data=_response_data
            )

        return _response_data

    def list_hooks_by_site_id(self, *, site_id: str) -> typing.List[Hook]:
        """ """
        _endpoint = f"/hooks"
        _url = f"{self.base_url}{_endpoint}"

        _params = {}  # type: dict[str, typing.Any]
        _params["site_id"] = self._format_param(site_id, False)
        _authed_kwargs = self._add_auth(
            [
                "netlifyAuth",
            ],
            params=_params,
        )
        _raw_response = self.session.get(_url, **_authed_kwargs)

        _casters = [
            sdk_response.ResponseCaster(
                status_code=200, expected_type=typing.List[Hook], is_error=False
            ),
            sdk_response.ResponseCaster(
                status_code="default", expected_type=Error, is_error=True
            ),
        ]

        _matching_casters = [
            c for c in _casters if c.match_code(_raw_response.status_code)
        ]
        if len(_matching_casters) == 0:
            raise sdk_errors.UnexpectedStatusCodeException(
                response=_raw_response,
                expected_codes=[c.status_code_str for c in _casters],
            )
        _caster = _matching_casters[0]
        _response_data = _caster.cast_response(_raw_response)

        if _caster.is_error:
            raise sdk_errors.RequestException(
                response=_raw_response, data=_response_data
            )

        return _response_data

    def list_hook_types(self) -> typing.List[HookType]:
        """ """
        _endpoint = f"/hooks/types"
        _url = f"{self.base_url}{_endpoint}"

        _params = {}  # type: dict[str, typing.Any]
        _authed_kwargs = self._add_auth(
            [
                "netlifyAuth",
            ],
            params=_params,
        )
        _raw_response = self.session.get(_url, **_authed_kwargs)

        _casters = [
            sdk_response.ResponseCaster(
                status_code=200, expected_type=typing.List[HookType], is_error=False
            ),
            sdk_response.ResponseCaster(
                status_code="default", expected_type=Error, is_error=True
            ),
        ]

        _matching_casters = [
            c for c in _casters if c.match_code(_raw_response.status_code)
        ]
        if len(_matching_casters) == 0:
            raise sdk_errors.UnexpectedStatusCodeException(
                response=_raw_response,
                expected_codes=[c.status_code_str for c in _casters],
            )
        _caster = _matching_casters[0]
        _response_data = _caster.cast_response(_raw_response)

        if _caster.is_error:
            raise sdk_errors.RequestException(
                response=_raw_response, data=_response_data
            )

        return _response_data

    def get_hook(self, *, hook_id: str) -> Hook:
        """ """
        _endpoint = f"/hooks/{hook_id}"
        _url = f"{self.base_url}{_endpoint}"

        _params = {}  # type: dict[str, typing.Any]
        _authed_kwargs = self._add_auth(
            [
                "netlifyAuth",
            ],
            params=_params,
        )
        _raw_response = self.session.get(_url, **_authed_kwargs)

        _casters = [
            sdk_response.ResponseCaster(
                status_code=200, expected_type=Hook, is_error=False
            ),
            sdk_response.ResponseCaster(
                status_code="default", expected_type=Error, is_error=True
            ),
        ]

        _matching_casters = [
            c for c in _casters if c.match_code(_raw_response.status_code)
        ]
        if len(_matching_casters) == 0:
            raise sdk_errors.UnexpectedStatusCodeException(
                response=_raw_response,
                expected_codes=[c.status_code_str for c in _casters],
            )
        _caster = _matching_casters[0]
        _response_data = _caster.cast_response(_raw_response)

        if _caster.is_error:
            raise sdk_errors.RequestException(
                response=_raw_response, data=_response_data
            )

        return _response_data

    def show_ticket(self, *, ticket_id: str) -> Ticket:
        """ """
        _endpoint = f"/oauth/tickets/{ticket_id}"
        _url = f"{self.base_url}{_endpoint}"

        _params = {}  # type: dict[str, typing.Any]
        _authed_kwargs = self._add_auth(
            [
                "netlifyAuth",
            ],
            params=_params,
        )
        _raw_response = self.session.get(_url, **_authed_kwargs)

        _casters = [
            sdk_response.ResponseCaster(
                status_code=200, expected_type=Ticket, is_error=False
            ),
            sdk_response.ResponseCaster(
                status_code="default", expected_type=Error, is_error=True
            ),
        ]

        _matching_casters = [
            c for c in _casters if c.match_code(_raw_response.status_code)
        ]
        if len(_matching_casters) == 0:
            raise sdk_errors.UnexpectedStatusCodeException(
                response=_raw_response,
                expected_codes=[c.status_code_str for c in _casters],
            )
        _caster = _matching_casters[0]
        _response_data = _caster.cast_response(_raw_response)

        if _caster.is_error:
            raise sdk_errors.RequestException(
                response=_raw_response, data=_response_data
            )

        return _response_data

    def get_services(
        self, *, search: typing.Optional[str] = None
    ) -> typing.List[Service]:
        """ """
        _endpoint = f"/services/"
        _url = f"{self.base_url}{_endpoint}"

        _params = {}  # type: dict[str, typing.Any]
        if search is not None:
            _params["search"] = search
        _authed_kwargs = self._add_auth(
            [
                "netlifyAuth",
            ],
            params=_params,
        )
        _raw_response = self.session.get(_url, **_authed_kwargs)

        _casters = [
            sdk_response.ResponseCaster(
                status_code=200, expected_type=typing.List[Service], is_error=False
            ),
            sdk_response.ResponseCaster(
                status_code="default", expected_type=Error, is_error=True
            ),
        ]

        _matching_casters = [
            c for c in _casters if c.match_code(_raw_response.status_code)
        ]
        if len(_matching_casters) == 0:
            raise sdk_errors.UnexpectedStatusCodeException(
                response=_raw_response,
                expected_codes=[c.status_code_str for c in _casters],
            )
        _caster = _matching_casters[0]
        _response_data = _caster.cast_response(_raw_response)

        if _caster.is_error:
            raise sdk_errors.RequestException(
                response=_raw_response, data=_response_data
            )

        return _response_data

    def show_service(self, *, addon_name: str) -> Service:
        """ """
        _endpoint = f"/services/{addon_name}"
        _url = f"{self.base_url}{_endpoint}"

        _params = {}  # type: dict[str, typing.Any]
        _authed_kwargs = self._add_auth(
            [
                "netlifyAuth",
            ],
            params=_params,
        )
        _raw_response = self.session.get(_url, **_authed_kwargs)

        _casters = [
            sdk_response.ResponseCaster(
                status_code=200, expected_type=Service, is_error=False
            ),
            sdk_response.ResponseCaster(
                status_code="default", expected_type=Error, is_error=True
            ),
        ]

        _matching_casters = [
            c for c in _casters if c.match_code(_raw_response.status_code)
        ]
        if len(_matching_casters) == 0:
            raise sdk_errors.UnexpectedStatusCodeException(
                response=_raw_response,
                expected_codes=[c.status_code_str for c in _casters],
            )
        _caster = _matching_casters[0]
        _response_data = _caster.cast_response(_raw_response)

        if _caster.is_error:
            raise sdk_errors.RequestException(
                response=_raw_response, data=_response_data
            )

        return _response_data

    def show_service_manifest(self, *, addon_name: str) -> typing.Dict[str, typing.Any]:
        """ """
        _endpoint = f"/services/{addon_name}/manifest"
        _url = f"{self.base_url}{_endpoint}"

        _params = {}  # type: dict[str, typing.Any]
        _authed_kwargs = self._add_auth(
            [
                "netlifyAuth",
            ],
            params=_params,
        )
        _raw_response = self.session.get(_url, **_authed_kwargs)

        _casters = [
            sdk_response.ResponseCaster(
                status_code=201,
                expected_type=typing.Dict[str, typing.Any],
                is_error=False,
            ),
            sdk_response.ResponseCaster(
                status_code="default", expected_type=Error, is_error=True
            ),
        ]

        _matching_casters = [
            c for c in _casters if c.match_code(_raw_response.status_code)
        ]
        if len(_matching_casters) == 0:
            raise sdk_errors.UnexpectedStatusCodeException(
                response=_raw_response,
                expected_codes=[c.status_code_str for c in _casters],
            )
        _caster = _matching_casters[0]
        _response_data = _caster.cast_response(_raw_response)

        if _caster.is_error:
            raise sdk_errors.RequestException(
                response=_raw_response, data=_response_data
            )

        return _response_data

    def list_sites(
        self,
        *,
        filter: typing.Optional[GetSitesFilterEnum] = None,
        name: typing.Optional[str] = None,
        page: typing.Optional[int] = None,
        per_page: typing.Optional[int] = None,
    ) -> typing.List[Site]:
        """
        **Note:** Environment variable keys and values have moved from `build_settings.env` and `repo.env` to a new endpoint. Please use [getEnvVars](#tag/environmentVariables/operation/getEnvVars) to retrieve site environment variables.
        """
        _endpoint = f"/sites"
        _url = f"{self.base_url}{_endpoint}"

        _params = {}  # type: dict[str, typing.Any]
        if filter is not None:
            _params["filter"] = filter
        if name is not None:
            _params["name"] = name
        if page is not None:
            _params["page"] = page
        if per_page is not None:
            _params["per_page"] = per_page
        _authed_kwargs = self._add_auth(
            [
                "netlifyAuth",
            ],
            params=_params,
        )
        _raw_response = self.session.get(_url, **_authed_kwargs)

        _casters = [
            sdk_response.ResponseCaster(
                status_code=200, expected_type=typing.List[Site], is_error=False
            ),
            sdk_response.ResponseCaster(
                status_code="default", expected_type=Error, is_error=True
            ),
        ]

        _matching_casters = [
            c for c in _casters if c.match_code(_raw_response.status_code)
        ]
        if len(_matching_casters) == 0:
            raise sdk_errors.UnexpectedStatusCodeException(
                response=_raw_response,
                expected_codes=[c.status_code_str for c in _casters],
            )
        _caster = _matching_casters[0]
        _response_data = _caster.cast_response(_raw_response)

        if _caster.is_error:
            raise sdk_errors.RequestException(
                response=_raw_response, data=_response_data
            )

        return _response_data

    def get_site(self, *, site_id: str) -> Site:
        """
        **Note:** Environment variable keys and values have moved from `build_settings.env` and `repo.env` to a new endpoint. Please use [getEnvVars](#tag/environmentVariables/operation/getEnvVars) to retrieve site environment variables.
        """
        _endpoint = f"/sites/{site_id}"
        _url = f"{self.base_url}{_endpoint}"

        _params = {}  # type: dict[str, typing.Any]
        _authed_kwargs = self._add_auth(
            [
                "netlifyAuth",
            ],
            params=_params,
        )
        _raw_response = self.session.get(_url, **_authed_kwargs)

        _casters = [
            sdk_response.ResponseCaster(
                status_code=200, expected_type=Site, is_error=False
            ),
            sdk_response.ResponseCaster(
                status_code="default", expected_type=Error, is_error=True
            ),
        ]

        _matching_casters = [
            c for c in _casters if c.match_code(_raw_response.status_code)
        ]
        if len(_matching_casters) == 0:
            raise sdk_errors.UnexpectedStatusCodeException(
                response=_raw_response,
                expected_codes=[c.status_code_str for c in _casters],
            )
        _caster = _matching_casters[0]
        _response_data = _caster.cast_response(_raw_response)

        if _caster.is_error:
            raise sdk_errors.RequestException(
                response=_raw_response, data=_response_data
            )

        return _response_data

    def list_site_assets(self, *, site_id: str) -> typing.List[Asset]:
        """ """
        _endpoint = f"/sites/{site_id}/assets"
        _url = f"{self.base_url}{_endpoint}"

        _params = {}  # type: dict[str, typing.Any]
        _authed_kwargs = self._add_auth(
            [
                "netlifyAuth",
            ],
            params=_params,
        )
        _raw_response = self.session.get(_url, **_authed_kwargs)

        _casters = [
            sdk_response.ResponseCaster(
                status_code=200, expected_type=typing.List[Asset], is_error=False
            ),
            sdk_response.ResponseCaster(
                status_code="default", expected_type=Error, is_error=True
            ),
        ]

        _matching_casters = [
            c for c in _casters if c.match_code(_raw_response.status_code)
        ]
        if len(_matching_casters) == 0:
            raise sdk_errors.UnexpectedStatusCodeException(
                response=_raw_response,
                expected_codes=[c.status_code_str for c in _casters],
            )
        _caster = _matching_casters[0]
        _response_data = _caster.cast_response(_raw_response)

        if _caster.is_error:
            raise sdk_errors.RequestException(
                response=_raw_response, data=_response_data
            )

        return _response_data

    def get_site_asset_info(self, *, site_id: str, asset_id: str) -> Asset:
        """ """
        _endpoint = f"/sites/{site_id}/assets/{asset_id}"
        _url = f"{self.base_url}{_endpoint}"

        _params = {}  # type: dict[str, typing.Any]
        _authed_kwargs = self._add_auth(
            [
                "netlifyAuth",
            ],
            params=_params,
        )
        _raw_response = self.session.get(_url, **_authed_kwargs)

        _casters = [
            sdk_response.ResponseCaster(
                status_code=200, expected_type=Asset, is_error=False
            ),
            sdk_response.ResponseCaster(
                status_code="default", expected_type=Error, is_error=True
            ),
        ]

        _matching_casters = [
            c for c in _casters if c.match_code(_raw_response.status_code)
        ]
        if len(_matching_casters) == 0:
            raise sdk_errors.UnexpectedStatusCodeException(
                response=_raw_response,
                expected_codes=[c.status_code_str for c in _casters],
            )
        _caster = _matching_casters[0]
        _response_data = _caster.cast_response(_raw_response)

        if _caster.is_error:
            raise sdk_errors.RequestException(
                response=_raw_response, data=_response_data
            )

        return _response_data

    def get_site_asset_public_signature(
        self, *, site_id: str, asset_id: str
    ) -> AssetPublicSignature:
        """ """
        _endpoint = f"/sites/{site_id}/assets/{asset_id}/public_signature"
        _url = f"{self.base_url}{_endpoint}"

        _params = {}  # type: dict[str, typing.Any]
        _authed_kwargs = self._add_auth(
            [
                "netlifyAuth",
            ],
            params=_params,
        )
        _raw_response = self.session.get(_url, **_authed_kwargs)

        _casters = [
            sdk_response.ResponseCaster(
                status_code=200, expected_type=AssetPublicSignature, is_error=False
            ),
            sdk_response.ResponseCaster(
                status_code="default", expected_type=Error, is_error=True
            ),
        ]

        _matching_casters = [
            c for c in _casters if c.match_code(_raw_response.status_code)
        ]
        if len(_matching_casters) == 0:
            raise sdk_errors.UnexpectedStatusCodeException(
                response=_raw_response,
                expected_codes=[c.status_code_str for c in _casters],
            )
        _caster = _matching_casters[0]
        _response_data = _caster.cast_response(_raw_response)

        if _caster.is_error:
            raise sdk_errors.RequestException(
                response=_raw_response, data=_response_data
            )

        return _response_data

    def list_site_build_hooks(self, *, site_id: str) -> typing.List[BuildHook]:
        """ """
        _endpoint = f"/sites/{site_id}/build_hooks"
        _url = f"{self.base_url}{_endpoint}"

        _params = {}  # type: dict[str, typing.Any]
        _authed_kwargs = self._add_auth(
            [
                "netlifyAuth",
            ],
            params=_params,
        )
        _raw_response = self.session.get(_url, **_authed_kwargs)

        _casters = [
            sdk_response.ResponseCaster(
                status_code=200, expected_type=typing.List[BuildHook], is_error=False
            ),
            sdk_response.ResponseCaster(
                status_code="default", expected_type=Error, is_error=True
            ),
        ]

        _matching_casters = [
            c for c in _casters if c.match_code(_raw_response.status_code)
        ]
        if len(_matching_casters) == 0:
            raise sdk_errors.UnexpectedStatusCodeException(
                response=_raw_response,
                expected_codes=[c.status_code_str for c in _casters],
            )
        _caster = _matching_casters[0]
        _response_data = _caster.cast_response(_raw_response)

        if _caster.is_error:
            raise sdk_errors.RequestException(
                response=_raw_response, data=_response_data
            )

        return _response_data

    def get_site_build_hook(self, *, site_id: str, id: str) -> BuildHook:
        """ """
        _endpoint = f"/sites/{site_id}/build_hooks/{id}"
        _url = f"{self.base_url}{_endpoint}"

        _params = {}  # type: dict[str, typing.Any]
        _authed_kwargs = self._add_auth(
            [
                "netlifyAuth",
            ],
            params=_params,
        )
        _raw_response = self.session.get(_url, **_authed_kwargs)

        _casters = [
            sdk_response.ResponseCaster(
                status_code=200, expected_type=BuildHook, is_error=False
            ),
            sdk_response.ResponseCaster(
                status_code="default", expected_type=Error, is_error=True
            ),
        ]

        _matching_casters = [
            c for c in _casters if c.match_code(_raw_response.status_code)
        ]
        if len(_matching_casters) == 0:
            raise sdk_errors.UnexpectedStatusCodeException(
                response=_raw_response,
                expected_codes=[c.status_code_str for c in _casters],
            )
        _caster = _matching_casters[0]
        _response_data = _caster.cast_response(_raw_response)

        if _caster.is_error:
            raise sdk_errors.RequestException(
                response=_raw_response, data=_response_data
            )

        return _response_data

    def list_site_builds(
        self,
        *,
        site_id: str,
        page: typing.Optional[int] = None,
        per_page: typing.Optional[int] = None,
    ) -> typing.List[Build]:
        """ """
        _endpoint = f"/sites/{site_id}/builds"
        _url = f"{self.base_url}{_endpoint}"

        _params = {}  # type: dict[str, typing.Any]
        if page is not None:
            _params["page"] = page
        if per_page is not None:
            _params["per_page"] = per_page
        _authed_kwargs = self._add_auth(
            [
                "netlifyAuth",
            ],
            params=_params,
        )
        _raw_response = self.session.get(_url, **_authed_kwargs)

        _casters = [
            sdk_response.ResponseCaster(
                status_code=200, expected_type=typing.List[Build], is_error=False
            ),
            sdk_response.ResponseCaster(
                status_code="default", expected_type=Error, is_error=True
            ),
        ]

        _matching_casters = [
            c for c in _casters if c.match_code(_raw_response.status_code)
        ]
        if len(_matching_casters) == 0:
            raise sdk_errors.UnexpectedStatusCodeException(
                response=_raw_response,
                expected_codes=[c.status_code_str for c in _casters],
            )
        _caster = _matching_casters[0]
        _response_data = _caster.cast_response(_raw_response)

        if _caster.is_error:
            raise sdk_errors.RequestException(
                response=_raw_response, data=_response_data
            )

        return _response_data

    def list_site_deployed_branches(
        self, *, site_id: str
    ) -> typing.List[DeployedBranch]:
        """ """
        _endpoint = f"/sites/{site_id}/deployed-branches"
        _url = f"{self.base_url}{_endpoint}"

        _params = {}  # type: dict[str, typing.Any]
        _authed_kwargs = self._add_auth(
            [
                "netlifyAuth",
            ],
            params=_params,
        )
        _raw_response = self.session.get(_url, **_authed_kwargs)

        _casters = [
            sdk_response.ResponseCaster(
                status_code=200,
                expected_type=typing.List[DeployedBranch],
                is_error=False,
            ),
            sdk_response.ResponseCaster(
                status_code="default", expected_type=Error, is_error=True
            ),
        ]

        _matching_casters = [
            c for c in _casters if c.match_code(_raw_response.status_code)
        ]
        if len(_matching_casters) == 0:
            raise sdk_errors.UnexpectedStatusCodeException(
                response=_raw_response,
                expected_codes=[c.status_code_str for c in _casters],
            )
        _caster = _matching_casters[0]
        _response_data = _caster.cast_response(_raw_response)

        if _caster.is_error:
            raise sdk_errors.RequestException(
                response=_raw_response, data=_response_data
            )

        return _response_data

    def list_site_deploys(
        self,
        *,
        site_id: str,
        branch: typing.Optional[str] = None,
        deploy_previews: typing.Optional[bool] = None,
        latest_published: typing.Optional[bool] = None,
        page: typing.Optional[int] = None,
        per_page: typing.Optional[int] = None,
        production: typing.Optional[bool] = None,
        state: typing.Optional[GetSitesSiteIdDeploysStateEnum] = None,
    ) -> typing.List[Deploy]:
        """ """
        _endpoint = f"/sites/{site_id}/deploys"
        _url = f"{self.base_url}{_endpoint}"

        _params = {}  # type: dict[str, typing.Any]
        if branch is not None:
            _params["branch"] = branch
        if deploy_previews is not None:
            _params["deploy-previews"] = deploy_previews
        if latest_published is not None:
            _params["latest-published"] = latest_published
        if page is not None:
            _params["page"] = page
        if per_page is not None:
            _params["per_page"] = per_page
        if production is not None:
            _params["production"] = production
        if state is not None:
            _params["state"] = state
        _authed_kwargs = self._add_auth(
            [
                "netlifyAuth",
            ],
            params=_params,
        )
        _raw_response = self.session.get(_url, **_authed_kwargs)

        _casters = [
            sdk_response.ResponseCaster(
                status_code=200, expected_type=typing.List[Deploy], is_error=False
            ),
            sdk_response.ResponseCaster(
                status_code="default", expected_type=Error, is_error=True
            ),
        ]

        _matching_casters = [
            c for c in _casters if c.match_code(_raw_response.status_code)
        ]
        if len(_matching_casters) == 0:
            raise sdk_errors.UnexpectedStatusCodeException(
                response=_raw_response,
                expected_codes=[c.status_code_str for c in _casters],
            )
        _caster = _matching_casters[0]
        _response_data = _caster.cast_response(_raw_response)

        if _caster.is_error:
            raise sdk_errors.RequestException(
                response=_raw_response, data=_response_data
            )

        return _response_data

    def get_site_deploy(self, *, site_id: str, deploy_id: str) -> Deploy:
        """ """
        _endpoint = f"/sites/{site_id}/deploys/{deploy_id}"
        _url = f"{self.base_url}{_endpoint}"

        _params = {}  # type: dict[str, typing.Any]
        _authed_kwargs = self._add_auth(
            [
                "netlifyAuth",
            ],
            params=_params,
        )
        _raw_response = self.session.get(_url, **_authed_kwargs)

        _casters = [
            sdk_response.ResponseCaster(
                status_code=200, expected_type=Deploy, is_error=False
            ),
            sdk_response.ResponseCaster(
                status_code="default", expected_type=Error, is_error=True
            ),
        ]

        _matching_casters = [
            c for c in _casters if c.match_code(_raw_response.status_code)
        ]
        if len(_matching_casters) == 0:
            raise sdk_errors.UnexpectedStatusCodeException(
                response=_raw_response,
                expected_codes=[c.status_code_str for c in _casters],
            )
        _caster = _matching_casters[0]
        _response_data = _caster.cast_response(_raw_response)

        if _caster.is_error:
            raise sdk_errors.RequestException(
                response=_raw_response, data=_response_data
            )

        return _response_data

    def get_dns_for_site(self, *, site_id: str) -> typing.List[DnsZone]:
        """ """
        _endpoint = f"/sites/{site_id}/dns"
        _url = f"{self.base_url}{_endpoint}"

        _params = {}  # type: dict[str, typing.Any]
        _authed_kwargs = self._add_auth(
            [
                "netlifyAuth",
            ],
            params=_params,
        )
        _raw_response = self.session.get(_url, **_authed_kwargs)

        _casters = [
            sdk_response.ResponseCaster(
                status_code=200, expected_type=typing.List[DnsZone], is_error=False
            ),
            sdk_response.ResponseCaster(
                status_code="default", expected_type=Error, is_error=True
            ),
        ]

        _matching_casters = [
            c for c in _casters if c.match_code(_raw_response.status_code)
        ]
        if len(_matching_casters) == 0:
            raise sdk_errors.UnexpectedStatusCodeException(
                response=_raw_response,
                expected_codes=[c.status_code_str for c in _casters],
            )
        _caster = _matching_casters[0]
        _response_data = _caster.cast_response(_raw_response)

        if _caster.is_error:
            raise sdk_errors.RequestException(
                response=_raw_response, data=_response_data
            )

        return _response_data

    def list_site_files(self, *, site_id: str) -> typing.List[File]:
        """ """
        _endpoint = f"/sites/{site_id}/files"
        _url = f"{self.base_url}{_endpoint}"

        _params = {}  # type: dict[str, typing.Any]
        _authed_kwargs = self._add_auth(
            [
                "netlifyAuth",
            ],
            params=_params,
        )
        _raw_response = self.session.get(_url, **_authed_kwargs)

        _casters = [
            sdk_response.ResponseCaster(
                status_code=200, expected_type=typing.List[File], is_error=False
            ),
            sdk_response.ResponseCaster(
                status_code="default", expected_type=Error, is_error=True
            ),
        ]

        _matching_casters = [
            c for c in _casters if c.match_code(_raw_response.status_code)
        ]
        if len(_matching_casters) == 0:
            raise sdk_errors.UnexpectedStatusCodeException(
                response=_raw_response,
                expected_codes=[c.status_code_str for c in _casters],
            )
        _caster = _matching_casters[0]
        _response_data = _caster.cast_response(_raw_response)

        if _caster.is_error:
            raise sdk_errors.RequestException(
                response=_raw_response, data=_response_data
            )

        return _response_data

    def get_site_file_by_path_name(self, *, site_id: str, file_path: str) -> File:
        """ """
        _endpoint = f"/sites/{site_id}/files/{file_path}"
        _url = f"{self.base_url}{_endpoint}"

        _params = {}  # type: dict[str, typing.Any]
        _authed_kwargs = self._add_auth(
            [
                "netlifyAuth",
            ],
            params=_params,
        )
        _raw_response = self.session.get(_url, **_authed_kwargs)

        _casters = [
            sdk_response.ResponseCaster(
                status_code=200, expected_type=File, is_error=False
            ),
            sdk_response.ResponseCaster(
                status_code="default", expected_type=Error, is_error=True
            ),
        ]

        _matching_casters = [
            c for c in _casters if c.match_code(_raw_response.status_code)
        ]
        if len(_matching_casters) == 0:
            raise sdk_errors.UnexpectedStatusCodeException(
                response=_raw_response,
                expected_codes=[c.status_code_str for c in _casters],
            )
        _caster = _matching_casters[0]
        _response_data = _caster.cast_response(_raw_response)

        if _caster.is_error:
            raise sdk_errors.RequestException(
                response=_raw_response, data=_response_data
            )

        return _response_data

    def list_site_forms(self, *, site_id: str) -> typing.List[Form]:
        """ """
        _endpoint = f"/sites/{site_id}/forms"
        _url = f"{self.base_url}{_endpoint}"

        _params = {}  # type: dict[str, typing.Any]
        _authed_kwargs = self._add_auth(
            [
                "netlifyAuth",
            ],
            params=_params,
        )
        _raw_response = self.session.get(_url, **_authed_kwargs)

        _casters = [
            sdk_response.ResponseCaster(
                status_code=200, expected_type=typing.List[Form], is_error=False
            ),
            sdk_response.ResponseCaster(
                status_code="default", expected_type=Error, is_error=True
            ),
        ]

        _matching_casters = [
            c for c in _casters if c.match_code(_raw_response.status_code)
        ]
        if len(_matching_casters) == 0:
            raise sdk_errors.UnexpectedStatusCodeException(
                response=_raw_response,
                expected_codes=[c.status_code_str for c in _casters],
            )
        _caster = _matching_casters[0]
        _response_data = _caster.cast_response(_raw_response)

        if _caster.is_error:
            raise sdk_errors.RequestException(
                response=_raw_response, data=_response_data
            )

        return _response_data

    def search_site_functions(
        self, *, site_id: str, filter: typing.Optional[str] = None
    ) -> typing.List[SiteFunction]:
        """ """
        _endpoint = f"/sites/{site_id}/functions"
        _url = f"{self.base_url}{_endpoint}"

        _params = {}  # type: dict[str, typing.Any]
        if filter is not None:
            _params["filter"] = filter
        _authed_kwargs = self._add_auth(
            [
                "netlifyAuth",
            ],
            params=_params,
        )
        _raw_response = self.session.get(_url, **_authed_kwargs)

        _casters = [
            sdk_response.ResponseCaster(
                status_code=200, expected_type=typing.List[SiteFunction], is_error=False
            ),
            sdk_response.ResponseCaster(
                status_code="default", expected_type=Error, is_error=True
            ),
        ]

        _matching_casters = [
            c for c in _casters if c.match_code(_raw_response.status_code)
        ]
        if len(_matching_casters) == 0:
            raise sdk_errors.UnexpectedStatusCodeException(
                response=_raw_response,
                expected_codes=[c.status_code_str for c in _casters],
            )
        _caster = _matching_casters[0]
        _response_data = _caster.cast_response(_raw_response)

        if _caster.is_error:
            raise sdk_errors.RequestException(
                response=_raw_response, data=_response_data
            )

        return _response_data

    def get_site_metadata(self, *, site_id: str) -> typing.Dict[str, typing.Any]:
        """ """
        _endpoint = f"/sites/{site_id}/metadata"
        _url = f"{self.base_url}{_endpoint}"

        _params = {}  # type: dict[str, typing.Any]
        _authed_kwargs = self._add_auth(
            [
                "netlifyAuth",
            ],
            params=_params,
        )
        _raw_response = self.session.get(_url, **_authed_kwargs)

        _casters = [
            sdk_response.ResponseCaster(
                status_code=200,
                expected_type=typing.Dict[str, typing.Any],
                is_error=False,
            ),
            sdk_response.ResponseCaster(
                status_code="default", expected_type=Error, is_error=True
            ),
        ]

        _matching_casters = [
            c for c in _casters if c.match_code(_raw_response.status_code)
        ]
        if len(_matching_casters) == 0:
            raise sdk_errors.UnexpectedStatusCodeException(
                response=_raw_response,
                expected_codes=[c.status_code_str for c in _casters],
            )
        _caster = _matching_casters[0]
        _response_data = _caster.cast_response(_raw_response)

        if _caster.is_error:
            raise sdk_errors.RequestException(
                response=_raw_response, data=_response_data
            )

        return _response_data

    def list_service_instances_for_site(
        self, *, site_id: str
    ) -> typing.List[ServiceInstance]:
        """ """
        _endpoint = f"/sites/{site_id}/service-instances"
        _url = f"{self.base_url}{_endpoint}"

        _params = {}  # type: dict[str, typing.Any]
        _authed_kwargs = self._add_auth(
            [
                "netlifyAuth",
            ],
            params=_params,
        )
        _raw_response = self.session.get(_url, **_authed_kwargs)

        _casters = [
            sdk_response.ResponseCaster(
                status_code=200,
                expected_type=typing.List[ServiceInstance],
                is_error=False,
            ),
            sdk_response.ResponseCaster(
                status_code="default", expected_type=Error, is_error=True
            ),
        ]

        _matching_casters = [
            c for c in _casters if c.match_code(_raw_response.status_code)
        ]
        if len(_matching_casters) == 0:
            raise sdk_errors.UnexpectedStatusCodeException(
                response=_raw_response,
                expected_codes=[c.status_code_str for c in _casters],
            )
        _caster = _matching_casters[0]
        _response_data = _caster.cast_response(_raw_response)

        if _caster.is_error:
            raise sdk_errors.RequestException(
                response=_raw_response, data=_response_data
            )

        return _response_data

    def show_service_instance(
        self, *, site_id: str, addon: str, instance_id: str
    ) -> ServiceInstance:
        """ """
        _endpoint = f"/sites/{site_id}/services/{addon}/instances/{instance_id}"
        _url = f"{self.base_url}{_endpoint}"

        _params = {}  # type: dict[str, typing.Any]
        _authed_kwargs = self._add_auth(
            [
                "netlifyAuth",
            ],
            params=_params,
        )
        _raw_response = self.session.get(_url, **_authed_kwargs)

        _casters = [
            sdk_response.ResponseCaster(
                status_code=200, expected_type=ServiceInstance, is_error=False
            ),
            sdk_response.ResponseCaster(
                status_code="default", expected_type=Error, is_error=True
            ),
        ]

        _matching_casters = [
            c for c in _casters if c.match_code(_raw_response.status_code)
        ]
        if len(_matching_casters) == 0:
            raise sdk_errors.UnexpectedStatusCodeException(
                response=_raw_response,
                expected_codes=[c.status_code_str for c in _casters],
            )
        _caster = _matching_casters[0]
        _response_data = _caster.cast_response(_raw_response)

        if _caster.is_error:
            raise sdk_errors.RequestException(
                response=_raw_response, data=_response_data
            )

        return _response_data

    def list_site_snippets(self, *, site_id: str) -> typing.List[Snippet]:
        """ """
        _endpoint = f"/sites/{site_id}/snippets"
        _url = f"{self.base_url}{_endpoint}"

        _params = {}  # type: dict[str, typing.Any]
        _authed_kwargs = self._add_auth(
            [
                "netlifyAuth",
            ],
            params=_params,
        )
        _raw_response = self.session.get(_url, **_authed_kwargs)

        _casters = [
            sdk_response.ResponseCaster(
                status_code=200, expected_type=typing.List[Snippet], is_error=False
            ),
            sdk_response.ResponseCaster(
                status_code="default", expected_type=Error, is_error=True
            ),
        ]

        _matching_casters = [
            c for c in _casters if c.match_code(_raw_response.status_code)
        ]
        if len(_matching_casters) == 0:
            raise sdk_errors.UnexpectedStatusCodeException(
                response=_raw_response,
                expected_codes=[c.status_code_str for c in _casters],
            )
        _caster = _matching_casters[0]
        _response_data = _caster.cast_response(_raw_response)

        if _caster.is_error:
            raise sdk_errors.RequestException(
                response=_raw_response, data=_response_data
            )

        return _response_data

    def get_site_snippet(self, *, site_id: str, snippet_id: str) -> Snippet:
        """ """
        _endpoint = f"/sites/{site_id}/snippets/{snippet_id}"
        _url = f"{self.base_url}{_endpoint}"

        _params = {}  # type: dict[str, typing.Any]
        _authed_kwargs = self._add_auth(
            [
                "netlifyAuth",
            ],
            params=_params,
        )
        _raw_response = self.session.get(_url, **_authed_kwargs)

        _casters = [
            sdk_response.ResponseCaster(
                status_code=200, expected_type=Snippet, is_error=False
            ),
            sdk_response.ResponseCaster(
                status_code="default", expected_type=Error, is_error=True
            ),
        ]

        _matching_casters = [
            c for c in _casters if c.match_code(_raw_response.status_code)
        ]
        if len(_matching_casters) == 0:
            raise sdk_errors.UnexpectedStatusCodeException(
                response=_raw_response,
                expected_codes=[c.status_code_str for c in _casters],
            )
        _caster = _matching_casters[0]
        _response_data = _caster.cast_response(_raw_response)

        if _caster.is_error:
            raise sdk_errors.RequestException(
                response=_raw_response, data=_response_data
            )

        return _response_data

    def show_site_tls_certificate(self, *, site_id: str) -> SniCertificate:
        """ """
        _endpoint = f"/sites/{site_id}/ssl"
        _url = f"{self.base_url}{_endpoint}"

        _params = {}  # type: dict[str, typing.Any]
        _authed_kwargs = self._add_auth(
            [
                "netlifyAuth",
            ],
            params=_params,
        )
        _raw_response = self.session.get(_url, **_authed_kwargs)

        _casters = [
            sdk_response.ResponseCaster(
                status_code=200, expected_type=SniCertificate, is_error=False
            ),
            sdk_response.ResponseCaster(
                status_code="default", expected_type=Error, is_error=True
            ),
        ]

        _matching_casters = [
            c for c in _casters if c.match_code(_raw_response.status_code)
        ]
        if len(_matching_casters) == 0:
            raise sdk_errors.UnexpectedStatusCodeException(
                response=_raw_response,
                expected_codes=[c.status_code_str for c in _casters],
            )
        _caster = _matching_casters[0]
        _response_data = _caster.cast_response(_raw_response)

        if _caster.is_error:
            raise sdk_errors.RequestException(
                response=_raw_response, data=_response_data
            )

        return _response_data

    def list_site_submissions(
        self,
        *,
        site_id: str,
        page: typing.Optional[int] = None,
        per_page: typing.Optional[int] = None,
    ) -> typing.List[Submission]:
        """ """
        _endpoint = f"/sites/{site_id}/submissions"
        _url = f"{self.base_url}{_endpoint}"

        _params = {}  # type: dict[str, typing.Any]
        if page is not None:
            _params["page"] = page
        if per_page is not None:
            _params["per_page"] = per_page
        _authed_kwargs = self._add_auth(
            [
                "netlifyAuth",
            ],
            params=_params,
        )
        _raw_response = self.session.get(_url, **_authed_kwargs)

        _casters = [
            sdk_response.ResponseCaster(
                status_code=200, expected_type=typing.List[Submission], is_error=False
            ),
            sdk_response.ResponseCaster(
                status_code="default", expected_type=Error, is_error=True
            ),
        ]

        _matching_casters = [
            c for c in _casters if c.match_code(_raw_response.status_code)
        ]
        if len(_matching_casters) == 0:
            raise sdk_errors.UnexpectedStatusCodeException(
                response=_raw_response,
                expected_codes=[c.status_code_str for c in _casters],
            )
        _caster = _matching_casters[0]
        _response_data = _caster.cast_response(_raw_response)

        if _caster.is_error:
            raise sdk_errors.RequestException(
                response=_raw_response, data=_response_data
            )

        return _response_data

    def get_split_tests(self, *, site_id: str) -> typing.List[SplitTest]:
        """ """
        _endpoint = f"/sites/{site_id}/traffic_splits"
        _url = f"{self.base_url}{_endpoint}"

        _params = {}  # type: dict[str, typing.Any]
        _authed_kwargs = self._add_auth(
            [
                "netlifyAuth",
            ],
            params=_params,
        )
        _raw_response = self.session.get(_url, **_authed_kwargs)

        _casters = [
            sdk_response.ResponseCaster(
                status_code=200, expected_type=typing.List[SplitTest], is_error=False
            ),
            sdk_response.ResponseCaster(
                status_code="default", expected_type=Error, is_error=True
            ),
        ]

        _matching_casters = [
            c for c in _casters if c.match_code(_raw_response.status_code)
        ]
        if len(_matching_casters) == 0:
            raise sdk_errors.UnexpectedStatusCodeException(
                response=_raw_response,
                expected_codes=[c.status_code_str for c in _casters],
            )
        _caster = _matching_casters[0]
        _response_data = _caster.cast_response(_raw_response)

        if _caster.is_error:
            raise sdk_errors.RequestException(
                response=_raw_response, data=_response_data
            )

        return _response_data

    def get_split_test(self, *, site_id: str, split_test_id: str) -> SplitTest:
        """ """
        _endpoint = f"/sites/{site_id}/traffic_splits/{split_test_id}"
        _url = f"{self.base_url}{_endpoint}"

        _params = {}  # type: dict[str, typing.Any]
        _authed_kwargs = self._add_auth(
            [
                "netlifyAuth",
            ],
            params=_params,
        )
        _raw_response = self.session.get(_url, **_authed_kwargs)

        _casters = [
            sdk_response.ResponseCaster(
                status_code=200, expected_type=SplitTest, is_error=False
            ),
            sdk_response.ResponseCaster(
                status_code="default", expected_type=Error, is_error=True
            ),
        ]

        _matching_casters = [
            c for c in _casters if c.match_code(_raw_response.status_code)
        ]
        if len(_matching_casters) == 0:
            raise sdk_errors.UnexpectedStatusCodeException(
                response=_raw_response,
                expected_codes=[c.status_code_str for c in _casters],
            )
        _caster = _matching_casters[0]
        _response_data = _caster.cast_response(_raw_response)

        if _caster.is_error:
            raise sdk_errors.RequestException(
                response=_raw_response, data=_response_data
            )

        return _response_data

    def list_form_submission(
        self,
        *,
        submission_id: str,
        page: typing.Optional[int] = None,
        per_page: typing.Optional[int] = None,
        query: typing.Optional[str] = None,
    ) -> typing.List[Submission]:
        """ """
        _endpoint = f"/submissions/{submission_id}"
        _url = f"{self.base_url}{_endpoint}"

        _params = {}  # type: dict[str, typing.Any]
        if page is not None:
            _params["page"] = page
        if per_page is not None:
            _params["per_page"] = per_page
        if query is not None:
            _params["query"] = query
        _authed_kwargs = self._add_auth(
            [
                "netlifyAuth",
            ],
            params=_params,
        )
        _raw_response = self.session.get(_url, **_authed_kwargs)

        _casters = [
            sdk_response.ResponseCaster(
                status_code=200, expected_type=typing.List[Submission], is_error=False
            ),
            sdk_response.ResponseCaster(
                status_code="default", expected_type=Error, is_error=True
            ),
        ]

        _matching_casters = [
            c for c in _casters if c.match_code(_raw_response.status_code)
        ]
        if len(_matching_casters) == 0:
            raise sdk_errors.UnexpectedStatusCodeException(
                response=_raw_response,
                expected_codes=[c.status_code_str for c in _casters],
            )
        _caster = _matching_casters[0]
        _response_data = _caster.cast_response(_raw_response)

        if _caster.is_error:
            raise sdk_errors.RequestException(
                response=_raw_response, data=_response_data
            )

        return _response_data

    def get_current_user(self) -> typing.List[User]:
        """ """
        _endpoint = f"/user"
        _url = f"{self.base_url}{_endpoint}"

        _params = {}  # type: dict[str, typing.Any]
        _authed_kwargs = self._add_auth(
            [
                "netlifyAuth",
            ],
            params=_params,
        )
        _raw_response = self.session.get(_url, **_authed_kwargs)

        _casters = [
            sdk_response.ResponseCaster(
                status_code=200, expected_type=typing.List[User], is_error=False
            ),
            sdk_response.ResponseCaster(
                status_code="default", expected_type=Error, is_error=True
            ),
        ]

        _matching_casters = [
            c for c in _casters if c.match_code(_raw_response.status_code)
        ]
        if len(_matching_casters) == 0:
            raise sdk_errors.UnexpectedStatusCodeException(
                response=_raw_response,
                expected_codes=[c.status_code_str for c in _casters],
            )
        _caster = _matching_casters[0]
        _response_data = _caster.cast_response(_raw_response)

        if _caster.is_error:
            raise sdk_errors.RequestException(
                response=_raw_response, data=_response_data
            )

        return _response_data

    def get_account_build_status(self, *, account_id: str) -> typing.List[BuildStatus]:
        """ """
        _endpoint = f"/{account_id}/builds/status"
        _url = f"{self.base_url}{_endpoint}"

        _params = {}  # type: dict[str, typing.Any]
        _authed_kwargs = self._add_auth(
            [
                "netlifyAuth",
            ],
            params=_params,
        )
        _raw_response = self.session.get(_url, **_authed_kwargs)

        _casters = [
            sdk_response.ResponseCaster(
                status_code=200, expected_type=typing.List[BuildStatus], is_error=False
            ),
            sdk_response.ResponseCaster(
                status_code="default", expected_type=Error, is_error=True
            ),
        ]

        _matching_casters = [
            c for c in _casters if c.match_code(_raw_response.status_code)
        ]
        if len(_matching_casters) == 0:
            raise sdk_errors.UnexpectedStatusCodeException(
                response=_raw_response,
                expected_codes=[c.status_code_str for c in _casters],
            )
        _caster = _matching_casters[0]
        _response_data = _caster.cast_response(_raw_response)

        if _caster.is_error:
            raise sdk_errors.RequestException(
                response=_raw_response, data=_response_data
            )

        return _response_data

    def list_members_for_account(self, *, account_slug: str) -> typing.List[Member]:
        """ """
        _endpoint = f"/{account_slug}/members"
        _url = f"{self.base_url}{_endpoint}"

        _params = {}  # type: dict[str, typing.Any]
        _authed_kwargs = self._add_auth(
            [
                "netlifyAuth",
            ],
            params=_params,
        )
        _raw_response = self.session.get(_url, **_authed_kwargs)

        _casters = [
            sdk_response.ResponseCaster(
                status_code=200, expected_type=typing.List[Member], is_error=False
            ),
            sdk_response.ResponseCaster(
                status_code="default", expected_type=Error, is_error=True
            ),
        ]

        _matching_casters = [
            c for c in _casters if c.match_code(_raw_response.status_code)
        ]
        if len(_matching_casters) == 0:
            raise sdk_errors.UnexpectedStatusCodeException(
                response=_raw_response,
                expected_codes=[c.status_code_str for c in _casters],
            )
        _caster = _matching_casters[0]
        _response_data = _caster.cast_response(_raw_response)

        if _caster.is_error:
            raise sdk_errors.RequestException(
                response=_raw_response, data=_response_data
            )

        return _response_data

    def get_account_member(self, *, account_slug: str, member_id: str) -> Member:
        """ """
        _endpoint = f"/{account_slug}/members/{member_id}"
        _url = f"{self.base_url}{_endpoint}"

        _params = {}  # type: dict[str, typing.Any]
        _authed_kwargs = self._add_auth(
            [
                "netlifyAuth",
            ],
            params=_params,
        )
        _raw_response = self.session.get(_url, **_authed_kwargs)

        _casters = [
            sdk_response.ResponseCaster(
                status_code=200, expected_type=Member, is_error=False
            ),
            sdk_response.ResponseCaster(
                status_code="default", expected_type=Error, is_error=True
            ),
        ]

        _matching_casters = [
            c for c in _casters if c.match_code(_raw_response.status_code)
        ]
        if len(_matching_casters) == 0:
            raise sdk_errors.UnexpectedStatusCodeException(
                response=_raw_response,
                expected_codes=[c.status_code_str for c in _casters],
            )
        _caster = _matching_casters[0]
        _response_data = _caster.cast_response(_raw_response)

        if _caster.is_error:
            raise sdk_errors.RequestException(
                response=_raw_response, data=_response_data
            )

        return _response_data

    def list_sites_for_account(
        self,
        *,
        account_slug: str,
        name: typing.Optional[str] = None,
        page: typing.Optional[int] = None,
        per_page: typing.Optional[int] = None,
    ) -> typing.List[Site]:
        """
        **Note:** Environment variable keys and values have moved from `build_settings.env` and `repo.env` to a new endpoint. Please use [getEnvVars](#tag/environmentVariables/operation/getEnvVars) to retrieve site environment variables.
        """
        _endpoint = f"/{account_slug}/sites"
        _url = f"{self.base_url}{_endpoint}"

        _params = {}  # type: dict[str, typing.Any]
        if name is not None:
            _params["name"] = name
        if page is not None:
            _params["page"] = page
        if per_page is not None:
            _params["per_page"] = per_page
        _authed_kwargs = self._add_auth(
            [
                "netlifyAuth",
            ],
            params=_params,
        )
        _raw_response = self.session.get(_url, **_authed_kwargs)

        _casters = [
            sdk_response.ResponseCaster(
                status_code=200, expected_type=typing.List[Site], is_error=False
            ),
            sdk_response.ResponseCaster(
                status_code="default", expected_type=Error, is_error=True
            ),
        ]

        _matching_casters = [
            c for c in _casters if c.match_code(_raw_response.status_code)
        ]
        if len(_matching_casters) == 0:
            raise sdk_errors.UnexpectedStatusCodeException(
                response=_raw_response,
                expected_codes=[c.status_code_str for c in _casters],
            )
        _caster = _matching_casters[0]
        _response_data = _caster.cast_response(_raw_response)

        if _caster.is_error:
            raise sdk_errors.RequestException(
                response=_raw_response, data=_response_data
            )

        return _response_data

    def set_env_var_value(
        self,
        *,
        data: typing.Optional[PatchAccountsAccountIdEnvKeyBody] = None,
        account_id: str,
        key: str,
        site_id: typing.Optional[str] = None,
    ) -> EnvVar:
        """
        Updates or creates a new value for an existing environment variable. To use this endpoint, your site must no longer be using the <a href="https://docs.netlify.com/environment-variables/classic-experience/">classic environment variables experience</a>.  Migrate now with the Netlify UI.
        """
        _endpoint = f"/accounts/{account_id}/env/{key}"
        _url = f"{self.base_url}{_endpoint}"

        _params = {}  # type: dict[str, typing.Any]
        if site_id is not None:
            _params["site_id"] = site_id
        _json_data = self._to_json_encodable(data)
        _authed_kwargs = self._add_auth(
            [
                "netlifyAuth",
            ],
            params=_params,
        )
        _raw_response = self.session.patch(_url, json=_json_data, **_authed_kwargs)

        _casters = [
            sdk_response.ResponseCaster(
                status_code=201, expected_type=EnvVar, is_error=False
            ),
            sdk_response.ResponseCaster(
                status_code="default", expected_type=Error, is_error=True
            ),
        ]

        _matching_casters = [
            c for c in _casters if c.match_code(_raw_response.status_code)
        ]
        if len(_matching_casters) == 0:
            raise sdk_errors.UnexpectedStatusCodeException(
                response=_raw_response,
                expected_codes=[c.status_code_str for c in _casters],
            )
        _caster = _matching_casters[0]
        _response_data = _caster.cast_response(_raw_response)

        if _caster.is_error:
            raise sdk_errors.RequestException(
                response=_raw_response, data=_response_data
            )

        return _response_data

    def update_site(self, *, data: typing.Any, site_id: str) -> Site:
        """
        **Note:** Environment variable keys and values have moved from `build_settings.env` and `repo.env` to a new endpoint. Please use [updateEnvVar](#tag/environmentVariables/operation/updateEnvVar) to update a site's environment variables.
        """
        _endpoint = f"/sites/{site_id}"
        _url = f"{self.base_url}{_endpoint}"

        _params = {}  # type: dict[str, typing.Any]
        _json_data = self._to_json_encodable(data)
        _authed_kwargs = self._add_auth(
            [
                "netlifyAuth",
            ],
            params=_params,
        )
        _raw_response = self.session.patch(_url, json=_json_data, **_authed_kwargs)

        _casters = [
            sdk_response.ResponseCaster(
                status_code=200, expected_type=Site, is_error=False
            ),
            sdk_response.ResponseCaster(
                status_code="default", expected_type=Error, is_error=True
            ),
        ]

        _matching_casters = [
            c for c in _casters if c.match_code(_raw_response.status_code)
        ]
        if len(_matching_casters) == 0:
            raise sdk_errors.UnexpectedStatusCodeException(
                response=_raw_response,
                expected_codes=[c.status_code_str for c in _casters],
            )
        _caster = _matching_casters[0]
        _response_data = _caster.cast_response(_raw_response)

        if _caster.is_error:
            raise sdk_errors.RequestException(
                response=_raw_response, data=_response_data
            )

        return _response_data

    def create_account(self, *, data: AccountSetup) -> AccountMembership:
        """ """
        _endpoint = f"/accounts"
        _url = f"{self.base_url}{_endpoint}"

        _params = {}  # type: dict[str, typing.Any]
        _json_data = self._to_json_encodable(data)
        _authed_kwargs = self._add_auth(
            [
                "netlifyAuth",
            ],
            params=_params,
        )
        _raw_response = self.session.post(_url, json=_json_data, **_authed_kwargs)

        _casters = [
            sdk_response.ResponseCaster(
                status_code=201, expected_type=AccountMembership, is_error=False
            ),
            sdk_response.ResponseCaster(
                status_code="default", expected_type=Error, is_error=True
            ),
        ]

        _matching_casters = [
            c for c in _casters if c.match_code(_raw_response.status_code)
        ]
        if len(_matching_casters) == 0:
            raise sdk_errors.UnexpectedStatusCodeException(
                response=_raw_response,
                expected_codes=[c.status_code_str for c in _casters],
            )
        _caster = _matching_casters[0]
        _response_data = _caster.cast_response(_raw_response)

        if _caster.is_error:
            raise sdk_errors.RequestException(
                response=_raw_response, data=_response_data
            )

        return _response_data

    def create_env_vars(
        self,
        *,
        data: typing.Optional[typing.List[PostAccountsAccountIdEnvBodyItem]] = None,
        account_id: str,
        site_id: typing.Optional[str] = None,
    ) -> typing.List[EnvVar]:
        """
        Creates new environment variables. Granular scopes are available on Pro plans and above.  To use this endpoint, your site must no longer be using the <a href="https://docs.netlify.com/environment-variables/classic-experience/">classic environment variables experience</a>.  Migrate now with the Netlify UI.
        """
        _endpoint = f"/accounts/{account_id}/env"
        _url = f"{self.base_url}{_endpoint}"

        _params = {}  # type: dict[str, typing.Any]
        if site_id is not None:
            _params["site_id"] = site_id
        _json_data = self._to_json_encodable(data)
        _authed_kwargs = self._add_auth(
            [
                "netlifyAuth",
            ],
            params=_params,
        )
        _raw_response = self.session.post(_url, json=_json_data, **_authed_kwargs)

        _casters = [
            sdk_response.ResponseCaster(
                status_code=201, expected_type=typing.List[EnvVar], is_error=False
            ),
            sdk_response.ResponseCaster(
                status_code="default", expected_type=Error, is_error=True
            ),
        ]

        _matching_casters = [
            c for c in _casters if c.match_code(_raw_response.status_code)
        ]
        if len(_matching_casters) == 0:
            raise sdk_errors.UnexpectedStatusCodeException(
                response=_raw_response,
                expected_codes=[c.status_code_str for c in _casters],
            )
        _caster = _matching_casters[0]
        _response_data = _caster.cast_response(_raw_response)

        if _caster.is_error:
            raise sdk_errors.RequestException(
                response=_raw_response, data=_response_data
            )

        return _response_data

    def update_site_build_log(self, *, build_id: str) -> typing.Any:
        """ """
        _endpoint = f"/builds/{build_id}/log"
        _url = f"{self.base_url}{_endpoint}"

        _params = {}  # type: dict[str, typing.Any]
        _authed_kwargs = self._add_auth(
            [
                "netlifyAuth",
            ],
            params=_params,
        )
        _raw_response = self.session.post(_url, **_authed_kwargs)

        _casters = [
            sdk_response.ResponseCaster(
                status_code=204, expected_type=typing.Any, is_error=False
            ),
            sdk_response.ResponseCaster(
                status_code="default", expected_type=Error, is_error=True
            ),
        ]

        _matching_casters = [
            c for c in _casters if c.match_code(_raw_response.status_code)
        ]
        if len(_matching_casters) == 0:
            raise sdk_errors.UnexpectedStatusCodeException(
                response=_raw_response,
                expected_codes=[c.status_code_str for c in _casters],
            )
        _caster = _matching_casters[0]
        _response_data = _caster.cast_response(_raw_response)

        if _caster.is_error:
            raise sdk_errors.RequestException(
                response=_raw_response, data=_response_data
            )

        return _response_data

    def notify_build_start(
        self,
        *,
        build_id: str,
        build_version: typing.Optional[str] = None,
        buildbot_version: typing.Optional[str] = None,
    ) -> typing.Any:
        """ """
        _endpoint = f"/builds/{build_id}/start"
        _url = f"{self.base_url}{_endpoint}"

        _params = {}  # type: dict[str, typing.Any]
        if build_version is not None:
            _params["build_version"] = build_version
        if buildbot_version is not None:
            _params["buildbot_version"] = buildbot_version
        _authed_kwargs = self._add_auth(
            [
                "netlifyAuth",
            ],
            params=_params,
        )
        _raw_response = self.session.post(_url, **_authed_kwargs)

        _casters = [
            sdk_response.ResponseCaster(
                status_code=204, expected_type=typing.Any, is_error=False
            ),
            sdk_response.ResponseCaster(
                status_code="default", expected_type=Error, is_error=True
            ),
        ]

        _matching_casters = [
            c for c in _casters if c.match_code(_raw_response.status_code)
        ]
        if len(_matching_casters) == 0:
            raise sdk_errors.UnexpectedStatusCodeException(
                response=_raw_response,
                expected_codes=[c.status_code_str for c in _casters],
            )
        _caster = _matching_casters[0]
        _response_data = _caster.cast_response(_raw_response)

        if _caster.is_error:
            raise sdk_errors.RequestException(
                response=_raw_response, data=_response_data
            )

        return _response_data

    def create_deploy_key(self) -> DeployKey:
        """ """
        _endpoint = f"/deploy_keys"
        _url = f"{self.base_url}{_endpoint}"

        _params = {}  # type: dict[str, typing.Any]
        _authed_kwargs = self._add_auth(
            [
                "netlifyAuth",
            ],
            params=_params,
        )
        _raw_response = self.session.post(_url, **_authed_kwargs)

        _casters = [
            sdk_response.ResponseCaster(
                status_code=201, expected_type=DeployKey, is_error=False
            ),
            sdk_response.ResponseCaster(
                status_code="default", expected_type=Error, is_error=True
            ),
        ]

        _matching_casters = [
            c for c in _casters if c.match_code(_raw_response.status_code)
        ]
        if len(_matching_casters) == 0:
            raise sdk_errors.UnexpectedStatusCodeException(
                response=_raw_response,
                expected_codes=[c.status_code_str for c in _casters],
            )
        _caster = _matching_casters[0]
        _response_data = _caster.cast_response(_raw_response)

        if _caster.is_error:
            raise sdk_errors.RequestException(
                response=_raw_response, data=_response_data
            )

        return _response_data

    def cancel_site_deploy(self, *, deploy_id: str) -> Deploy:
        """ """
        _endpoint = f"/deploys/{deploy_id}/cancel"
        _url = f"{self.base_url}{_endpoint}"

        _params = {}  # type: dict[str, typing.Any]
        _authed_kwargs = self._add_auth(
            [
                "netlifyAuth",
            ],
            params=_params,
        )
        _raw_response = self.session.post(_url, **_authed_kwargs)

        _casters = [
            sdk_response.ResponseCaster(
                status_code=201, expected_type=Deploy, is_error=False
            ),
            sdk_response.ResponseCaster(
                status_code="default", expected_type=Error, is_error=True
            ),
        ]

        _matching_casters = [
            c for c in _casters if c.match_code(_raw_response.status_code)
        ]
        if len(_matching_casters) == 0:
            raise sdk_errors.UnexpectedStatusCodeException(
                response=_raw_response,
                expected_codes=[c.status_code_str for c in _casters],
            )
        _caster = _matching_casters[0]
        _response_data = _caster.cast_response(_raw_response)

        if _caster.is_error:
            raise sdk_errors.RequestException(
                response=_raw_response, data=_response_data
            )

        return _response_data

    def lock_deploy(self, *, deploy_id: str) -> Deploy:
        """ """
        _endpoint = f"/deploys/{deploy_id}/lock"
        _url = f"{self.base_url}{_endpoint}"

        _params = {}  # type: dict[str, typing.Any]
        _authed_kwargs = self._add_auth(
            [
                "netlifyAuth",
            ],
            params=_params,
        )
        _raw_response = self.session.post(_url, **_authed_kwargs)

        _casters = [
            sdk_response.ResponseCaster(
                status_code=200, expected_type=Deploy, is_error=False
            ),
            sdk_response.ResponseCaster(
                status_code="default", expected_type=Error, is_error=True
            ),
        ]

        _matching_casters = [
            c for c in _casters if c.match_code(_raw_response.status_code)
        ]
        if len(_matching_casters) == 0:
            raise sdk_errors.UnexpectedStatusCodeException(
                response=_raw_response,
                expected_codes=[c.status_code_str for c in _casters],
            )
        _caster = _matching_casters[0]
        _response_data = _caster.cast_response(_raw_response)

        if _caster.is_error:
            raise sdk_errors.RequestException(
                response=_raw_response, data=_response_data
            )

        return _response_data

    def unlock_deploy(self, *, deploy_id: str) -> Deploy:
        """ """
        _endpoint = f"/deploys/{deploy_id}/unlock"
        _url = f"{self.base_url}{_endpoint}"

        _params = {}  # type: dict[str, typing.Any]
        _authed_kwargs = self._add_auth(
            [
                "netlifyAuth",
            ],
            params=_params,
        )
        _raw_response = self.session.post(_url, **_authed_kwargs)

        _casters = [
            sdk_response.ResponseCaster(
                status_code=200, expected_type=Deploy, is_error=False
            ),
            sdk_response.ResponseCaster(
                status_code="default", expected_type=Error, is_error=True
            ),
        ]

        _matching_casters = [
            c for c in _casters if c.match_code(_raw_response.status_code)
        ]
        if len(_matching_casters) == 0:
            raise sdk_errors.UnexpectedStatusCodeException(
                response=_raw_response,
                expected_codes=[c.status_code_str for c in _casters],
            )
        _caster = _matching_casters[0]
        _response_data = _caster.cast_response(_raw_response)

        if _caster.is_error:
            raise sdk_errors.RequestException(
                response=_raw_response, data=_response_data
            )

        return _response_data

    def create_dns_zone(self, *, data: DnsZoneSetup) -> DnsZone:
        """ """
        _endpoint = f"/dns_zones"
        _url = f"{self.base_url}{_endpoint}"

        _params = {}  # type: dict[str, typing.Any]
        _json_data = self._to_json_encodable(data)
        _authed_kwargs = self._add_auth(
            [
                "netlifyAuth",
            ],
            params=_params,
        )
        _raw_response = self.session.post(_url, json=_json_data, **_authed_kwargs)

        _casters = [
            sdk_response.ResponseCaster(
                status_code=201, expected_type=DnsZone, is_error=False
            ),
            sdk_response.ResponseCaster(
                status_code="default", expected_type=Error, is_error=True
            ),
        ]

        _matching_casters = [
            c for c in _casters if c.match_code(_raw_response.status_code)
        ]
        if len(_matching_casters) == 0:
            raise sdk_errors.UnexpectedStatusCodeException(
                response=_raw_response,
                expected_codes=[c.status_code_str for c in _casters],
            )
        _caster = _matching_casters[0]
        _response_data = _caster.cast_response(_raw_response)

        if _caster.is_error:
            raise sdk_errors.RequestException(
                response=_raw_response, data=_response_data
            )

        return _response_data

    def create_dns_record(self, *, data: DnsRecordCreate, zone_id: str) -> DnsRecord:
        """ """
        _endpoint = f"/dns_zones/{zone_id}/dns_records"
        _url = f"{self.base_url}{_endpoint}"

        _params = {}  # type: dict[str, typing.Any]
        _json_data = self._to_json_encodable(data)
        _authed_kwargs = self._add_auth(
            [
                "netlifyAuth",
            ],
            params=_params,
        )
        _raw_response = self.session.post(_url, json=_json_data, **_authed_kwargs)

        _casters = [
            sdk_response.ResponseCaster(
                status_code=201, expected_type=DnsRecord, is_error=False
            ),
            sdk_response.ResponseCaster(
                status_code="default", expected_type=Error, is_error=True
            ),
        ]

        _matching_casters = [
            c for c in _casters if c.match_code(_raw_response.status_code)
        ]
        if len(_matching_casters) == 0:
            raise sdk_errors.UnexpectedStatusCodeException(
                response=_raw_response,
                expected_codes=[c.status_code_str for c in _casters],
            )
        _caster = _matching_casters[0]
        _response_data = _caster.cast_response(_raw_response)

        if _caster.is_error:
            raise sdk_errors.RequestException(
                response=_raw_response, data=_response_data
            )

        return _response_data

    def create_hook_by_site_id(self, *, data: Hook, site_id: str) -> Hook:
        """ """
        _endpoint = f"/hooks"
        _url = f"{self.base_url}{_endpoint}"

        _params = {}  # type: dict[str, typing.Any]
        _params["site_id"] = self._format_param(site_id, False)
        _json_data = self._to_json_encodable(data)
        _authed_kwargs = self._add_auth(
            [
                "netlifyAuth",
            ],
            params=_params,
        )
        _raw_response = self.session.post(_url, json=_json_data, **_authed_kwargs)

        _casters = [
            sdk_response.ResponseCaster(
                status_code=201, expected_type=Hook, is_error=False
            ),
            sdk_response.ResponseCaster(
                status_code="default", expected_type=Error, is_error=True
            ),
        ]

        _matching_casters = [
            c for c in _casters if c.match_code(_raw_response.status_code)
        ]
        if len(_matching_casters) == 0:
            raise sdk_errors.UnexpectedStatusCodeException(
                response=_raw_response,
                expected_codes=[c.status_code_str for c in _casters],
            )
        _caster = _matching_casters[0]
        _response_data = _caster.cast_response(_raw_response)

        if _caster.is_error:
            raise sdk_errors.RequestException(
                response=_raw_response, data=_response_data
            )

        return _response_data

    def enable_hook(self, *, hook_id: str) -> Hook:
        """ """
        _endpoint = f"/hooks/{hook_id}/enable"
        _url = f"{self.base_url}{_endpoint}"

        _params = {}  # type: dict[str, typing.Any]
        _authed_kwargs = self._add_auth(
            [
                "netlifyAuth",
            ],
            params=_params,
        )
        _raw_response = self.session.post(_url, **_authed_kwargs)

        _casters = [
            sdk_response.ResponseCaster(
                status_code=200, expected_type=Hook, is_error=False
            ),
            sdk_response.ResponseCaster(
                status_code="default", expected_type=Error, is_error=True
            ),
        ]

        _matching_casters = [
            c for c in _casters if c.match_code(_raw_response.status_code)
        ]
        if len(_matching_casters) == 0:
            raise sdk_errors.UnexpectedStatusCodeException(
                response=_raw_response,
                expected_codes=[c.status_code_str for c in _casters],
            )
        _caster = _matching_casters[0]
        _response_data = _caster.cast_response(_raw_response)

        if _caster.is_error:
            raise sdk_errors.RequestException(
                response=_raw_response, data=_response_data
            )

        return _response_data

    def create_ticket(self, *, client_id: str) -> Ticket:
        """ """
        _endpoint = f"/oauth/tickets"
        _url = f"{self.base_url}{_endpoint}"

        _params = {}  # type: dict[str, typing.Any]
        _params["client_id"] = self._format_param(client_id, False)
        _authed_kwargs = self._add_auth(
            [
                "netlifyAuth",
            ],
            params=_params,
        )
        _raw_response = self.session.post(_url, **_authed_kwargs)

        _casters = [
            sdk_response.ResponseCaster(
                status_code=201, expected_type=Ticket, is_error=False
            ),
            sdk_response.ResponseCaster(
                status_code="default", expected_type=Error, is_error=True
            ),
        ]

        _matching_casters = [
            c for c in _casters if c.match_code(_raw_response.status_code)
        ]
        if len(_matching_casters) == 0:
            raise sdk_errors.UnexpectedStatusCodeException(
                response=_raw_response,
                expected_codes=[c.status_code_str for c in _casters],
            )
        _caster = _matching_casters[0]
        _response_data = _caster.cast_response(_raw_response)

        if _caster.is_error:
            raise sdk_errors.RequestException(
                response=_raw_response, data=_response_data
            )

        return _response_data

    def exchange_ticket(self, *, ticket_id: str) -> AccessToken:
        """ """
        _endpoint = f"/oauth/tickets/{ticket_id}/exchange"
        _url = f"{self.base_url}{_endpoint}"

        _params = {}  # type: dict[str, typing.Any]
        _authed_kwargs = self._add_auth(
            [
                "netlifyAuth",
            ],
            params=_params,
        )
        _raw_response = self.session.post(_url, **_authed_kwargs)

        _casters = [
            sdk_response.ResponseCaster(
                status_code=201, expected_type=AccessToken, is_error=False
            ),
            sdk_response.ResponseCaster(
                status_code="default", expected_type=Error, is_error=True
            ),
        ]

        _matching_casters = [
            c for c in _casters if c.match_code(_raw_response.status_code)
        ]
        if len(_matching_casters) == 0:
            raise sdk_errors.UnexpectedStatusCodeException(
                response=_raw_response,
                expected_codes=[c.status_code_str for c in _casters],
            )
        _caster = _matching_casters[0]
        _response_data = _caster.cast_response(_raw_response)

        if _caster.is_error:
            raise sdk_errors.RequestException(
                response=_raw_response, data=_response_data
            )

        return _response_data

    def purge_cache(self, *, data: Purge) -> typing.Any:
        """
        Purges cached content from Netlify's CDN. Supports purging by Cache-Tag.
        """
        _endpoint = f"/purge"
        _url = f"{self.base_url}{_endpoint}"

        _params = {}  # type: dict[str, typing.Any]
        _json_data = self._to_json_encodable(data)
        _authed_kwargs = self._add_auth(
            [
                "netlifyAuth",
            ],
            params=_params,
        )
        _raw_response = self.session.post(_url, json=_json_data, **_authed_kwargs)

        _casters = [
            sdk_response.ResponseCaster(
                status_code=202, expected_type=typing.Any, is_error=False
            ),
            sdk_response.ResponseCaster(
                status_code=400, expected_type=typing.Any, is_error=True
            ),
            sdk_response.ResponseCaster(
                status_code=404, expected_type=typing.Any, is_error=True
            ),
        ]

        _matching_casters = [
            c for c in _casters if c.match_code(_raw_response.status_code)
        ]
        if len(_matching_casters) == 0:
            raise sdk_errors.UnexpectedStatusCodeException(
                response=_raw_response,
                expected_codes=[c.status_code_str for c in _casters],
            )
        _caster = _matching_casters[0]
        _response_data = _caster.cast_response(_raw_response)

        if _caster.is_error:
            raise sdk_errors.RequestException(
                response=_raw_response, data=_response_data
            )

        return _response_data

    def create_site(
        self, *, data: typing.Any, configure_dns: typing.Optional[bool] = None
    ) -> Site:
        """
        **Note:** Environment variable keys and values have moved from `build_settings.env` and `repo.env` to a new endpoint. Please use [createEnvVars](#tag/environmentVariables/operation/createEnvVars) to create environment variables for a site.
        """
        _endpoint = f"/sites"
        _url = f"{self.base_url}{_endpoint}"

        _params = {}  # type: dict[str, typing.Any]
        if configure_dns is not None:
            _params["configure_dns"] = configure_dns
        _json_data = self._to_json_encodable(data)
        _authed_kwargs = self._add_auth(
            [
                "netlifyAuth",
            ],
            params=_params,
        )
        _raw_response = self.session.post(_url, json=_json_data, **_authed_kwargs)

        _casters = [
            sdk_response.ResponseCaster(
                status_code=201, expected_type=Site, is_error=False
            ),
            sdk_response.ResponseCaster(
                status_code="default", expected_type=Error, is_error=True
            ),
        ]

        _matching_casters = [
            c for c in _casters if c.match_code(_raw_response.status_code)
        ]
        if len(_matching_casters) == 0:
            raise sdk_errors.UnexpectedStatusCodeException(
                response=_raw_response,
                expected_codes=[c.status_code_str for c in _casters],
            )
        _caster = _matching_casters[0]
        _response_data = _caster.cast_response(_raw_response)

        if _caster.is_error:
            raise sdk_errors.RequestException(
                response=_raw_response, data=_response_data
            )

        return _response_data

    def create_site_asset(
        self,
        *,
        site_id: str,
        content_type: str,
        name: str,
        size: int,
        visibility: typing.Optional[str] = None,
    ) -> AssetSignature:
        """ """
        _endpoint = f"/sites/{site_id}/assets"
        _url = f"{self.base_url}{_endpoint}"

        _params = {}  # type: dict[str, typing.Any]
        _params["content_type"] = self._format_param(content_type, False)
        _params["name"] = self._format_param(name, False)
        _params["size"] = self._format_param(size, False)
        if visibility is not None:
            _params["visibility"] = visibility
        _authed_kwargs = self._add_auth(
            [
                "netlifyAuth",
            ],
            params=_params,
        )
        _raw_response = self.session.post(_url, **_authed_kwargs)

        _casters = [
            sdk_response.ResponseCaster(
                status_code=201, expected_type=AssetSignature, is_error=False
            ),
            sdk_response.ResponseCaster(
                status_code="default", expected_type=Error, is_error=True
            ),
        ]

        _matching_casters = [
            c for c in _casters if c.match_code(_raw_response.status_code)
        ]
        if len(_matching_casters) == 0:
            raise sdk_errors.UnexpectedStatusCodeException(
                response=_raw_response,
                expected_codes=[c.status_code_str for c in _casters],
            )
        _caster = _matching_casters[0]
        _response_data = _caster.cast_response(_raw_response)

        if _caster.is_error:
            raise sdk_errors.RequestException(
                response=_raw_response, data=_response_data
            )

        return _response_data

    def create_site_build_hook(
        self, *, data: BuildHookSetup, site_id: str
    ) -> BuildHook:
        """ """
        _endpoint = f"/sites/{site_id}/build_hooks"
        _url = f"{self.base_url}{_endpoint}"

        _params = {}  # type: dict[str, typing.Any]
        _json_data = self._to_json_encodable(data)
        _authed_kwargs = self._add_auth(
            [
                "netlifyAuth",
            ],
            params=_params,
        )
        _raw_response = self.session.post(_url, json=_json_data, **_authed_kwargs)

        _casters = [
            sdk_response.ResponseCaster(
                status_code=201, expected_type=BuildHook, is_error=False
            ),
            sdk_response.ResponseCaster(
                status_code="default", expected_type=Error, is_error=True
            ),
        ]

        _matching_casters = [
            c for c in _casters if c.match_code(_raw_response.status_code)
        ]
        if len(_matching_casters) == 0:
            raise sdk_errors.UnexpectedStatusCodeException(
                response=_raw_response,
                expected_codes=[c.status_code_str for c in _casters],
            )
        _caster = _matching_casters[0]
        _response_data = _caster.cast_response(_raw_response)

        if _caster.is_error:
            raise sdk_errors.RequestException(
                response=_raw_response, data=_response_data
            )

        return _response_data

    def create_site_build(
        self, *, data: typing.Optional[BuildSetup] = None, site_id: str
    ) -> Build:
        """ """
        _endpoint = f"/sites/{site_id}/builds"
        _url = f"{self.base_url}{_endpoint}"

        _params = {}  # type: dict[str, typing.Any]
        _json_data = self._to_json_encodable(data)
        _authed_kwargs = self._add_auth(
            [
                "netlifyAuth",
            ],
            params=_params,
        )
        _raw_response = self.session.post(_url, json=_json_data, **_authed_kwargs)

        _casters = [
            sdk_response.ResponseCaster(
                status_code=200, expected_type=Build, is_error=False
            ),
            sdk_response.ResponseCaster(
                status_code="default", expected_type=Error, is_error=True
            ),
        ]

        _matching_casters = [
            c for c in _casters if c.match_code(_raw_response.status_code)
        ]
        if len(_matching_casters) == 0:
            raise sdk_errors.UnexpectedStatusCodeException(
                response=_raw_response,
                expected_codes=[c.status_code_str for c in _casters],
            )
        _caster = _matching_casters[0]
        _response_data = _caster.cast_response(_raw_response)

        if _caster.is_error:
            raise sdk_errors.RequestException(
                response=_raw_response, data=_response_data
            )

        return _response_data

    def create_site_deploy(
        self,
        *,
        data: DeployFiles,
        site_id: str,
        branch: typing.Optional[str] = None,
        deploy_previews: typing.Optional[bool] = None,
        latest_published: typing.Optional[bool] = None,
        production: typing.Optional[bool] = None,
        state: typing.Optional[PostSitesSiteIdDeploysStateEnum] = None,
        title: typing.Optional[str] = None,
    ) -> Deploy:
        """ """
        _endpoint = f"/sites/{site_id}/deploys"
        _url = f"{self.base_url}{_endpoint}"

        _params = {}  # type: dict[str, typing.Any]
        if branch is not None:
            _params["branch"] = branch
        if deploy_previews is not None:
            _params["deploy-previews"] = deploy_previews
        if latest_published is not None:
            _params["latest-published"] = latest_published
        if production is not None:
            _params["production"] = production
        if state is not None:
            _params["state"] = state
        if title is not None:
            _params["title"] = title
        _json_data = self._to_json_encodable(data)
        _authed_kwargs = self._add_auth(
            [
                "netlifyAuth",
            ],
            params=_params,
        )
        _raw_response = self.session.post(_url, json=_json_data, **_authed_kwargs)

        _casters = [
            sdk_response.ResponseCaster(
                status_code=200, expected_type=Deploy, is_error=False
            ),
            sdk_response.ResponseCaster(
                status_code="default", expected_type=Error, is_error=True
            ),
        ]

        _matching_casters = [
            c for c in _casters if c.match_code(_raw_response.status_code)
        ]
        if len(_matching_casters) == 0:
            raise sdk_errors.UnexpectedStatusCodeException(
                response=_raw_response,
                expected_codes=[c.status_code_str for c in _casters],
            )
        _caster = _matching_casters[0]
        _response_data = _caster.cast_response(_raw_response)

        if _caster.is_error:
            raise sdk_errors.RequestException(
                response=_raw_response, data=_response_data
            )

        return _response_data

    def restore_site_deploy(self, *, site_id: str, deploy_id: str) -> Deploy:
        """ """
        _endpoint = f"/sites/{site_id}/deploys/{deploy_id}/restore"
        _url = f"{self.base_url}{_endpoint}"

        _params = {}  # type: dict[str, typing.Any]
        _authed_kwargs = self._add_auth(
            [
                "netlifyAuth",
            ],
            params=_params,
        )
        _raw_response = self.session.post(_url, **_authed_kwargs)

        _casters = [
            sdk_response.ResponseCaster(
                status_code=201, expected_type=Deploy, is_error=False
            ),
            sdk_response.ResponseCaster(
                status_code="default", expected_type=Error, is_error=True
            ),
        ]

        _matching_casters = [
            c for c in _casters if c.match_code(_raw_response.status_code)
        ]
        if len(_matching_casters) == 0:
            raise sdk_errors.UnexpectedStatusCodeException(
                response=_raw_response,
                expected_codes=[c.status_code_str for c in _casters],
            )
        _caster = _matching_casters[0]
        _response_data = _caster.cast_response(_raw_response)

        if _caster.is_error:
            raise sdk_errors.RequestException(
                response=_raw_response, data=_response_data
            )

        return _response_data

    def create_service_instance(
        self, *, data: typing.Dict[str, typing.Any], site_id: str, addon: str
    ) -> ServiceInstance:
        """ """
        _endpoint = f"/sites/{site_id}/services/{addon}/instances"
        _url = f"{self.base_url}{_endpoint}"

        _params = {}  # type: dict[str, typing.Any]
        _json_data = self._to_json_encodable(data)
        _authed_kwargs = self._add_auth(
            [
                "netlifyAuth",
            ],
            params=_params,
        )
        _raw_response = self.session.post(_url, json=_json_data, **_authed_kwargs)

        _casters = [
            sdk_response.ResponseCaster(
                status_code=201, expected_type=ServiceInstance, is_error=False
            ),
            sdk_response.ResponseCaster(
                status_code="default", expected_type=Error, is_error=True
            ),
        ]

        _matching_casters = [
            c for c in _casters if c.match_code(_raw_response.status_code)
        ]
        if len(_matching_casters) == 0:
            raise sdk_errors.UnexpectedStatusCodeException(
                response=_raw_response,
                expected_codes=[c.status_code_str for c in _casters],
            )
        _caster = _matching_casters[0]
        _response_data = _caster.cast_response(_raw_response)

        if _caster.is_error:
            raise sdk_errors.RequestException(
                response=_raw_response, data=_response_data
            )

        return _response_data

    def create_site_snippet(self, *, data: Snippet, site_id: str) -> Snippet:
        """ """
        _endpoint = f"/sites/{site_id}/snippets"
        _url = f"{self.base_url}{_endpoint}"

        _params = {}  # type: dict[str, typing.Any]
        _json_data = self._to_json_encodable(data)
        _authed_kwargs = self._add_auth(
            [
                "netlifyAuth",
            ],
            params=_params,
        )
        _raw_response = self.session.post(_url, json=_json_data, **_authed_kwargs)

        _casters = [
            sdk_response.ResponseCaster(
                status_code=201, expected_type=Snippet, is_error=False
            ),
            sdk_response.ResponseCaster(
                status_code="default", expected_type=Error, is_error=True
            ),
        ]

        _matching_casters = [
            c for c in _casters if c.match_code(_raw_response.status_code)
        ]
        if len(_matching_casters) == 0:
            raise sdk_errors.UnexpectedStatusCodeException(
                response=_raw_response,
                expected_codes=[c.status_code_str for c in _casters],
            )
        _caster = _matching_casters[0]
        _response_data = _caster.cast_response(_raw_response)

        if _caster.is_error:
            raise sdk_errors.RequestException(
                response=_raw_response, data=_response_data
            )

        return _response_data

    def provision_site_tls_certificate(
        self,
        *,
        site_id: str,
        ca_certificates: typing.Optional[str] = None,
        certificate: typing.Optional[str] = None,
        key: typing.Optional[str] = None,
    ) -> SniCertificate:
        """ """
        _endpoint = f"/sites/{site_id}/ssl"
        _url = f"{self.base_url}{_endpoint}"

        _params = {}  # type: dict[str, typing.Any]
        if ca_certificates is not None:
            _params["ca_certificates"] = ca_certificates
        if certificate is not None:
            _params["certificate"] = certificate
        if key is not None:
            _params["key"] = key
        _authed_kwargs = self._add_auth(
            [
                "netlifyAuth",
            ],
            params=_params,
        )
        _raw_response = self.session.post(_url, **_authed_kwargs)

        _casters = [
            sdk_response.ResponseCaster(
                status_code=200, expected_type=SniCertificate, is_error=False
            ),
            sdk_response.ResponseCaster(
                status_code="default", expected_type=Error, is_error=True
            ),
        ]

        _matching_casters = [
            c for c in _casters if c.match_code(_raw_response.status_code)
        ]
        if len(_matching_casters) == 0:
            raise sdk_errors.UnexpectedStatusCodeException(
                response=_raw_response,
                expected_codes=[c.status_code_str for c in _casters],
            )
        _caster = _matching_casters[0]
        _response_data = _caster.cast_response(_raw_response)

        if _caster.is_error:
            raise sdk_errors.RequestException(
                response=_raw_response, data=_response_data
            )

        return _response_data

    def create_split_test(self, *, data: SplitTestSetup, site_id: str) -> SplitTest:
        """ """
        _endpoint = f"/sites/{site_id}/traffic_splits"
        _url = f"{self.base_url}{_endpoint}"

        _params = {}  # type: dict[str, typing.Any]
        _json_data = self._to_json_encodable(data)
        _authed_kwargs = self._add_auth(
            [
                "netlifyAuth",
            ],
            params=_params,
        )
        _raw_response = self.session.post(_url, json=_json_data, **_authed_kwargs)

        _casters = [
            sdk_response.ResponseCaster(
                status_code=201, expected_type=SplitTest, is_error=False
            ),
            sdk_response.ResponseCaster(
                status_code="default", expected_type=Error, is_error=True
            ),
        ]

        _matching_casters = [
            c for c in _casters if c.match_code(_raw_response.status_code)
        ]
        if len(_matching_casters) == 0:
            raise sdk_errors.UnexpectedStatusCodeException(
                response=_raw_response,
                expected_codes=[c.status_code_str for c in _casters],
            )
        _caster = _matching_casters[0]
        _response_data = _caster.cast_response(_raw_response)

        if _caster.is_error:
            raise sdk_errors.RequestException(
                response=_raw_response, data=_response_data
            )

        return _response_data

    def enable_split_test(self, *, site_id: str, split_test_id: str) -> typing.Any:
        """ """
        _endpoint = f"/sites/{site_id}/traffic_splits/{split_test_id}/publish"
        _url = f"{self.base_url}{_endpoint}"

        _params = {}  # type: dict[str, typing.Any]
        _authed_kwargs = self._add_auth(
            [
                "netlifyAuth",
            ],
            params=_params,
        )
        _raw_response = self.session.post(_url, **_authed_kwargs)

        _casters = [
            sdk_response.ResponseCaster(
                status_code=204, expected_type=typing.Any, is_error=False
            ),
            sdk_response.ResponseCaster(
                status_code="default", expected_type=Error, is_error=True
            ),
        ]

        _matching_casters = [
            c for c in _casters if c.match_code(_raw_response.status_code)
        ]
        if len(_matching_casters) == 0:
            raise sdk_errors.UnexpectedStatusCodeException(
                response=_raw_response,
                expected_codes=[c.status_code_str for c in _casters],
            )
        _caster = _matching_casters[0]
        _response_data = _caster.cast_response(_raw_response)

        if _caster.is_error:
            raise sdk_errors.RequestException(
                response=_raw_response, data=_response_data
            )

        return _response_data

    def disable_split_test(self, *, site_id: str, split_test_id: str) -> typing.Any:
        """ """
        _endpoint = f"/sites/{site_id}/traffic_splits/{split_test_id}/unpublish"
        _url = f"{self.base_url}{_endpoint}"

        _params = {}  # type: dict[str, typing.Any]
        _authed_kwargs = self._add_auth(
            [
                "netlifyAuth",
            ],
            params=_params,
        )
        _raw_response = self.session.post(_url, **_authed_kwargs)

        _casters = [
            sdk_response.ResponseCaster(
                status_code=204, expected_type=typing.Any, is_error=False
            ),
            sdk_response.ResponseCaster(
                status_code="default", expected_type=Error, is_error=True
            ),
        ]

        _matching_casters = [
            c for c in _casters if c.match_code(_raw_response.status_code)
        ]
        if len(_matching_casters) == 0:
            raise sdk_errors.UnexpectedStatusCodeException(
                response=_raw_response,
                expected_codes=[c.status_code_str for c in _casters],
            )
        _caster = _matching_casters[0]
        _response_data = _caster.cast_response(_raw_response)

        if _caster.is_error:
            raise sdk_errors.RequestException(
                response=_raw_response, data=_response_data
            )

        return _response_data

    def add_member_to_account(
        self, *, data: AccountAddMemberSetup, account_slug: str
    ) -> typing.List[Member]:
        """ """
        _endpoint = f"/{account_slug}/members"
        _url = f"{self.base_url}{_endpoint}"

        _params = {}  # type: dict[str, typing.Any]
        _json_data = self._to_json_encodable(data)
        _authed_kwargs = self._add_auth(
            [
                "netlifyAuth",
            ],
            params=_params,
        )
        _raw_response = self.session.post(_url, json=_json_data, **_authed_kwargs)

        _casters = [
            sdk_response.ResponseCaster(
                status_code=200, expected_type=typing.List[Member], is_error=False
            ),
            sdk_response.ResponseCaster(
                status_code="default", expected_type=Error, is_error=True
            ),
        ]

        _matching_casters = [
            c for c in _casters if c.match_code(_raw_response.status_code)
        ]
        if len(_matching_casters) == 0:
            raise sdk_errors.UnexpectedStatusCodeException(
                response=_raw_response,
                expected_codes=[c.status_code_str for c in _casters],
            )
        _caster = _matching_casters[0]
        _response_data = _caster.cast_response(_raw_response)

        if _caster.is_error:
            raise sdk_errors.RequestException(
                response=_raw_response, data=_response_data
            )

        return _response_data

    def create_site_in_team(
        self,
        *,
        data: typing.Optional[typing.Any] = None,
        account_slug: str,
        configure_dns: typing.Optional[bool] = None,
    ) -> Site:
        """
        **Note:** Environment variable keys and values have moved from `build_settings.env` and `repo.env` to a new endpoint. Please use [createEnvVars](#tag/environmentVariables/operation/createEnvVars) to create environment variables for a site.
        """
        _endpoint = f"/{account_slug}/sites"
        _url = f"{self.base_url}{_endpoint}"

        _params = {}  # type: dict[str, typing.Any]
        if configure_dns is not None:
            _params["configure_dns"] = configure_dns
        _json_data = self._to_json_encodable(data)
        _authed_kwargs = self._add_auth(
            [
                "netlifyAuth",
            ],
            params=_params,
        )
        _raw_response = self.session.post(_url, json=_json_data, **_authed_kwargs)

        _casters = [
            sdk_response.ResponseCaster(
                status_code=201, expected_type=Site, is_error=False
            ),
            sdk_response.ResponseCaster(
                status_code="default", expected_type=Error, is_error=True
            ),
        ]

        _matching_casters = [
            c for c in _casters if c.match_code(_raw_response.status_code)
        ]
        if len(_matching_casters) == 0:
            raise sdk_errors.UnexpectedStatusCodeException(
                response=_raw_response,
                expected_codes=[c.status_code_str for c in _casters],
            )
        _caster = _matching_casters[0]
        _response_data = _caster.cast_response(_raw_response)

        if _caster.is_error:
            raise sdk_errors.RequestException(
                response=_raw_response, data=_response_data
            )

        return _response_data

    def update_account(
        self, *, data: typing.Optional[AccountUpdateSetup] = None, account_id: str
    ) -> AccountMembership:
        """ """
        _endpoint = f"/accounts/{account_id}"
        _url = f"{self.base_url}{_endpoint}"

        _params = {}  # type: dict[str, typing.Any]
        _json_data = self._to_json_encodable(data)
        _authed_kwargs = self._add_auth(
            [
                "netlifyAuth",
            ],
            params=_params,
        )
        _raw_response = self.session.put(_url, json=_json_data, **_authed_kwargs)

        _casters = [
            sdk_response.ResponseCaster(
                status_code=200, expected_type=AccountMembership, is_error=False
            ),
            sdk_response.ResponseCaster(
                status_code="default", expected_type=Error, is_error=True
            ),
        ]

        _matching_casters = [
            c for c in _casters if c.match_code(_raw_response.status_code)
        ]
        if len(_matching_casters) == 0:
            raise sdk_errors.UnexpectedStatusCodeException(
                response=_raw_response,
                expected_codes=[c.status_code_str for c in _casters],
            )
        _caster = _matching_casters[0]
        _response_data = _caster.cast_response(_raw_response)

        if _caster.is_error:
            raise sdk_errors.RequestException(
                response=_raw_response, data=_response_data
            )

        return _response_data

    def update_env_var(
        self,
        *,
        data: typing.Optional[PutAccountsAccountIdEnvKeyBody] = None,
        account_id: str,
        key: str,
        site_id: typing.Optional[str] = None,
    ) -> EnvVar:
        """
        Updates an existing environment variable and all of its values. Existing values will be replaced by values provided. To use this endpoint, your site must no longer be using the <a href="https://docs.netlify.com/environment-variables/classic-experience/">classic environment variables experience</a>.  Migrate now with the Netlify UI.
        """
        _endpoint = f"/accounts/{account_id}/env/{key}"
        _url = f"{self.base_url}{_endpoint}"

        _params = {}  # type: dict[str, typing.Any]
        if site_id is not None:
            _params["site_id"] = site_id
        _json_data = self._to_json_encodable(data)
        _authed_kwargs = self._add_auth(
            [
                "netlifyAuth",
            ],
            params=_params,
        )
        _raw_response = self.session.put(_url, json=_json_data, **_authed_kwargs)

        _casters = [
            sdk_response.ResponseCaster(
                status_code=200, expected_type=EnvVar, is_error=False
            ),
            sdk_response.ResponseCaster(
                status_code="default", expected_type=Error, is_error=True
            ),
        ]

        _matching_casters = [
            c for c in _casters if c.match_code(_raw_response.status_code)
        ]
        if len(_matching_casters) == 0:
            raise sdk_errors.UnexpectedStatusCodeException(
                response=_raw_response,
                expected_codes=[c.status_code_str for c in _casters],
            )
        _caster = _matching_casters[0]
        _response_data = _caster.cast_response(_raw_response)

        if _caster.is_error:
            raise sdk_errors.RequestException(
                response=_raw_response, data=_response_data
            )

        return _response_data

    def upload_deploy_file(
        self,
        *,
        data: typing.Union[typing.BinaryIO, io.BufferedReader],
        deploy_id: str,
        path: str,
        size: typing.Optional[int] = None,
    ) -> File:
        """ """
        _endpoint = f"/deploys/{deploy_id}/files/{path}"
        _url = f"{self.base_url}{_endpoint}"

        _params = {}  # type: dict[str, typing.Any]
        if size is not None:
            _params["size"] = size
        _json_data = self._to_json_encodable(data)
        _authed_kwargs = self._add_auth(
            [
                "netlifyAuth",
            ],
            params=_params,
        )
        _files = data.model_files()
        _raw_response = self.session.put(
            _url, data=_json_data, files=_files, **_authed_kwargs
        )

        _casters = [
            sdk_response.ResponseCaster(
                status_code=200, expected_type=File, is_error=False
            ),
            sdk_response.ResponseCaster(
                status_code="default", expected_type=Error, is_error=True
            ),
        ]

        _matching_casters = [
            c for c in _casters if c.match_code(_raw_response.status_code)
        ]
        if len(_matching_casters) == 0:
            raise sdk_errors.UnexpectedStatusCodeException(
                response=_raw_response,
                expected_codes=[c.status_code_str for c in _casters],
            )
        _caster = _matching_casters[0]
        _response_data = _caster.cast_response(_raw_response)

        if _caster.is_error:
            raise sdk_errors.RequestException(
                response=_raw_response, data=_response_data
            )

        return _response_data

    def upload_deploy_function(
        self,
        *,
        data: typing.Union[typing.BinaryIO, io.BufferedReader],
        deploy_id: str,
        name: str,
        invocation_mode: typing.Optional[str] = None,
        runtime: typing.Optional[str] = None,
        size: typing.Optional[int] = None,
    ) -> Function:
        """ """
        _endpoint = f"/deploys/{deploy_id}/functions/{name}"
        _url = f"{self.base_url}{_endpoint}"

        _params = {}  # type: dict[str, typing.Any]
        if invocation_mode is not None:
            _params["invocation_mode"] = invocation_mode
        if runtime is not None:
            _params["runtime"] = runtime
        if size is not None:
            _params["size"] = size
        _json_data = self._to_json_encodable(data)
        _authed_kwargs = self._add_auth(
            [
                "netlifyAuth",
            ],
            params=_params,
        )
        _files = data.model_files()
        _raw_response = self.session.put(
            _url, data=_json_data, files=_files, **_authed_kwargs
        )

        _casters = [
            sdk_response.ResponseCaster(
                status_code=200, expected_type=Function, is_error=False
            ),
            sdk_response.ResponseCaster(
                status_code="default", expected_type=Error, is_error=True
            ),
        ]

        _matching_casters = [
            c for c in _casters if c.match_code(_raw_response.status_code)
        ]
        if len(_matching_casters) == 0:
            raise sdk_errors.UnexpectedStatusCodeException(
                response=_raw_response,
                expected_codes=[c.status_code_str for c in _casters],
            )
        _caster = _matching_casters[0]
        _response_data = _caster.cast_response(_raw_response)

        if _caster.is_error:
            raise sdk_errors.RequestException(
                response=_raw_response, data=_response_data
            )

        return _response_data

    def transfer_dns_zone(
        self,
        *,
        zone_id: str,
        account_id: str,
        transfer_account_id: str,
        transfer_user_id: str,
    ) -> DnsZone:
        """ """
        _endpoint = f"/dns_zones/{zone_id}/transfer"
        _url = f"{self.base_url}{_endpoint}"

        _params = {}  # type: dict[str, typing.Any]
        _params["account_id"] = self._format_param(account_id, False)
        _params["transfer_account_id"] = self._format_param(transfer_account_id, False)
        _params["transfer_user_id"] = self._format_param(transfer_user_id, False)
        _authed_kwargs = self._add_auth(
            [
                "netlifyAuth",
            ],
            params=_params,
        )
        _raw_response = self.session.put(_url, **_authed_kwargs)

        _casters = [
            sdk_response.ResponseCaster(
                status_code=200, expected_type=DnsZone, is_error=False
            ),
            sdk_response.ResponseCaster(
                status_code="default", expected_type=Error, is_error=True
            ),
        ]

        _matching_casters = [
            c for c in _casters if c.match_code(_raw_response.status_code)
        ]
        if len(_matching_casters) == 0:
            raise sdk_errors.UnexpectedStatusCodeException(
                response=_raw_response,
                expected_codes=[c.status_code_str for c in _casters],
            )
        _caster = _matching_casters[0]
        _response_data = _caster.cast_response(_raw_response)

        if _caster.is_error:
            raise sdk_errors.RequestException(
                response=_raw_response, data=_response_data
            )

        return _response_data

    def update_hook(self, *, data: Hook, hook_id: str) -> Hook:
        """ """
        _endpoint = f"/hooks/{hook_id}"
        _url = f"{self.base_url}{_endpoint}"

        _params = {}  # type: dict[str, typing.Any]
        _json_data = self._to_json_encodable(data)
        _authed_kwargs = self._add_auth(
            [
                "netlifyAuth",
            ],
            params=_params,
        )
        _raw_response = self.session.put(_url, json=_json_data, **_authed_kwargs)

        _casters = [
            sdk_response.ResponseCaster(
                status_code=200, expected_type=Hook, is_error=False
            ),
            sdk_response.ResponseCaster(
                status_code="default", expected_type=Error, is_error=True
            ),
        ]

        _matching_casters = [
            c for c in _casters if c.match_code(_raw_response.status_code)
        ]
        if len(_matching_casters) == 0:
            raise sdk_errors.UnexpectedStatusCodeException(
                response=_raw_response,
                expected_codes=[c.status_code_str for c in _casters],
            )
        _caster = _matching_casters[0]
        _response_data = _caster.cast_response(_raw_response)

        if _caster.is_error:
            raise sdk_errors.RequestException(
                response=_raw_response, data=_response_data
            )

        return _response_data

    def update_site_asset(self, *, site_id: str, asset_id: str, state: str) -> Asset:
        """ """
        _endpoint = f"/sites/{site_id}/assets/{asset_id}"
        _url = f"{self.base_url}{_endpoint}"

        _params = {}  # type: dict[str, typing.Any]
        _params["state"] = self._format_param(state, False)
        _authed_kwargs = self._add_auth(
            [
                "netlifyAuth",
            ],
            params=_params,
        )
        _raw_response = self.session.put(_url, **_authed_kwargs)

        _casters = [
            sdk_response.ResponseCaster(
                status_code=200, expected_type=Asset, is_error=False
            ),
            sdk_response.ResponseCaster(
                status_code="default", expected_type=Error, is_error=True
            ),
        ]

        _matching_casters = [
            c for c in _casters if c.match_code(_raw_response.status_code)
        ]
        if len(_matching_casters) == 0:
            raise sdk_errors.UnexpectedStatusCodeException(
                response=_raw_response,
                expected_codes=[c.status_code_str for c in _casters],
            )
        _caster = _matching_casters[0]
        _response_data = _caster.cast_response(_raw_response)

        if _caster.is_error:
            raise sdk_errors.RequestException(
                response=_raw_response, data=_response_data
            )

        return _response_data

    def update_site_build_hook(
        self, *, data: BuildHookSetup, site_id: str, id: str
    ) -> typing.Any:
        """ """
        _endpoint = f"/sites/{site_id}/build_hooks/{id}"
        _url = f"{self.base_url}{_endpoint}"

        _params = {}  # type: dict[str, typing.Any]
        _json_data = self._to_json_encodable(data)
        _authed_kwargs = self._add_auth(
            [
                "netlifyAuth",
            ],
            params=_params,
        )
        _raw_response = self.session.put(_url, json=_json_data, **_authed_kwargs)

        _casters = [
            sdk_response.ResponseCaster(
                status_code=204, expected_type=typing.Any, is_error=False
            ),
            sdk_response.ResponseCaster(
                status_code="default", expected_type=Error, is_error=True
            ),
        ]

        _matching_casters = [
            c for c in _casters if c.match_code(_raw_response.status_code)
        ]
        if len(_matching_casters) == 0:
            raise sdk_errors.UnexpectedStatusCodeException(
                response=_raw_response,
                expected_codes=[c.status_code_str for c in _casters],
            )
        _caster = _matching_casters[0]
        _response_data = _caster.cast_response(_raw_response)

        if _caster.is_error:
            raise sdk_errors.RequestException(
                response=_raw_response, data=_response_data
            )

        return _response_data

    def update_site_deploy(
        self, *, data: DeployFiles, site_id: str, deploy_id: str
    ) -> Deploy:
        """ """
        _endpoint = f"/sites/{site_id}/deploys/{deploy_id}"
        _url = f"{self.base_url}{_endpoint}"

        _params = {}  # type: dict[str, typing.Any]
        _json_data = self._to_json_encodable(data)
        _authed_kwargs = self._add_auth(
            [
                "netlifyAuth",
            ],
            params=_params,
        )
        _raw_response = self.session.put(_url, json=_json_data, **_authed_kwargs)

        _casters = [
            sdk_response.ResponseCaster(
                status_code=200, expected_type=Deploy, is_error=False
            ),
            sdk_response.ResponseCaster(
                status_code="default", expected_type=Error, is_error=True
            ),
        ]

        _matching_casters = [
            c for c in _casters if c.match_code(_raw_response.status_code)
        ]
        if len(_matching_casters) == 0:
            raise sdk_errors.UnexpectedStatusCodeException(
                response=_raw_response,
                expected_codes=[c.status_code_str for c in _casters],
            )
        _caster = _matching_casters[0]
        _response_data = _caster.cast_response(_raw_response)

        if _caster.is_error:
            raise sdk_errors.RequestException(
                response=_raw_response, data=_response_data
            )

        return _response_data

    def configure_dns_for_site(self, *, site_id: str) -> typing.List[DnsZone]:
        """ """
        _endpoint = f"/sites/{site_id}/dns"
        _url = f"{self.base_url}{_endpoint}"

        _params = {}  # type: dict[str, typing.Any]
        _authed_kwargs = self._add_auth(
            [
                "netlifyAuth",
            ],
            params=_params,
        )
        _raw_response = self.session.put(_url, **_authed_kwargs)

        _casters = [
            sdk_response.ResponseCaster(
                status_code=200, expected_type=typing.List[DnsZone], is_error=False
            ),
            sdk_response.ResponseCaster(
                status_code="default", expected_type=Error, is_error=True
            ),
        ]

        _matching_casters = [
            c for c in _casters if c.match_code(_raw_response.status_code)
        ]
        if len(_matching_casters) == 0:
            raise sdk_errors.UnexpectedStatusCodeException(
                response=_raw_response,
                expected_codes=[c.status_code_str for c in _casters],
            )
        _caster = _matching_casters[0]
        _response_data = _caster.cast_response(_raw_response)

        if _caster.is_error:
            raise sdk_errors.RequestException(
                response=_raw_response, data=_response_data
            )

        return _response_data

    def update_site_metadata(
        self, *, data: typing.Dict[str, typing.Any], site_id: str
    ) -> typing.Any:
        """ """
        _endpoint = f"/sites/{site_id}/metadata"
        _url = f"{self.base_url}{_endpoint}"

        _params = {}  # type: dict[str, typing.Any]
        _json_data = self._to_json_encodable(data)
        _authed_kwargs = self._add_auth(
            [
                "netlifyAuth",
            ],
            params=_params,
        )
        _raw_response = self.session.put(_url, json=_json_data, **_authed_kwargs)

        _casters = [
            sdk_response.ResponseCaster(
                status_code=204, expected_type=typing.Any, is_error=False
            ),
            sdk_response.ResponseCaster(
                status_code="default", expected_type=Error, is_error=True
            ),
        ]

        _matching_casters = [
            c for c in _casters if c.match_code(_raw_response.status_code)
        ]
        if len(_matching_casters) == 0:
            raise sdk_errors.UnexpectedStatusCodeException(
                response=_raw_response,
                expected_codes=[c.status_code_str for c in _casters],
            )
        _caster = _matching_casters[0]
        _response_data = _caster.cast_response(_raw_response)

        if _caster.is_error:
            raise sdk_errors.RequestException(
                response=_raw_response, data=_response_data
            )

        return _response_data

    def rollback_site_deploy(self, *, site_id: str) -> typing.Any:
        """ """
        _endpoint = f"/sites/{site_id}/rollback"
        _url = f"{self.base_url}{_endpoint}"

        _params = {}  # type: dict[str, typing.Any]
        _authed_kwargs = self._add_auth(
            [
                "netlifyAuth",
            ],
            params=_params,
        )
        _raw_response = self.session.put(_url, **_authed_kwargs)

        _casters = [
            sdk_response.ResponseCaster(
                status_code=204, expected_type=typing.Any, is_error=False
            ),
            sdk_response.ResponseCaster(
                status_code="default", expected_type=Error, is_error=True
            ),
        ]

        _matching_casters = [
            c for c in _casters if c.match_code(_raw_response.status_code)
        ]
        if len(_matching_casters) == 0:
            raise sdk_errors.UnexpectedStatusCodeException(
                response=_raw_response,
                expected_codes=[c.status_code_str for c in _casters],
            )
        _caster = _matching_casters[0]
        _response_data = _caster.cast_response(_raw_response)

        if _caster.is_error:
            raise sdk_errors.RequestException(
                response=_raw_response, data=_response_data
            )

        return _response_data

    def update_service_instance(
        self,
        *,
        data: typing.Dict[str, typing.Any],
        site_id: str,
        addon: str,
        instance_id: str,
    ) -> typing.Any:
        """ """
        _endpoint = f"/sites/{site_id}/services/{addon}/instances/{instance_id}"
        _url = f"{self.base_url}{_endpoint}"

        _params = {}  # type: dict[str, typing.Any]
        _json_data = self._to_json_encodable(data)
        _authed_kwargs = self._add_auth(
            [
                "netlifyAuth",
            ],
            params=_params,
        )
        _raw_response = self.session.put(_url, json=_json_data, **_authed_kwargs)

        _casters = [
            sdk_response.ResponseCaster(
                status_code=204, expected_type=typing.Any, is_error=False
            ),
            sdk_response.ResponseCaster(
                status_code="default", expected_type=Error, is_error=True
            ),
        ]

        _matching_casters = [
            c for c in _casters if c.match_code(_raw_response.status_code)
        ]
        if len(_matching_casters) == 0:
            raise sdk_errors.UnexpectedStatusCodeException(
                response=_raw_response,
                expected_codes=[c.status_code_str for c in _casters],
            )
        _caster = _matching_casters[0]
        _response_data = _caster.cast_response(_raw_response)

        if _caster.is_error:
            raise sdk_errors.RequestException(
                response=_raw_response, data=_response_data
            )

        return _response_data

    def update_site_snippet(
        self, *, data: Snippet, site_id: str, snippet_id: str
    ) -> typing.Any:
        """ """
        _endpoint = f"/sites/{site_id}/snippets/{snippet_id}"
        _url = f"{self.base_url}{_endpoint}"

        _params = {}  # type: dict[str, typing.Any]
        _json_data = self._to_json_encodable(data)
        _authed_kwargs = self._add_auth(
            [
                "netlifyAuth",
            ],
            params=_params,
        )
        _raw_response = self.session.put(_url, json=_json_data, **_authed_kwargs)

        _casters = [
            sdk_response.ResponseCaster(
                status_code=204, expected_type=typing.Any, is_error=False
            ),
            sdk_response.ResponseCaster(
                status_code="default", expected_type=Error, is_error=True
            ),
        ]

        _matching_casters = [
            c for c in _casters if c.match_code(_raw_response.status_code)
        ]
        if len(_matching_casters) == 0:
            raise sdk_errors.UnexpectedStatusCodeException(
                response=_raw_response,
                expected_codes=[c.status_code_str for c in _casters],
            )
        _caster = _matching_casters[0]
        _response_data = _caster.cast_response(_raw_response)

        if _caster.is_error:
            raise sdk_errors.RequestException(
                response=_raw_response, data=_response_data
            )

        return _response_data

    def update_split_test(
        self, *, data: SplitTestSetup, site_id: str, split_test_id: str
    ) -> SplitTest:
        """ """
        _endpoint = f"/sites/{site_id}/traffic_splits/{split_test_id}"
        _url = f"{self.base_url}{_endpoint}"

        _params = {}  # type: dict[str, typing.Any]
        _json_data = self._to_json_encodable(data)
        _authed_kwargs = self._add_auth(
            [
                "netlifyAuth",
            ],
            params=_params,
        )
        _raw_response = self.session.put(_url, json=_json_data, **_authed_kwargs)

        _casters = [
            sdk_response.ResponseCaster(
                status_code=201, expected_type=SplitTest, is_error=False
            ),
            sdk_response.ResponseCaster(
                status_code="default", expected_type=Error, is_error=True
            ),
        ]

        _matching_casters = [
            c for c in _casters if c.match_code(_raw_response.status_code)
        ]
        if len(_matching_casters) == 0:
            raise sdk_errors.UnexpectedStatusCodeException(
                response=_raw_response,
                expected_codes=[c.status_code_str for c in _casters],
            )
        _caster = _matching_casters[0]
        _response_data = _caster.cast_response(_raw_response)

        if _caster.is_error:
            raise sdk_errors.RequestException(
                response=_raw_response, data=_response_data
            )

        return _response_data

    def unlink_site_repo(self, *, site_id: str) -> Site:
        """
        [Beta] Unlinks the repo from the site.

        This action will also:
        - Delete associated deploy keys
        - Delete outgoing webhooks for the repo
        - Delete the site's build hooks
        """
        _endpoint = f"/sites/{site_id}/unlink_repo"
        _url = f"{self.base_url}{_endpoint}"

        _params = {}  # type: dict[str, typing.Any]
        _authed_kwargs = self._add_auth(
            [
                "netlifyAuth",
            ],
            params=_params,
        )
        _raw_response = self.session.put(_url, **_authed_kwargs)

        _casters = [
            sdk_response.ResponseCaster(
                status_code=200, expected_type=Site, is_error=False
            ),
            sdk_response.ResponseCaster(
                status_code=404, expected_type=typing.Any, is_error=True
            ),
        ]

        _matching_casters = [
            c for c in _casters if c.match_code(_raw_response.status_code)
        ]
        if len(_matching_casters) == 0:
            raise sdk_errors.UnexpectedStatusCodeException(
                response=_raw_response,
                expected_codes=[c.status_code_str for c in _casters],
            )
        _caster = _matching_casters[0]
        _response_data = _caster.cast_response(_raw_response)

        if _caster.is_error:
            raise sdk_errors.RequestException(
                response=_raw_response, data=_response_data
            )

        return _response_data

    def update_account_member(
        self, *, data: AccountUpdateMemberSetup, account_slug: str, member_id: str
    ) -> Member:
        """ """
        _endpoint = f"/{account_slug}/members/{member_id}"
        _url = f"{self.base_url}{_endpoint}"

        _params = {}  # type: dict[str, typing.Any]
        _json_data = self._to_json_encodable(data)
        _authed_kwargs = self._add_auth(
            [
                "netlifyAuth",
            ],
            params=_params,
        )
        _raw_response = self.session.put(_url, json=_json_data, **_authed_kwargs)

        _casters = [
            sdk_response.ResponseCaster(
                status_code=200, expected_type=Member, is_error=False
            ),
            sdk_response.ResponseCaster(
                status_code="default", expected_type=Error, is_error=True
            ),
        ]

        _matching_casters = [
            c for c in _casters if c.match_code(_raw_response.status_code)
        ]
        if len(_matching_casters) == 0:
            raise sdk_errors.UnexpectedStatusCodeException(
                response=_raw_response,
                expected_codes=[c.status_code_str for c in _casters],
            )
        _caster = _matching_casters[0]
        _response_data = _caster.cast_response(_raw_response)

        if _caster.is_error:
            raise sdk_errors.RequestException(
                response=_raw_response, data=_response_data
            )

        return _response_data

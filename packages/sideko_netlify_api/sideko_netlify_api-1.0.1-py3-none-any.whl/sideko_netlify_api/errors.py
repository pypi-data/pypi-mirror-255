"""Generated by Sideko (sideko.dev)"""
from typing import TypeVar, List, Type
import httpx

T = TypeVar("T")


class RequestException(Exception):
    def __init__(self, *, response: httpx.Response, data: T):
        super().__init__(
            f"received {response.status_code} from {response.request.method.upper()} {response.url}"
        )
        self.response = response
        self.status_code = response.status_code
        self.method = response.request.method
        self.url = response.url
        self.data = data


class UnexpectedStatusCodeException(Exception):
    def __init__(
        self,
        *,
        response: httpx.Response,
        expected_codes: List[int],
    ):
        super().__init__(
            f"received unexpected status code {response.status_code} from {response.url}, handlers set up for {expected_codes}"
        )
        self.response = response
        self.status_code = response.status_code
        self.method = response.request.method
        self.url = response.url
        self.expected_codes = expected_codes


class InvalidResponseBodyException(Exception):
    def __init__(
        self,
        *,
        response: httpx.Response,
        expected_type: Type,
    ):
        super().__init__(
            f"received unexpected response body for {response.status_code} from {response.url}, expected {expected_type}"
        )
        self.response = response
        self.status_code = response.status_code
        self.method = response.request.method
        self.url = response.url
        self.expected_type = expected_type

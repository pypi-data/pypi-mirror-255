"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import armada.submit_pb2
import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import google.protobuf.timestamp_pb2
import k8s.io.api.core.v1.generated_pb2
import k8s.io.api.networking.v1.generated_pb2
import k8s.io.apimachinery.pkg.api.resource.generated_pb2
import sys

if sys.version_info >= (3, 8):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing_extensions.final
class Job(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing_extensions.final
    class LabelsEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.str
        value: builtins.str
        def __init__(
            self,
            *,
            key: builtins.str = ...,
            value: builtins.str = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["key", b"key", "value", b"value"]) -> None: ...

    @typing_extensions.final
    class AnnotationsEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.str
        value: builtins.str
        def __init__(
            self,
            *,
            key: builtins.str = ...,
            value: builtins.str = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["key", b"key", "value", b"value"]) -> None: ...

    @typing_extensions.final
    class RequiredNodeLabelsEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.str
        value: builtins.str
        def __init__(
            self,
            *,
            key: builtins.str = ...,
            value: builtins.str = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["key", b"key", "value", b"value"]) -> None: ...

    ID_FIELD_NUMBER: builtins.int
    CLIENT_ID_FIELD_NUMBER: builtins.int
    JOB_SET_ID_FIELD_NUMBER: builtins.int
    QUEUE_FIELD_NUMBER: builtins.int
    NAMESPACE_FIELD_NUMBER: builtins.int
    LABELS_FIELD_NUMBER: builtins.int
    ANNOTATIONS_FIELD_NUMBER: builtins.int
    REQUIRED_NODE_LABELS_FIELD_NUMBER: builtins.int
    OWNER_FIELD_NUMBER: builtins.int
    QUEUE_OWNERSHIP_USER_GROUPS_FIELD_NUMBER: builtins.int
    COMPRESSED_QUEUE_OWNERSHIP_USER_GROUPS_FIELD_NUMBER: builtins.int
    PRIORITY_FIELD_NUMBER: builtins.int
    POD_SPEC_FIELD_NUMBER: builtins.int
    POD_SPECS_FIELD_NUMBER: builtins.int
    SCHEDULING_RESOURCE_REQUIREMENTS_FIELD_NUMBER: builtins.int
    CREATED_FIELD_NUMBER: builtins.int
    INGRESS_FIELD_NUMBER: builtins.int
    SERVICES_FIELD_NUMBER: builtins.int
    K8S_INGRESS_FIELD_NUMBER: builtins.int
    K8S_SERVICE_FIELD_NUMBER: builtins.int
    SCHEDULER_FIELD_NUMBER: builtins.int
    QUEUE_TTL_SECONDS_FIELD_NUMBER: builtins.int
    id: builtins.str
    client_id: builtins.str
    job_set_id: builtins.str
    queue: builtins.str
    namespace: builtins.str
    @property
    def labels(self) -> google.protobuf.internal.containers.ScalarMap[builtins.str, builtins.str]: ...
    @property
    def annotations(self) -> google.protobuf.internal.containers.ScalarMap[builtins.str, builtins.str]: ...
    @property
    def required_node_labels(self) -> google.protobuf.internal.containers.ScalarMap[builtins.str, builtins.str]: ...
    owner: builtins.str
    @property
    def queue_ownership_user_groups(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]: ...
    compressed_queue_ownership_user_groups: builtins.bytes
    priority: builtins.float
    @property
    def pod_spec(self) -> k8s.io.api.core.v1.generated_pb2.PodSpec:
        """Use PodSpecs instead"""
    @property
    def pod_specs(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[k8s.io.api.core.v1.generated_pb2.PodSpec]: ...
    @property
    def scheduling_resource_requirements(self) -> k8s.io.api.core.v1.generated_pb2.ResourceRequirements:
        """Resource requests and limits necessary for scheduling the main pod of this job.
        The requests and limits herein are set to:

        max(

        	sum across all containers,
        	max over all init containers,

        )

        This is because containers run in parallel, whereas initContainers run serially.
        This field is populated automatically at submission.
        Submitting a job with this field already populated results in an error.
        """
    @property
    def created(self) -> google.protobuf.timestamp_pb2.Timestamp: ...
    @property
    def ingress(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[armada.submit_pb2.IngressConfig]:
        """Services can be provided either as Armada-specific config objects or as proper k8s objects.
        These options are exclusive, i.e., if either ingress or services is provided,
        then neither of k8s_ingress or k8s_service can be provided, and vice versa.
        """
    @property
    def services(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[armada.submit_pb2.ServiceConfig]: ...
    @property
    def k8s_ingress(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[k8s.io.api.networking.v1.generated_pb2.Ingress]: ...
    @property
    def k8s_service(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[k8s.io.api.core.v1.generated_pb2.Service]: ...
    scheduler: builtins.str
    """Indicates which scheduler should manage this job.
    If empty, the default scheduler is used.
    """
    queue_ttl_seconds: builtins.int
    """Queuing TTL for this job in seconds. If this job queues for more than this duration it will be cancelled. Zero indicates an infinite lifetime."""
    def __init__(
        self,
        *,
        id: builtins.str = ...,
        client_id: builtins.str = ...,
        job_set_id: builtins.str = ...,
        queue: builtins.str = ...,
        namespace: builtins.str = ...,
        labels: collections.abc.Mapping[builtins.str, builtins.str] | None = ...,
        annotations: collections.abc.Mapping[builtins.str, builtins.str] | None = ...,
        required_node_labels: collections.abc.Mapping[builtins.str, builtins.str] | None = ...,
        owner: builtins.str = ...,
        queue_ownership_user_groups: collections.abc.Iterable[builtins.str] | None = ...,
        compressed_queue_ownership_user_groups: builtins.bytes = ...,
        priority: builtins.float = ...,
        pod_spec: k8s.io.api.core.v1.generated_pb2.PodSpec | None = ...,
        pod_specs: collections.abc.Iterable[k8s.io.api.core.v1.generated_pb2.PodSpec] | None = ...,
        scheduling_resource_requirements: k8s.io.api.core.v1.generated_pb2.ResourceRequirements | None = ...,
        created: google.protobuf.timestamp_pb2.Timestamp | None = ...,
        ingress: collections.abc.Iterable[armada.submit_pb2.IngressConfig] | None = ...,
        services: collections.abc.Iterable[armada.submit_pb2.ServiceConfig] | None = ...,
        k8s_ingress: collections.abc.Iterable[k8s.io.api.networking.v1.generated_pb2.Ingress] | None = ...,
        k8s_service: collections.abc.Iterable[k8s.io.api.core.v1.generated_pb2.Service] | None = ...,
        scheduler: builtins.str = ...,
        queue_ttl_seconds: builtins.int = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["created", b"created", "pod_spec", b"pod_spec", "scheduling_resource_requirements", b"scheduling_resource_requirements"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["annotations", b"annotations", "client_id", b"client_id", "compressed_queue_ownership_user_groups", b"compressed_queue_ownership_user_groups", "created", b"created", "id", b"id", "ingress", b"ingress", "job_set_id", b"job_set_id", "k8s_ingress", b"k8s_ingress", "k8s_service", b"k8s_service", "labels", b"labels", "namespace", b"namespace", "owner", b"owner", "pod_spec", b"pod_spec", "pod_specs", b"pod_specs", "priority", b"priority", "queue", b"queue", "queue_ownership_user_groups", b"queue_ownership_user_groups", "queue_ttl_seconds", b"queue_ttl_seconds", "required_node_labels", b"required_node_labels", "scheduler", b"scheduler", "scheduling_resource_requirements", b"scheduling_resource_requirements", "services", b"services"]) -> None: ...

global___Job = Job

@typing_extensions.final
class StreamingLeaseRequest(google.protobuf.message.Message):
    """For the bidirectional streaming job lease request service.
    For the first message, populate all fields except SubmittedJobs, which should be empty.
    For subsequent messages, these fields may be left empty, in which case the last non-zero value received is used.
    By streaming back job ids, the server knows which jobs were received in case of an outage.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing_extensions.final
    class ResourcesEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.str
        @property
        def value(self) -> k8s.io.apimachinery.pkg.api.resource.generated_pb2.Quantity: ...
        def __init__(
            self,
            *,
            key: builtins.str = ...,
            value: k8s.io.apimachinery.pkg.api.resource.generated_pb2.Quantity | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["value", b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["key", b"key", "value", b"value"]) -> None: ...

    @typing_extensions.final
    class MinimumJobSizeEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.str
        @property
        def value(self) -> k8s.io.apimachinery.pkg.api.resource.generated_pb2.Quantity: ...
        def __init__(
            self,
            *,
            key: builtins.str = ...,
            value: k8s.io.apimachinery.pkg.api.resource.generated_pb2.Quantity | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["value", b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["key", b"key", "value", b"value"]) -> None: ...

    CLUSTER_ID_FIELD_NUMBER: builtins.int
    POOL_FIELD_NUMBER: builtins.int
    RESOURCES_FIELD_NUMBER: builtins.int
    CLUSTER_LEASED_REPORT_FIELD_NUMBER: builtins.int
    MINIMUM_JOB_SIZE_FIELD_NUMBER: builtins.int
    NODES_FIELD_NUMBER: builtins.int
    RECEIVEDJOBIDS_FIELD_NUMBER: builtins.int
    cluster_id: builtins.str
    """Each cluster has a unique name associated with it."""
    pool: builtins.str
    """Nodes are split into pools. This field indicates for which pool jobs are leased."""
    @property
    def resources(self) -> google.protobuf.internal.containers.MessageMap[builtins.str, k8s.io.apimachinery.pkg.api.resource.generated_pb2.Quantity]:
        """Total resources available for scheduling across all nodes."""
    @property
    def cluster_leased_report(self) -> global___ClusterLeasedReport:
        """For each queue, the total resources allocated to jobs from that queue."""
    @property
    def minimum_job_size(self) -> google.protobuf.internal.containers.MessageMap[builtins.str, k8s.io.apimachinery.pkg.api.resource.generated_pb2.Quantity]:
        """Jobs submitted to this executor must require at least this amount of resources."""
    @property
    def nodes(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___NodeInfo]:
        """For each node in the cluster:
        - the total resources on that node,
        - the amount of resources already assigned to jobs, and
        - any taints and labels on the node.
        """
    @property
    def ReceivedJobIds(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """Ids of received jobs. Used to ack received jobs."""
    def __init__(
        self,
        *,
        cluster_id: builtins.str = ...,
        pool: builtins.str = ...,
        resources: collections.abc.Mapping[builtins.str, k8s.io.apimachinery.pkg.api.resource.generated_pb2.Quantity] | None = ...,
        cluster_leased_report: global___ClusterLeasedReport | None = ...,
        minimum_job_size: collections.abc.Mapping[builtins.str, k8s.io.apimachinery.pkg.api.resource.generated_pb2.Quantity] | None = ...,
        nodes: collections.abc.Iterable[global___NodeInfo] | None = ...,
        ReceivedJobIds: collections.abc.Iterable[builtins.str] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["cluster_leased_report", b"cluster_leased_report"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["ReceivedJobIds", b"ReceivedJobIds", "cluster_id", b"cluster_id", "cluster_leased_report", b"cluster_leased_report", "minimum_job_size", b"minimum_job_size", "nodes", b"nodes", "pool", b"pool", "resources", b"resources"]) -> None: ...

global___StreamingLeaseRequest = StreamingLeaseRequest

@typing_extensions.final
class NodeInfo(google.protobuf.message.Message):
    """Used by the scheduler when allocating jobs to executors."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing_extensions.final
    class LabelsEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.str
        value: builtins.str
        def __init__(
            self,
            *,
            key: builtins.str = ...,
            value: builtins.str = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["key", b"key", "value", b"value"]) -> None: ...

    @typing_extensions.final
    class AllocatableResourcesEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.str
        @property
        def value(self) -> k8s.io.apimachinery.pkg.api.resource.generated_pb2.Quantity: ...
        def __init__(
            self,
            *,
            key: builtins.str = ...,
            value: k8s.io.apimachinery.pkg.api.resource.generated_pb2.Quantity | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["value", b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["key", b"key", "value", b"value"]) -> None: ...

    @typing_extensions.final
    class AvailableResourcesEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.str
        @property
        def value(self) -> k8s.io.apimachinery.pkg.api.resource.generated_pb2.Quantity: ...
        def __init__(
            self,
            *,
            key: builtins.str = ...,
            value: k8s.io.apimachinery.pkg.api.resource.generated_pb2.Quantity | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["value", b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["key", b"key", "value", b"value"]) -> None: ...

    @typing_extensions.final
    class TotalResourcesEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.str
        @property
        def value(self) -> k8s.io.apimachinery.pkg.api.resource.generated_pb2.Quantity: ...
        def __init__(
            self,
            *,
            key: builtins.str = ...,
            value: k8s.io.apimachinery.pkg.api.resource.generated_pb2.Quantity | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["value", b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["key", b"key", "value", b"value"]) -> None: ...

    @typing_extensions.final
    class AllocatedResourcesEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.int
        @property
        def value(self) -> global___ComputeResource: ...
        def __init__(
            self,
            *,
            key: builtins.int = ...,
            value: global___ComputeResource | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["value", b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["key", b"key", "value", b"value"]) -> None: ...

    @typing_extensions.final
    class RunIdsByStateEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.str
        value: armada.submit_pb2.JobState.ValueType
        def __init__(
            self,
            *,
            key: builtins.str = ...,
            value: armada.submit_pb2.JobState.ValueType = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["key", b"key", "value", b"value"]) -> None: ...

    @typing_extensions.final
    class NonArmadaAllocatedResourcesEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.int
        @property
        def value(self) -> global___ComputeResource: ...
        def __init__(
            self,
            *,
            key: builtins.int = ...,
            value: global___ComputeResource | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["value", b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["key", b"key", "value", b"value"]) -> None: ...

    @typing_extensions.final
    class ResourceUsageByQueueEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.str
        @property
        def value(self) -> global___ComputeResource: ...
        def __init__(
            self,
            *,
            key: builtins.str = ...,
            value: global___ComputeResource | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["value", b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["key", b"key", "value", b"value"]) -> None: ...

    NAME_FIELD_NUMBER: builtins.int
    TAINTS_FIELD_NUMBER: builtins.int
    LABELS_FIELD_NUMBER: builtins.int
    ALLOCATABLE_RESOURCES_FIELD_NUMBER: builtins.int
    AVAILABLE_RESOURCES_FIELD_NUMBER: builtins.int
    TOTAL_RESOURCES_FIELD_NUMBER: builtins.int
    ALLOCATED_RESOURCES_FIELD_NUMBER: builtins.int
    RUN_IDS_BY_STATE_FIELD_NUMBER: builtins.int
    NON_ARMADA_ALLOCATED_RESOURCES_FIELD_NUMBER: builtins.int
    UNSCHEDULABLE_FIELD_NUMBER: builtins.int
    RESOURCE_USAGE_BY_QUEUE_FIELD_NUMBER: builtins.int
    NODE_TYPE_FIELD_NUMBER: builtins.int
    name: builtins.str
    @property
    def taints(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[k8s.io.api.core.v1.generated_pb2.Taint]: ...
    @property
    def labels(self) -> google.protobuf.internal.containers.ScalarMap[builtins.str, builtins.str]: ...
    @property
    def allocatable_resources(self) -> google.protobuf.internal.containers.MessageMap[builtins.str, k8s.io.apimachinery.pkg.api.resource.generated_pb2.Quantity]:
        """To be deprecated in favour of total_resources + allocated_resources."""
    @property
    def available_resources(self) -> google.protobuf.internal.containers.MessageMap[builtins.str, k8s.io.apimachinery.pkg.api.resource.generated_pb2.Quantity]:
        """To be deprecated in favour of total_resources + allocated_resources."""
    @property
    def total_resources(self) -> google.protobuf.internal.containers.MessageMap[builtins.str, k8s.io.apimachinery.pkg.api.resource.generated_pb2.Quantity]:
        """Total node resources.
        Resources available for allocation is given by the difference between this and allocated_resources.
        """
    @property
    def allocated_resources(self) -> google.protobuf.internal.containers.MessageMap[builtins.int, global___ComputeResource]:
        """Each pod is created with a priority class. Each priority class has an integer priority associated with it.
        This is a map from priority to the total amount of resources allocated to pods with that priority.
        It is used by the scheduler to decide whether more jobs should be sent to an executor.
        In particular, jobs may be sent to an executor even if all resources are allocated
        if the sent jobs are of higher priority.
        """
    @property
    def run_ids_by_state(self) -> google.protobuf.internal.containers.ScalarMap[builtins.str, armada.submit_pb2.JobState.ValueType]:
        """All run ids of jobs on the node, mapped to their current state
        this should be of type armadaevents.uuid, but this creates a circular loop
        once the old scheduler has gone, we can correct this
        """
    @property
    def non_armada_allocated_resources(self) -> google.protobuf.internal.containers.MessageMap[builtins.int, global___ComputeResource]:
        """The amount of resource allocated to non-armada pods by priority"""
    unschedulable: builtins.bool
    @property
    def resource_usage_by_queue(self) -> google.protobuf.internal.containers.MessageMap[builtins.str, global___ComputeResource]:
        """This should only be used for metrics
        An aggregated real usage of jobs by queue
        """
    node_type: builtins.str
    """This should only be used for metrics
    This is the type the node should be reported as. It is simple a label to categorise the group the node belongs to
    """
    def __init__(
        self,
        *,
        name: builtins.str = ...,
        taints: collections.abc.Iterable[k8s.io.api.core.v1.generated_pb2.Taint] | None = ...,
        labels: collections.abc.Mapping[builtins.str, builtins.str] | None = ...,
        allocatable_resources: collections.abc.Mapping[builtins.str, k8s.io.apimachinery.pkg.api.resource.generated_pb2.Quantity] | None = ...,
        available_resources: collections.abc.Mapping[builtins.str, k8s.io.apimachinery.pkg.api.resource.generated_pb2.Quantity] | None = ...,
        total_resources: collections.abc.Mapping[builtins.str, k8s.io.apimachinery.pkg.api.resource.generated_pb2.Quantity] | None = ...,
        allocated_resources: collections.abc.Mapping[builtins.int, global___ComputeResource] | None = ...,
        run_ids_by_state: collections.abc.Mapping[builtins.str, armada.submit_pb2.JobState.ValueType] | None = ...,
        non_armada_allocated_resources: collections.abc.Mapping[builtins.int, global___ComputeResource] | None = ...,
        unschedulable: builtins.bool = ...,
        resource_usage_by_queue: collections.abc.Mapping[builtins.str, global___ComputeResource] | None = ...,
        node_type: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["allocatable_resources", b"allocatable_resources", "allocated_resources", b"allocated_resources", "available_resources", b"available_resources", "labels", b"labels", "name", b"name", "node_type", b"node_type", "non_armada_allocated_resources", b"non_armada_allocated_resources", "resource_usage_by_queue", b"resource_usage_by_queue", "run_ids_by_state", b"run_ids_by_state", "taints", b"taints", "total_resources", b"total_resources", "unschedulable", b"unschedulable"]) -> None: ...

global___NodeInfo = NodeInfo

@typing_extensions.final
class NodeType(google.protobuf.message.Message):
    """The Armada scheduler must account for taints, labels, and available resources.
    These together make up the NodeType of a particular node.
    Nodes with equal NodeType are considered as equivalent for scheduling and accounting.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing_extensions.final
    class LabelsEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.str
        value: builtins.str
        def __init__(
            self,
            *,
            key: builtins.str = ...,
            value: builtins.str = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["key", b"key", "value", b"value"]) -> None: ...

    @typing_extensions.final
    class AllocatableResourcesEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.str
        @property
        def value(self) -> k8s.io.apimachinery.pkg.api.resource.generated_pb2.Quantity: ...
        def __init__(
            self,
            *,
            key: builtins.str = ...,
            value: k8s.io.apimachinery.pkg.api.resource.generated_pb2.Quantity | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["value", b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["key", b"key", "value", b"value"]) -> None: ...

    TAINTS_FIELD_NUMBER: builtins.int
    LABELS_FIELD_NUMBER: builtins.int
    ALLOCATABLE_RESOURCES_FIELD_NUMBER: builtins.int
    @property
    def taints(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[k8s.io.api.core.v1.generated_pb2.Taint]: ...
    @property
    def labels(self) -> google.protobuf.internal.containers.ScalarMap[builtins.str, builtins.str]: ...
    @property
    def allocatable_resources(self) -> google.protobuf.internal.containers.MessageMap[builtins.str, k8s.io.apimachinery.pkg.api.resource.generated_pb2.Quantity]: ...
    def __init__(
        self,
        *,
        taints: collections.abc.Iterable[k8s.io.api.core.v1.generated_pb2.Taint] | None = ...,
        labels: collections.abc.Mapping[builtins.str, builtins.str] | None = ...,
        allocatable_resources: collections.abc.Mapping[builtins.str, k8s.io.apimachinery.pkg.api.resource.generated_pb2.Quantity] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["allocatable_resources", b"allocatable_resources", "labels", b"labels", "taints", b"taints"]) -> None: ...

global___NodeType = NodeType

@typing_extensions.final
class ClusterSchedulingInfoReport(google.protobuf.message.Message):
    """Used to store last info in Redis"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing_extensions.final
    class MinimumJobSizeEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.str
        @property
        def value(self) -> k8s.io.apimachinery.pkg.api.resource.generated_pb2.Quantity: ...
        def __init__(
            self,
            *,
            key: builtins.str = ...,
            value: k8s.io.apimachinery.pkg.api.resource.generated_pb2.Quantity | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["value", b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["key", b"key", "value", b"value"]) -> None: ...

    CLUSTER_ID_FIELD_NUMBER: builtins.int
    POOL_FIELD_NUMBER: builtins.int
    REPORT_TIME_FIELD_NUMBER: builtins.int
    NODE_TYPES_FIELD_NUMBER: builtins.int
    MINIMUM_JOB_SIZE_FIELD_NUMBER: builtins.int
    cluster_id: builtins.str
    pool: builtins.str
    @property
    def report_time(self) -> google.protobuf.timestamp_pb2.Timestamp: ...
    @property
    def node_types(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___NodeType]: ...
    @property
    def minimum_job_size(self) -> google.protobuf.internal.containers.MessageMap[builtins.str, k8s.io.apimachinery.pkg.api.resource.generated_pb2.Quantity]: ...
    def __init__(
        self,
        *,
        cluster_id: builtins.str = ...,
        pool: builtins.str = ...,
        report_time: google.protobuf.timestamp_pb2.Timestamp | None = ...,
        node_types: collections.abc.Iterable[global___NodeType] | None = ...,
        minimum_job_size: collections.abc.Mapping[builtins.str, k8s.io.apimachinery.pkg.api.resource.generated_pb2.Quantity] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["report_time", b"report_time"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["cluster_id", b"cluster_id", "minimum_job_size", b"minimum_job_size", "node_types", b"node_types", "pool", b"pool", "report_time", b"report_time"]) -> None: ...

global___ClusterSchedulingInfoReport = ClusterSchedulingInfoReport

@typing_extensions.final
class QueueLeasedReport(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing_extensions.final
    class ResourcesLeasedEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.str
        @property
        def value(self) -> k8s.io.apimachinery.pkg.api.resource.generated_pb2.Quantity: ...
        def __init__(
            self,
            *,
            key: builtins.str = ...,
            value: k8s.io.apimachinery.pkg.api.resource.generated_pb2.Quantity | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["value", b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["key", b"key", "value", b"value"]) -> None: ...

    @typing_extensions.final
    class ResourcesLeasedByPriorityEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.int
        @property
        def value(self) -> global___ComputeResource: ...
        def __init__(
            self,
            *,
            key: builtins.int = ...,
            value: global___ComputeResource | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["value", b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["key", b"key", "value", b"value"]) -> None: ...

    NAME_FIELD_NUMBER: builtins.int
    RESOURCES_LEASED_FIELD_NUMBER: builtins.int
    RESOURCES_LEASED_BY_PRIORITY_FIELD_NUMBER: builtins.int
    name: builtins.str
    """Queue name."""
    @property
    def resources_leased(self) -> google.protobuf.internal.containers.MessageMap[builtins.str, k8s.io.apimachinery.pkg.api.resource.generated_pb2.Quantity]:
        """Total resources allocated to jobs from this queue."""
    @property
    def resources_leased_by_priority(self) -> google.protobuf.internal.containers.MessageMap[builtins.int, global___ComputeResource]:
        """Total resources allocated to jobs from this queue,
        grouped by pod priority.
        """
    def __init__(
        self,
        *,
        name: builtins.str = ...,
        resources_leased: collections.abc.Mapping[builtins.str, k8s.io.apimachinery.pkg.api.resource.generated_pb2.Quantity] | None = ...,
        resources_leased_by_priority: collections.abc.Mapping[builtins.int, global___ComputeResource] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["name", b"name", "resources_leased", b"resources_leased", "resources_leased_by_priority", b"resources_leased_by_priority"]) -> None: ...

global___QueueLeasedReport = QueueLeasedReport

@typing_extensions.final
class ClusterLeasedReport(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    CLUSTER_ID_FIELD_NUMBER: builtins.int
    REPORT_TIME_FIELD_NUMBER: builtins.int
    QUEUES_FIELD_NUMBER: builtins.int
    cluster_id: builtins.str
    @property
    def report_time(self) -> google.protobuf.timestamp_pb2.Timestamp: ...
    @property
    def queues(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___QueueLeasedReport]:
        """For each queue, the total resources allocated to jobs from that queue."""
    def __init__(
        self,
        *,
        cluster_id: builtins.str = ...,
        report_time: google.protobuf.timestamp_pb2.Timestamp | None = ...,
        queues: collections.abc.Iterable[global___QueueLeasedReport] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["report_time", b"report_time"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["cluster_id", b"cluster_id", "queues", b"queues", "report_time", b"report_time"]) -> None: ...

global___ClusterLeasedReport = ClusterLeasedReport

@typing_extensions.final
class ComputeResource(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing_extensions.final
    class ResourcesEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.str
        @property
        def value(self) -> k8s.io.apimachinery.pkg.api.resource.generated_pb2.Quantity: ...
        def __init__(
            self,
            *,
            key: builtins.str = ...,
            value: k8s.io.apimachinery.pkg.api.resource.generated_pb2.Quantity | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["value", b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["key", b"key", "value", b"value"]) -> None: ...

    RESOURCES_FIELD_NUMBER: builtins.int
    @property
    def resources(self) -> google.protobuf.internal.containers.MessageMap[builtins.str, k8s.io.apimachinery.pkg.api.resource.generated_pb2.Quantity]: ...
    def __init__(
        self,
        *,
        resources: collections.abc.Mapping[builtins.str, k8s.io.apimachinery.pkg.api.resource.generated_pb2.Quantity] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["resources", b"resources"]) -> None: ...

global___ComputeResource = ComputeResource

@typing_extensions.final
class NodeLabeling(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing_extensions.final
    class LabelsEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.str
        value: builtins.str
        def __init__(
            self,
            *,
            key: builtins.str = ...,
            value: builtins.str = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["key", b"key", "value", b"value"]) -> None: ...

    LABELS_FIELD_NUMBER: builtins.int
    @property
    def labels(self) -> google.protobuf.internal.containers.ScalarMap[builtins.str, builtins.str]: ...
    def __init__(
        self,
        *,
        labels: collections.abc.Mapping[builtins.str, builtins.str] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["labels", b"labels"]) -> None: ...

global___NodeLabeling = NodeLabeling

@typing_extensions.final
class JobLease(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    JOB_FIELD_NUMBER: builtins.int
    @property
    def job(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Job]: ...
    def __init__(
        self,
        *,
        job: collections.abc.Iterable[global___Job] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["job", b"job"]) -> None: ...

global___JobLease = JobLease

@typing_extensions.final
class StreamingJobLease(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    JOB_FIELD_NUMBER: builtins.int
    NUMJOBS_FIELD_NUMBER: builtins.int
    NUMACKED_FIELD_NUMBER: builtins.int
    @property
    def job(self) -> global___Job: ...
    numJobs: builtins.int
    """Total number of jobs being sent over this connection."""
    numAcked: builtins.int
    """Number of jobs for which the server has received an ack.
    When numAcked = numJobs, all jobs have been received and acked.
    """
    def __init__(
        self,
        *,
        job: global___Job | None = ...,
        numJobs: builtins.int = ...,
        numAcked: builtins.int = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["job", b"job"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["job", b"job", "numAcked", b"numAcked", "numJobs", b"numJobs"]) -> None: ...

global___StreamingJobLease = StreamingJobLease

@typing_extensions.final
class IdList(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    IDS_FIELD_NUMBER: builtins.int
    @property
    def ids(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]: ...
    def __init__(
        self,
        *,
        ids: collections.abc.Iterable[builtins.str] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["ids", b"ids"]) -> None: ...

global___IdList = IdList

@typing_extensions.final
class RenewLeaseRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    CLUSTER_ID_FIELD_NUMBER: builtins.int
    IDS_FIELD_NUMBER: builtins.int
    cluster_id: builtins.str
    @property
    def ids(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]: ...
    def __init__(
        self,
        *,
        cluster_id: builtins.str = ...,
        ids: collections.abc.Iterable[builtins.str] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["cluster_id", b"cluster_id", "ids", b"ids"]) -> None: ...

global___RenewLeaseRequest = RenewLeaseRequest

@typing_extensions.final
class ReturnLeaseRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing_extensions.final
    class TrackedAnnotationsEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.str
        value: builtins.str
        def __init__(
            self,
            *,
            key: builtins.str = ...,
            value: builtins.str = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["key", b"key", "value", b"value"]) -> None: ...

    CLUSTER_ID_FIELD_NUMBER: builtins.int
    JOB_ID_FIELD_NUMBER: builtins.int
    AVOID_NODE_LABELS_FIELD_NUMBER: builtins.int
    REASON_FIELD_NUMBER: builtins.int
    KUBERNETES_ID_FIELD_NUMBER: builtins.int
    JOB_RUN_ATTEMPTED_FIELD_NUMBER: builtins.int
    TRACKED_ANNOTATIONS_FIELD_NUMBER: builtins.int
    cluster_id: builtins.str
    job_id: builtins.str
    @property
    def avoid_node_labels(self) -> global___OrderedStringMap: ...
    reason: builtins.str
    kubernetes_id: builtins.str
    job_run_attempted: builtins.bool
    @property
    def tracked_annotations(self) -> google.protobuf.internal.containers.ScalarMap[builtins.str, builtins.str]:
        """The executor feeds back certain annotations."""
    def __init__(
        self,
        *,
        cluster_id: builtins.str = ...,
        job_id: builtins.str = ...,
        avoid_node_labels: global___OrderedStringMap | None = ...,
        reason: builtins.str = ...,
        kubernetes_id: builtins.str = ...,
        job_run_attempted: builtins.bool = ...,
        tracked_annotations: collections.abc.Mapping[builtins.str, builtins.str] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["avoid_node_labels", b"avoid_node_labels"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["avoid_node_labels", b"avoid_node_labels", "cluster_id", b"cluster_id", "job_id", b"job_id", "job_run_attempted", b"job_run_attempted", "kubernetes_id", b"kubernetes_id", "reason", b"reason", "tracked_annotations", b"tracked_annotations"]) -> None: ...

global___ReturnLeaseRequest = ReturnLeaseRequest

@typing_extensions.final
class StringKeyValuePair(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    KEY_FIELD_NUMBER: builtins.int
    VALUE_FIELD_NUMBER: builtins.int
    key: builtins.str
    value: builtins.str
    def __init__(
        self,
        *,
        key: builtins.str = ...,
        value: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["key", b"key", "value", b"value"]) -> None: ...

global___StringKeyValuePair = StringKeyValuePair

@typing_extensions.final
class OrderedStringMap(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ENTRIES_FIELD_NUMBER: builtins.int
    @property
    def entries(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___StringKeyValuePair]: ...
    def __init__(
        self,
        *,
        entries: collections.abc.Iterable[global___StringKeyValuePair] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["entries", b"entries"]) -> None: ...

global___OrderedStringMap = OrderedStringMap

#  Copyright (C) 2023 Maxim Slipenko.
#
#  This file is part of the python-LimeReport library.
#
#  The python-LimeReport library is free software; you can redistribute it and/or modify
#  it under the terms of either:
#
#    * the GNU Lesser General Public License as published by the Free
#      Software Foundation; either version 3 of the License, or (at your
#      option) any later version.
#
#  or
#
#    * the GNU General Public License as published by the Free Software
#      Foundation; either version 3 of the License, or (at your option) any
#      later version.
#
#  or both in parallel, as here.
#
#  The python-LimeReport library is distributed in the hope that it will be useful, but
#  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
#  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
#  for more details.
#
#  You should have received copies of the GNU General Public License and the
#  GNU Lesser General Public License along with the python-LimeReport library. If not,
#  see https://www.gnu.org/licenses/.
#
from __future__ import annotations

"""
This file contains the exact signatures for all functions in module
LimeReport, except for defaults which are replaced by "...".
"""

# Module `LimeReport`

import LimeReport
import PySide6.QtCore
import PySide6.QtGui
import PySide6.QtWidgets
import PySide6.QtPrintSupport

import enum
from typing import Any, Optional, Union, Dict, List, overload
from shiboken6 import Shiboken


class ArrangeType(enum.IntEnum):

    AsNeeded                 : ArrangeType = ... # 0x0
    Force                    : ArrangeType = ... # 0x1


class Enums(Shiboken.Object):

    class VariableDataType(enum.IntEnum):

        Undefined                : Enums.VariableDataType = ... # 0x0
        String                   : Enums.VariableDataType = ... # 0x1
        Bool                     : Enums.VariableDataType = ... # 0x2
        Int                      : Enums.VariableDataType = ... # 0x3
        Real                     : Enums.VariableDataType = ... # 0x4
        Date                     : Enums.VariableDataType = ... # 0x5
        Time                     : Enums.VariableDataType = ... # 0x6
        DateTime                 : Enums.VariableDataType = ... # 0x7


class ExpandType(enum.IntEnum):

    EscapeSymbols            : ExpandType = ... # 0x0
    NoEscapeSymbols          : ExpandType = ... # 0x1
    ReplaceHTMLSymbols       : ExpandType = ... # 0x2


class ICallbackDatasource(PySide6.QtCore.QObject):

    def __init__(self) -> None: ...


class IDataSource(Shiboken.Object):

    class DatasourceMode(enum.IntEnum):

        DESIGN_MODE              : IDataSource.DatasourceMode = ... # 0x0
        RENDER_MODE              : IDataSource.DatasourceMode = ... # 0x1


    def __init__(self) -> None: ...

    def bof(self) -> bool: ...
    def columnCount(self) -> int: ...
    def columnIndexByName(self, name: str) -> int: ...
    def columnNameByIndex(self, columnIndex: int) -> str: ...
    def data(self, columnName: str) -> Any: ...
    def dataByKeyField(self, columnName: str, keyColumnName: str, keyData: Any) -> Any: ...
    def dataByRowIndex(self, columnName: str, rowIndex: int) -> Any: ...
    def eof(self) -> bool: ...
    def first(self) -> None: ...
    def hasNext(self) -> bool: ...
    def isInvalid(self) -> bool: ...
    def last(self) -> None: ...
    def lastError(self) -> str: ...
    def model(self) -> PySide6.QtCore.QAbstractItemModel: ...
    def next(self) -> bool: ...
    def prior(self) -> bool: ...


class IDataSourceHolder(Shiboken.Object):

    def __init__(self) -> None: ...

    def clearErrors(self) -> None: ...
    def dataSource(self, mode: LimeReport.IDataSource.DatasourceMode = ...) -> LimeReport.IDataSource: ...
    def invalidate(self, mode: LimeReport.IDataSource.DatasourceMode, dbWillBeClosed: bool = ...) -> None: ...
    def isEditable(self) -> bool: ...
    def isInvalid(self) -> bool: ...
    def isOwned(self) -> bool: ...
    def isRemovable(self) -> bool: ...
    def lastError(self) -> str: ...
    def update(self) -> None: ...


class IDataSourceManager(Shiboken.Object):

    def __init__(self) -> None: ...

    def addCSV(self, name: str, csvText: str, separator: str, firstRowIsHeader: bool) -> None: ...
    def addModel(self, name: str, model: PySide6.QtCore.QAbstractItemModel, owned: bool) -> bool: ...
    def clearUserVariables(self) -> None: ...
    def containsDatasource(self, dataSourceName: str) -> bool: ...
    def containsVariable(self, variableName: str) -> bool: ...
    def createCallbackDatasource(self, name: str) -> LimeReport.ICallbackDatasource: ...
    def dataSource(self, name: str) -> LimeReport.IDataSource: ...
    def dataSourceHolder(self, name: str) -> LimeReport.IDataSourceHolder: ...
    def deleteVariable(self, name: str) -> None: ...
    def registerDbCredentialsProvider(self, provider: LimeReport.IDbCredentialsProvider) -> None: ...
    def removeModel(self, name: str) -> None: ...
    def setDefaultDatabasePath(self, defaultDatabasePath: str) -> None: ...
    def setReportVariable(self, name: str, value: Any) -> None: ...
    def variable(self, variableName: str) -> Any: ...
    def variableDataType(self, name: str) -> LimeReport.Enums.VariableDataType: ...
    def variableIsMandatory(self, name: str) -> bool: ...
    def variableIsSystem(self, name: str) -> bool: ...
    def variableNames(self) -> List[str]: ...


class IDbCredentialsProvider(Shiboken.Object):

    def __init__(self) -> None: ...

    def getPassword(self, connectionName: str) -> str: ...
    def getUserName(self, connectionName: str) -> str: ...


class PreviewHint(enum.IntEnum):

    ShowAllPreviewBars       : PreviewHint = ... # 0x0
    HidePreviewToolBar       : PreviewHint = ... # 0x1
    HidePreviewMenuBar       : PreviewHint = ... # 0x2
    HidePreviewStatusBar     : PreviewHint = ... # 0x4
    HideAllPreviewBar        : PreviewHint = ... # 0x7
    PreviewBarsUserSetting   : PreviewHint = ... # 0x8


class QIntList(object): ...


class RenderPass(enum.IntEnum):

    FirstPass                : RenderPass = ... # 0x1
    SecondPass               : RenderPass = ... # 0x2


class ReportEngine(PySide6.QtCore.QObject):

    def __init__(self, parent: Optional[PySide6.QtCore.QObject] = ...) -> None: ...

    def availableLanguages(self) -> List[PySide6.QtCore.QLocale.Language]: ...
    def cancelPrinting(self) -> None: ...
    def cancelRender(self) -> None: ...
    def clearWatermarks(self) -> None: ...
    def createPreviewScene(self, parent: Optional[PySide6.QtCore.QObject] = ...) -> PySide6.QtWidgets.QGraphicsScene: ...
    def currentDesignerLanguage(self) -> PySide6.QtCore.QLocale.Language: ...
    def dataManager(self) -> LimeReport.IDataSourceManager: ...
    def designReport(self) -> None: ...
    def designerLanguages(self) -> List[PySide6.QtCore.QLocale.Language]: ...
    def exportReport(self, exporterName: str, fileName: str = ..., params: Dict[str, Any] = ...) -> bool: ...
    def isBusy(self) -> bool: ...
    def isShowProgressDialog(self) -> bool: ...
    def lastError(self) -> str: ...
    def loadFromByteArray(self, data: Union[PySide6.QtCore.QByteArray, bytes]) -> bool: ...
    def loadFromFile(self, fileName: str, autoLoadPreviewOnChange: bool = ...) -> bool: ...
    def loadFromString(self, data: str) -> bool: ...
    def prepareReportPages(self) -> bool: ...
    def previewLayoutDirection(self) -> PySide6.QtCore.Qt.LayoutDirection: ...
    @overload
    def previewReport(self, hints: 'LimeReport.LimeReport.PreviewHints' = ...) -> None: ...
    @overload
    def previewReport(self, printer: PySide6.QtPrintSupport.QPrinter, hints: 'LimeReport.LimeReport.PreviewHints' = ...) -> None: ...
    def previewScalePercent(self) -> int: ...
    def previewScaleType(self) -> LimeReport.ScaleType: ...
    def printIsVisible(self) -> bool: ...
    def printPreparedPages(self) -> bool: ...
    @overload
    def printReport(self, printer: Optional[PySide6.QtPrintSupport.QPrinter] = ...) -> bool: ...
    @overload
    def printReport(self, printers: Dict[str, PySide6.QtPrintSupport.QPrinter], printToAllPrinters: bool = ...) -> bool: ...
    def printToFile(self, fileName: str) -> None: ...
    def printToPDF(self, fileName: str) -> bool: ...
    def printToPdfIsVisible(self) -> bool: ...
    def reportFileName(self) -> str: ...
    def reportName(self) -> str: ...
    def resultIsEditable(self) -> bool: ...
    def saveToByteArray(self) -> PySide6.QtCore.QByteArray: ...
    def saveToFile(self, fileName: str) -> bool: ...
    def saveToFileIsVisible(self) -> bool: ...
    def saveToString(self) -> str: ...
    def setCurrentReportsDir(self, dirName: str) -> None: ...
    def setPassPhrase(self, passPhrase: str) -> None: ...
    def setPreviewLayoutDirection(self, previewLayoutDirection: PySide6.QtCore.Qt.LayoutDirection) -> None: ...
    def setPreviewPageBackgroundColor(self, color: Union[PySide6.QtGui.QColor, PySide6.QtGui.QRgba64, Any, PySide6.QtCore.Qt.GlobalColor, str, int]) -> None: ...
    def setPreviewScaleType(self, previewScaleType: LimeReport.ScaleType, percent: int = ...) -> None: ...
    def setPreviewWindowIcon(self, icon: Union[PySide6.QtGui.QIcon, PySide6.QtGui.QPixmap]) -> None: ...
    def setPreviewWindowTitle(self, title: str) -> None: ...
    def setPrintToPdfVisible(self, value: bool) -> None: ...
    def setPrintVisible(self, value: bool) -> None: ...
    def setReportFileName(self, fileName: str) -> None: ...
    def setReportLanguage(self, language: PySide6.QtCore.QLocale.Language) -> bool: ...
    def setReportName(self, name: str) -> None: ...
    def setResultEditable(self, value: bool) -> None: ...
    def setSaveToFileVisible(self, value: bool) -> None: ...
    @staticmethod
    def setSettings(value: PySide6.QtCore.QSettings) -> None: ...
    def setShowDesignerModal(self, showDesignerModal: bool) -> None: ...
    def setShowProgressDialog(self, value: bool) -> None: ...
    def showDesignerModal(self) -> bool: ...
    def showPreparedPages(self, hints: 'LimeReport.LimeReport.PreviewHints' = ...) -> bool: ...


class ScaleType(enum.IntEnum):

    FitWidth                 : ScaleType = ... # 0x0
    FitPage                  : ScaleType = ... # 0x1
    OneToOne                 : ScaleType = ... # 0x2
    Percents                 : ScaleType = ... # 0x3


def escapeSimbols(value: str) -> str: ...
def extractClassName(className: str) -> str: ...
def getFieldRegEx() -> PySide6.QtCore.QRegularExpression: ...
def getGroupFunctionNameRegEx(functionName: str) -> PySide6.QtCore.QRegularExpression: ...
def getGroupFunctionRegEx(functionName: str) -> PySide6.QtCore.QRegularExpression: ...
def getNamedVariableRegEx(variableName: str) -> PySide6.QtCore.QRegularExpression: ...
def getRegEx(expression: str) -> PySide6.QtCore.QRegularExpression: ...
def getScriptRegEx() -> PySide6.QtCore.QRegularExpression: ...
def getVariableRegEx() -> PySide6.QtCore.QRegularExpression: ...
def isColorDark(color: Union[PySide6.QtGui.QColor, PySide6.QtGui.QRgba64, Any, PySide6.QtCore.Qt.GlobalColor, str, int]) -> bool: ...
def normalizeCaptures(reg: PySide6.QtCore.QRegularExpressionMatch) -> List[str]: ...
def replaceHTMLSymbols(value: str) -> str: ...


# eof

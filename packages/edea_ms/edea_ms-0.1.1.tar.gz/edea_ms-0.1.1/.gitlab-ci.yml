# You can override the included template(s) by including variable overrides
# SAST customization: https://docs.gitlab.com/ee/user/application_security/sast/#customizing-the-sast-settings
# Secret Detection customization: https://docs.gitlab.com/ee/user/application_security/secret_detection/#customizing-settings
# Dependency Scanning customization: https://docs.gitlab.com/ee/user/application_security/dependency_scanning/#customizing-the-dependency-scanning-settings
# Container Scanning customization: https://docs.gitlab.com/ee/user/application_security/container_scanning/#customizing-the-container-scanning-settings
# Note that environment variables can be set in several places
# See https://docs.gitlab.com/ee/ci/variables/#cicd-variable-precedence
stages:
  - build
  - test
  - security
  - deploy
sast:
  stage: security
  variables:
    SAST_EXCLUDED_PATHS: spec, test, tests, tmp,.cache,
secret_detection:
  stage: security
dependency_scanning:
  tags:
    - edea_runner
  stage: security
include:
  - template: Jobs/Dependency-Scanning.gitlab-ci.yml
  - template: Security/SAST.gitlab-ci.yml
  - template: Security/Secret-Detection.gitlab-ci.yml
services:
  - docker:dind
variables:
  DOCKER_HOST: tcp://docker:2375
  DOCKER_TLS_CERTDIR: ""
# variables:
#   PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
#   POETRY_CACHE_DIR: "$CI_PROJECT_DIR/.cache/poetry"
# cache:
#   paths:
#     - ".cache/pip"
#     - ".cache/poetry"
#     - venv/
#     - ".mypy_cache"
#     - ".pytest_cache"
default:
  before_script:
    - |
      if [ -f "$HOME/.cargo/env" ];
      then
        source "$HOME/.cargo/env"
        curl -sSL https://pdm-project.org/install-pdm.py | python3 -
        export PATH=/home/builder/.local/bin:$PATH
        pdm install -G:all
        python3 --version # For debugging
      else
        echo "~/.cargo/env does not exist, assuming this is an included stage"
      fi
test-server:
  image: registry.gitlab.com/edea-dev/ci-runner:latest
  stage: test
  services:
    - docker:dind
  variables:
    OIDC_PROVIDERS: "dex"
    DEX_HOST: "0.0.0.0:5556"
    DEX_ISSUER: "http://docker:5556/dex"
    DEX_CLIENT_ID: "edea-ms-test"
    DEX_CLIENT_SECRET: "edea-ms-test-secret"
    DEX_SERVER_METADATA_URL: "http://docker:5556/dex/.well-known/openid-configuration"
    DEX_SCOPE: "openid profile groups"
    API_BASE_URL: "http://localhost:8000/api"
    SESSION_SECRET: "test"
  script:
    - npm install
    - npm run build
    - pdm run playwright install
    - pdm run coverage run --concurrency=thread,gevent -m pytest edea_ms
    - pdm run coverage report
    - pdm run coverage xml
  coverage: "/(?i)total.*? (100(?:\\.0+)?\\%|[1-9]?\\d(?:\\.\\d+)?\\%)$/"
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
# test-ui:
#   image: registry.gitlab.com/edea-dev/ci-runner:latest
#   stage: test
#   services:
#     - docker:dind
#   variables:
#     OIDC_PROVIDERS: "dex"
#     DEX_HOST: "0.0.0.0:5556"
#     DEX_ISSUER: "http://docker:5556/dex"
#     DEX_CLIENT_ID: "edea-ms-test"
#     DEX_CLIENT_SECRET: "edea-ms-test-secret"
#     DEX_SERVER_METADATA_URL: "http://docker:5556/dex/.well-known/openid-configuration"
#     DEX_SCOPE: "openid profile groups"
#     API_BASE_URL: "http://localhost:8000/api"
#     SESSION_SECRET: "test"
#   script:
#     - npm install
#     - npm run build
#     - npx playwright install
#     - nohup poetry run uvicorn app.main:app &
#     - npx playwright test
typecheck:
  image: registry.gitlab.com/edea-dev/ci-runner:latest
  stage: build
  script:
    - pdm run mypy -p edea_ms
pages:
  image: registry.gitlab.com/edea-dev/ci-runner:latest
  stage: deploy
  script:
    - cd doc
    - mdbook build
    - mv book/ ../public/
  artifacts:
    paths:
      - public
  rules:
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"

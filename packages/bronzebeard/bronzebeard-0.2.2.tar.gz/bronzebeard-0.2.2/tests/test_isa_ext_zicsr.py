import struct

import pytest

from bronzebeard import asm


@pytest.mark.parametrize(
    'rd, rs1, imm, code', [
    (0,  0,   0,   0b00000000000000000001000001110011),
    (0,  0,   1,   0b00000000000100000001000001110011),
    (31, 0,   0,   0b00000000000000000001111111110011),
    (0,  31,  0,   0b00000000000011111001000001110011),
    (31, 31,  0,   0b00000000000011111001111111110011),
    (31, 0,   1,   0b00000000000100000001111111110011),
    (0,  31,  1,   0b00000000000111111001000001110011),
    (31, 31,  1,   0b00000000000111111001111111110011),
])
def test_csrrw(rd, rs1, imm, code):
    assert asm.CSRRW(rd, rs1, imm) == code


@pytest.mark.parametrize(
    'rd, rs1, imm, code', [
    (0,  0,   0,   0b00000000000000000010000001110011),
    (0,  0,   1,   0b00000000000100000010000001110011),
    (31, 0,   0,   0b00000000000000000010111111110011),
    (0,  31,  0,   0b00000000000011111010000001110011),
    (31, 31,  0,   0b00000000000011111010111111110011),
    (31, 0,   1,   0b00000000000100000010111111110011),
    (0,  31,  1,   0b00000000000111111010000001110011),
    (31, 31,  1,   0b00000000000111111010111111110011),
])
def test_csrrs(rd, rs1, imm, code):
    assert asm.CSRRS(rd, rs1, imm) == code


@pytest.mark.parametrize(
    'rd, rs1, imm, code', [
    (0,  0,   0,   0b00000000000000000011000001110011),
    (0,  0,   1,   0b00000000000100000011000001110011),
    (31, 0,   0,   0b00000000000000000011111111110011),
    (0,  31,  0,   0b00000000000011111011000001110011),
    (31, 31,  0,   0b00000000000011111011111111110011),
    (31, 0,   1,   0b00000000000100000011111111110011),
    (0,  31,  1,   0b00000000000111111011000001110011),
    (31, 31,  1,   0b00000000000111111011111111110011),
])
def test_csrrc(rd, rs1, imm, code):
    assert asm.CSRRC(rd, rs1, imm) == code


@pytest.mark.parametrize(
    'rd, rs1, imm, code', [
    (0,  0,   0,   0b00000000000000000101000001110011),
    (0,  0,   1,   0b00000000000100000101000001110011),
    (31, 0,   0,   0b00000000000000000101111111110011),
    (0,  31,  0,   0b00000000000011111101000001110011),
    (31, 31,  0,   0b00000000000011111101111111110011),
    (31, 0,   1,   0b00000000000100000101111111110011),
    (0,  31,  1,   0b00000000000111111101000001110011),
    (31, 31,  1,   0b00000000000111111101111111110011),
])
def test_csrrwi(rd, rs1, imm, code):
    assert asm.CSRRWI(rd, rs1, imm) == code


@pytest.mark.parametrize(
    'rd, rs1, imm, code', [
    (0,  0,   0,   0b00000000000000000110000001110011),
    (0,  0,   1,   0b00000000000100000110000001110011),
    (31, 0,   0,   0b00000000000000000110111111110011),
    (0,  31,  0,   0b00000000000011111110000001110011),
    (31, 31,  0,   0b00000000000011111110111111110011),
    (31, 0,   1,   0b00000000000100000110111111110011),
    (0,  31,  1,   0b00000000000111111110000001110011),
    (31, 31,  1,   0b00000000000111111110111111110011),
])
def test_csrrsi(rd, rs1, imm, code):
    assert asm.CSRRSI(rd, rs1, imm) == code


@pytest.mark.parametrize(
    'rd, rs1, imm, code', [
    (0,  0,   0,   0b00000000000000000111000001110011),
    (0,  0,   1,   0b00000000000100000111000001110011),
    (31, 0,   0,   0b00000000000000000111111111110011),
    (0,  31,  0,   0b00000000000011111111000001110011),
    (31, 31,  0,   0b00000000000011111111111111110011),
    (31, 0,   1,   0b00000000000100000111111111110011),
    (0,  31,  1,   0b00000000000111111111000001110011),
    (31, 31,  1,   0b00000000000111111111111111110011),
])
def test_csrrci(rd, rs1, imm, code):
    assert asm.CSRRCI(rd, rs1, imm) == code


@pytest.mark.parametrize(
    'source,           expected', [
    ('csrrw  x0 x1 0', asm.CSRRW('x0', 'x1', 0)),
    ('csrrs  x0 x1 0', asm.CSRRS('x0', 'x1', 0)),
    ('csrrc  x0 x1 0', asm.CSRRC('x0', 'x1', 0)),
    ('csrrwi x0 0  0', asm.CSRRWI('x0', 0, 0)),
    ('csrrsi x0 0  0', asm.CSRRSI('x0', 0, 0)),
    ('csrrci x0 0  0', asm.CSRRCI('x0', 0, 0)),
    ('csrrwi x0 31 0', asm.CSRRWI('x0', 31, 0)),
    ('csrrsi x0 31 0', asm.CSRRSI('x0', 31, 0)),
    ('csrrci x0 31 0', asm.CSRRCI('x0', 31, 0)),
])
def test_assemble_ext_zicsr(source, expected):
    binary = asm.assemble(source)
    target = struct.pack('<I', expected)
    assert binary == target

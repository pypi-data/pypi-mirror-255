import pickle
import base64

##########################################
##TODO remove dependencies to rdfobj here

from rdfobj import  ModelPopulator
# +from .utils , .meta_model
##########################################


#utilities to manipulate the classes generated 

from biopax.templatereaction import TemplateReaction
from biopax.provenance import Provenance
from biopax.covalentbindingfeature import CovalentBindingFeature
from biopax.relationshiptypevocabulary import RelationshipTypeVocabulary
from biopax.entityreference import EntityReference
from biopax.dna import Dna
from biopax.molecularinteraction import MolecularInteraction
from biopax.score import Score
from biopax.rnareference import RnaReference
from biopax.templatereactionregulation import TemplateReactionRegulation
from biopax.complex import Complex
from biopax.smallmolecule import SmallMolecule
from biopax.experimentalformvocabulary import ExperimentalFormVocabulary
from biopax.sequencelocation import SequenceLocation
from biopax.smallmoleculereference import SmallMoleculeReference
from biopax.transport import Transport
from biopax.biosource import BioSource
from biopax.tissuevocabulary import TissueVocabulary
from biopax.complexassembly import ComplexAssembly
from biopax.interactionvocabulary import InteractionVocabulary
from biopax.control import Control
from biopax.transportwithbiochemicalreaction import TransportWithBiochemicalReaction
from biopax.sequencesite import SequenceSite
from biopax.protein import Protein
from biopax.interaction import Interaction
from biopax.sequenceregionvocabulary import SequenceRegionVocabulary
from biopax.biochemicalpathwaystep import BiochemicalPathwayStep
from biopax.entityreferencetypevocabulary import EntityReferenceTypeVocabulary
from biopax.degradation import Degradation
from biopax.proteinreference import ProteinReference
from biopax.sequencemodificationvocabulary import SequenceModificationVocabulary
from biopax.catalysis import Catalysis
from biopax.rnaregionreference import RnaRegionReference
from biopax.physicalentity import PhysicalEntity
from biopax.rna import Rna
from biopax.evidence import Evidence
from biopax.pathwaystep import PathwayStep
from biopax.bindingfeature import BindingFeature
from biopax.dnaregion import DnaRegion
from biopax.stoichiometry import Stoichiometry
from biopax.pathway import Pathway
from biopax.cellvocabulary import CellVocabulary
from biopax.publicationxref import PublicationXref
from biopax.conversion import Conversion
from biopax.relationshipxref import RelationshipXref
from biopax.sequenceinterval import SequenceInterval
from biopax.kprime import KPrime
from biopax.gene import Gene
from biopax.experimentalform import ExperimentalForm
from biopax.controlledvocabulary import ControlledVocabulary
from biopax.modificationfeature import ModificationFeature
from biopax.geneticinteraction import GeneticInteraction
from biopax.biochemicalreaction import BiochemicalReaction
from biopax.dnareference import DnaReference
from biopax.dnaregionreference import DnaRegionReference
from biopax.rnaregion import RnaRegion
from biopax.cellularlocationvocabulary import CellularLocationVocabulary
from biopax.modulation import Modulation
from biopax.xref import Xref
from biopax.chemicalstructure import ChemicalStructure
from biopax.fragmentfeature import FragmentFeature
from biopax.deltag import DeltaG
from biopax.unificationxref import UnificationXref
from biopax.evidencecodevocabulary import EvidenceCodeVocabulary
from biopax.phenotypevocabulary import PhenotypeVocabulary
from biopax.entityfeature import EntityFeature
from biopax.utilityclass import UtilityClass
from biopax.entity import Entity
  



#return an instance of a class corresponding to the input keywork
def define_model_instance(clsn):


  if clsn is None:
    inst=None
  else:
    clsn=str(clsn).strip().lower()
    if clsn =='':
      inst=None 
    elif clsn.lower() == 'templatereaction':
      inst = TemplateReaction() 
    elif clsn.lower() == 'provenance':
      inst = Provenance() 
    elif clsn.lower() == 'covalentbindingfeature':
      inst = CovalentBindingFeature() 
    elif clsn.lower() == 'relationshiptypevocabulary':
      inst = RelationshipTypeVocabulary() 
    elif clsn.lower() == 'entityreference':
      inst = EntityReference() 
    elif clsn.lower() == 'dna':
      inst = Dna() 
    elif clsn.lower() == 'molecularinteraction':
      inst = MolecularInteraction() 
    elif clsn.lower() == 'score':
      inst = Score() 
    elif clsn.lower() == 'rnareference':
      inst = RnaReference() 
    elif clsn.lower() == 'templatereactionregulation':
      inst = TemplateReactionRegulation() 
    elif clsn.lower() == 'complex':
      inst = Complex() 
    elif clsn.lower() == 'smallmolecule':
      inst = SmallMolecule() 
    elif clsn.lower() == 'experimentalformvocabulary':
      inst = ExperimentalFormVocabulary() 
    elif clsn.lower() == 'sequencelocation':
      inst = SequenceLocation() 
    elif clsn.lower() == 'smallmoleculereference':
      inst = SmallMoleculeReference() 
    elif clsn.lower() == 'transport':
      inst = Transport() 
    elif clsn.lower() == 'biosource':
      inst = BioSource() 
    elif clsn.lower() == 'tissuevocabulary':
      inst = TissueVocabulary() 
    elif clsn.lower() == 'complexassembly':
      inst = ComplexAssembly() 
    elif clsn.lower() == 'interactionvocabulary':
      inst = InteractionVocabulary() 
    elif clsn.lower() == 'control':
      inst = Control() 
    elif clsn.lower() == 'transportwithbiochemicalreaction':
      inst = TransportWithBiochemicalReaction() 
    elif clsn.lower() == 'sequencesite':
      inst = SequenceSite() 
    elif clsn.lower() == 'protein':
      inst = Protein() 
    elif clsn.lower() == 'interaction':
      inst = Interaction() 
    elif clsn.lower() == 'sequenceregionvocabulary':
      inst = SequenceRegionVocabulary() 
    elif clsn.lower() == 'biochemicalpathwaystep':
      inst = BiochemicalPathwayStep() 
    elif clsn.lower() == 'entityreferencetypevocabulary':
      inst = EntityReferenceTypeVocabulary() 
    elif clsn.lower() == 'degradation':
      inst = Degradation() 
    elif clsn.lower() == 'proteinreference':
      inst = ProteinReference() 
    elif clsn.lower() == 'sequencemodificationvocabulary':
      inst = SequenceModificationVocabulary() 
    elif clsn.lower() == 'catalysis':
      inst = Catalysis() 
    elif clsn.lower() == 'rnaregionreference':
      inst = RnaRegionReference() 
    elif clsn.lower() == 'physicalentity':
      inst = PhysicalEntity() 
    elif clsn.lower() == 'rna':
      inst = Rna() 
    elif clsn.lower() == 'evidence':
      inst = Evidence() 
    elif clsn.lower() == 'pathwaystep':
      inst = PathwayStep() 
    elif clsn.lower() == 'bindingfeature':
      inst = BindingFeature() 
    elif clsn.lower() == 'dnaregion':
      inst = DnaRegion() 
    elif clsn.lower() == 'stoichiometry':
      inst = Stoichiometry() 
    elif clsn.lower() == 'pathway':
      inst = Pathway() 
    elif clsn.lower() == 'cellvocabulary':
      inst = CellVocabulary() 
    elif clsn.lower() == 'publicationxref':
      inst = PublicationXref() 
    elif clsn.lower() == 'conversion':
      inst = Conversion() 
    elif clsn.lower() == 'relationshipxref':
      inst = RelationshipXref() 
    elif clsn.lower() == 'sequenceinterval':
      inst = SequenceInterval() 
    elif clsn.lower() == 'kprime':
      inst = KPrime() 
    elif clsn.lower() == 'gene':
      inst = Gene() 
    elif clsn.lower() == 'experimentalform':
      inst = ExperimentalForm() 
    elif clsn.lower() == 'controlledvocabulary':
      inst = ControlledVocabulary() 
    elif clsn.lower() == 'modificationfeature':
      inst = ModificationFeature() 
    elif clsn.lower() == 'geneticinteraction':
      inst = GeneticInteraction() 
    elif clsn.lower() == 'biochemicalreaction':
      inst = BiochemicalReaction() 
    elif clsn.lower() == 'dnareference':
      inst = DnaReference() 
    elif clsn.lower() == 'dnaregionreference':
      inst = DnaRegionReference() 
    elif clsn.lower() == 'rnaregion':
      inst = RnaRegion() 
    elif clsn.lower() == 'cellularlocationvocabulary':
      inst = CellularLocationVocabulary() 
    elif clsn.lower() == 'modulation':
      inst = Modulation() 
    elif clsn.lower() == 'xref':
      inst = Xref() 
    elif clsn.lower() == 'chemicalstructure':
      inst = ChemicalStructure() 
    elif clsn.lower() == 'fragmentfeature':
      inst = FragmentFeature() 
    elif clsn.lower() == 'deltag':
      inst = DeltaG() 
    elif clsn.lower() == 'unificationxref':
      inst = UnificationXref() 
    elif clsn.lower() == 'evidencecodevocabulary':
      inst = EvidenceCodeVocabulary() 
    elif clsn.lower() == 'phenotypevocabulary':
      inst = PhenotypeVocabulary() 
    elif clsn.lower() == 'entityfeature':
      inst = EntityFeature() 
    elif clsn.lower() == 'utilityclass':
      inst = UtilityClass() 
    elif clsn.lower() == 'entity':
      inst = Entity() 
   
    else:
      inst=None
  

  return inst

#return an dictionary class_name->[children class_name]
def classes_children():

  mchildren=dict()
  mchildren['TemplateReaction']= []
  mchildren['Provenance']= []
  mchildren['CovalentBindingFeature']= []
  mchildren['RelationshipTypeVocabulary']= []
  mchildren['EntityReference']= ['RnaReference', 'SmallMoleculeReference', 'ProteinReference', 'RnaRegionReference', 'DnaReference', 'DnaRegionReference']
  mchildren['Dna']= []
  mchildren['MolecularInteraction']= []
  mchildren['Score']= []
  mchildren['RnaReference']= []
  mchildren['TemplateReactionRegulation']= []
  mchildren['Complex']= []
  mchildren['SmallMolecule']= []
  mchildren['ExperimentalFormVocabulary']= []
  mchildren['SequenceLocation']= ['SequenceSite', 'SequenceInterval']
  mchildren['SmallMoleculeReference']= []
  mchildren['Transport']= ['TransportWithBiochemicalReaction']
  mchildren['BioSource']= []
  mchildren['TissueVocabulary']= []
  mchildren['ComplexAssembly']= []
  mchildren['InteractionVocabulary']= []
  mchildren['Control']= ['TemplateReactionRegulation', 'Catalysis', 'Modulation']
  mchildren['TransportWithBiochemicalReaction']= []
  mchildren['SequenceSite']= []
  mchildren['Protein']= []
  mchildren['Interaction']= ['TemplateReaction', 'MolecularInteraction', 'Control', 'TemplateReactionRegulation', 'Catalysis', 'Modulation', 'Conversion', 'Transport', 'TransportWithBiochemicalReaction', 'ComplexAssembly', 'Degradation', 'BiochemicalReaction', 'TransportWithBiochemicalReaction', 'GeneticInteraction']
  mchildren['SequenceRegionVocabulary']= []
  mchildren['BiochemicalPathwayStep']= []
  mchildren['EntityReferenceTypeVocabulary']= []
  mchildren['Degradation']= []
  mchildren['ProteinReference']= []
  mchildren['SequenceModificationVocabulary']= []
  mchildren['Catalysis']= []
  mchildren['RnaRegionReference']= []
  mchildren['PhysicalEntity']= ['Dna', 'Complex', 'SmallMolecule', 'Protein', 'Rna', 'DnaRegion', 'RnaRegion']
  mchildren['Rna']= []
  mchildren['Evidence']= []
  mchildren['PathwayStep']= ['BiochemicalPathwayStep']
  mchildren['BindingFeature']= ['CovalentBindingFeature']
  mchildren['DnaRegion']= []
  mchildren['Stoichiometry']= []
  mchildren['Pathway']= []
  mchildren['CellVocabulary']= []
  mchildren['PublicationXref']= []
  mchildren['Conversion']= ['Transport', 'TransportWithBiochemicalReaction', 'ComplexAssembly', 'Degradation', 'BiochemicalReaction', 'TransportWithBiochemicalReaction']
  mchildren['RelationshipXref']= []
  mchildren['SequenceInterval']= []
  mchildren['KPrime']= []
  mchildren['Gene']= []
  mchildren['ExperimentalForm']= []
  mchildren['ControlledVocabulary']= ['RelationshipTypeVocabulary', 'ExperimentalFormVocabulary', 'TissueVocabulary', 'InteractionVocabulary', 'SequenceRegionVocabulary', 'EntityReferenceTypeVocabulary', 'SequenceModificationVocabulary', 'CellVocabulary', 'CellularLocationVocabulary', 'EvidenceCodeVocabulary', 'PhenotypeVocabulary']
  mchildren['ModificationFeature']= ['CovalentBindingFeature']
  mchildren['GeneticInteraction']= []
  mchildren['BiochemicalReaction']= ['TransportWithBiochemicalReaction']
  mchildren['DnaReference']= []
  mchildren['DnaRegionReference']= []
  mchildren['RnaRegion']= []
  mchildren['CellularLocationVocabulary']= []
  mchildren['Modulation']= []
  mchildren['Xref']= ['PublicationXref', 'RelationshipXref', 'UnificationXref']
  mchildren['ChemicalStructure']= []
  mchildren['FragmentFeature']= []
  mchildren['DeltaG']= []
  mchildren['UnificationXref']= []
  mchildren['EvidenceCodeVocabulary']= []
  mchildren['PhenotypeVocabulary']= []
  mchildren['EntityFeature']= ['BindingFeature', 'CovalentBindingFeature', 'ModificationFeature', 'CovalentBindingFeature', 'FragmentFeature']
  mchildren['UtilityClass']= ['Provenance', 'EntityReference', 'RnaReference', 'SmallMoleculeReference', 'ProteinReference', 'RnaRegionReference', 'DnaReference', 'DnaRegionReference', 'Score', 'SequenceLocation', 'SequenceSite', 'SequenceInterval', 'BioSource', 'PathwayStep', 'BiochemicalPathwayStep', 'Stoichiometry', 'KPrime', 'ExperimentalForm', 'ControlledVocabulary', 'RelationshipTypeVocabulary', 'ExperimentalFormVocabulary', 'TissueVocabulary', 'InteractionVocabulary', 'SequenceRegionVocabulary', 'EntityReferenceTypeVocabulary', 'SequenceModificationVocabulary', 'CellVocabulary', 'CellularLocationVocabulary', 'EvidenceCodeVocabulary', 'PhenotypeVocabulary', 'Xref', 'PublicationXref', 'RelationshipXref', 'UnificationXref', 'ChemicalStructure', 'DeltaG', 'EntityFeature', 'BindingFeature', 'CovalentBindingFeature', 'ModificationFeature', 'CovalentBindingFeature', 'FragmentFeature']
  mchildren['Entity']= ['Interaction', 'TemplateReaction', 'MolecularInteraction', 'Control', 'TemplateReactionRegulation', 'Catalysis', 'Modulation', 'Conversion', 'Transport', 'TransportWithBiochemicalReaction', 'ComplexAssembly', 'Degradation', 'BiochemicalReaction', 'TransportWithBiochemicalReaction', 'GeneticInteraction', 'PhysicalEntity', 'Dna', 'Complex', 'SmallMolecule', 'Protein', 'Rna', 'DnaRegion', 'RnaRegion', 'Pathway', 'Gene']
  
  return mchildren

def class_children(cln):
   mchildren=classes_children()
   if cln in mchildren.keys():
      return mchildren[cln]
   return None 

#list all classes of the model
def classesDict():
   model=dict() 
   model['TemplateReaction']=TemplateReaction
   model['Provenance']=Provenance
   model['CovalentBindingFeature']=CovalentBindingFeature
   model['RelationshipTypeVocabulary']=RelationshipTypeVocabulary
   model['EntityReference']=EntityReference
   model['Dna']=Dna
   model['MolecularInteraction']=MolecularInteraction
   model['Score']=Score
   model['RnaReference']=RnaReference
   model['TemplateReactionRegulation']=TemplateReactionRegulation
   model['Complex']=Complex
   model['SmallMolecule']=SmallMolecule
   model['ExperimentalFormVocabulary']=ExperimentalFormVocabulary
   model['SequenceLocation']=SequenceLocation
   model['SmallMoleculeReference']=SmallMoleculeReference
   model['Transport']=Transport
   model['BioSource']=BioSource
   model['TissueVocabulary']=TissueVocabulary
   model['ComplexAssembly']=ComplexAssembly
   model['InteractionVocabulary']=InteractionVocabulary
   model['Control']=Control
   model['TransportWithBiochemicalReaction']=TransportWithBiochemicalReaction
   model['SequenceSite']=SequenceSite
   model['Protein']=Protein
   model['Interaction']=Interaction
   model['SequenceRegionVocabulary']=SequenceRegionVocabulary
   model['BiochemicalPathwayStep']=BiochemicalPathwayStep
   model['EntityReferenceTypeVocabulary']=EntityReferenceTypeVocabulary
   model['Degradation']=Degradation
   model['ProteinReference']=ProteinReference
   model['SequenceModificationVocabulary']=SequenceModificationVocabulary
   model['Catalysis']=Catalysis
   model['RnaRegionReference']=RnaRegionReference
   model['PhysicalEntity']=PhysicalEntity
   model['Rna']=Rna
   model['Evidence']=Evidence
   model['PathwayStep']=PathwayStep
   model['BindingFeature']=BindingFeature
   model['DnaRegion']=DnaRegion
   model['Stoichiometry']=Stoichiometry
   model['Pathway']=Pathway
   model['CellVocabulary']=CellVocabulary
   model['PublicationXref']=PublicationXref
   model['Conversion']=Conversion
   model['RelationshipXref']=RelationshipXref
   model['SequenceInterval']=SequenceInterval
   model['KPrime']=KPrime
   model['Gene']=Gene
   model['ExperimentalForm']=ExperimentalForm
   model['ControlledVocabulary']=ControlledVocabulary
   model['ModificationFeature']=ModificationFeature
   model['GeneticInteraction']=GeneticInteraction
   model['BiochemicalReaction']=BiochemicalReaction
   model['DnaReference']=DnaReference
   model['DnaRegionReference']=DnaRegionReference
   model['RnaRegion']=RnaRegion
   model['CellularLocationVocabulary']=CellularLocationVocabulary
   model['Modulation']=Modulation
   model['Xref']=Xref
   model['ChemicalStructure']=ChemicalStructure
   model['FragmentFeature']=FragmentFeature
   model['DeltaG']=DeltaG
   model['UnificationXref']=UnificationXref
   model['EvidenceCodeVocabulary']=EvidenceCodeVocabulary
   model['PhenotypeVocabulary']=PhenotypeVocabulary
   model['EntityFeature']=EntityFeature
   model['UtilityClass']=UtilityClass
   model['Entity']=Entity
 
   return model 

#list all classes of the model
def classes():
   model=classesDict()
   return list(model.keys()) 

def createInstance(cln):
    model=classesDict()
    if cln in model.keys():
       cl=model[cln]
       return cl()
    return None 

def parentTree():
 parentdict=dict()
 chl=classes_children()
 for k in chl.keys():
    v=chl[k]
    for el in v:  
      if el in parentdict.keys():
        pad=parentdict[el]
      else:
        pad=dict()
      pad[k]=1
      parentdict[el]=pad
        
 for k in parentdict.keys():
    pad=parentdict[k]
    parentdict[k]=list(pad.keys())
 return parentdict




def modelPopulator():
    mp=PackageModelPopulator().mpop
    return mp


class  PackageModelPopulator():

  def __init__(self):
    self.package_name="biopax"
    self.classDict=None
    self.mpop= None
    self.config()

  def config(self):
    self.classDict=self.classDictConf()
    self.mpop= ModelPopulator(self.classDict,self.package_name)

  def classDictConf(self)  :

     b64conf=b''

     obj = pickle.loads(base64.b64decode(b64conf))
     return obj

def domain():
    return "http://www.biopax.org/release/biopax-level3.owl#"

def prefix():
    return "biopax"    
def shortPrefix():
    return "bi"       



# coding: utf-8

"""
    Cachet Status Page API

    A java-friendly swagger documentation file based on the documentation for the Cachet Status Page https://cachethq.io/  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Incident(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'message': 'str',
        'status': 'int',
        'visible': 'int',
        'component_id': 'int',
        'component_status': 'int',
        'notify': 'float',
        'created_at': 'str',
        'template': 'str',
        'vars': 'object'
    }

    attribute_map = {
        'name': 'name',
        'message': 'message',
        'status': 'status',
        'visible': 'visible',
        'component_id': 'component_id',
        'component_status': 'component_status',
        'notify': 'notify',
        'created_at': 'created_at',
        'template': 'template',
        'vars': 'vars'
    }

    def __init__(self, name=None, message=None, status=None, visible=None, component_id=None, component_status=None, notify=None, created_at=None, template=None, vars=None):  # noqa: E501
        """Incident - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._message = None
        self._status = None
        self._visible = None
        self._component_id = None
        self._component_status = None
        self._notify = None
        self._created_at = None
        self._template = None
        self._vars = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if message is not None:
            self.message = message
        if status is not None:
            self.status = status
        if visible is not None:
            self.visible = visible
        if component_id is not None:
            self.component_id = component_id
        if component_status is not None:
            self.component_status = component_status
        if notify is not None:
            self.notify = notify
        if created_at is not None:
            self.created_at = created_at
        if template is not None:
            self.template = template
        if vars is not None:
            self.vars = vars

    @property
    def name(self):
        """Gets the name of this Incident.  # noqa: E501


        :return: The name of this Incident.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Incident.


        :param name: The name of this Incident.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def message(self):
        """Gets the message of this Incident.  # noqa: E501


        :return: The message of this Incident.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this Incident.


        :param message: The message of this Incident.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def status(self):
        """Gets the status of this Incident.  # noqa: E501


        :return: The status of this Incident.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Incident.


        :param status: The status of this Incident.  # noqa: E501
        :type: int
        """

        self._status = status

    @property
    def visible(self):
        """Gets the visible of this Incident.  # noqa: E501


        :return: The visible of this Incident.  # noqa: E501
        :rtype: int
        """
        return self._visible

    @visible.setter
    def visible(self, visible):
        """Sets the visible of this Incident.


        :param visible: The visible of this Incident.  # noqa: E501
        :type: int
        """

        self._visible = visible

    @property
    def component_id(self):
        """Gets the component_id of this Incident.  # noqa: E501


        :return: The component_id of this Incident.  # noqa: E501
        :rtype: int
        """
        return self._component_id

    @component_id.setter
    def component_id(self, component_id):
        """Sets the component_id of this Incident.


        :param component_id: The component_id of this Incident.  # noqa: E501
        :type: int
        """

        self._component_id = component_id

    @property
    def component_status(self):
        """Gets the component_status of this Incident.  # noqa: E501


        :return: The component_status of this Incident.  # noqa: E501
        :rtype: int
        """
        return self._component_status

    @component_status.setter
    def component_status(self, component_status):
        """Sets the component_status of this Incident.


        :param component_status: The component_status of this Incident.  # noqa: E501
        :type: int
        """

        self._component_status = component_status

    @property
    def notify(self):
        """Gets the notify of this Incident.  # noqa: E501


        :return: The notify of this Incident.  # noqa: E501
        :rtype: float
        """
        return self._notify

    @notify.setter
    def notify(self, notify):
        """Sets the notify of this Incident.


        :param notify: The notify of this Incident.  # noqa: E501
        :type: float
        """

        self._notify = notify

    @property
    def created_at(self):
        """Gets the created_at of this Incident.  # noqa: E501


        :return: The created_at of this Incident.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Incident.


        :param created_at: The created_at of this Incident.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def template(self):
        """Gets the template of this Incident.  # noqa: E501


        :return: The template of this Incident.  # noqa: E501
        :rtype: str
        """
        return self._template

    @template.setter
    def template(self, template):
        """Sets the template of this Incident.


        :param template: The template of this Incident.  # noqa: E501
        :type: str
        """

        self._template = template

    @property
    def vars(self):
        """Gets the vars of this Incident.  # noqa: E501


        :return: The vars of this Incident.  # noqa: E501
        :rtype: object
        """
        return self._vars

    @vars.setter
    def vars(self, vars):
        """Sets the vars of this Incident.


        :param vars: The vars of this Incident.  # noqa: E501
        :type: object
        """

        self._vars = vars

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Incident, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Incident):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

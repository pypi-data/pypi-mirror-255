# coding: utf-8

"""
    Cachet Status Page API

    A java-friendly swagger documentation file based on the documentation for the Cachet Status Page https://cachethq.io/  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class IncidentUpdateResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'incident_id': 'int',
        'status': 'int',
        'message': 'str',
        'user_id': 'int',
        'created_at': 'str',
        'updated_at': 'str',
        'human_status': 'str',
        'permalink': 'str'
    }

    attribute_map = {
        'id': 'id',
        'incident_id': 'incident_id',
        'status': 'status',
        'message': 'message',
        'user_id': 'user_id',
        'created_at': 'created_at',
        'updated_at': 'updated_at',
        'human_status': 'human_status',
        'permalink': 'permalink'
    }

    def __init__(self, id=None, incident_id=None, status=None, message=None, user_id=None, created_at=None, updated_at=None, human_status=None, permalink=None):  # noqa: E501
        """IncidentUpdateResponse - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._incident_id = None
        self._status = None
        self._message = None
        self._user_id = None
        self._created_at = None
        self._updated_at = None
        self._human_status = None
        self._permalink = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if incident_id is not None:
            self.incident_id = incident_id
        if status is not None:
            self.status = status
        if message is not None:
            self.message = message
        if user_id is not None:
            self.user_id = user_id
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        if human_status is not None:
            self.human_status = human_status
        if permalink is not None:
            self.permalink = permalink

    @property
    def id(self):
        """Gets the id of this IncidentUpdateResponse.  # noqa: E501


        :return: The id of this IncidentUpdateResponse.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this IncidentUpdateResponse.


        :param id: The id of this IncidentUpdateResponse.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def incident_id(self):
        """Gets the incident_id of this IncidentUpdateResponse.  # noqa: E501


        :return: The incident_id of this IncidentUpdateResponse.  # noqa: E501
        :rtype: int
        """
        return self._incident_id

    @incident_id.setter
    def incident_id(self, incident_id):
        """Sets the incident_id of this IncidentUpdateResponse.


        :param incident_id: The incident_id of this IncidentUpdateResponse.  # noqa: E501
        :type: int
        """

        self._incident_id = incident_id

    @property
    def status(self):
        """Gets the status of this IncidentUpdateResponse.  # noqa: E501


        :return: The status of this IncidentUpdateResponse.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this IncidentUpdateResponse.


        :param status: The status of this IncidentUpdateResponse.  # noqa: E501
        :type: int
        """

        self._status = status

    @property
    def message(self):
        """Gets the message of this IncidentUpdateResponse.  # noqa: E501


        :return: The message of this IncidentUpdateResponse.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this IncidentUpdateResponse.


        :param message: The message of this IncidentUpdateResponse.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def user_id(self):
        """Gets the user_id of this IncidentUpdateResponse.  # noqa: E501


        :return: The user_id of this IncidentUpdateResponse.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this IncidentUpdateResponse.


        :param user_id: The user_id of this IncidentUpdateResponse.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    @property
    def created_at(self):
        """Gets the created_at of this IncidentUpdateResponse.  # noqa: E501


        :return: The created_at of this IncidentUpdateResponse.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this IncidentUpdateResponse.


        :param created_at: The created_at of this IncidentUpdateResponse.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this IncidentUpdateResponse.  # noqa: E501


        :return: The updated_at of this IncidentUpdateResponse.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this IncidentUpdateResponse.


        :param updated_at: The updated_at of this IncidentUpdateResponse.  # noqa: E501
        :type: str
        """

        self._updated_at = updated_at

    @property
    def human_status(self):
        """Gets the human_status of this IncidentUpdateResponse.  # noqa: E501


        :return: The human_status of this IncidentUpdateResponse.  # noqa: E501
        :rtype: str
        """
        return self._human_status

    @human_status.setter
    def human_status(self, human_status):
        """Sets the human_status of this IncidentUpdateResponse.


        :param human_status: The human_status of this IncidentUpdateResponse.  # noqa: E501
        :type: str
        """

        self._human_status = human_status

    @property
    def permalink(self):
        """Gets the permalink of this IncidentUpdateResponse.  # noqa: E501


        :return: The permalink of this IncidentUpdateResponse.  # noqa: E501
        :rtype: str
        """
        return self._permalink

    @permalink.setter
    def permalink(self, permalink):
        """Sets the permalink of this IncidentUpdateResponse.


        :param permalink: The permalink of this IncidentUpdateResponse.  # noqa: E501
        :type: str
        """

        self._permalink = permalink

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IncidentUpdateResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IncidentUpdateResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

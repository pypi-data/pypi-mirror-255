# coding: utf-8

"""
    Cachet Status Page API

    A java-friendly swagger documentation file based on the documentation for the Cachet Status Page https://cachethq.io/  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MetricsResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'suffix': 'str',
        'description': 'str',
        'default_value': 'float',
        'calc_type': 'int',
        'display_chart': 'bool',
        'created_at': 'str',
        'updated_at': 'str',
        'places': 'int',
        'default_view': 'int',
        'threshold': 'int',
        'order': 'int',
        'visible': 'int',
        'default_view_name': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'suffix': 'suffix',
        'description': 'description',
        'default_value': 'default_value',
        'calc_type': 'calc_type',
        'display_chart': 'display_chart',
        'created_at': 'created_at',
        'updated_at': 'updated_at',
        'places': 'places',
        'default_view': 'default_view',
        'threshold': 'threshold',
        'order': 'order',
        'visible': 'visible',
        'default_view_name': 'default_view_name'
    }

    def __init__(self, id=None, name=None, suffix=None, description=None, default_value=None, calc_type=None, display_chart=None, created_at=None, updated_at=None, places=None, default_view=None, threshold=None, order=None, visible=None, default_view_name=None):  # noqa: E501
        """MetricsResponse - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._suffix = None
        self._description = None
        self._default_value = None
        self._calc_type = None
        self._display_chart = None
        self._created_at = None
        self._updated_at = None
        self._places = None
        self._default_view = None
        self._threshold = None
        self._order = None
        self._visible = None
        self._default_view_name = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if suffix is not None:
            self.suffix = suffix
        if description is not None:
            self.description = description
        if default_value is not None:
            self.default_value = default_value
        if calc_type is not None:
            self.calc_type = calc_type
        if display_chart is not None:
            self.display_chart = display_chart
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        if places is not None:
            self.places = places
        if default_view is not None:
            self.default_view = default_view
        if threshold is not None:
            self.threshold = threshold
        if order is not None:
            self.order = order
        if visible is not None:
            self.visible = visible
        if default_view_name is not None:
            self.default_view_name = default_view_name

    @property
    def id(self):
        """Gets the id of this MetricsResponse.  # noqa: E501


        :return: The id of this MetricsResponse.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MetricsResponse.


        :param id: The id of this MetricsResponse.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this MetricsResponse.  # noqa: E501


        :return: The name of this MetricsResponse.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MetricsResponse.


        :param name: The name of this MetricsResponse.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def suffix(self):
        """Gets the suffix of this MetricsResponse.  # noqa: E501


        :return: The suffix of this MetricsResponse.  # noqa: E501
        :rtype: str
        """
        return self._suffix

    @suffix.setter
    def suffix(self, suffix):
        """Sets the suffix of this MetricsResponse.


        :param suffix: The suffix of this MetricsResponse.  # noqa: E501
        :type: str
        """

        self._suffix = suffix

    @property
    def description(self):
        """Gets the description of this MetricsResponse.  # noqa: E501


        :return: The description of this MetricsResponse.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this MetricsResponse.


        :param description: The description of this MetricsResponse.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def default_value(self):
        """Gets the default_value of this MetricsResponse.  # noqa: E501


        :return: The default_value of this MetricsResponse.  # noqa: E501
        :rtype: float
        """
        return self._default_value

    @default_value.setter
    def default_value(self, default_value):
        """Sets the default_value of this MetricsResponse.


        :param default_value: The default_value of this MetricsResponse.  # noqa: E501
        :type: float
        """

        self._default_value = default_value

    @property
    def calc_type(self):
        """Gets the calc_type of this MetricsResponse.  # noqa: E501


        :return: The calc_type of this MetricsResponse.  # noqa: E501
        :rtype: int
        """
        return self._calc_type

    @calc_type.setter
    def calc_type(self, calc_type):
        """Sets the calc_type of this MetricsResponse.


        :param calc_type: The calc_type of this MetricsResponse.  # noqa: E501
        :type: int
        """

        self._calc_type = calc_type

    @property
    def display_chart(self):
        """Gets the display_chart of this MetricsResponse.  # noqa: E501


        :return: The display_chart of this MetricsResponse.  # noqa: E501
        :rtype: bool
        """
        return self._display_chart

    @display_chart.setter
    def display_chart(self, display_chart):
        """Sets the display_chart of this MetricsResponse.


        :param display_chart: The display_chart of this MetricsResponse.  # noqa: E501
        :type: bool
        """

        self._display_chart = display_chart

    @property
    def created_at(self):
        """Gets the created_at of this MetricsResponse.  # noqa: E501


        :return: The created_at of this MetricsResponse.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this MetricsResponse.


        :param created_at: The created_at of this MetricsResponse.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this MetricsResponse.  # noqa: E501


        :return: The updated_at of this MetricsResponse.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this MetricsResponse.


        :param updated_at: The updated_at of this MetricsResponse.  # noqa: E501
        :type: str
        """

        self._updated_at = updated_at

    @property
    def places(self):
        """Gets the places of this MetricsResponse.  # noqa: E501


        :return: The places of this MetricsResponse.  # noqa: E501
        :rtype: int
        """
        return self._places

    @places.setter
    def places(self, places):
        """Sets the places of this MetricsResponse.


        :param places: The places of this MetricsResponse.  # noqa: E501
        :type: int
        """

        self._places = places

    @property
    def default_view(self):
        """Gets the default_view of this MetricsResponse.  # noqa: E501


        :return: The default_view of this MetricsResponse.  # noqa: E501
        :rtype: int
        """
        return self._default_view

    @default_view.setter
    def default_view(self, default_view):
        """Sets the default_view of this MetricsResponse.


        :param default_view: The default_view of this MetricsResponse.  # noqa: E501
        :type: int
        """

        self._default_view = default_view

    @property
    def threshold(self):
        """Gets the threshold of this MetricsResponse.  # noqa: E501


        :return: The threshold of this MetricsResponse.  # noqa: E501
        :rtype: int
        """
        return self._threshold

    @threshold.setter
    def threshold(self, threshold):
        """Sets the threshold of this MetricsResponse.


        :param threshold: The threshold of this MetricsResponse.  # noqa: E501
        :type: int
        """

        self._threshold = threshold

    @property
    def order(self):
        """Gets the order of this MetricsResponse.  # noqa: E501


        :return: The order of this MetricsResponse.  # noqa: E501
        :rtype: int
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this MetricsResponse.


        :param order: The order of this MetricsResponse.  # noqa: E501
        :type: int
        """

        self._order = order

    @property
    def visible(self):
        """Gets the visible of this MetricsResponse.  # noqa: E501


        :return: The visible of this MetricsResponse.  # noqa: E501
        :rtype: int
        """
        return self._visible

    @visible.setter
    def visible(self, visible):
        """Sets the visible of this MetricsResponse.


        :param visible: The visible of this MetricsResponse.  # noqa: E501
        :type: int
        """

        self._visible = visible

    @property
    def default_view_name(self):
        """Gets the default_view_name of this MetricsResponse.  # noqa: E501


        :return: The default_view_name of this MetricsResponse.  # noqa: E501
        :rtype: str
        """
        return self._default_view_name

    @default_view_name.setter
    def default_view_name(self, default_view_name):
        """Sets the default_view_name of this MetricsResponse.


        :param default_view_name: The default_view_name of this MetricsResponse.  # noqa: E501
        :type: str
        """

        self._default_view_name = default_view_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MetricsResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MetricsResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

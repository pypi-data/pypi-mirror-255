# coding: utf-8

"""
    Cachet Status Page API

    A java-friendly swagger documentation file based on the documentation for the Cachet Status Page https://cachethq.io/  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from cachethq_client.api_client import ApiClient


class MetricsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_metric(self, body, **kwargs):  # noqa: E501
        """Create a metric  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_metric(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Metric body: Create metric data (required)
        :return: SingleMetricResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_metric_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_metric_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_metric_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create a metric  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_metric_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Metric body: Create metric data (required)
        :return: SingleMetricResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_metric" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_metric`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/metrics', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SingleMetricResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_metric_point_by_id(self, body, metric, **kwargs):  # noqa: E501
        """Create point for a metric  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_metric_point_by_id(body, metric, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MetricPoint body: Metric data (required)
        :param int metric: Unique metric id (required)
        :return: SingleMetricPointResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_metric_point_by_id_with_http_info(body, metric, **kwargs)  # noqa: E501
        else:
            (data) = self.create_metric_point_by_id_with_http_info(body, metric, **kwargs)  # noqa: E501
            return data

    def create_metric_point_by_id_with_http_info(self, body, metric, **kwargs):  # noqa: E501
        """Create point for a metric  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_metric_point_by_id_with_http_info(body, metric, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MetricPoint body: Metric data (required)
        :param int metric: Unique metric id (required)
        :return: SingleMetricPointResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'metric']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_metric_point_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_metric_point_by_id`")  # noqa: E501
        # verify the required parameter 'metric' is set
        if ('metric' not in params or
                params['metric'] is None):
            raise ValueError("Missing the required parameter `metric` when calling `create_metric_point_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'metric' in params:
            path_params['metric'] = params['metric']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/metrics/{metric}/points', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SingleMetricPointResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_metric_by_id(self, metric, **kwargs):  # noqa: E501
        """Delete a metric  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_metric_by_id(metric, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int metric: Unique metric id (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_metric_by_id_with_http_info(metric, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_metric_by_id_with_http_info(metric, **kwargs)  # noqa: E501
            return data

    def delete_metric_by_id_with_http_info(self, metric, **kwargs):  # noqa: E501
        """Delete a metric  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_metric_by_id_with_http_info(metric, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int metric: Unique metric id (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['metric']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_metric_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'metric' is set
        if ('metric' not in params or
                params['metric'] is None):
            raise ValueError("Missing the required parameter `metric` when calling `delete_metric_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'metric' in params:
            path_params['metric'] = params['metric']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/metrics/{metric}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_metric_point_by_id(self, metric, point, **kwargs):  # noqa: E501
        """Delete a metric point  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_metric_point_by_id(metric, point, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int metric: Unique metric id (required)
        :param int point: Unique metric point id (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_metric_point_by_id_with_http_info(metric, point, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_metric_point_by_id_with_http_info(metric, point, **kwargs)  # noqa: E501
            return data

    def delete_metric_point_by_id_with_http_info(self, metric, point, **kwargs):  # noqa: E501
        """Delete a metric point  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_metric_point_by_id_with_http_info(metric, point, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int metric: Unique metric id (required)
        :param int point: Unique metric point id (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['metric', 'point']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_metric_point_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'metric' is set
        if ('metric' not in params or
                params['metric'] is None):
            raise ValueError("Missing the required parameter `metric` when calling `delete_metric_point_by_id`")  # noqa: E501
        # verify the required parameter 'point' is set
        if ('point' not in params or
                params['point'] is None):
            raise ValueError("Missing the required parameter `point` when calling `delete_metric_point_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'metric' in params:
            path_params['metric'] = params['metric']  # noqa: E501
        if 'point' in params:
            path_params['point'] = params['point']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/metrics/{metric}/points/{point}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_metric_by_id(self, metric, **kwargs):  # noqa: E501
        """Get a metric  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_metric_by_id(metric, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int metric: Unique metric id (required)
        :return: SingleMetricResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_metric_by_id_with_http_info(metric, **kwargs)  # noqa: E501
        else:
            (data) = self.get_metric_by_id_with_http_info(metric, **kwargs)  # noqa: E501
            return data

    def get_metric_by_id_with_http_info(self, metric, **kwargs):  # noqa: E501
        """Get a metric  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_metric_by_id_with_http_info(metric, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int metric: Unique metric id (required)
        :return: SingleMetricResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['metric']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_metric_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'metric' is set
        if ('metric' not in params or
                params['metric'] is None):
            raise ValueError("Missing the required parameter `metric` when calling `get_metric_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'metric' in params:
            path_params['metric'] = params['metric']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/metrics/{metric}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SingleMetricResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_metric_points_by_id(self, metric, **kwargs):  # noqa: E501
        """Get points for a metric  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_metric_points_by_id(metric, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int metric: Unique metric id (required)
        :param str sort: Object property to filter on.
        :param str order: Ordering parameter with options of asc or desc.
        :param int per_page: Results per page.
        :param int page:
        :return: ListMetricPointsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_metric_points_by_id_with_http_info(metric, **kwargs)  # noqa: E501
        else:
            (data) = self.get_metric_points_by_id_with_http_info(metric, **kwargs)  # noqa: E501
            return data

    def get_metric_points_by_id_with_http_info(self, metric, **kwargs):  # noqa: E501
        """Get points for a metric  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_metric_points_by_id_with_http_info(metric, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int metric: Unique metric id (required)
        :param str sort: Object property to filter on.
        :param str order: Ordering parameter with options of asc or desc.
        :param int per_page: Results per page.
        :param int page:
        :return: ListMetricPointsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['metric', 'sort', 'order', 'per_page', 'page']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_metric_points_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'metric' is set
        if ('metric' not in params or
                params['metric'] is None):
            raise ValueError("Missing the required parameter `metric` when calling `get_metric_points_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'metric' in params:
            path_params['metric'] = params['metric']  # noqa: E501

        query_params = []
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'order' in params:
            query_params.append(('order', params['order']))  # noqa: E501
        if 'per_page' in params:
            query_params.append(('per_page', params['per_page']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/metrics/{metric}/points', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ListMetricPointsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_metrics(self, **kwargs):  # noqa: E501
        """Get all metrics  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_metrics(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sort: Object property to filter on.
        :param str order: Ordering parameter with options of asc or desc.
        :param int per_page: Results per page.
        :param int page:
        :return: ListMetricsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_metrics_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_metrics_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_metrics_with_http_info(self, **kwargs):  # noqa: E501
        """Get all metrics  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_metrics_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sort: Object property to filter on.
        :param str order: Ordering parameter with options of asc or desc.
        :param int per_page: Results per page.
        :param int page:
        :return: ListMetricsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sort', 'order', 'per_page', 'page']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_metrics" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'order' in params:
            query_params.append(('order', params['order']))  # noqa: E501
        if 'per_page' in params:
            query_params.append(('per_page', params['per_page']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/metrics', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ListMetricsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

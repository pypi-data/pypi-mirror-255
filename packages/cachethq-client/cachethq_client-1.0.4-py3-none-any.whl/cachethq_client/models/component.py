# coding: utf-8

"""
    Cachet Status Page API

    A java-friendly swagger documentation file based on the documentation for the Cachet Status Page https://cachethq.io/  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Component(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'link': 'str',
        'status': 'int',
        'order': 'int',
        'group_id': 'int',
        'enabled': 'bool'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'link': 'link',
        'status': 'status',
        'order': 'order',
        'group_id': 'group_id',
        'enabled': 'enabled'
    }

    def __init__(self, name=None, description=None, link=None, status=None, order=None, group_id=None, enabled=None):  # noqa: E501
        """Component - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._description = None
        self._link = None
        self._status = None
        self._order = None
        self._group_id = None
        self._enabled = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if link is not None:
            self.link = link
        if status is not None:
            self.status = status
        if order is not None:
            self.order = order
        if group_id is not None:
            self.group_id = group_id
        if enabled is not None:
            self.enabled = enabled

    @property
    def name(self):
        """Gets the name of this Component.  # noqa: E501


        :return: The name of this Component.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Component.


        :param name: The name of this Component.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this Component.  # noqa: E501


        :return: The description of this Component.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Component.


        :param description: The description of this Component.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def link(self):
        """Gets the link of this Component.  # noqa: E501


        :return: The link of this Component.  # noqa: E501
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this Component.


        :param link: The link of this Component.  # noqa: E501
        :type: str
        """

        self._link = link

    @property
    def status(self):
        """Gets the status of this Component.  # noqa: E501


        :return: The status of this Component.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Component.


        :param status: The status of this Component.  # noqa: E501
        :type: int
        """

        self._status = status

    @property
    def order(self):
        """Gets the order of this Component.  # noqa: E501


        :return: The order of this Component.  # noqa: E501
        :rtype: int
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this Component.


        :param order: The order of this Component.  # noqa: E501
        :type: int
        """

        self._order = order

    @property
    def group_id(self):
        """Gets the group_id of this Component.  # noqa: E501


        :return: The group_id of this Component.  # noqa: E501
        :rtype: int
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this Component.


        :param group_id: The group_id of this Component.  # noqa: E501
        :type: int
        """

        self._group_id = group_id

    @property
    def enabled(self):
        """Gets the enabled of this Component.  # noqa: E501


        :return: The enabled of this Component.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this Component.


        :param enabled: The enabled of this Component.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Component, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Component):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

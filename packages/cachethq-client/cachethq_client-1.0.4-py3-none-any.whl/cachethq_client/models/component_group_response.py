# coding: utf-8

"""
    Cachet Status Page API

    A java-friendly swagger documentation file based on the documentation for the Cachet Status Page https://cachethq.io/  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ComponentGroupResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'created_at': 'str',
        'updated_at': 'str',
        'order': 'int',
        'collapsed': 'float',
        'visible': 'float',
        'enabled_components': 'list[ComponentResponse]',
        'enabled_components_lowest': 'list[ComponentResponse]'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'created_at': 'created_at',
        'updated_at': 'updated_at',
        'order': 'order',
        'collapsed': 'collapsed',
        'visible': 'visible',
        'enabled_components': 'enabled_components',
        'enabled_components_lowest': 'enabled_components_lowest'
    }

    def __init__(self, id=None, name=None, created_at=None, updated_at=None, order=None, collapsed=None, visible=None, enabled_components=None, enabled_components_lowest=None):  # noqa: E501
        """ComponentGroupResponse - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._created_at = None
        self._updated_at = None
        self._order = None
        self._collapsed = None
        self._visible = None
        self._enabled_components = None
        self._enabled_components_lowest = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        if order is not None:
            self.order = order
        if collapsed is not None:
            self.collapsed = collapsed
        if visible is not None:
            self.visible = visible
        if enabled_components is not None:
            self.enabled_components = enabled_components
        if enabled_components_lowest is not None:
            self.enabled_components_lowest = enabled_components_lowest

    @property
    def id(self):
        """Gets the id of this ComponentGroupResponse.  # noqa: E501


        :return: The id of this ComponentGroupResponse.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ComponentGroupResponse.


        :param id: The id of this ComponentGroupResponse.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ComponentGroupResponse.  # noqa: E501


        :return: The name of this ComponentGroupResponse.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ComponentGroupResponse.


        :param name: The name of this ComponentGroupResponse.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def created_at(self):
        """Gets the created_at of this ComponentGroupResponse.  # noqa: E501


        :return: The created_at of this ComponentGroupResponse.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ComponentGroupResponse.


        :param created_at: The created_at of this ComponentGroupResponse.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this ComponentGroupResponse.  # noqa: E501


        :return: The updated_at of this ComponentGroupResponse.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this ComponentGroupResponse.


        :param updated_at: The updated_at of this ComponentGroupResponse.  # noqa: E501
        :type: str
        """

        self._updated_at = updated_at

    @property
    def order(self):
        """Gets the order of this ComponentGroupResponse.  # noqa: E501


        :return: The order of this ComponentGroupResponse.  # noqa: E501
        :rtype: int
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this ComponentGroupResponse.


        :param order: The order of this ComponentGroupResponse.  # noqa: E501
        :type: int
        """

        self._order = order

    @property
    def collapsed(self):
        """Gets the collapsed of this ComponentGroupResponse.  # noqa: E501


        :return: The collapsed of this ComponentGroupResponse.  # noqa: E501
        :rtype: float
        """
        return self._collapsed

    @collapsed.setter
    def collapsed(self, collapsed):
        """Sets the collapsed of this ComponentGroupResponse.


        :param collapsed: The collapsed of this ComponentGroupResponse.  # noqa: E501
        :type: float
        """

        self._collapsed = collapsed

    @property
    def visible(self):
        """Gets the visible of this ComponentGroupResponse.  # noqa: E501


        :return: The visible of this ComponentGroupResponse.  # noqa: E501
        :rtype: float
        """
        return self._visible

    @visible.setter
    def visible(self, visible):
        """Sets the visible of this ComponentGroupResponse.


        :param visible: The visible of this ComponentGroupResponse.  # noqa: E501
        :type: float
        """

        self._visible = visible

    @property
    def enabled_components(self):
        """Gets the enabled_components of this ComponentGroupResponse.  # noqa: E501


        :return: The enabled_components of this ComponentGroupResponse.  # noqa: E501
        :rtype: list[ComponentResponse]
        """
        return self._enabled_components

    @enabled_components.setter
    def enabled_components(self, enabled_components):
        """Sets the enabled_components of this ComponentGroupResponse.


        :param enabled_components: The enabled_components of this ComponentGroupResponse.  # noqa: E501
        :type: list[ComponentResponse]
        """

        self._enabled_components = enabled_components

    @property
    def enabled_components_lowest(self):
        """Gets the enabled_components_lowest of this ComponentGroupResponse.  # noqa: E501


        :return: The enabled_components_lowest of this ComponentGroupResponse.  # noqa: E501
        :rtype: list[ComponentResponse]
        """
        return self._enabled_components_lowest

    @enabled_components_lowest.setter
    def enabled_components_lowest(self, enabled_components_lowest):
        """Sets the enabled_components_lowest of this ComponentGroupResponse.


        :param enabled_components_lowest: The enabled_components_lowest of this ComponentGroupResponse.  # noqa: E501
        :type: list[ComponentResponse]
        """

        self._enabled_components_lowest = enabled_components_lowest

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ComponentGroupResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComponentGroupResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

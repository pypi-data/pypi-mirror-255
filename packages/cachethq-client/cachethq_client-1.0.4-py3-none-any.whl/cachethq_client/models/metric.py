# coding: utf-8

"""
    Cachet Status Page API

    A java-friendly swagger documentation file based on the documentation for the Cachet Status Page https://cachethq.io/  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Metric(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'suffix': 'str',
        'description': 'str',
        'default_value': 'int',
        'display_chart': 'int'
    }

    attribute_map = {
        'name': 'name',
        'suffix': 'suffix',
        'description': 'description',
        'default_value': 'default_value',
        'display_chart': 'display_chart'
    }

    def __init__(self, name=None, suffix=None, description=None, default_value=None, display_chart=None):  # noqa: E501
        """Metric - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._suffix = None
        self._description = None
        self._default_value = None
        self._display_chart = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if suffix is not None:
            self.suffix = suffix
        if description is not None:
            self.description = description
        if default_value is not None:
            self.default_value = default_value
        if display_chart is not None:
            self.display_chart = display_chart

    @property
    def name(self):
        """Gets the name of this Metric.  # noqa: E501


        :return: The name of this Metric.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Metric.


        :param name: The name of this Metric.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def suffix(self):
        """Gets the suffix of this Metric.  # noqa: E501


        :return: The suffix of this Metric.  # noqa: E501
        :rtype: str
        """
        return self._suffix

    @suffix.setter
    def suffix(self, suffix):
        """Sets the suffix of this Metric.


        :param suffix: The suffix of this Metric.  # noqa: E501
        :type: str
        """

        self._suffix = suffix

    @property
    def description(self):
        """Gets the description of this Metric.  # noqa: E501


        :return: The description of this Metric.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Metric.


        :param description: The description of this Metric.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def default_value(self):
        """Gets the default_value of this Metric.  # noqa: E501


        :return: The default_value of this Metric.  # noqa: E501
        :rtype: int
        """
        return self._default_value

    @default_value.setter
    def default_value(self, default_value):
        """Sets the default_value of this Metric.


        :param default_value: The default_value of this Metric.  # noqa: E501
        :type: int
        """

        self._default_value = default_value

    @property
    def display_chart(self):
        """Gets the display_chart of this Metric.  # noqa: E501


        :return: The display_chart of this Metric.  # noqa: E501
        :rtype: int
        """
        return self._display_chart

    @display_chart.setter
    def display_chart(self, display_chart):
        """Sets the display_chart of this Metric.


        :param display_chart: The display_chart of this Metric.  # noqa: E501
        :type: int
        """

        self._display_chart = display_chart

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Metric, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Metric):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

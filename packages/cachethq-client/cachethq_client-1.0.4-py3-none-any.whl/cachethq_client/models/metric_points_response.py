# coding: utf-8

"""
    Cachet Status Page API

    A java-friendly swagger documentation file based on the documentation for the Cachet Status Page https://cachethq.io/  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MetricPointsResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'metric_id': 'int',
        'value': 'float',
        'counter': 'int',
        'calculated_value': 'float',
        'created_at': 'str',
        'updated_at': 'str'
    }

    attribute_map = {
        'id': 'id',
        'metric_id': 'metric_id',
        'value': 'value',
        'counter': 'counter',
        'calculated_value': 'calculated_value',
        'created_at': 'created_at',
        'updated_at': 'updated_at'
    }

    def __init__(self, id=None, metric_id=None, value=None, counter=None, calculated_value=None, created_at=None, updated_at=None):  # noqa: E501
        """MetricPointsResponse - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._metric_id = None
        self._value = None
        self._counter = None
        self._calculated_value = None
        self._created_at = None
        self._updated_at = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if metric_id is not None:
            self.metric_id = metric_id
        if value is not None:
            self.value = value
        if counter is not None:
            self.counter = counter
        if calculated_value is not None:
            self.calculated_value = calculated_value
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at

    @property
    def id(self):
        """Gets the id of this MetricPointsResponse.  # noqa: E501


        :return: The id of this MetricPointsResponse.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MetricPointsResponse.


        :param id: The id of this MetricPointsResponse.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def metric_id(self):
        """Gets the metric_id of this MetricPointsResponse.  # noqa: E501


        :return: The metric_id of this MetricPointsResponse.  # noqa: E501
        :rtype: int
        """
        return self._metric_id

    @metric_id.setter
    def metric_id(self, metric_id):
        """Sets the metric_id of this MetricPointsResponse.


        :param metric_id: The metric_id of this MetricPointsResponse.  # noqa: E501
        :type: int
        """

        self._metric_id = metric_id

    @property
    def value(self):
        """Gets the value of this MetricPointsResponse.  # noqa: E501


        :return: The value of this MetricPointsResponse.  # noqa: E501
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this MetricPointsResponse.


        :param value: The value of this MetricPointsResponse.  # noqa: E501
        :type: float
        """

        self._value = value

    @property
    def counter(self):
        """Gets the counter of this MetricPointsResponse.  # noqa: E501


        :return: The counter of this MetricPointsResponse.  # noqa: E501
        :rtype: int
        """
        return self._counter

    @counter.setter
    def counter(self, counter):
        """Sets the counter of this MetricPointsResponse.


        :param counter: The counter of this MetricPointsResponse.  # noqa: E501
        :type: int
        """

        self._counter = counter

    @property
    def calculated_value(self):
        """Gets the calculated_value of this MetricPointsResponse.  # noqa: E501


        :return: The calculated_value of this MetricPointsResponse.  # noqa: E501
        :rtype: float
        """
        return self._calculated_value

    @calculated_value.setter
    def calculated_value(self, calculated_value):
        """Sets the calculated_value of this MetricPointsResponse.


        :param calculated_value: The calculated_value of this MetricPointsResponse.  # noqa: E501
        :type: float
        """

        self._calculated_value = calculated_value

    @property
    def created_at(self):
        """Gets the created_at of this MetricPointsResponse.  # noqa: E501


        :return: The created_at of this MetricPointsResponse.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this MetricPointsResponse.


        :param created_at: The created_at of this MetricPointsResponse.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this MetricPointsResponse.  # noqa: E501


        :return: The updated_at of this MetricPointsResponse.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this MetricPointsResponse.


        :param updated_at: The updated_at of this MetricPointsResponse.  # noqa: E501
        :type: str
        """

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MetricPointsResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MetricPointsResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
